
AmbienteMonitor767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .IntFlash     00000000  080001f8  080001f8  0005aec8  2**0
                  CONTENTS
  2 .text         00019a28  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000031ec  08019c28  08019c28  00029c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 IntFlashSection 0001d4c0  0801ce14  0801ce14  0002ce14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0803a2d4  0803a2d4  0005aec8  2**0
                  CONTENTS
  6 .ARM          00000008  0803a2d4  0803a2d4  0004a2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0803a2dc  0803a2dc  0005aec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000014  0803a2dc  0803a2dc  0004a2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0803a2f0  0803a2f0  0004a2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000000e0  20000000  0803a2f8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000059b0  200000e0  0803a3d8  000600e0  2**2
                  ALLOC
 12 ._user_heap_stack 00000800  20005a90  0803a3d8  00065a90  2**0
                  ALLOC
 13 FontFlashSection 00000acc  0803a3d8  0803a3d8  0005a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 00000024  0803aea4  0803aea4  0005aea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00000000  0803aec8  0803aec8  0005aec8  2**0
                  CONTENTS
 16 .ARM.attributes 0000002e  00000000  00000000  0005aec8  2**0
                  CONTENTS, READONLY
 17 .debug_info   00044a53  00000000  00000000  0005aef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 0000b54c  00000000  00000000  0009f949  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00002990  00000000  00000000  000aae98  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00002598  00000000  00000000  000ad828  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  000363e9  00000000  00000000  000afdc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0002d0b9  00000000  00000000  000e61a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0012cf19  00000000  00000000  00113262  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      000000fa  00000000  00000000  0024017b  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000b51c  00000000  00000000  00240278  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000e0 	.word	0x200000e0
 800021c:	00000000 	.word	0x00000000
 8000220:	08019c10 	.word	0x08019c10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000e4 	.word	0x200000e4
 800023c:	08019c10 	.word	0x08019c10

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <HAL_Init+0x34>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <HAL_Init+0x34>)
 80005ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ee:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_Init+0x34>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <HAL_Init+0x34>)
 80005f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005fc:	2003      	movs	r0, #3
 80005fe:	f000 f94d 	bl	800089c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000602:	2000      	movs	r0, #0
 8000604:	f000 f808 	bl	8000618 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000608:	f009 fa92 	bl	8009b30 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023c00 	.word	0x40023c00

08000618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_InitTick+0x54>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_InitTick+0x58>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000632:	fbb2 f3f3 	udiv	r3, r2, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f965 	bl	8000906 <HAL_SYSTICK_Config>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	e00e      	b.n	8000664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d80a      	bhi.n	8000662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064c:	2200      	movs	r2, #0
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f000 f92d 	bl	80008b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <HAL_InitTick+0x5c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	e000      	b.n	8000664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000010 	.word	0x20000010
 8000670:	20000008 	.word	0x20000008
 8000674:	20000004 	.word	0x20000004

08000678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x20>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x24>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_IncTick+0x24>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000008 	.word	0x20000008
 800069c:	2000139c 	.word	0x2000139c

080006a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <HAL_GetTick+0x14>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	2000139c 	.word	0x2000139c

080006b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c0:	f7ff ffee 	bl	80006a0 <HAL_GetTick>
 80006c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d0:	d005      	beq.n	80006de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_Delay+0x40>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006de:	bf00      	nop
 80006e0:	f7ff ffde 	bl	80006a0 <HAL_GetTick>
 80006e4:	4602      	mov	r2, r0
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d8f7      	bhi.n	80006e0 <HAL_Delay+0x28>
  {
  }
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000008 	.word	0x20000008

080006fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <__NVIC_SetPriorityGrouping+0x40>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000718:	4013      	ands	r3, r2
 800071a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 8000726:	4313      	orrs	r3, r2
 8000728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072a:	4a04      	ldr	r2, [pc, #16]	; (800073c <__NVIC_SetPriorityGrouping+0x40>)
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	60d3      	str	r3, [r2, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00
 8000740:	05fa0000 	.word	0x05fa0000

08000744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <__NVIC_GetPriorityGrouping+0x18>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	f003 0307 	and.w	r3, r3, #7
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	2b00      	cmp	r3, #0
 8000770:	db0b      	blt.n	800078a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 021f 	and.w	r2, r3, #31
 8000778:	4907      	ldr	r1, [pc, #28]	; (8000798 <__NVIC_EnableIRQ+0x38>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	095b      	lsrs	r3, r3, #5
 8000780:	2001      	movs	r0, #1
 8000782:	fa00 f202 	lsl.w	r2, r0, r2
 8000786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000e100 	.word	0xe000e100

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	; (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f1c3 0307 	rsb	r3, r3, #7
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf28      	it	cs
 800080e:	2304      	movcs	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	2b06      	cmp	r3, #6
 8000818:	d902      	bls.n	8000820 <NVIC_EncodePriority+0x30>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3b03      	subs	r3, #3
 800081e:	e000      	b.n	8000822 <NVIC_EncodePriority+0x32>
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43da      	mvns	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	401a      	ands	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43d9      	mvns	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4313      	orrs	r3, r2
         );
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	; 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000868:	d301      	bcc.n	800086e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086a:	2301      	movs	r3, #1
 800086c:	e00f      	b.n	800088e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <SysTick_Config+0x40>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000876:	210f      	movs	r1, #15
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f7ff ff8e 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <SysTick_Config+0x40>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <SysTick_Config+0x40>)
 8000888:	2207      	movs	r2, #7
 800088a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	e000e010 	.word	0xe000e010

0800089c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff29 	bl	80006fc <__NVIC_SetPriorityGrouping>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c4:	f7ff ff3e 	bl	8000744 <__NVIC_GetPriorityGrouping>
 80008c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f7ff ff8e 	bl	80007f0 <NVIC_EncodePriority>
 80008d4:	4602      	mov	r2, r0
 80008d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008da:	4611      	mov	r1, r2
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff5d 	bl	800079c <__NVIC_SetPriority>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff31 	bl	8000760 <__NVIC_EnableIRQ>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffa2 	bl	8000858 <SysTick_Config>
 8000914:	4603      	mov	r3, r0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000924:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_MPU_Disable+0x24>)
 800092a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092c:	4a05      	ldr	r2, [pc, #20]	; (8000944 <HAL_MPU_Disable+0x24>)
 800092e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000932:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <HAL_MPU_Disable+0x28>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00
 8000948:	e000ed90 	.word	0xe000ed90

0800094c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_MPU_Enable+0x34>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MPU_Enable+0x38>)
 8000960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MPU_Enable+0x38>)
 8000964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000968:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800096a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800096e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed90 	.word	0xe000ed90
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	785a      	ldrb	r2, [r3, #1]
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <HAL_MPU_ConfigRegion+0x84>)
 8000996:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d029      	beq.n	80009f4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80009a0:	4a1a      	ldr	r2, [pc, #104]	; (8000a0c <HAL_MPU_ConfigRegion+0x84>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7b1b      	ldrb	r3, [r3, #12]
 80009ac:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	7adb      	ldrb	r3, [r3, #11]
 80009b2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80009b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7a9b      	ldrb	r3, [r3, #10]
 80009ba:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80009bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	7b5b      	ldrb	r3, [r3, #13]
 80009c2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80009c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	7b9b      	ldrb	r3, [r3, #14]
 80009ca:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80009cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7bdb      	ldrb	r3, [r3, #15]
 80009d2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80009d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	7a5b      	ldrb	r3, [r3, #9]
 80009da:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80009dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	7a1b      	ldrb	r3, [r3, #8]
 80009e2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80009e4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	7812      	ldrb	r2, [r2, #0]
 80009ea:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80009ee:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80009f0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80009f2:	e005      	b.n	8000a00 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_MPU_ConfigRegion+0x84>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <HAL_MPU_ConfigRegion+0x84>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed90 	.word	0xe000ed90

08000a10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e054      	b.n	8000acc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7f5b      	ldrb	r3, [r3, #29]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d105      	bne.n	8000a38 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f009 f8a0 	bl	8009b78 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d10c      	bne.n	8000a60 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <HAL_CRC_Init+0xc4>)
 8000a4c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f022 0218 	bic.w	r2, r2, #24
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	e00c      	b.n	8000a7a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6899      	ldr	r1, [r3, #8]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f834 	bl	8000ad8 <HAL_CRCEx_Polynomial_Set>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e028      	b.n	8000acc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	795b      	ldrb	r3, [r3, #5]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d105      	bne.n	8000a8e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	e004      	b.n	8000a98 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	6912      	ldr	r2, [r2, #16]
 8000a96:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	695a      	ldr	r2, [r3, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	699a      	ldr	r2, [r3, #24]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	04c11db7 	.word	0x04c11db7

08000ad8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000ae8:	231f      	movs	r3, #31
 8000aea:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000aec:	bf00      	nop
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	1e5a      	subs	r2, r3, #1
 8000af2:	613a      	str	r2, [r7, #16]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d009      	beq.n	8000b0c <HAL_CRCEx_Polynomial_Set+0x34>
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	f003 031f 	and.w	r3, r3, #31
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	fa22 f303 	lsr.w	r3, r2, r3
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0f0      	beq.n	8000aee <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b18      	cmp	r3, #24
 8000b10:	d846      	bhi.n	8000ba0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000b12:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b18:	08000ba7 	.word	0x08000ba7
 8000b1c:	08000ba1 	.word	0x08000ba1
 8000b20:	08000ba1 	.word	0x08000ba1
 8000b24:	08000ba1 	.word	0x08000ba1
 8000b28:	08000ba1 	.word	0x08000ba1
 8000b2c:	08000ba1 	.word	0x08000ba1
 8000b30:	08000ba1 	.word	0x08000ba1
 8000b34:	08000ba1 	.word	0x08000ba1
 8000b38:	08000b95 	.word	0x08000b95
 8000b3c:	08000ba1 	.word	0x08000ba1
 8000b40:	08000ba1 	.word	0x08000ba1
 8000b44:	08000ba1 	.word	0x08000ba1
 8000b48:	08000ba1 	.word	0x08000ba1
 8000b4c:	08000ba1 	.word	0x08000ba1
 8000b50:	08000ba1 	.word	0x08000ba1
 8000b54:	08000ba1 	.word	0x08000ba1
 8000b58:	08000b89 	.word	0x08000b89
 8000b5c:	08000ba1 	.word	0x08000ba1
 8000b60:	08000ba1 	.word	0x08000ba1
 8000b64:	08000ba1 	.word	0x08000ba1
 8000b68:	08000ba1 	.word	0x08000ba1
 8000b6c:	08000ba1 	.word	0x08000ba1
 8000b70:	08000ba1 	.word	0x08000ba1
 8000b74:	08000ba1 	.word	0x08000ba1
 8000b78:	08000b7d 	.word	0x08000b7d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d913      	bls.n	8000baa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000b86:	e010      	b.n	8000baa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	2b07      	cmp	r3, #7
 8000b8c:	d90f      	bls.n	8000bae <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000b92:	e00c      	b.n	8000bae <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	2b0f      	cmp	r3, #15
 8000b98:	d90b      	bls.n	8000bb2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000b9e:	e008      	b.n	8000bb2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8000ba4:	e006      	b.n	8000bb4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000ba6:	bf00      	nop
 8000ba8:	e004      	b.n	8000bb4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000baa:	bf00      	nop
 8000bac:	e002      	b.n	8000bb4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000bae:	bf00      	nop
 8000bb0:	e000      	b.n	8000bb4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000bb2:	bf00      	nop
  }
  if (status == HAL_OK)
 8000bb4:	7dfb      	ldrb	r3, [r7, #23]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10d      	bne.n	8000bd6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f023 0118 	bic.w	r1, r3, #24
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	371c      	adds	r7, #28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d004      	beq.n	8000c02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2280      	movs	r2, #128	; 0x80
 8000bfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00c      	b.n	8000c1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2205      	movs	r2, #5
 8000c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0201 	bic.w	r2, r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d101      	bne.n	8000c3a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e049      	b.n	8000cce <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d106      	bne.n	8000c54 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f008 ffb2 	bl	8009bb8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2202      	movs	r2, #2
 8000c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c78:	f023 0107 	bic.w	r1, r3, #7
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_DMA2D_Init+0xb0>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68d1      	ldr	r1, [r2, #12]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	430b      	orrs	r3, r1
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	051a      	lsls	r2, r3, #20
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	055b      	lsls	r3, r3, #21
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	ffffc000 	.word	0xffffc000

08000cdc <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e05f      	b.n	8000dae <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8000cee:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <HAL_DMA2D_DeInit+0xdc>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d02e      	beq.n	8000d58 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d107      	bne.n	8000d18 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 f8c1 	bl	8000e90 <HAL_DMA2D_Abort>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d021      	beq.n	8000d58 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e04a      	b.n	8000dae <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1e:	f003 0320 	and.w	r3, r3, #32
 8000d22:	2b20      	cmp	r3, #32
 8000d24:	d108      	bne.n	8000d38 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f8f7 	bl	8000f1c <HAL_DMA2D_CLUTLoading_Abort>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d011      	beq.n	8000d58 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e03a      	b.n	8000dae <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f003 0320 	and.w	r3, r3, #32
 8000d42:	2b20      	cmp	r3, #32
 8000d44:	d108      	bne.n	8000d58 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8000d46:	2101      	movs	r1, #1
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f8e7 	bl	8000f1c <HAL_DMA2D_CLUTLoading_Abort>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e02a      	b.n	8000dae <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	223f      	movs	r2, #63	; 0x3f
 8000d66:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2200      	movs	r2, #0
 8000d86:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f008 ff31 	bl	8009bf8 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af02      	add	r7, sp, #8
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d101      	bne.n	8000dd8 <HAL_DMA2D_Start_IT+0x1c>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e020      	b.n	8000e1a <HAL_DMA2D_Start_IT+0x5e>
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2202      	movs	r2, #2
 8000de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f000 fa90 	bl	8001318 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8000e06:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0201 	orr.w	r2, r2, #1
 8000e16:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af02      	add	r7, sp, #8
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d101      	bne.n	8000e3e <HAL_DMA2D_BlendingStart_IT+0x1c>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e024      	b.n	8000e88 <HAL_DMA2D_BlendingStart_IT+0x66>
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2202      	movs	r2, #2
 8000e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f000 fa59 	bl	8001318 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8000e74:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 0201 	orr.w	r2, r2, #1
 8000e84:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f023 0205 	bic.w	r2, r3, #5
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0204 	orr.w	r2, r2, #4
 8000eaa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eac:	f7ff fbf8 	bl	80006a0 <HAL_GetTick>
 8000eb0:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8000eb2:	e017      	b.n	8000ee4 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8000eb4:	f7ff fbf4 	bl	80006a0 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ec2:	d90f      	bls.n	8000ee4 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec8:	f043 0220 	orr.w	r2, r3, #32
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e017      	b.n	8000f14 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1e0      	bne.n	8000eb4 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8000f00:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3324      	adds	r3, #36	; 0x24
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f042 0204 	orr.w	r2, r2, #4
 8000f3c:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d103      	bne.n	8000f4c <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	331c      	adds	r3, #28
 8000f4a:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8000f4c:	f7ff fba8 	bl	80006a0 <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8000f52:	e017      	b.n	8000f84 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8000f54:	f7ff fba4 	bl	80006a0 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f62:	d90f      	bls.n	8000f84 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f68:	f043 0220 	orr.w	r2, r3, #32
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2203      	movs	r2, #3
 8000f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e016      	b.n	8000fb2 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0320 	and.w	r3, r3, #32
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1e1      	bne.n	8000f54 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8000f9e:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d026      	beq.n	800102a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d021      	beq.n	800102a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ff4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2201      	movs	r2, #1
 8001008:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2204      	movs	r2, #4
 800100e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f003 0320 	and.w	r3, r3, #32
 8001030:	2b00      	cmp	r3, #0
 8001032:	d026      	beq.n	8001082 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d021      	beq.n	8001082 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800104c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2220      	movs	r2, #32
 8001054:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105a:	f043 0202 	orr.w	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2204      	movs	r2, #4
 8001066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	2b00      	cmp	r3, #0
 800108a:	d026      	beq.n	80010da <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001092:	2b00      	cmp	r3, #0
 8001094:	d021      	beq.n	80010da <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010a4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2208      	movs	r2, #8
 80010ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b2:	f043 0204 	orr.w	r2, r3, #4
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2204      	movs	r2, #4
 80010be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00e      	beq.n	800110c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010fc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2204      	movs	r2, #4
 8001104:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f853 	bl	80011b2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d024      	beq.n	8001160 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01f      	beq.n	8001160 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800112e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2202      	movs	r2, #2
 8001136:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferCpltCallback != NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	2b00      	cmp	r3, #0
 8001168:	d01f      	beq.n	80011aa <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d01a      	beq.n	80011aa <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001182:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2210      	movs	r2, #16
 800118a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f80e 	bl	80011c6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_DMA2D_ConfigLayer+0x20>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e084      	b.n	8001306 <HAL_DMA2D_ConfigLayer+0x12a>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2202      	movs	r2, #2
 8001208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	3320      	adds	r3, #32
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	041b      	lsls	r3, r3, #16
 8001228:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8001230:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8001238:	4313      	orrs	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800123c:	4b35      	ldr	r3, [pc, #212]	; (8001314 <HAL_DMA2D_ConfigLayer+0x138>)
 800123e:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b0a      	cmp	r3, #10
 8001246:	d003      	beq.n	8001250 <HAL_DMA2D_ConfigLayer+0x74>
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b09      	cmp	r3, #9
 800124e:	d107      	bne.n	8001260 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	4313      	orrs	r3, r2
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e005      	b.n	800126c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	061b      	lsls	r3, r3, #24
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4313      	orrs	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d120      	bne.n	80012b4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	ea02 0103 	and.w	r1, r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	430a      	orrs	r2, r1
 8001288:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b0a      	cmp	r3, #10
 800129a:	d003      	beq.n	80012a4 <HAL_DMA2D_ConfigLayer+0xc8>
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	d127      	bne.n	80012f4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
 80012b2:	e01f      	b.n	80012f4 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	69da      	ldr	r2, [r3, #28]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	ea02 0103 	and.w	r1, r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b0a      	cmp	r3, #10
 80012dc:	d003      	beq.n	80012e6 <HAL_DMA2D_ConfigLayer+0x10a>
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b09      	cmp	r3, #9
 80012e4:	d106      	bne.n	80012f4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80012f2:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	ff33000f 	.word	0xff33000f

08001318 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001318:	b480      	push	{r7}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	041a      	lsls	r2, r3, #16
 8001334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001336:	431a      	orrs	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001350:	d174      	bne.n	800143c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001358:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001360:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001368:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d108      	bne.n	800138a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	431a      	orrs	r2, r3
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	4313      	orrs	r3, r2
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4313      	orrs	r3, r2
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
 8001388:	e053      	b.n	8001432 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d106      	bne.n	80013a0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	4313      	orrs	r3, r2
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	4313      	orrs	r3, r2
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	e048      	b.n	8001432 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d111      	bne.n	80013cc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	0cdb      	lsrs	r3, r3, #19
 80013ac:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	0a9b      	lsrs	r3, r3, #10
 80013b2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	08db      	lsrs	r3, r3, #3
 80013b8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	015a      	lsls	r2, r3, #5
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	02db      	lsls	r3, r3, #11
 80013c2:	4313      	orrs	r3, r2
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	e032      	b.n	8001432 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d117      	bne.n	8001404 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	0fdb      	lsrs	r3, r3, #31
 80013d8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	0cdb      	lsrs	r3, r3, #19
 80013de:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	0adb      	lsrs	r3, r3, #11
 80013e4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	015a      	lsls	r2, r3, #5
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	029b      	lsls	r3, r3, #10
 80013f4:	431a      	orrs	r2, r3
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	03db      	lsls	r3, r3, #15
 80013fa:	4313      	orrs	r3, r2
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	4313      	orrs	r3, r2
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
 8001402:	e016      	b.n	8001432 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	0f1b      	lsrs	r3, r3, #28
 8001408:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	0d1b      	lsrs	r3, r3, #20
 800140e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	0b1b      	lsrs	r3, r3, #12
 8001414:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	011a      	lsls	r2, r3, #4
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	431a      	orrs	r2, r3
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	031b      	lsls	r3, r3, #12
 800142a:	4313      	orrs	r3, r2
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	4313      	orrs	r3, r2
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001438:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800143a:	e003      	b.n	8001444 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	60da      	str	r2, [r3, #12]
}
 8001444:	bf00      	nop
 8001446:	372c      	adds	r7, #44	; 0x2c
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e175      	b.n	800175c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8164 	bne.w	8001756 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d00b      	beq.n	80014ae <HAL_GPIO_Init+0x5e>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014a2:	2b11      	cmp	r3, #17
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b12      	cmp	r3, #18
 80014ac:	d130      	bne.n	8001510 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	2203      	movs	r2, #3
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	f003 0201 	and.w	r2, r3, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x100>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b12      	cmp	r3, #18
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80be 	beq.w	8001756 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	4b65      	ldr	r3, [pc, #404]	; (8001770 <HAL_GPIO_Init+0x320>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a64      	ldr	r2, [pc, #400]	; (8001770 <HAL_GPIO_Init+0x320>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b62      	ldr	r3, [pc, #392]	; (8001770 <HAL_GPIO_Init+0x320>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80015f2:	4a60      	ldr	r2, [pc, #384]	; (8001774 <HAL_GPIO_Init+0x324>)
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a57      	ldr	r2, [pc, #348]	; (8001778 <HAL_GPIO_Init+0x328>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d037      	beq.n	800168e <HAL_GPIO_Init+0x23e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a56      	ldr	r2, [pc, #344]	; (800177c <HAL_GPIO_Init+0x32c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d031      	beq.n	800168a <HAL_GPIO_Init+0x23a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a55      	ldr	r2, [pc, #340]	; (8001780 <HAL_GPIO_Init+0x330>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d02b      	beq.n	8001686 <HAL_GPIO_Init+0x236>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a54      	ldr	r2, [pc, #336]	; (8001784 <HAL_GPIO_Init+0x334>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d025      	beq.n	8001682 <HAL_GPIO_Init+0x232>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a53      	ldr	r2, [pc, #332]	; (8001788 <HAL_GPIO_Init+0x338>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d01f      	beq.n	800167e <HAL_GPIO_Init+0x22e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_GPIO_Init+0x33c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d019      	beq.n	800167a <HAL_GPIO_Init+0x22a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a51      	ldr	r2, [pc, #324]	; (8001790 <HAL_GPIO_Init+0x340>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_GPIO_Init+0x226>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a50      	ldr	r2, [pc, #320]	; (8001794 <HAL_GPIO_Init+0x344>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00d      	beq.n	8001672 <HAL_GPIO_Init+0x222>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4f      	ldr	r2, [pc, #316]	; (8001798 <HAL_GPIO_Init+0x348>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d007      	beq.n	800166e <HAL_GPIO_Init+0x21e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4e      	ldr	r2, [pc, #312]	; (800179c <HAL_GPIO_Init+0x34c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d101      	bne.n	800166a <HAL_GPIO_Init+0x21a>
 8001666:	2309      	movs	r3, #9
 8001668:	e012      	b.n	8001690 <HAL_GPIO_Init+0x240>
 800166a:	230a      	movs	r3, #10
 800166c:	e010      	b.n	8001690 <HAL_GPIO_Init+0x240>
 800166e:	2308      	movs	r3, #8
 8001670:	e00e      	b.n	8001690 <HAL_GPIO_Init+0x240>
 8001672:	2307      	movs	r3, #7
 8001674:	e00c      	b.n	8001690 <HAL_GPIO_Init+0x240>
 8001676:	2306      	movs	r3, #6
 8001678:	e00a      	b.n	8001690 <HAL_GPIO_Init+0x240>
 800167a:	2305      	movs	r3, #5
 800167c:	e008      	b.n	8001690 <HAL_GPIO_Init+0x240>
 800167e:	2304      	movs	r3, #4
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x240>
 8001682:	2303      	movs	r3, #3
 8001684:	e004      	b.n	8001690 <HAL_GPIO_Init+0x240>
 8001686:	2302      	movs	r3, #2
 8001688:	e002      	b.n	8001690 <HAL_GPIO_Init+0x240>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_GPIO_Init+0x240>
 800168e:	2300      	movs	r3, #0
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	f002 0203 	and.w	r2, r2, #3
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	4093      	lsls	r3, r2
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016a0:	4934      	ldr	r1, [pc, #208]	; (8001774 <HAL_GPIO_Init+0x324>)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ae:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <HAL_GPIO_Init+0x350>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d2:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <HAL_GPIO_Init+0x350>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016d8:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_GPIO_Init+0x350>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016fc:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <HAL_GPIO_Init+0x350>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_GPIO_Init+0x350>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001726:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <HAL_GPIO_Init+0x350>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_GPIO_Init+0x350>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_GPIO_Init+0x350>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3301      	adds	r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	2b0f      	cmp	r3, #15
 8001760:	f67f ae86 	bls.w	8001470 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001764:	bf00      	nop
 8001766:	3724      	adds	r7, #36	; 0x24
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40023800 	.word	0x40023800
 8001774:	40013800 	.word	0x40013800
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400
 8001780:	40020800 	.word	0x40020800
 8001784:	40020c00 	.word	0x40020c00
 8001788:	40021000 	.word	0x40021000
 800178c:	40021400 	.word	0x40021400
 8001790:	40021800 	.word	0x40021800
 8001794:	40021c00 	.word	0x40021c00
 8001798:	40022000 	.word	0x40022000
 800179c:	40022400 	.word	0x40022400
 80017a0:	40013c00 	.word	0x40013c00

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80017c0:	e003      	b.n	80017ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d004      	beq.n	80017f8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	041a      	lsls	r2, r3, #16
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80017f6:	e002      	b.n	80017fe <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f8:	887a      	ldrh	r2, [r7, #2]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	619a      	str	r2, [r3, #24]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f004 fd27 	bl	8006274 <USB_GetMode>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	f040 80ef 	bne.w	8001a0c <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f004 fd0b 	bl	800624e <USB_ReadInterrupts>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80e5 	beq.w	8001a0a <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f004 fd02 	bl	800624e <USB_ReadInterrupts>
 800184a:	4603      	mov	r3, r0
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001854:	d104      	bne.n	8001860 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800185e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f004 fcf2 	bl	800624e <USB_ReadInterrupts>
 800186a:	4603      	mov	r3, r0
 800186c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001874:	d104      	bne.n	8001880 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800187e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f004 fce2 	bl	800624e <USB_ReadInterrupts>
 800188a:	4603      	mov	r3, r0
 800188c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001894:	d104      	bne.n	80018a0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800189e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 fcd2 	bl	800624e <USB_ReadInterrupts>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d103      	bne.n	80018bc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2202      	movs	r2, #2
 80018ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 fcc4 	bl	800624e <USB_ReadInterrupts>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018d0:	d115      	bne.n	80018fe <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018da:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d108      	bne.n	80018fe <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f008 fc83 	bl	800a1f8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2101      	movs	r1, #1
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 fcc9 	bl	8006290 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f004 fca3 	bl	800624e <USB_ReadInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800190e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001912:	d102      	bne.n	800191a <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f001 f8ef 	bl	8002af8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fc95 	bl	800624e <USB_ReadInterrupts>
 8001924:	4603      	mov	r3, r0
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b08      	cmp	r3, #8
 800192c:	d106      	bne.n	800193c <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f008 fc46 	bl	800a1c0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2208      	movs	r2, #8
 800193a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f004 fc84 	bl	800624e <USB_ReadInterrupts>
 8001946:	4603      	mov	r3, r0
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001950:	d138      	bne.n	80019c4 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f004 fcd4 	bl	8006304 <USB_HC_ReadInterrupt>
 800195c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e025      	b.n	80019b0 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d018      	beq.n	80019aa <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	015a      	lsls	r2, r3, #5
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800198a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800198e:	d106      	bne.n	800199e <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	4619      	mov	r1, r3
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f858 	bl	8001a4c <HCD_HC_IN_IRQHandler>
 800199c:	e005      	b.n	80019aa <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fc86 	bl	80022b6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d3d4      	bcc.n	8001964 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f004 fc40 	bl	800624e <USB_ReadInterrupts>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	2b10      	cmp	r3, #16
 80019d6:	d101      	bne.n	80019dc <HAL_HCD_IRQHandler+0x1d2>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_HCD_IRQHandler+0x1d4>
 80019dc:	2300      	movs	r3, #0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d014      	beq.n	8001a0c <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0210 	bic.w	r2, r2, #16
 80019f0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 ffd4 	bl	80029a0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0210 	orr.w	r2, r2, #16
 8001a06:	619a      	str	r2, [r3, #24]
 8001a08:	e000      	b.n	8001a0c <HAL_HCD_IRQHandler+0x202>
      return;
 8001a0a:	bf00      	nop
    }
  }
}
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_HCD_Stop+0x16>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e00d      	b.n	8001a44 <HAL_HCD_Stop+0x32>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f004 fd75 	bl	8006524 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	015a      	lsls	r2, r3, #5
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d119      	bne.n	8001ab0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	015a      	lsls	r2, r3, #5
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	0151      	lsls	r1, r2, #5
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	440a      	add	r2, r1
 8001aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	60d3      	str	r3, [r2, #12]
 8001aae:	e0ce      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	015a      	lsls	r2, r3, #5
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac6:	d12c      	bne.n	8001b22 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ada:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	335d      	adds	r3, #93	; 0x5d
 8001aec:	2207      	movs	r2, #7
 8001aee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	015a      	lsls	r2, r3, #5
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	0151      	lsls	r1, r2, #5
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	440a      	add	r2, r1
 8001b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fc03 	bl	8006326 <USB_HC_Halt>
 8001b20:	e095      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	015a      	lsls	r2, r3, #5
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d109      	bne.n	8001b4c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	015a      	lsls	r2, r3, #5
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4413      	add	r3, r2
 8001b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b44:	461a      	mov	r2, r3
 8001b46:	2320      	movs	r3, #32
 8001b48:	6093      	str	r3, [r2, #8]
 8001b4a:	e080      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d134      	bne.n	8001bcc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	015a      	lsls	r2, r3, #5
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	0151      	lsls	r1, r2, #5
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	440a      	add	r2, r1
 8001b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	335d      	adds	r3, #93	; 0x5d
 8001b92:	2205      	movs	r2, #5
 8001b94:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	015a      	lsls	r2, r3, #5
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	015a      	lsls	r2, r3, #5
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f004 fbae 	bl	8006326 <USB_HC_Halt>
 8001bca:	e040      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	015a      	lsls	r2, r3, #5
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be2:	d134      	bne.n	8001c4e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	015a      	lsls	r2, r3, #5
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4413      	add	r3, r2
 8001bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	0151      	lsls	r1, r2, #5
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	440a      	add	r2, r1
 8001bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bfe:	f043 0302 	orr.w	r3, r3, #2
 8001c02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f004 fb89 	bl	8006326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	015a      	lsls	r2, r3, #5
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c20:	461a      	mov	r2, r3
 8001c22:	2310      	movs	r3, #16
 8001c24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	335d      	adds	r3, #93	; 0x5d
 8001c36:	2208      	movs	r2, #8
 8001c38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c46:	461a      	mov	r2, r3
 8001c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c4c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c64:	d122      	bne.n	8001cac <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	0151      	lsls	r1, r2, #5
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	440a      	add	r2, r1
 8001c7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f004 fb48 	bl	8006326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	015a      	lsls	r2, r3, #5
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001caa:	e300      	b.n	80022ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	f040 80fd 	bne.w	8001ebe <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01b      	beq.n	8001d04 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	440b      	add	r3, r1
 8001cda:	3348      	adds	r3, #72	; 0x48
 8001cdc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	0159      	lsls	r1, r3, #5
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001cf0:	1ad1      	subs	r1, r2, r3
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4403      	add	r3, r0
 8001d00:	334c      	adds	r3, #76	; 0x4c
 8001d02:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	335d      	adds	r3, #93	; 0x5d
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	440b      	add	r3, r1
 8001d26:	3358      	adds	r3, #88	; 0x58
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	015a      	lsls	r2, r3, #5
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d38:	461a      	mov	r2, r3
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	333f      	adds	r3, #63	; 0x3f
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00a      	beq.n	8001d6a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	333f      	adds	r3, #63	; 0x3f
 8001d64:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d121      	bne.n	8001dae <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	0151      	lsls	r1, r2, #5
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	440a      	add	r2, r1
 8001d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f004 fac6 	bl	8006326 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	461a      	mov	r2, r3
 8001da8:	2310      	movs	r3, #16
 8001daa:	6093      	str	r3, [r2, #8]
 8001dac:	e070      	b.n	8001e90 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	333f      	adds	r3, #63	; 0x3f
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d12a      	bne.n	8001e1a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	0151      	lsls	r1, r2, #5
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	440a      	add	r2, r1
 8001dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001de2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	335c      	adds	r3, #92	; 0x5c
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	b2d8      	uxtb	r0, r3
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	335c      	adds	r3, #92	; 0x5c
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4601      	mov	r1, r0
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f008 f9fe 	bl	800a214 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001e18:	e03a      	b.n	8001e90 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	333f      	adds	r3, #63	; 0x3f
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d12f      	bne.n	8001e90 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	335c      	adds	r3, #92	; 0x5c
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	3350      	adds	r3, #80	; 0x50
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f083 0301 	eor.w	r3, r3, #1
 8001e5a:	b2d8      	uxtb	r0, r3
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	3350      	adds	r3, #80	; 0x50
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	b2d8      	uxtb	r0, r3
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	335c      	adds	r3, #92	; 0x5c
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4601      	mov	r1, r0
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f008 f9c2 	bl	800a214 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3350      	adds	r3, #80	; 0x50
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	f083 0301 	eor.w	r3, r3, #1
 8001ea6:	b2d8      	uxtb	r0, r3
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3350      	adds	r3, #80	; 0x50
 8001eb8:	4602      	mov	r2, r0
 8001eba:	701a      	strb	r2, [r3, #0]
}
 8001ebc:	e1f7      	b.n	80022ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	f040 811a 	bne.w	800210a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	0151      	lsls	r1, r2, #5
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	440a      	add	r2, r1
 8001eec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ef0:	f023 0302 	bic.w	r3, r3, #2
 8001ef4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	335d      	adds	r3, #93	; 0x5d
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d10a      	bne.n	8001f22 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	335c      	adds	r3, #92	; 0x5c
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	e0d9      	b.n	80020d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	335d      	adds	r3, #93	; 0x5d
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d10a      	bne.n	8001f4e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	335c      	adds	r3, #92	; 0x5c
 8001f48:	2205      	movs	r2, #5
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e0c3      	b.n	80020d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	335d      	adds	r3, #93	; 0x5d
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b06      	cmp	r3, #6
 8001f62:	d00a      	beq.n	8001f7a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	335d      	adds	r3, #93	; 0x5d
 8001f74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d156      	bne.n	8002028 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	3358      	adds	r3, #88	; 0x58
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	1c59      	adds	r1, r3, #1
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4403      	add	r3, r0
 8001f9c:	3358      	adds	r3, #88	; 0x58
 8001f9e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	3358      	adds	r3, #88	; 0x58
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d914      	bls.n	8001fe0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3358      	adds	r3, #88	; 0x58
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	335c      	adds	r3, #92	; 0x5c
 8001fda:	2204      	movs	r2, #4
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	e009      	b.n	8001ff4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	335c      	adds	r3, #92	; 0x5c
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800200a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002012:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	461a      	mov	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e056      	b.n	80020d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	335d      	adds	r3, #93	; 0x5d
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d123      	bne.n	8002086 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	335c      	adds	r3, #92	; 0x5c
 800204e:	2202      	movs	r2, #2
 8002050:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4413      	add	r3, r2
 800205a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002068:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002070:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	e027      	b.n	80020d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	335d      	adds	r3, #93	; 0x5d
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b07      	cmp	r3, #7
 800209a:	d11c      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	3358      	adds	r3, #88	; 0x58
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	1c59      	adds	r1, r3, #1
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4403      	add	r3, r0
 80020be:	3358      	adds	r3, #88	; 0x58
 80020c0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	335c      	adds	r3, #92	; 0x5c
 80020d2:	2204      	movs	r2, #4
 80020d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	461a      	mov	r2, r3
 80020e4:	2302      	movs	r3, #2
 80020e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	b2d8      	uxtb	r0, r3
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	335c      	adds	r3, #92	; 0x5c
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	4601      	mov	r1, r0
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f008 f886 	bl	800a214 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002108:	e0d1      	b.n	80022ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211c:	2b80      	cmp	r3, #128	; 0x80
 800211e:	d13e      	bne.n	800219e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	0151      	lsls	r1, r2, #5
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	440a      	add	r2, r1
 8002136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800213a:	f043 0302 	orr.w	r3, r3, #2
 800213e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	3358      	adds	r3, #88	; 0x58
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	1c59      	adds	r1, r3, #1
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4403      	add	r3, r0
 8002162:	3358      	adds	r3, #88	; 0x58
 8002164:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	335d      	adds	r3, #93	; 0x5d
 8002176:	2206      	movs	r2, #6
 8002178:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f004 f8ce 	bl	8006326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	461a      	mov	r2, r3
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	6093      	str	r3, [r2, #8]
}
 800219c:	e087      	b.n	80022ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d17c      	bne.n	80022ae <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	333f      	adds	r3, #63	; 0x3f
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d122      	bne.n	8002210 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	3358      	adds	r3, #88	; 0x58
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	0151      	lsls	r1, r2, #5
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	440a      	add	r2, r1
 80021f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f004 f88c 	bl	8006326 <USB_HC_Halt>
 800220e:	e045      	b.n	800229c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	440b      	add	r3, r1
 800221e:	333f      	adds	r3, #63	; 0x3f
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	333f      	adds	r3, #63	; 0x3f
 8002236:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002238:	2b02      	cmp	r3, #2
 800223a:	d12f      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	3358      	adds	r3, #88	; 0x58
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d121      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	335d      	adds	r3, #93	; 0x5d
 8002268:	2203      	movs	r2, #3
 800226a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4413      	add	r3, r2
 8002274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	0151      	lsls	r1, r2, #5
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	440a      	add	r2, r1
 8002282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002286:	f043 0302 	orr.w	r3, r3, #2
 800228a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f004 f845 	bl	8006326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	461a      	mov	r2, r3
 80022aa:	2310      	movs	r3, #16
 80022ac:	6093      	str	r3, [r2, #8]
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d119      	bne.n	800231a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	461a      	mov	r2, r3
 80022f4:	2304      	movs	r3, #4
 80022f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	0151      	lsls	r1, r2, #5
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	440a      	add	r2, r1
 800230e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002318:	e33e      	b.n	8002998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b20      	cmp	r3, #32
 800232e:	d141      	bne.n	80023b4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233c:	461a      	mov	r2, r3
 800233e:	2320      	movs	r3, #32
 8002340:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	333d      	adds	r3, #61	; 0x3d
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	f040 831f 	bne.w	8002998 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	333d      	adds	r3, #61	; 0x3d
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	335c      	adds	r3, #92	; 0x5c
 800237e:	2202      	movs	r2, #2
 8002380:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4413      	add	r3, r2
 800238a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	0151      	lsls	r1, r2, #5
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	440a      	add	r2, r1
 8002398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 ffba 	bl	8006326 <USB_HC_Halt>
}
 80023b2:	e2f1      	b.n	8002998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	d13f      	bne.n	800244a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	335d      	adds	r3, #93	; 0x5d
 80023da:	2204      	movs	r2, #4
 80023dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	333d      	adds	r3, #61	; 0x3d
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3358      	adds	r3, #88	; 0x58
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	0151      	lsls	r1, r2, #5
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	440a      	add	r2, r1
 800241c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f003 ff78 	bl	8006326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	461a      	mov	r2, r3
 8002444:	2340      	movs	r3, #64	; 0x40
 8002446:	6093      	str	r3, [r2, #8]
}
 8002448:	e2a6      	b.n	8002998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002460:	d122      	bne.n	80024a8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	0151      	lsls	r1, r2, #5
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	440a      	add	r2, r1
 8002478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f003 ff4a 	bl	8006326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4413      	add	r3, r2
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	461a      	mov	r2, r3
 80024a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a4:	6093      	str	r3, [r2, #8]
}
 80024a6:	e277      	b.n	8002998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d135      	bne.n	800252a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	3358      	adds	r3, #88	; 0x58
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	0151      	lsls	r1, r2, #5
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	440a      	add	r2, r1
 80024e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 ff12 	bl	8006326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	461a      	mov	r2, r3
 8002510:	2301      	movs	r3, #1
 8002512:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	335d      	adds	r3, #93	; 0x5d
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
}
 8002528:	e236      	b.n	8002998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b08      	cmp	r3, #8
 800253e:	d12b      	bne.n	8002598 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	461a      	mov	r2, r3
 800254e:	2308      	movs	r3, #8
 8002550:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	0151      	lsls	r1, r2, #5
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	440a      	add	r2, r1
 8002568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f003 fed2 	bl	8006326 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	440b      	add	r3, r1
 8002590:	335d      	adds	r3, #93	; 0x5d
 8002592:	2205      	movs	r2, #5
 8002594:	701a      	strb	r2, [r3, #0]
}
 8002596:	e1ff      	b.n	8002998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	d155      	bne.n	800265a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	3358      	adds	r3, #88	; 0x58
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	335d      	adds	r3, #93	; 0x5d
 80025d2:	2203      	movs	r2, #3
 80025d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	333d      	adds	r3, #61	; 0x3d
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d114      	bne.n	8002616 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	333c      	adds	r3, #60	; 0x3c
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	440b      	add	r3, r1
 8002610:	333d      	adds	r3, #61	; 0x3d
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	0151      	lsls	r1, r2, #5
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	440a      	add	r2, r1
 800262c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f003 fe70 	bl	8006326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4413      	add	r3, r2
 800264e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002652:	461a      	mov	r2, r3
 8002654:	2310      	movs	r3, #16
 8002656:	6093      	str	r3, [r2, #8]
}
 8002658:	e19e      	b.n	8002998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266c:	2b80      	cmp	r3, #128	; 0x80
 800266e:	d12b      	bne.n	80026c8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	0151      	lsls	r1, r2, #5
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	440a      	add	r2, r1
 8002686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800268a:	f043 0302 	orr.w	r3, r3, #2
 800268e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f003 fe43 	bl	8006326 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	335d      	adds	r3, #93	; 0x5d
 80026b0:	2206      	movs	r2, #6
 80026b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	461a      	mov	r2, r3
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	6093      	str	r3, [r2, #8]
}
 80026c6:	e167      	b.n	8002998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026de:	d135      	bne.n	800274c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	0151      	lsls	r1, r2, #5
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	440a      	add	r2, r1
 80026f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026fa:	f043 0302 	orr.w	r3, r3, #2
 80026fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f003 fe0b 	bl	8006326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	461a      	mov	r2, r3
 800271e:	2310      	movs	r3, #16
 8002720:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	461a      	mov	r2, r3
 8002730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002734:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	440b      	add	r3, r1
 8002744:	335d      	adds	r3, #93	; 0x5d
 8002746:	2208      	movs	r2, #8
 8002748:	701a      	strb	r2, [r3, #0]
}
 800274a:	e125      	b.n	8002998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b02      	cmp	r3, #2
 8002760:	f040 811a 	bne.w	8002998 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	440a      	add	r2, r1
 800277a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277e:	f023 0302 	bic.w	r3, r3, #2
 8002782:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	335d      	adds	r3, #93	; 0x5d
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d137      	bne.n	800280a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	440b      	add	r3, r1
 80027a8:	335c      	adds	r3, #92	; 0x5c
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	333f      	adds	r3, #63	; 0x3f
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d00b      	beq.n	80027dc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	333f      	adds	r3, #63	; 0x3f
 80027d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	f040 80c5 	bne.w	8002966 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	3351      	adds	r3, #81	; 0x51
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	f083 0301 	eor.w	r3, r3, #1
 80027f2:	b2d8      	uxtb	r0, r3
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	440b      	add	r3, r1
 8002802:	3351      	adds	r3, #81	; 0x51
 8002804:	4602      	mov	r2, r0
 8002806:	701a      	strb	r2, [r3, #0]
 8002808:	e0ad      	b.n	8002966 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	440b      	add	r3, r1
 8002818:	335d      	adds	r3, #93	; 0x5d
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d10a      	bne.n	8002836 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	335c      	adds	r3, #92	; 0x5c
 8002830:	2202      	movs	r2, #2
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e097      	b.n	8002966 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	335d      	adds	r3, #93	; 0x5d
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d10a      	bne.n	8002862 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	335c      	adds	r3, #92	; 0x5c
 800285c:	2202      	movs	r2, #2
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e081      	b.n	8002966 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	335d      	adds	r3, #93	; 0x5d
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b05      	cmp	r3, #5
 8002876:	d10a      	bne.n	800288e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	335c      	adds	r3, #92	; 0x5c
 8002888:	2205      	movs	r2, #5
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e06b      	b.n	8002966 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	335d      	adds	r3, #93	; 0x5d
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	d00a      	beq.n	80028ba <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	335d      	adds	r3, #93	; 0x5d
 80028b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d155      	bne.n	8002966 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	3358      	adds	r3, #88	; 0x58
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	1c59      	adds	r1, r3, #1
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4403      	add	r3, r0
 80028dc:	3358      	adds	r3, #88	; 0x58
 80028de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	3358      	adds	r3, #88	; 0x58
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d914      	bls.n	8002920 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	3358      	adds	r3, #88	; 0x58
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	335c      	adds	r3, #92	; 0x5c
 800291a:	2204      	movs	r2, #4
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	e009      	b.n	8002934 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	335c      	adds	r3, #92	; 0x5c
 8002930:	2202      	movs	r2, #2
 8002932:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800294a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002952:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002972:	461a      	mov	r2, r3
 8002974:	2302      	movs	r3, #2
 8002976:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	b2d8      	uxtb	r0, r3
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	335c      	adds	r3, #92	; 0x5c
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	4601      	mov	r1, r0
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f007 fc3e 	bl	800a214 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	0c5b      	lsrs	r3, r3, #17
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d003      	beq.n	80029e4 <HCD_RXQLVL_IRQHandler+0x44>
 80029dc:	2b05      	cmp	r3, #5
 80029de:	f000 8082 	beq.w	8002ae6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80029e2:	e083      	b.n	8002aec <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d07f      	beq.n	8002aea <HCD_RXQLVL_IRQHandler+0x14a>
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	3344      	adds	r3, #68	; 0x44
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d074      	beq.n	8002aea <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	3344      	adds	r3, #68	; 0x44
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	b292      	uxth	r2, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f003 fbee 	bl	80061fc <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3344      	adds	r3, #68	; 0x44
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	18d1      	adds	r1, r2, r3
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4403      	add	r3, r0
 8002a44:	3344      	adds	r3, #68	; 0x44
 8002a46:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	334c      	adds	r3, #76	; 0x4c
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	18d1      	adds	r1, r2, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4403      	add	r3, r0
 8002a6c:	334c      	adds	r3, #76	; 0x4c
 8002a6e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HCD_RXQLVL_IRQHandler+0x154>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d031      	beq.n	8002aea <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a9c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aa4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3350      	adds	r3, #80	; 0x50
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	f083 0301 	eor.w	r3, r3, #1
 8002ace:	b2d8      	uxtb	r0, r3
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	3350      	adds	r3, #80	; 0x50
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	701a      	strb	r2, [r3, #0]
      break;
 8002ae4:	e001      	b.n	8002aea <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e000      	b.n	8002aec <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002aea:	bf00      	nop
  }
}
 8002aec:	bf00      	nop
 8002aee:	3728      	adds	r7, #40	; 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	1ff80000 	.word	0x1ff80000

08002af8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b24:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d10b      	bne.n	8002b48 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d102      	bne.n	8002b40 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f007 fb4e 	bl	800a1dc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f043 0302 	orr.w	r3, r3, #2
 8002b46:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d132      	bne.n	8002bb8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d126      	bne.n	8002bb2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d113      	bne.n	8002b94 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b76:	d106      	bne.n	8002b86 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 fb86 	bl	8006290 <USB_InitFSLSPClkSel>
 8002b84:	e011      	b.n	8002baa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 fb7f 	bl	8006290 <USB_InitFSLSPClkSel>
 8002b92:	e00a      	b.n	8002baa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d106      	bne.n	8002baa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ba8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f007 fb40 	bl	800a230 <HAL_HCD_PortEnabled_Callback>
 8002bb0:	e002      	b.n	8002bb8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f007 fb4a 	bl	800a24c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d103      	bne.n	8002bca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f043 0320 	orr.w	r3, r3, #32
 8002bc8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	6013      	str	r3, [r2, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e07f      	b.n	8002cf2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f007 f810 	bl	8009c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2224      	movs	r2, #36	; 0x24
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d107      	bne.n	8002c5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	e006      	b.n	8002c68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d104      	bne.n	8002c7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_I2C_Init+0x11c>)
 8002c86:	430b      	orrs	r3, r1
 8002c88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	ea42 0103 	orr.w	r1, r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	021a      	lsls	r2, r3, #8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69d9      	ldr	r1, [r3, #28]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1a      	ldr	r2, [r3, #32]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	02008000 	.word	0x02008000

08002d00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	4608      	mov	r0, r1
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	817b      	strh	r3, [r7, #10]
 8002d12:	460b      	mov	r3, r1
 8002d14:	813b      	strh	r3, [r7, #8]
 8002d16:	4613      	mov	r3, r2
 8002d18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	f040 80f9 	bne.w	8002f1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_I2C_Mem_Write+0x34>
 8002d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0ed      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_I2C_Mem_Write+0x4e>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e0e6      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d56:	f7fd fca3 	bl	80006a0 <HAL_GetTick>
 8002d5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2319      	movs	r3, #25
 8002d62:	2201      	movs	r2, #1
 8002d64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fac3 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0d1      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2221      	movs	r2, #33	; 0x21
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2240      	movs	r2, #64	; 0x40
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002da0:	88f8      	ldrh	r0, [r7, #6]
 8002da2:	893a      	ldrh	r2, [r7, #8]
 8002da4:	8979      	ldrh	r1, [r7, #10]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4603      	mov	r3, r0
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f9d3 	bl	800315c <I2C_RequestMemoryWrite>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0a9      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2bff      	cmp	r3, #255	; 0xff
 8002dd0:	d90e      	bls.n	8002df0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	22ff      	movs	r2, #255	; 0xff
 8002dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	8979      	ldrh	r1, [r7, #10]
 8002de0:	2300      	movs	r3, #0
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fba5 	bl	8003538 <I2C_TransferConfig>
 8002dee:	e00f      	b.n	8002e10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	8979      	ldrh	r1, [r7, #10]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fb94 	bl	8003538 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 faad 	bl	8003374 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e07b      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	781a      	ldrb	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d034      	beq.n	8002ec8 <HAL_I2C_Mem_Write+0x1c8>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d130      	bne.n	8002ec8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2180      	movs	r1, #128	; 0x80
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fa3f 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e04d      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2bff      	cmp	r3, #255	; 0xff
 8002e88:	d90e      	bls.n	8002ea8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	22ff      	movs	r2, #255	; 0xff
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	8979      	ldrh	r1, [r7, #10]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fb49 	bl	8003538 <I2C_TransferConfig>
 8002ea6:	e00f      	b.n	8002ec8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	8979      	ldrh	r1, [r7, #10]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fb38 	bl	8003538 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d19e      	bne.n	8002e10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fa8c 	bl	80033f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e01a      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2220      	movs	r2, #32
 8002eec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_I2C_Mem_Write+0x224>)
 8002efa:	400b      	ands	r3, r1
 8002efc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	fe00e800 	.word	0xfe00e800

08002f28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	817b      	strh	r3, [r7, #10]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	813b      	strh	r3, [r7, #8]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	f040 80fd 	bne.w	800314a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_I2C_Mem_Read+0x34>
 8002f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0f1      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_I2C_Mem_Read+0x4e>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e0ea      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f7e:	f7fd fb8f 	bl	80006a0 <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2319      	movs	r3, #25
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f9af 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0d5      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2222      	movs	r2, #34	; 0x22
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2240      	movs	r2, #64	; 0x40
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a3a      	ldr	r2, [r7, #32]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fc8:	88f8      	ldrh	r0, [r7, #6]
 8002fca:	893a      	ldrh	r2, [r7, #8]
 8002fcc:	8979      	ldrh	r1, [r7, #10]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f913 	bl	8003204 <I2C_RequestMemoryRead>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0ad      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2bff      	cmp	r3, #255	; 0xff
 8002ff8:	d90e      	bls.n	8003018 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	22ff      	movs	r2, #255	; 0xff
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	b2da      	uxtb	r2, r3
 8003006:	8979      	ldrh	r1, [r7, #10]
 8003008:	4b52      	ldr	r3, [pc, #328]	; (8003154 <HAL_I2C_Mem_Read+0x22c>)
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fa91 	bl	8003538 <I2C_TransferConfig>
 8003016:	e00f      	b.n	8003038 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003026:	b2da      	uxtb	r2, r3
 8003028:	8979      	ldrh	r1, [r7, #10]
 800302a:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_I2C_Mem_Read+0x22c>)
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fa80 	bl	8003538 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	2200      	movs	r2, #0
 8003040:	2104      	movs	r1, #4
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f956 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e07c      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d034      	beq.n	80030f8 <HAL_I2C_Mem_Read+0x1d0>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	2b00      	cmp	r3, #0
 8003094:	d130      	bne.n	80030f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	2200      	movs	r2, #0
 800309e:	2180      	movs	r1, #128	; 0x80
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f927 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e04d      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2bff      	cmp	r3, #255	; 0xff
 80030b8:	d90e      	bls.n	80030d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	8979      	ldrh	r1, [r7, #10]
 80030c8:	2300      	movs	r3, #0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fa31 	bl	8003538 <I2C_TransferConfig>
 80030d6:	e00f      	b.n	80030f8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	8979      	ldrh	r1, [r7, #10]
 80030ea:	2300      	movs	r3, #0
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fa20 	bl	8003538 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d19a      	bne.n	8003038 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f974 	bl	80033f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e01a      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2220      	movs	r2, #32
 800311c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_I2C_Mem_Read+0x230>)
 800312a:	400b      	ands	r3, r1
 800312c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800314a:	2302      	movs	r3, #2
  }
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	80002400 	.word	0x80002400
 8003158:	fe00e800 	.word	0xfe00e800

0800315c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	461a      	mov	r2, r3
 800316a:	4603      	mov	r3, r0
 800316c:	817b      	strh	r3, [r7, #10]
 800316e:	460b      	mov	r3, r1
 8003170:	813b      	strh	r3, [r7, #8]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	8979      	ldrh	r1, [r7, #10]
 800317c:	4b20      	ldr	r3, [pc, #128]	; (8003200 <I2C_RequestMemoryWrite+0xa4>)
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f9d7 	bl	8003538 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	69b9      	ldr	r1, [r7, #24]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f8f0 	bl	8003374 <I2C_WaitOnTXISFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e02c      	b.n	80031f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031a4:	893b      	ldrh	r3, [r7, #8]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	629a      	str	r2, [r3, #40]	; 0x28
 80031ae:	e015      	b.n	80031dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031b0:	893b      	ldrh	r3, [r7, #8]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f8d6 	bl	8003374 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e012      	b.n	80031f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031d2:	893b      	ldrh	r3, [r7, #8]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2200      	movs	r2, #0
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f884 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	80002000 	.word	0x80002000

08003204 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	4608      	mov	r0, r1
 800320e:	4611      	mov	r1, r2
 8003210:	461a      	mov	r2, r3
 8003212:	4603      	mov	r3, r0
 8003214:	817b      	strh	r3, [r7, #10]
 8003216:	460b      	mov	r3, r1
 8003218:	813b      	strh	r3, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	b2da      	uxtb	r2, r3
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <I2C_RequestMemoryRead+0xa4>)
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2300      	movs	r3, #0
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f984 	bl	8003538 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	69b9      	ldr	r1, [r7, #24]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f89d 	bl	8003374 <I2C_WaitOnTXISFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e02c      	b.n	800329e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800324a:	893b      	ldrh	r3, [r7, #8]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
 8003254:	e015      	b.n	8003282 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003256:	893b      	ldrh	r3, [r7, #8]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	b29b      	uxth	r3, r3
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	69b9      	ldr	r1, [r7, #24]
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f883 	bl	8003374 <I2C_WaitOnTXISFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e012      	b.n	800329e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003278:	893b      	ldrh	r3, [r7, #8]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2200      	movs	r2, #0
 800328a:	2140      	movs	r1, #64	; 0x40
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f831 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	80002000 	.word	0x80002000

080032ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d103      	bne.n	80032ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d007      	beq.n	80032e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	619a      	str	r2, [r3, #24]
  }
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003304:	e022      	b.n	800334c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d01e      	beq.n	800334c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330e:	f7fd f9c7 	bl	80006a0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d113      	bne.n	800334c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e00f      	b.n	800336c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4013      	ands	r3, r2
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	429a      	cmp	r2, r3
 800335a:	bf0c      	ite	eq
 800335c:	2301      	moveq	r3, #1
 800335e:	2300      	movne	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	429a      	cmp	r2, r3
 8003368:	d0cd      	beq.n	8003306 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003380:	e02c      	b.n	80033dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f870 	bl	800346c <I2C_IsAcknowledgeFailed>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e02a      	b.n	80033ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d01e      	beq.n	80033dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7fd f97f 	bl	80006a0 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d113      	bne.n	80033dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b8:	f043 0220 	orr.w	r2, r3, #32
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e007      	b.n	80033ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d1cb      	bne.n	8003382 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003400:	e028      	b.n	8003454 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f830 	bl	800346c <I2C_IsAcknowledgeFailed>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e026      	b.n	8003464 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003416:	f7fd f943 	bl	80006a0 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	429a      	cmp	r2, r3
 8003424:	d302      	bcc.n	800342c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d113      	bne.n	8003454 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e007      	b.n	8003464 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b20      	cmp	r3, #32
 8003460:	d1cf      	bne.n	8003402 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b10      	cmp	r3, #16
 8003484:	d151      	bne.n	800352a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003486:	e022      	b.n	80034ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348e:	d01e      	beq.n	80034ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003490:	f7fd f906 	bl	80006a0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	d302      	bcc.n	80034a6 <I2C_IsAcknowledgeFailed+0x3a>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d113      	bne.n	80034ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f043 0220 	orr.w	r2, r3, #32
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e02e      	b.n	800352c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d1d5      	bne.n	8003488 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2210      	movs	r2, #16
 80034e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2220      	movs	r2, #32
 80034ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7ff fedd 	bl	80032ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <I2C_IsAcknowledgeFailed+0xc8>)
 80034fe:	400b      	ands	r3, r1
 8003500:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f043 0204 	orr.w	r2, r3, #4
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	fe00e800 	.word	0xfe00e800

08003538 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	460b      	mov	r3, r1
 8003544:	817b      	strh	r3, [r7, #10]
 8003546:	4613      	mov	r3, r2
 8003548:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	0d5b      	lsrs	r3, r3, #21
 8003554:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <I2C_TransferConfig+0x58>)
 800355a:	430b      	orrs	r3, r1
 800355c:	43db      	mvns	r3, r3
 800355e:	ea02 0103 	and.w	r1, r2, r3
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003568:	7a7b      	ldrb	r3, [r7, #9]
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	431a      	orrs	r2, r3
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	03ff63ff 	.word	0x03ff63ff

08003594 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d138      	bne.n	800361c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e032      	b.n	800361e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2224      	movs	r2, #36	; 0x24
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0201 	bic.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6819      	ldr	r1, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b20      	cmp	r3, #32
 800363e:	d139      	bne.n	80036b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800364a:	2302      	movs	r3, #2
 800364c:	e033      	b.n	80036b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2224      	movs	r2, #36	; 0x24
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800367c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e000      	b.n	80036b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036b4:	2302      	movs	r3, #2
  }
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0bf      	b.n	8003856 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f006 fae2 	bl	8009cb4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003706:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6999      	ldr	r1, [r3, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800371c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6899      	ldr	r1, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_LTDC_Init+0x19c>)
 8003738:	400b      	ands	r3, r1
 800373a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6899      	ldr	r1, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68d9      	ldr	r1, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <HAL_LTDC_Init+0x19c>)
 8003766:	400b      	ands	r3, r1
 8003768:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	041b      	lsls	r3, r3, #16
 8003770:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68d9      	ldr	r1, [r3, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6919      	ldr	r1, [r3, #16]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	4b33      	ldr	r3, [pc, #204]	; (8003860 <HAL_LTDC_Init+0x19c>)
 8003794:	400b      	ands	r3, r1
 8003796:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6919      	ldr	r1, [r3, #16]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6959      	ldr	r1, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <HAL_LTDC_Init+0x19c>)
 80037c2:	400b      	ands	r3, r1
 80037c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6959      	ldr	r1, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80037f4:	041b      	lsls	r3, r3, #16
 80037f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0206 	orr.w	r2, r2, #6
 8003832:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	f000f800 	.word	0xf000f800

08003864 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d023      	beq.n	80038ce <HAL_LTDC_IRQHandler+0x6a>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01e      	beq.n	80038ce <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0204 	bic.w	r2, r2, #4
 800389e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2204      	movs	r2, #4
 80038a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2204      	movs	r2, #4
 80038bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f86f 	bl	80039ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d023      	beq.n	8003920 <HAL_LTDC_IRQHandler+0xbc>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01e      	beq.n	8003920 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0202 	bic.w	r2, r2, #2
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2202      	movs	r2, #2
 80038f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003900:	f043 0202 	orr.w	r2, r3, #2
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2204      	movs	r2, #4
 800390e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f846 	bl	80039ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01b      	beq.n	8003962 <HAL_LTDC_IRQHandler+0xfe>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d016      	beq.n	8003962 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f005 fa9f 	bl	8008ea0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01b      	beq.n	80039a4 <HAL_LTDC_IRQHandler+0x140>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d016      	beq.n	80039a4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0208 	bic.w	r2, r2, #8
 8003984:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2208      	movs	r2, #8
 800398c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f80e 	bl	80039c0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80039d4:	b5b0      	push	{r4, r5, r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_LTDC_ConfigLayer+0x1a>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e02c      	b.n	8003a48 <HAL_LTDC_ConfigLayer+0x74>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2134      	movs	r1, #52	; 0x34
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	4614      	mov	r4, r2
 8003a12:	461d      	mov	r5, r3
 8003a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f849 	bl	8003ac0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2201      	movs	r2, #1
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bdb0      	pop	{r4, r5, r7, pc}

08003a50 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_LTDC_ProgramLineEvent+0x18>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e023      	b.n	8003ab0 <HAL_LTDC_ProgramLineEvent+0x60>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8003a88:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <HAL_LTDC_ProgramLineEvent+0x6c>)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40016800 	.word	0x40016800

08003ac0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	; 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003adc:	4413      	add	r3, r2
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	01db      	lsls	r3, r3, #7
 8003aec:	4413      	add	r3, r2
 8003aee:	3384      	adds	r3, #132	; 0x84
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	4611      	mov	r1, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	01d2      	lsls	r2, r2, #7
 8003afc:	440a      	add	r2, r1
 8003afe:	3284      	adds	r2, #132	; 0x84
 8003b00:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003b04:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	0c1b      	lsrs	r3, r3, #16
 8003b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b16:	4413      	add	r3, r2
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	01db      	lsls	r3, r3, #7
 8003b24:	440b      	add	r3, r1
 8003b26:	3384      	adds	r3, #132	; 0x84
 8003b28:	4619      	mov	r1, r3
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b3e:	4413      	add	r3, r2
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	01db      	lsls	r3, r3, #7
 8003b4e:	4413      	add	r3, r2
 8003b50:	3384      	adds	r3, #132	; 0x84
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	4611      	mov	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	01d2      	lsls	r2, r2, #7
 8003b5e:	440a      	add	r2, r1
 8003b60:	3284      	adds	r2, #132	; 0x84
 8003b62:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003b66:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b76:	4413      	add	r3, r2
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	01db      	lsls	r3, r3, #7
 8003b84:	440b      	add	r3, r1
 8003b86:	3384      	adds	r3, #132	; 0x84
 8003b88:	4619      	mov	r1, r3
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	01db      	lsls	r3, r3, #7
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3384      	adds	r3, #132	; 0x84
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	01d2      	lsls	r2, r2, #7
 8003baa:	440a      	add	r2, r1
 8003bac:	3284      	adds	r2, #132	; 0x84
 8003bae:	f023 0307 	bic.w	r3, r3, #7
 8003bb2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	01db      	lsls	r3, r3, #7
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3384      	adds	r3, #132	; 0x84
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bda:	041b      	lsls	r3, r3, #16
 8003bdc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	061b      	lsls	r3, r3, #24
 8003be4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	01db      	lsls	r3, r3, #7
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3384      	adds	r3, #132	; 0x84
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	01db      	lsls	r3, r3, #7
 8003c00:	4413      	add	r3, r2
 8003c02:	3384      	adds	r3, #132	; 0x84
 8003c04:	461a      	mov	r2, r3
 8003c06:	2300      	movs	r3, #0
 8003c08:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c10:	461a      	mov	r2, r3
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	01db      	lsls	r3, r3, #7
 8003c24:	440b      	add	r3, r1
 8003c26:	3384      	adds	r3, #132	; 0x84
 8003c28:	4619      	mov	r1, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	01db      	lsls	r3, r3, #7
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3384      	adds	r3, #132	; 0x84
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	4611      	mov	r1, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	01d2      	lsls	r2, r2, #7
 8003c4a:	440a      	add	r2, r1
 8003c4c:	3284      	adds	r2, #132	; 0x84
 8003c4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c52:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	01db      	lsls	r3, r3, #7
 8003c5e:	4413      	add	r3, r2
 8003c60:	3384      	adds	r3, #132	; 0x84
 8003c62:	461a      	mov	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	01db      	lsls	r3, r3, #7
 8003c74:	4413      	add	r3, r2
 8003c76:	3384      	adds	r3, #132	; 0x84
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	01db      	lsls	r3, r3, #7
 8003c84:	440b      	add	r3, r1
 8003c86:	3384      	adds	r3, #132	; 0x84
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4b58      	ldr	r3, [pc, #352]	; (8003dec <LTDC_SetConfig+0x32c>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	68f9      	ldr	r1, [r7, #12]
 8003c9a:	6809      	ldr	r1, [r1, #0]
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	01c9      	lsls	r1, r1, #7
 8003ca2:	4401      	add	r1, r0
 8003ca4:	3184      	adds	r1, #132	; 0x84
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	01db      	lsls	r3, r3, #7
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3384      	adds	r3, #132	; 0x84
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	01db      	lsls	r3, r3, #7
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3384      	adds	r3, #132	; 0x84
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	01db      	lsls	r3, r3, #7
 8003cd8:	4413      	add	r3, r2
 8003cda:	3384      	adds	r3, #132	; 0x84
 8003cdc:	461a      	mov	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003cec:	2304      	movs	r3, #4
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	e01b      	b.n	8003d2a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d102      	bne.n	8003d00 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	e014      	b.n	8003d2a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d00b      	beq.n	8003d20 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d007      	beq.n	8003d20 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d003      	beq.n	8003d20 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d1c:	2b07      	cmp	r3, #7
 8003d1e:	d102      	bne.n	8003d26 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003d20:	2302      	movs	r3, #2
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	e001      	b.n	8003d2a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003d26:	2301      	movs	r3, #1
 8003d28:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	01db      	lsls	r3, r3, #7
 8003d34:	4413      	add	r3, r2
 8003d36:	3384      	adds	r3, #132	; 0x84
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	4611      	mov	r1, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	01d2      	lsls	r2, r2, #7
 8003d44:	440a      	add	r2, r1
 8003d46:	3284      	adds	r2, #132	; 0x84
 8003d48:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	fb02 f303 	mul.w	r3, r2, r3
 8003d58:	041a      	lsls	r2, r3, #16
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	1acb      	subs	r3, r1, r3
 8003d64:	69f9      	ldr	r1, [r7, #28]
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	3303      	adds	r3, #3
 8003d6c:	68f9      	ldr	r1, [r7, #12]
 8003d6e:	6809      	ldr	r1, [r1, #0]
 8003d70:	4608      	mov	r0, r1
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	01c9      	lsls	r1, r1, #7
 8003d76:	4401      	add	r1, r0
 8003d78:	3184      	adds	r1, #132	; 0x84
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	01db      	lsls	r3, r3, #7
 8003d88:	4413      	add	r3, r2
 8003d8a:	3384      	adds	r3, #132	; 0x84
 8003d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4619      	mov	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	01db      	lsls	r3, r3, #7
 8003d98:	440b      	add	r3, r1
 8003d9a:	3384      	adds	r3, #132	; 0x84
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <LTDC_SetConfig+0x330>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	01db      	lsls	r3, r3, #7
 8003dae:	4413      	add	r3, r2
 8003db0:	3384      	adds	r3, #132	; 0x84
 8003db2:	461a      	mov	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	01db      	lsls	r3, r3, #7
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3384      	adds	r3, #132	; 0x84
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	4611      	mov	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	01d2      	lsls	r2, r2, #7
 8003dd4:	440a      	add	r2, r1
 8003dd6:	3284      	adds	r2, #132	; 0x84
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6013      	str	r3, [r2, #0]
}
 8003dde:	bf00      	nop
 8003de0:	3724      	adds	r7, #36	; 0x24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	fffff8f8 	.word	0xfffff8f8
 8003df0:	fffff800 	.word	0xfffff800

08003df4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e02:	6013      	str	r3, [r2, #0]
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40007000 	.word	0x40007000

08003e14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e1e:	4b23      	ldr	r3, [pc, #140]	; (8003eac <HAL_PWREx_EnableOverDrive+0x98>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	4a22      	ldr	r2, [pc, #136]	; (8003eac <HAL_PWREx_EnableOverDrive+0x98>)
 8003e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2a:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_PWREx_EnableOverDrive+0x98>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e36:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e42:	f7fc fc2d 	bl	80006a0 <HAL_GetTick>
 8003e46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e48:	e009      	b.n	8003e5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e4a:	f7fc fc29 	bl	80006a0 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e58:	d901      	bls.n	8003e5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e022      	b.n	8003ea4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e5e:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6a:	d1ee      	bne.n	8003e4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0f      	ldr	r2, [pc, #60]	; (8003eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e78:	f7fc fc12 	bl	80006a0 <HAL_GetTick>
 8003e7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e7e:	e009      	b.n	8003e94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e80:	f7fc fc0e 	bl	80006a0 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e8e:	d901      	bls.n	8003e94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e007      	b.n	8003ea4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ea0:	d1ee      	bne.n	8003e80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40007000 	.word	0x40007000

08003eb4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ebc:	f7fc fbf0 	bl	80006a0 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e067      	b.n	8003f9c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f887 	bl	8003ff4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003ee6:	f241 3188 	movw	r1, #5000	; 0x1388
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fd06 	bl	80048fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	021a      	lsls	r2, r3, #8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	2120      	movs	r1, #32
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fd31 	bl	800497e <QSPI_WaitFlagStateUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003f20:	7afb      	ldrb	r3, [r7, #11]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d135      	bne.n	8003f92 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <HAL_QSPI_Init+0xf0>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6852      	ldr	r2, [r2, #4]
 8003f34:	0611      	lsls	r1, r2, #24
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68d2      	ldr	r2, [r2, #12]
 8003f3a:	4311      	orrs	r1, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	69d2      	ldr	r2, [r2, #28]
 8003f40:	4311      	orrs	r1, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6a12      	ldr	r2, [r2, #32]
 8003f46:	4311      	orrs	r1, r2
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <HAL_QSPI_Init+0xf4>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6912      	ldr	r2, [r2, #16]
 8003f5e:	0411      	lsls	r1, r2, #16
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6952      	ldr	r2, [r2, #20]
 8003f64:	4311      	orrs	r1, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6992      	ldr	r2, [r2, #24]
 8003f6a:	4311      	orrs	r1, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	00ffff2f 	.word	0x00ffff2f
 8003fa8:	ffe0f8fe 	.word	0xffe0f8fe

08003fac <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e016      	b.n	8003fec <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f81a 	bl	8004008 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_QSPI_MspDeInit>:
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d064      	beq.n	8004108 <HAL_QSPI_IRQHandler+0xec>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d05f      	beq.n	8004108 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3320      	adds	r3, #32
 800404e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b12      	cmp	r3, #18
 800405a:	d125      	bne.n	80040a8 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800405c:	e01c      	b.n	8004098 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00f      	beq.n	8004086 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	781a      	ldrb	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	1e5a      	subs	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c
 8004084:	e008      	b.n	8004098 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004094:	601a      	str	r2, [r3, #0]
          break;
 8004096:	e033      	b.n	8004100 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1db      	bne.n	800405e <HAL_QSPI_IRQHandler+0x42>
 80040a6:	e02b      	b.n	8004100 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b22      	cmp	r3, #34	; 0x22
 80040b2:	d125      	bne.n	8004100 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80040b4:	e01d      	b.n	80040f2 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	7812      	ldrb	r2, [r2, #0]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	1e5a      	subs	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38
 80040de:	e008      	b.n	80040f2 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040ee:	601a      	str	r2, [r3, #0]
          break;
 80040f0:	e006      	b.n	8004100 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1da      	bne.n	80040b6 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fbdd 	bl	80048c0 <HAL_QSPI_FifoThresholdCallback>
 8004106:	e13c      	b.n	8004382 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80b0 	beq.w	8004274 <HAL_QSPI_IRQHandler+0x258>
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80aa 	beq.w	8004274 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2202      	movs	r2, #2
 8004126:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8004136:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b12      	cmp	r3, #18
 8004142:	d120      	bne.n	8004186 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d011      	beq.n	8004176 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0204 	bic.w	r2, r2, #4
 8004160:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fb94 	bl	80048ac <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004184:	e0fa      	b.n	800437c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b22      	cmp	r3, #34	; 0x22
 8004190:	d143      	bne.n	800421a <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d012      	beq.n	80041c6 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0204 	bic.w	r2, r2, #4
 80041ae:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e021      	b.n	800420a <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3320      	adds	r3, #32
 80041cc:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80041ce:	e013      	b.n	80041f8 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d017      	beq.n	8004208 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	7812      	ldrb	r2, [r2, #0]
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	1e5a      	subs	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e4      	bne.n	80041d0 <HAL_QSPI_IRQHandler+0x1b4>
 8004206:	e000      	b.n	800420a <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8004208:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fb40 	bl	8004898 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004218:	e0b0      	b.n	800437c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d107      	bne.n	8004236 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fb28 	bl	8004884 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004234:	e0a2      	b.n	800437c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b08      	cmp	r3, #8
 8004240:	f040 809c 	bne.w	800437c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004252:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	2b00      	cmp	r3, #0
 8004262:	d103      	bne.n	800426c <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fb03 	bl	8004870 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800426a:	e087      	b.n	800437c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 faf5 	bl	800485c <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004272:	e083      	b.n	800437c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01f      	beq.n	80042be <HAL_QSPI_IRQHandler+0x2a2>
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01a      	beq.n	80042be <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2208      	movs	r2, #8
 800428e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00b      	beq.n	80042b6 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80042ac:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fb0c 	bl	80048d4 <HAL_QSPI_StatusMatchCallback>
 80042bc:	e061      	b.n	8004382 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d047      	beq.n	8004358 <HAL_QSPI_IRQHandler+0x33c>
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d042      	beq.n	8004358 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2201      	movs	r2, #1
 80042d8:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80042e8:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f043 0202 	orr.w	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d021      	beq.n	8004348 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0204 	bic.w	r2, r2, #4
 8004312:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	4a1c      	ldr	r2, [pc, #112]	; (800438c <HAL_QSPI_IRQHandler+0x370>)
 800431a:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	4618      	mov	r0, r3
 8004322:	f7fc fc5f 	bl	8000be4 <HAL_DMA_Abort_IT>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d029      	beq.n	8004380 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004330:	f043 0204 	orr.w	r2, r3, #4
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fa8b 	bl	800485c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004346:	e01b      	b.n	8004380 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fa83 	bl	800485c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004356:	e013      	b.n	8004380 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00f      	beq.n	8004382 <HAL_QSPI_IRQHandler+0x366>
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2210      	movs	r2, #16
 8004372:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fab7 	bl	80048e8 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800437a:	e002      	b.n	8004382 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004380:	bf00      	nop
}
 8004382:	bf00      	nop
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	08004919 	.word	0x08004919

08004390 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800439c:	f7fc f980 	bl	80006a0 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_QSPI_Command+0x22>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e048      	b.n	8004444 <HAL_QSPI_Command+0xb4>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d137      	bne.n	8004436 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	2200      	movs	r2, #0
 80043dc:	2120      	movs	r1, #32
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 facd 	bl	800497e <QSPI_WaitFlagStateUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d125      	bne.n	800443a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80043ee:	2200      	movs	r2, #0
 80043f0:	68b9      	ldr	r1, [r7, #8]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fafa 	bl	80049ec <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d115      	bne.n	800442c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2201      	movs	r2, #1
 8004408:	2102      	movs	r1, #2
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fab7 	bl	800497e <QSPI_WaitFlagStateUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10f      	bne.n	800443a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2202      	movs	r2, #2
 8004420:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800442a:	e006      	b.n	800443a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004434:	e001      	b.n	800443a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004436:	2302      	movs	r3, #2
 8004438:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004442:	7dfb      	ldrb	r3, [r7, #23]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800445c:	f7fc f920 	bl	80006a0 <HAL_GetTick>
 8004460:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3320      	adds	r3, #32
 8004468:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_QSPI_Transmit+0x2e>
 8004476:	2302      	movs	r3, #2
 8004478:	e076      	b.n	8004568 <HAL_QSPI_Transmit+0x11c>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d165      	bne.n	800455a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d056      	beq.n	8004548 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2212      	movs	r2, #18
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80044ce:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80044d0:	e01b      	b.n	800450a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2201      	movs	r2, #1
 80044da:	2104      	movs	r1, #4
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fa4e 	bl	800497e <QSPI_WaitFlagStateUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80044e6:	7ffb      	ldrb	r3, [r7, #31]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d113      	bne.n	8004514 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	1e5a      	subs	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1df      	bne.n	80044d2 <HAL_QSPI_Transmit+0x86>
 8004512:	e000      	b.n	8004516 <HAL_QSPI_Transmit+0xca>
          break;
 8004514:	bf00      	nop
      }

      if (status == HAL_OK)
 8004516:	7ffb      	ldrb	r3, [r7, #31]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d110      	bne.n	800453e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2201      	movs	r2, #1
 8004524:	2102      	movs	r1, #2
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fa29 	bl	800497e <QSPI_WaitFlagStateUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004530:	7ffb      	ldrb	r3, [r7, #31]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2202      	movs	r2, #2
 800453c:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004546:	e00a      	b.n	800455e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454c:	f043 0208 	orr.w	r2, r3, #8
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e001      	b.n	800455e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800455a:	2302      	movs	r3, #2
 800455c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8004566:	7ffb      	ldrb	r3, [r7, #31]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	; 0x28
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004580:	f7fc f88e 	bl	80006a0 <HAL_GetTick>
 8004584:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3320      	adds	r3, #32
 8004594:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_QSPI_Receive+0x36>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e07d      	b.n	80046a2 <HAL_QSPI_Receive+0x132>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d16c      	bne.n	8004694 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d05d      	beq.n	8004682 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2222      	movs	r2, #34	; 0x22
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80045fe:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004608:	e01c      	b.n	8004644 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2201      	movs	r2, #1
 8004612:	2106      	movs	r1, #6
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f9b2 	bl	800497e <QSPI_WaitFlagStateUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800461e:	7ffb      	ldrb	r3, [r7, #31]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d114      	bne.n	800464e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	7812      	ldrb	r2, [r2, #0]
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	1e5a      	subs	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1de      	bne.n	800460a <HAL_QSPI_Receive+0x9a>
 800464c:	e000      	b.n	8004650 <HAL_QSPI_Receive+0xe0>
          break;
 800464e:	bf00      	nop
      }

      if (status == HAL_OK)
 8004650:	7ffb      	ldrb	r3, [r7, #31]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d110      	bne.n	8004678 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2201      	movs	r2, #1
 800465e:	2102      	movs	r1, #2
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f98c 	bl	800497e <QSPI_WaitFlagStateUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800466a:	7ffb      	ldrb	r3, [r7, #31]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d103      	bne.n	8004678 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2202      	movs	r2, #2
 8004676:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004680:	e00a      	b.n	8004698 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f043 0208 	orr.w	r2, r3, #8
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	77fb      	strb	r3, [r7, #31]
 8004692:	e001      	b.n	8004698 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004694:	2302      	movs	r3, #2
 8004696:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80046a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b088      	sub	sp, #32
 80046ae:	af02      	add	r7, sp, #8
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80046b8:	f7fb fff2 	bl	80006a0 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_QSPI_AutoPolling+0x24>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e060      	b.n	8004790 <HAL_QSPI_AutoPolling+0xe6>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d14f      	bne.n	8004782 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2242      	movs	r2, #66	; 0x42
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	2200      	movs	r2, #0
 80046f8:	2120      	movs	r1, #32
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f93f 	bl	800497e <QSPI_WaitFlagStateUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d13d      	bne.n	8004786 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6852      	ldr	r2, [r2, #4]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6892      	ldr	r2, [r2, #8]
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	431a      	orrs	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004740:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800474a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f94b 	bl	80049ec <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2201      	movs	r2, #1
 800475e:	2108      	movs	r1, #8
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f90c 	bl	800497e <QSPI_WaitFlagStateUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2208      	movs	r2, #8
 8004776:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004780:	e001      	b.n	8004786 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004782:	2302      	movs	r3, #2
 8004784:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800478e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7fb ff7c 	bl	80006a0 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_QSPI_MemoryMapped+0x22>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e04c      	b.n	8004854 <HAL_QSPI_MemoryMapped+0xbc>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d13b      	bne.n	8004846 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2282      	movs	r2, #130	; 0x82
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2120      	movs	r1, #32
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f8c8 	bl	800497e <QSPI_WaitFlagStateUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d128      	bne.n	800484a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 0108 	bic.w	r1, r3, #8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b08      	cmp	r3, #8
 8004814:	d110      	bne.n	8004838 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2210      	movs	r2, #16
 8004826:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004836:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8004838:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f8d4 	bl	80049ec <QSPI_Config>
 8004844:	e001      	b.n	800484a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004846:	2302      	movs	r3, #2
 8004848:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004852:	7dfb      	ldrb	r3, [r7, #23]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b08      	cmp	r3, #8
 800493c:	d114      	bne.n	8004968 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2202      	movs	r2, #2
 8004944:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004954:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0202 	orr.w	r2, r2, #2
 8004964:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8004966:	e006      	b.n	8004976 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff ff73 	bl	800485c <HAL_QSPI_ErrorCallback>
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800498e:	e01a      	b.n	80049c6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d016      	beq.n	80049c6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004998:	f7fb fe82 	bl	80006a0 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d302      	bcc.n	80049ae <QSPI_WaitFlagStateUntilTimeout+0x30>
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10b      	bne.n	80049c6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2204      	movs	r2, #4
 80049b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ba:	f043 0201 	orr.w	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e00e      	b.n	80049e4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d1d6      	bne.n	8004990 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <QSPI_Config+0x28>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a06:	d005      	beq.n	8004a14 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3a01      	subs	r2, #1
 8004a12:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80b9 	beq.w	8004b90 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d05f      	beq.n	8004ae6 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	6892      	ldr	r2, [r2, #8]
 8004a2e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d031      	beq.n	8004a9c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	431a      	orrs	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	049b      	lsls	r3, r3, #18
 8004a54:	431a      	orrs	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	ea42 0103 	orr.w	r1, r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a8c:	f000 812e 	beq.w	8004cec <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	6852      	ldr	r2, [r2, #4]
 8004a98:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004a9a:	e127      	b.n	8004cec <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	049b      	lsls	r3, r3, #18
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	ea42 0103 	orr.w	r1, r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	615a      	str	r2, [r3, #20]
}
 8004ae4:	e102      	b.n	8004cec <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d02e      	beq.n	8004b4c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	431a      	orrs	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	049b      	lsls	r3, r3, #18
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	431a      	orrs	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	ea42 0103 	orr.w	r1, r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004b3c:	f000 80d6 	beq.w	8004cec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	6852      	ldr	r2, [r2, #4]
 8004b48:	619a      	str	r2, [r3, #24]
}
 8004b4a:	e0cf      	b.n	8004cec <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	431a      	orrs	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	431a      	orrs	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	049b      	lsls	r3, r3, #18
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	ea42 0103 	orr.w	r1, r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	615a      	str	r2, [r3, #20]
}
 8004b8e:	e0ad      	b.n	8004cec <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d058      	beq.n	8004c4a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	6892      	ldr	r2, [r2, #8]
 8004ba0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d02d      	beq.n	8004c06 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	049b      	lsls	r3, r3, #18
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	ea42 0103 	orr.w	r1, r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004bf8:	d078      	beq.n	8004cec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	6852      	ldr	r2, [r2, #4]
 8004c02:	619a      	str	r2, [r3, #24]
}
 8004c04:	e072      	b.n	8004cec <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	049b      	lsls	r3, r3, #18
 8004c22:	431a      	orrs	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	431a      	orrs	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	ea42 0103 	orr.w	r1, r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	615a      	str	r2, [r3, #20]
}
 8004c48:	e050      	b.n	8004cec <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d02a      	beq.n	8004ca8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	431a      	orrs	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	049b      	lsls	r3, r3, #18
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	ea42 0103 	orr.w	r1, r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004c9a:	d027      	beq.n	8004cec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	6852      	ldr	r2, [r2, #4]
 8004ca4:	619a      	str	r2, [r3, #24]
}
 8004ca6:	e021      	b.n	8004cec <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01d      	beq.n	8004cec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	049b      	lsls	r3, r3, #18
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	ea42 0103 	orr.w	r1, r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	615a      	str	r2, [r3, #20]
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004d00:	2300      	movs	r3, #0
 8004d02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e29b      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8087 	beq.w	8004e2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d1c:	4b96      	ldr	r3, [pc, #600]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 030c 	and.w	r3, r3, #12
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d00c      	beq.n	8004d42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d28:	4b93      	ldr	r3, [pc, #588]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d112      	bne.n	8004d5a <HAL_RCC_OscConfig+0x62>
 8004d34:	4b90      	ldr	r3, [pc, #576]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d40:	d10b      	bne.n	8004d5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d42:	4b8d      	ldr	r3, [pc, #564]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d06c      	beq.n	8004e28 <HAL_RCC_OscConfig+0x130>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d168      	bne.n	8004e28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e275      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d62:	d106      	bne.n	8004d72 <HAL_RCC_OscConfig+0x7a>
 8004d64:	4b84      	ldr	r3, [pc, #528]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a83      	ldr	r2, [pc, #524]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	e02e      	b.n	8004dd0 <HAL_RCC_OscConfig+0xd8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x9c>
 8004d7a:	4b7f      	ldr	r3, [pc, #508]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a7e      	ldr	r2, [pc, #504]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	4b7c      	ldr	r3, [pc, #496]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7b      	ldr	r2, [pc, #492]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	e01d      	b.n	8004dd0 <HAL_RCC_OscConfig+0xd8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCC_OscConfig+0xc0>
 8004d9e:	4b76      	ldr	r3, [pc, #472]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a75      	ldr	r2, [pc, #468]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	4b73      	ldr	r3, [pc, #460]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a72      	ldr	r2, [pc, #456]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	e00b      	b.n	8004dd0 <HAL_RCC_OscConfig+0xd8>
 8004db8:	4b6f      	ldr	r3, [pc, #444]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a6e      	ldr	r2, [pc, #440]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	4b6c      	ldr	r3, [pc, #432]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a6b      	ldr	r2, [pc, #428]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d013      	beq.n	8004e00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fb fc62 	bl	80006a0 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004de0:	f7fb fc5e 	bl	80006a0 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	; 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e229      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df2:	4b61      	ldr	r3, [pc, #388]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0xe8>
 8004dfe:	e014      	b.n	8004e2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fb fc4e 	bl	80006a0 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fb fc4a 	bl	80006a0 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	; 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e215      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e1a:	4b57      	ldr	r3, [pc, #348]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0x110>
 8004e26:	e000      	b.n	8004e2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d069      	beq.n	8004f0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e36:	4b50      	ldr	r3, [pc, #320]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e42:	4b4d      	ldr	r3, [pc, #308]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d11c      	bne.n	8004e88 <HAL_RCC_OscConfig+0x190>
 8004e4e:	4b4a      	ldr	r3, [pc, #296]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d116      	bne.n	8004e88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_RCC_OscConfig+0x17a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d001      	beq.n	8004e72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e1e9      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e72:	4b41      	ldr	r3, [pc, #260]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	493d      	ldr	r1, [pc, #244]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e86:	e040      	b.n	8004f0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d023      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e90:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a38      	ldr	r2, [pc, #224]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fb fc00 	bl	80006a0 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea4:	f7fb fbfc 	bl	80006a0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e1c7      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb6:	4b30      	ldr	r3, [pc, #192]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec2:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4929      	ldr	r1, [pc, #164]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]
 8004ed6:	e018      	b.n	8004f0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ed8:	4b27      	ldr	r3, [pc, #156]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a26      	ldr	r2, [pc, #152]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7fb fbdc 	bl	80006a0 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eec:	f7fb fbd8 	bl	80006a0 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e1a3      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	4b1e      	ldr	r3, [pc, #120]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d038      	beq.n	8004f88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d019      	beq.n	8004f52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1e:	4b16      	ldr	r3, [pc, #88]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f22:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2a:	f7fb fbb9 	bl	80006a0 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f32:	f7fb fbb5 	bl	80006a0 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e180      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x23a>
 8004f50:	e01a      	b.n	8004f88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f52:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f56:	4a08      	ldr	r2, [pc, #32]	; (8004f78 <HAL_RCC_OscConfig+0x280>)
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5e:	f7fb fb9f 	bl	80006a0 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f64:	e00a      	b.n	8004f7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f66:	f7fb fb9b 	bl	80006a0 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d903      	bls.n	8004f7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e166      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
 8004f78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f7c:	4b92      	ldr	r3, [pc, #584]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8004f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1ee      	bne.n	8004f66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80a4 	beq.w	80050de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f96:	4b8c      	ldr	r3, [pc, #560]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10d      	bne.n	8004fbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa2:	4b89      	ldr	r3, [pc, #548]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	4a88      	ldr	r2, [pc, #544]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8004fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fac:	6413      	str	r3, [r2, #64]	; 0x40
 8004fae:	4b86      	ldr	r3, [pc, #536]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	60bb      	str	r3, [r7, #8]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fbe:	4b83      	ldr	r3, [pc, #524]	; (80051cc <HAL_RCC_OscConfig+0x4d4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d118      	bne.n	8004ffc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004fca:	4b80      	ldr	r3, [pc, #512]	; (80051cc <HAL_RCC_OscConfig+0x4d4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a7f      	ldr	r2, [pc, #508]	; (80051cc <HAL_RCC_OscConfig+0x4d4>)
 8004fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd6:	f7fb fb63 	bl	80006a0 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fde:	f7fb fb5f 	bl	80006a0 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b64      	cmp	r3, #100	; 0x64
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e12a      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff0:	4b76      	ldr	r3, [pc, #472]	; (80051cc <HAL_RCC_OscConfig+0x4d4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d106      	bne.n	8005012 <HAL_RCC_OscConfig+0x31a>
 8005004:	4b70      	ldr	r3, [pc, #448]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	4a6f      	ldr	r2, [pc, #444]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	6713      	str	r3, [r2, #112]	; 0x70
 8005010:	e02d      	b.n	800506e <HAL_RCC_OscConfig+0x376>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10c      	bne.n	8005034 <HAL_RCC_OscConfig+0x33c>
 800501a:	4b6b      	ldr	r3, [pc, #428]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	4a6a      	ldr	r2, [pc, #424]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005020:	f023 0301 	bic.w	r3, r3, #1
 8005024:	6713      	str	r3, [r2, #112]	; 0x70
 8005026:	4b68      	ldr	r3, [pc, #416]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	4a67      	ldr	r2, [pc, #412]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 800502c:	f023 0304 	bic.w	r3, r3, #4
 8005030:	6713      	str	r3, [r2, #112]	; 0x70
 8005032:	e01c      	b.n	800506e <HAL_RCC_OscConfig+0x376>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b05      	cmp	r3, #5
 800503a:	d10c      	bne.n	8005056 <HAL_RCC_OscConfig+0x35e>
 800503c:	4b62      	ldr	r3, [pc, #392]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	4a61      	ldr	r2, [pc, #388]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005042:	f043 0304 	orr.w	r3, r3, #4
 8005046:	6713      	str	r3, [r2, #112]	; 0x70
 8005048:	4b5f      	ldr	r3, [pc, #380]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 800504a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504c:	4a5e      	ldr	r2, [pc, #376]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	6713      	str	r3, [r2, #112]	; 0x70
 8005054:	e00b      	b.n	800506e <HAL_RCC_OscConfig+0x376>
 8005056:	4b5c      	ldr	r3, [pc, #368]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	4a5b      	ldr	r2, [pc, #364]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	6713      	str	r3, [r2, #112]	; 0x70
 8005062:	4b59      	ldr	r3, [pc, #356]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	4a58      	ldr	r2, [pc, #352]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005068:	f023 0304 	bic.w	r3, r3, #4
 800506c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d015      	beq.n	80050a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005076:	f7fb fb13 	bl	80006a0 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507c:	e00a      	b.n	8005094 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507e:	f7fb fb0f 	bl	80006a0 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	f241 3288 	movw	r2, #5000	; 0x1388
 800508c:	4293      	cmp	r3, r2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e0d8      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005094:	4b4c      	ldr	r3, [pc, #304]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0ee      	beq.n	800507e <HAL_RCC_OscConfig+0x386>
 80050a0:	e014      	b.n	80050cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a2:	f7fb fafd 	bl	80006a0 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050a8:	e00a      	b.n	80050c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050aa:	f7fb faf9 	bl	80006a0 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e0c2      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c0:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1ee      	bne.n	80050aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d105      	bne.n	80050de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d2:	4b3d      	ldr	r3, [pc, #244]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	4a3c      	ldr	r2, [pc, #240]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 80050d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 80ae 	beq.w	8005244 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050e8:	4b37      	ldr	r3, [pc, #220]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 030c 	and.w	r3, r3, #12
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d06d      	beq.n	80051d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d14b      	bne.n	8005194 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fc:	4b32      	ldr	r3, [pc, #200]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a31      	ldr	r2, [pc, #196]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fb faca 	bl	80006a0 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005110:	f7fb fac6 	bl	80006a0 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e091      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005122:	4b29      	ldr	r3, [pc, #164]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	019b      	lsls	r3, r3, #6
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	085b      	lsrs	r3, r3, #1
 8005146:	3b01      	subs	r3, #1
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	071b      	lsls	r3, r3, #28
 800515a:	491b      	ldr	r1, [pc, #108]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 800515c:	4313      	orrs	r3, r2
 800515e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800516a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516c:	f7fb fa98 	bl	80006a0 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005174:	f7fb fa94 	bl	80006a0 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e05f      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005186:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f0      	beq.n	8005174 <HAL_RCC_OscConfig+0x47c>
 8005192:	e057      	b.n	8005244 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a0b      	ldr	r2, [pc, #44]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 800519a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800519e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fb fa7e 	bl	80006a0 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a8:	f7fb fa7a 	bl	80006a0 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e045      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ba:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <HAL_RCC_OscConfig+0x4d0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x4b0>
 80051c6:	e03d      	b.n	8005244 <HAL_RCC_OscConfig+0x54c>
 80051c8:	40023800 	.word	0x40023800
 80051cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80051d0:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <HAL_RCC_OscConfig+0x558>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d030      	beq.n	8005240 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d129      	bne.n	8005240 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d122      	bne.n	8005240 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005200:	4013      	ands	r3, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005206:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005208:	4293      	cmp	r3, r2
 800520a:	d119      	bne.n	8005240 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	085b      	lsrs	r3, r3, #1
 8005218:	3b01      	subs	r3, #1
 800521a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800521c:	429a      	cmp	r2, r3
 800521e:	d10f      	bne.n	8005240 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800522c:	429a      	cmp	r2, r3
 800522e:	d107      	bne.n	8005240 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800523c:	429a      	cmp	r2, r3
 800523e:	d001      	beq.n	8005244 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800

08005254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0d0      	b.n	800540e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b6a      	ldr	r3, [pc, #424]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d910      	bls.n	800529c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b67      	ldr	r3, [pc, #412]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 020f 	bic.w	r2, r3, #15
 8005282:	4965      	ldr	r1, [pc, #404]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b63      	ldr	r3, [pc, #396]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0b8      	b.n	800540e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d020      	beq.n	80052ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052b4:	4b59      	ldr	r3, [pc, #356]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4a58      	ldr	r2, [pc, #352]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80052ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052cc:	4b53      	ldr	r3, [pc, #332]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4a52      	ldr	r2, [pc, #328]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80052d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d8:	4b50      	ldr	r3, [pc, #320]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	494d      	ldr	r1, [pc, #308]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d040      	beq.n	8005378 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d107      	bne.n	800530e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fe:	4b47      	ldr	r3, [pc, #284]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d115      	bne.n	8005336 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e07f      	b.n	800540e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d107      	bne.n	8005326 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005316:	4b41      	ldr	r3, [pc, #260]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e073      	b.n	800540e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005326:	4b3d      	ldr	r3, [pc, #244]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e06b      	b.n	800540e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005336:	4b39      	ldr	r3, [pc, #228]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f023 0203 	bic.w	r2, r3, #3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	4936      	ldr	r1, [pc, #216]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 8005344:	4313      	orrs	r3, r2
 8005346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005348:	f7fb f9aa 	bl	80006a0 <HAL_GetTick>
 800534c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534e:	e00a      	b.n	8005366 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005350:	f7fb f9a6 	bl	80006a0 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	; 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e053      	b.n	800540e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005366:	4b2d      	ldr	r3, [pc, #180]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 020c 	and.w	r2, r3, #12
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	429a      	cmp	r2, r3
 8005376:	d1eb      	bne.n	8005350 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005378:	4b27      	ldr	r3, [pc, #156]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d210      	bcs.n	80053a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b24      	ldr	r3, [pc, #144]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f023 020f 	bic.w	r2, r3, #15
 800538e:	4922      	ldr	r1, [pc, #136]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005396:	4b20      	ldr	r3, [pc, #128]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d001      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e032      	b.n	800540e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d008      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b4:	4b19      	ldr	r3, [pc, #100]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4916      	ldr	r1, [pc, #88]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053d2:	4b12      	ldr	r3, [pc, #72]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	490e      	ldr	r1, [pc, #56]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053e6:	f000 f821 	bl	800542c <HAL_RCC_GetSysClockFreq>
 80053ea:	4601      	mov	r1, r0
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	4a0a      	ldr	r2, [pc, #40]	; (8005420 <HAL_RCC_ClockConfig+0x1cc>)
 80053f8:	5cd3      	ldrb	r3, [r2, r3]
 80053fa:	fa21 f303 	lsr.w	r3, r1, r3
 80053fe:	4a09      	ldr	r2, [pc, #36]	; (8005424 <HAL_RCC_ClockConfig+0x1d0>)
 8005400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <HAL_RCC_ClockConfig+0x1d4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f7fb f906 	bl	8000618 <HAL_InitTick>

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40023c00 	.word	0x40023c00
 800541c:	40023800 	.word	0x40023800
 8005420:	0801a59c 	.word	0x0801a59c
 8005424:	20000010 	.word	0x20000010
 8005428:	20000004 	.word	0x20000004

0800542c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800542c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	2300      	movs	r3, #0
 800543c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005442:	4b50      	ldr	r3, [pc, #320]	; (8005584 <HAL_RCC_GetSysClockFreq+0x158>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b04      	cmp	r3, #4
 800544c:	d007      	beq.n	800545e <HAL_RCC_GetSysClockFreq+0x32>
 800544e:	2b08      	cmp	r3, #8
 8005450:	d008      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x38>
 8005452:	2b00      	cmp	r3, #0
 8005454:	f040 808d 	bne.w	8005572 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005458:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <HAL_RCC_GetSysClockFreq+0x15c>)
 800545a:	60bb      	str	r3, [r7, #8]
      break;
 800545c:	e08c      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800545e:	4b4b      	ldr	r3, [pc, #300]	; (800558c <HAL_RCC_GetSysClockFreq+0x160>)
 8005460:	60bb      	str	r3, [r7, #8]
      break;
 8005462:	e089      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005464:	4b47      	ldr	r3, [pc, #284]	; (8005584 <HAL_RCC_GetSysClockFreq+0x158>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800546c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800546e:	4b45      	ldr	r3, [pc, #276]	; (8005584 <HAL_RCC_GetSysClockFreq+0x158>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d023      	beq.n	80054c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800547a:	4b42      	ldr	r3, [pc, #264]	; (8005584 <HAL_RCC_GetSysClockFreq+0x158>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	099b      	lsrs	r3, r3, #6
 8005480:	f04f 0400 	mov.w	r4, #0
 8005484:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	ea03 0501 	and.w	r5, r3, r1
 8005490:	ea04 0602 	and.w	r6, r4, r2
 8005494:	4a3d      	ldr	r2, [pc, #244]	; (800558c <HAL_RCC_GetSysClockFreq+0x160>)
 8005496:	fb02 f106 	mul.w	r1, r2, r6
 800549a:	2200      	movs	r2, #0
 800549c:	fb02 f205 	mul.w	r2, r2, r5
 80054a0:	440a      	add	r2, r1
 80054a2:	493a      	ldr	r1, [pc, #232]	; (800558c <HAL_RCC_GetSysClockFreq+0x160>)
 80054a4:	fba5 0101 	umull	r0, r1, r5, r1
 80054a8:	1853      	adds	r3, r2, r1
 80054aa:	4619      	mov	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f04f 0400 	mov.w	r4, #0
 80054b2:	461a      	mov	r2, r3
 80054b4:	4623      	mov	r3, r4
 80054b6:	f7fa ff13 	bl	80002e0 <__aeabi_uldivmod>
 80054ba:	4603      	mov	r3, r0
 80054bc:	460c      	mov	r4, r1
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	e049      	b.n	8005556 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054c2:	4b30      	ldr	r3, [pc, #192]	; (8005584 <HAL_RCC_GetSysClockFreq+0x158>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	099b      	lsrs	r3, r3, #6
 80054c8:	f04f 0400 	mov.w	r4, #0
 80054cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	ea03 0501 	and.w	r5, r3, r1
 80054d8:	ea04 0602 	and.w	r6, r4, r2
 80054dc:	4629      	mov	r1, r5
 80054de:	4632      	mov	r2, r6
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	f04f 0400 	mov.w	r4, #0
 80054e8:	0154      	lsls	r4, r2, #5
 80054ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054ee:	014b      	lsls	r3, r1, #5
 80054f0:	4619      	mov	r1, r3
 80054f2:	4622      	mov	r2, r4
 80054f4:	1b49      	subs	r1, r1, r5
 80054f6:	eb62 0206 	sbc.w	r2, r2, r6
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	f04f 0400 	mov.w	r4, #0
 8005502:	0194      	lsls	r4, r2, #6
 8005504:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005508:	018b      	lsls	r3, r1, #6
 800550a:	1a5b      	subs	r3, r3, r1
 800550c:	eb64 0402 	sbc.w	r4, r4, r2
 8005510:	f04f 0100 	mov.w	r1, #0
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	00e2      	lsls	r2, r4, #3
 800551a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800551e:	00d9      	lsls	r1, r3, #3
 8005520:	460b      	mov	r3, r1
 8005522:	4614      	mov	r4, r2
 8005524:	195b      	adds	r3, r3, r5
 8005526:	eb44 0406 	adc.w	r4, r4, r6
 800552a:	f04f 0100 	mov.w	r1, #0
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	02a2      	lsls	r2, r4, #10
 8005534:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005538:	0299      	lsls	r1, r3, #10
 800553a:	460b      	mov	r3, r1
 800553c:	4614      	mov	r4, r2
 800553e:	4618      	mov	r0, r3
 8005540:	4621      	mov	r1, r4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f04f 0400 	mov.w	r4, #0
 8005548:	461a      	mov	r2, r3
 800554a:	4623      	mov	r3, r4
 800554c:	f7fa fec8 	bl	80002e0 <__aeabi_uldivmod>
 8005550:	4603      	mov	r3, r0
 8005552:	460c      	mov	r4, r1
 8005554:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_GetSysClockFreq+0x158>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	0c1b      	lsrs	r3, r3, #16
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	3301      	adds	r3, #1
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	fbb2 f3f3 	udiv	r3, r2, r3
 800556e:	60bb      	str	r3, [r7, #8]
      break;
 8005570:	e002      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005574:	60bb      	str	r3, [r7, #8]
      break;
 8005576:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005578:	68bb      	ldr	r3, [r7, #8]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005582:	bf00      	nop
 8005584:	40023800 	.word	0x40023800
 8005588:	00f42400 	.word	0x00f42400
 800558c:	017d7840 	.word	0x017d7840

08005590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d012      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055b8:	4b69      	ldr	r3, [pc, #420]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4a68      	ldr	r2, [pc, #416]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055c2:	6093      	str	r3, [r2, #8]
 80055c4:	4b66      	ldr	r3, [pc, #408]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	4964      	ldr	r1, [pc, #400]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80055da:	2301      	movs	r3, #1
 80055dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d017      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055ea:	4b5d      	ldr	r3, [pc, #372]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f8:	4959      	ldr	r1, [pc, #356]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005608:	d101      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800560a:	2301      	movs	r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005616:	2301      	movs	r3, #1
 8005618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d017      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005626:	4b4e      	ldr	r3, [pc, #312]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800562c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	494a      	ldr	r1, [pc, #296]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005644:	d101      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005646:	2301      	movs	r3, #1
 8005648:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005652:	2301      	movs	r3, #1
 8005654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005662:	2301      	movs	r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 808b 	beq.w	800578a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005674:	4b3a      	ldr	r3, [pc, #232]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	4a39      	ldr	r2, [pc, #228]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800567a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567e:	6413      	str	r3, [r2, #64]	; 0x40
 8005680:	4b37      	ldr	r3, [pc, #220]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800568c:	4b35      	ldr	r3, [pc, #212]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a34      	ldr	r2, [pc, #208]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005698:	f7fb f802 	bl	80006a0 <HAL_GetTick>
 800569c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a0:	f7fa fffe 	bl	80006a0 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b64      	cmp	r3, #100	; 0x64
 80056ac:	d901      	bls.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e38d      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056b2:	4b2c      	ldr	r3, [pc, #176]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056be:	4b28      	ldr	r3, [pc, #160]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d035      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d02e      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056dc:	4b20      	ldr	r3, [pc, #128]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056e6:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ea:	4a1d      	ldr	r2, [pc, #116]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056f2:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056fe:	4a18      	ldr	r2, [pc, #96]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005704:	4b16      	ldr	r3, [pc, #88]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b01      	cmp	r3, #1
 800570e:	d114      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fa ffc6 	bl	80006a0 <HAL_GetTick>
 8005714:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005716:	e00a      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005718:	f7fa ffc2 	bl	80006a0 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	f241 3288 	movw	r2, #5000	; 0x1388
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e34f      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572e:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0ee      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005746:	d111      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005754:	4b04      	ldr	r3, [pc, #16]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005756:	400b      	ands	r3, r1
 8005758:	4901      	ldr	r1, [pc, #4]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
 800575e:	e00b      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005760:	40023800 	.word	0x40023800
 8005764:	40007000 	.word	0x40007000
 8005768:	0ffffcff 	.word	0x0ffffcff
 800576c:	4bb3      	ldr	r3, [pc, #716]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	4ab2      	ldr	r2, [pc, #712]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005772:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005776:	6093      	str	r3, [r2, #8]
 8005778:	4bb0      	ldr	r3, [pc, #704]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800577a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005784:	49ad      	ldr	r1, [pc, #692]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005786:	4313      	orrs	r3, r2
 8005788:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b00      	cmp	r3, #0
 8005794:	d010      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005796:	4ba9      	ldr	r3, [pc, #676]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800579c:	4aa7      	ldr	r2, [pc, #668]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800579e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80057a6:	4ba5      	ldr	r3, [pc, #660]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	49a2      	ldr	r1, [pc, #648]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c4:	4b9d      	ldr	r3, [pc, #628]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057d2:	499a      	ldr	r1, [pc, #616]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057e6:	4b95      	ldr	r3, [pc, #596]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057f4:	4991      	ldr	r1, [pc, #580]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005808:	4b8c      	ldr	r3, [pc, #560]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005816:	4989      	ldr	r1, [pc, #548]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800582a:	4b84      	ldr	r3, [pc, #528]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005830:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005838:	4980      	ldr	r1, [pc, #512]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800584c:	4b7b      	ldr	r3, [pc, #492]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005852:	f023 0203 	bic.w	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585a:	4978      	ldr	r1, [pc, #480]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800586e:	4b73      	ldr	r3, [pc, #460]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005874:	f023 020c 	bic.w	r2, r3, #12
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587c:	496f      	ldr	r1, [pc, #444]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005890:	4b6a      	ldr	r3, [pc, #424]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005896:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589e:	4967      	ldr	r1, [pc, #412]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058b2:	4b62      	ldr	r3, [pc, #392]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c0:	495e      	ldr	r1, [pc, #376]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058d4:	4b59      	ldr	r3, [pc, #356]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e2:	4956      	ldr	r1, [pc, #344]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058f6:	4b51      	ldr	r3, [pc, #324]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005904:	494d      	ldr	r1, [pc, #308]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005918:	4b48      	ldr	r3, [pc, #288]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005926:	4945      	ldr	r1, [pc, #276]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800593a:	4b40      	ldr	r3, [pc, #256]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005940:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005948:	493c      	ldr	r1, [pc, #240]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800595c:	4b37      	ldr	r3, [pc, #220]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800595e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005962:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800596a:	4934      	ldr	r1, [pc, #208]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d011      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800597e:	4b2f      	ldr	r3, [pc, #188]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005984:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598c:	492b      	ldr	r1, [pc, #172]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800599c:	d101      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800599e:	2301      	movs	r3, #1
 80059a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80059ae:	2301      	movs	r3, #1
 80059b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059be:	4b1f      	ldr	r3, [pc, #124]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059cc:	491b      	ldr	r1, [pc, #108]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059e0:	4b16      	ldr	r3, [pc, #88]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059f0:	4912      	ldr	r1, [pc, #72]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a04:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a14:	4909      	ldr	r1, [pc, #36]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00f      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a28:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	e002      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005a3a:	bf00      	nop
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	4985      	ldr	r1, [pc, #532]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00b      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a54:	4b80      	ldr	r3, [pc, #512]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a64:	497c      	ldr	r1, [pc, #496]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d005      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a7a:	f040 80d6 	bne.w	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a7e:	4b76      	ldr	r3, [pc, #472]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a75      	ldr	r2, [pc, #468]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a8a:	f7fa fe09 	bl	80006a0 <HAL_GetTick>
 8005a8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a92:	f7fa fe05 	bl	80006a0 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b64      	cmp	r3, #100	; 0x64
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e194      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aa4:	4b6c      	ldr	r3, [pc, #432]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f0      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d021      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d11d      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ac4:	4b64      	ldr	r3, [pc, #400]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aca:	0c1b      	lsrs	r3, r3, #16
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ad2:	4b61      	ldr	r3, [pc, #388]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ad8:	0e1b      	lsrs	r3, r3, #24
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	019a      	lsls	r2, r3, #6
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	041b      	lsls	r3, r3, #16
 8005aea:	431a      	orrs	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	061b      	lsls	r3, r3, #24
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	071b      	lsls	r3, r3, #28
 8005af8:	4957      	ldr	r1, [pc, #348]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b14:	d00a      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d02e      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b2a:	d129      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b2c:	4b4a      	ldr	r3, [pc, #296]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b3a:	4b47      	ldr	r3, [pc, #284]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b40:	0f1b      	lsrs	r3, r3, #28
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	019a      	lsls	r2, r3, #6
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	041b      	lsls	r3, r3, #16
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	061b      	lsls	r3, r3, #24
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	071b      	lsls	r3, r3, #28
 8005b60:	493d      	ldr	r1, [pc, #244]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b68:	4b3b      	ldr	r3, [pc, #236]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6e:	f023 021f 	bic.w	r2, r3, #31
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	3b01      	subs	r3, #1
 8005b78:	4937      	ldr	r1, [pc, #220]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01d      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b8c:	4b32      	ldr	r3, [pc, #200]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b92:	0e1b      	lsrs	r3, r3, #24
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b9a:	4b2f      	ldr	r3, [pc, #188]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba0:	0f1b      	lsrs	r3, r3, #28
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	019a      	lsls	r2, r3, #6
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	061b      	lsls	r3, r3, #24
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	071b      	lsls	r3, r3, #28
 8005bc0:	4925      	ldr	r1, [pc, #148]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d011      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	019a      	lsls	r2, r3, #6
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	041b      	lsls	r3, r3, #16
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	061b      	lsls	r3, r3, #24
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	071b      	lsls	r3, r3, #28
 8005bf0:	4919      	ldr	r1, [pc, #100]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bf8:	4b17      	ldr	r3, [pc, #92]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a16      	ldr	r2, [pc, #88]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005bfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c04:	f7fa fd4c 	bl	80006a0 <HAL_GetTick>
 8005c08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c0c:	f7fa fd48 	bl	80006a0 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b64      	cmp	r3, #100	; 0x64
 8005c18:	d901      	bls.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e0d7      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c1e:	4b0e      	ldr	r3, [pc, #56]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f0      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	f040 80cd 	bne.w	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c32:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a08      	ldr	r2, [pc, #32]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c3e:	f7fa fd2f 	bl	80006a0 <HAL_GetTick>
 8005c42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c44:	e00a      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c46:	f7fa fd2b 	bl	80006a0 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b64      	cmp	r3, #100	; 0x64
 8005c52:	d903      	bls.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e0ba      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005c58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c5c:	4b5e      	ldr	r3, [pc, #376]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c68:	d0ed      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d02e      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d12a      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c92:	4b51      	ldr	r3, [pc, #324]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c98:	0c1b      	lsrs	r3, r3, #16
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ca0:	4b4d      	ldr	r3, [pc, #308]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca6:	0f1b      	lsrs	r3, r3, #28
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	019a      	lsls	r2, r3, #6
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	041b      	lsls	r3, r3, #16
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	061b      	lsls	r3, r3, #24
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	071b      	lsls	r3, r3, #28
 8005cc6:	4944      	ldr	r1, [pc, #272]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cce:	4b42      	ldr	r3, [pc, #264]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	493d      	ldr	r1, [pc, #244]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d022      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cfc:	d11d      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cfe:	4b36      	ldr	r3, [pc, #216]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d04:	0e1b      	lsrs	r3, r3, #24
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d0c:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	0f1b      	lsrs	r3, r3, #28
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	019a      	lsls	r2, r3, #6
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	041b      	lsls	r3, r3, #16
 8005d26:	431a      	orrs	r2, r3
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	061b      	lsls	r3, r3, #24
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	071b      	lsls	r3, r3, #28
 8005d32:	4929      	ldr	r1, [pc, #164]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0308 	and.w	r3, r3, #8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d028      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d46:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4c:	0e1b      	lsrs	r3, r3, #24
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d54:	4b20      	ldr	r3, [pc, #128]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	0c1b      	lsrs	r3, r3, #16
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	019a      	lsls	r2, r3, #6
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	041b      	lsls	r3, r3, #16
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	061b      	lsls	r3, r3, #24
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	071b      	lsls	r3, r3, #28
 8005d7a:	4917      	ldr	r1, [pc, #92]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d82:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	4911      	ldr	r1, [pc, #68]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d98:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a0e      	ldr	r2, [pc, #56]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005da4:	f7fa fc7c 	bl	80006a0 <HAL_GetTick>
 8005da8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005daa:	e008      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005dac:	f7fa fc78 	bl	80006a0 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b64      	cmp	r3, #100	; 0x64
 8005db8:	d901      	bls.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e007      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dca:	d1ef      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	40023800 	.word	0x40023800

08005ddc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e025      	b.n	8005e3c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f004 f8a5 	bl	8009f54 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	f000 f85d 	bl	8005edc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6818      	ldr	r0, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	f000 f8c7 	bl	8005fc0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d101      	bne.n	8005e60 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e018      	b.n	8005e92 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 f925 	bl	80060c0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d104      	bne.n	8005e88 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2205      	movs	r2, #5
 8005e82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005e86:	e003      	b.n	8005e90 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d101      	bne.n	8005eb4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e00e      	b.n	8005ed2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f91d 	bl	8006102 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d027      	beq.n	8005f46 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4b2f      	ldr	r3, [pc, #188]	; (8005fbc <FMC_SDRAM_Init+0xe0>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f0c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005f12:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005f18:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005f1e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005f24:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005f2a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005f30:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005f36:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e032      	b.n	8005fac <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f52:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005f5c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005f62:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <FMC_SDRAM_Init+0xe0>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f80:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8005f86:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8005f8c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005f92:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005f98:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	ffff8000 	.word	0xffff8000

08005fc0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d02e      	beq.n	8006038 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005fe6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ff6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006000:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	3b01      	subs	r3, #1
 8006008:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800600a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	3b01      	subs	r3, #1
 8006012:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006014:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	3b01      	subs	r3, #1
 800601c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800601e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	3b01      	subs	r3, #1
 8006026:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006028:	4313      	orrs	r3, r2
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	609a      	str	r2, [r3, #8]
 8006036:	e039      	b.n	80060ac <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4b1e      	ldr	r3, [pc, #120]	; (80060bc <FMC_SDRAM_Timing_Init+0xfc>)
 8006042:	4013      	ands	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	3b01      	subs	r3, #1
 800604c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	3b01      	subs	r3, #1
 8006054:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006056:	4313      	orrs	r3, r2
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800606a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	3b01      	subs	r3, #1
 8006078:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800607a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	3b01      	subs	r3, #1
 8006082:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006084:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	3b01      	subs	r3, #1
 800608c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800608e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	3b01      	subs	r3, #1
 8006096:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006098:	4313      	orrs	r3, r2
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	ff0f0fff 	.word	0xff0f0fff

080060c0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060d8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	3b01      	subs	r3, #1
 80060e0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80060e2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f043 0201 	orr.w	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f023 0201 	bic.w	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	019b      	lsls	r3, r3, #6
 800617e:	f043 0220 	orr.w	r2, r3, #32
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <USB_FlushTxFifo+0x48>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e006      	b.n	80061a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d0f0      	beq.n	8006186 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	00030d40 	.word	0x00030d40

080061b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2210      	movs	r2, #16
 80061c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3301      	adds	r3, #1
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4a09      	ldr	r2, [pc, #36]	; (80061f8 <USB_FlushRxFifo+0x40>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d901      	bls.n	80061dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e006      	b.n	80061ea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	2b10      	cmp	r3, #16
 80061e6:	d0f0      	beq.n	80061ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	00030d40 	.word	0x00030d40

080061fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b089      	sub	sp, #36	; 0x24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	4613      	mov	r3, r2
 8006208:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	3303      	adds	r3, #3
 8006216:	089b      	lsrs	r3, r3, #2
 8006218:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
 800621e:	e00b      	b.n	8006238 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	601a      	str	r2, [r3, #0]
    pDest++;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3304      	adds	r3, #4
 8006230:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	3301      	adds	r3, #1
 8006236:	61bb      	str	r3, [r7, #24]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	429a      	cmp	r2, r3
 800623e:	d3ef      	bcc.n	8006220 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006240:	69fb      	ldr	r3, [r7, #28]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3724      	adds	r7, #36	; 0x24
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4013      	ands	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006266:	68fb      	ldr	r3, [r7, #12]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	f003 0301 	and.w	r3, r3, #1
}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062ae:	f023 0303 	bic.w	r3, r3, #3
 80062b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	68f9      	ldr	r1, [r7, #12]
 80062c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062c8:	4313      	orrs	r3, r2
 80062ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d107      	bne.n	80062e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062d8:	461a      	mov	r2, r3
 80062da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80062de:	6053      	str	r3, [r2, #4]
 80062e0:	e009      	b.n	80062f6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80062e2:	78fb      	ldrb	r3, [r7, #3]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d106      	bne.n	80062f6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ee:	461a      	mov	r2, r3
 80062f0:	f241 7370 	movw	r3, #6000	; 0x1770
 80062f4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	b29b      	uxth	r3, r3
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006326:	b480      	push	{r7}
 8006328:	b087      	sub	sp, #28
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	460b      	mov	r3, r1
 8006330:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006336:	78fb      	ldrb	r3, [r7, #3]
 8006338:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	4413      	add	r3, r2
 8006346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	0c9b      	lsrs	r3, r3, #18
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <USB_HC_Halt+0x3a>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d16c      	bne.n	800643a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	440a      	add	r2, r1
 8006376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800637a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800637e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d143      	bne.n	8006414 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4413      	add	r3, r2
 8006394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	0151      	lsls	r1, r2, #5
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	440a      	add	r2, r1
 80063a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063ea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	3301      	adds	r3, #1
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063f8:	d81d      	bhi.n	8006436 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	4413      	add	r3, r2
 8006402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800640c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006410:	d0ec      	beq.n	80063ec <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006412:	e080      	b.n	8006516 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	440a      	add	r2, r1
 800642a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800642e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006432:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006434:	e06f      	b.n	8006516 <USB_HC_Halt+0x1f0>
          break;
 8006436:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006438:	e06d      	b.n	8006516 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	0151      	lsls	r1, r2, #5
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	440a      	add	r2, r1
 8006450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006458:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d143      	bne.n	80064f2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	4413      	add	r3, r2
 8006472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	440a      	add	r2, r1
 8006480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006488:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064a8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064c8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	3301      	adds	r3, #1
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064d6:	d81d      	bhi.n	8006514 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ee:	d0ec      	beq.n	80064ca <USB_HC_Halt+0x1a4>
 80064f0:	e011      	b.n	8006516 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	440a      	add	r2, r1
 8006508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800650c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	e000      	b.n	8006516 <USB_HC_Halt+0x1f0>
          break;
 8006514:	bf00      	nop
    }
  }

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff fe08 	bl	800614a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800653a:	2110      	movs	r1, #16
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff fe15 	bl	800616c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff fe38 	bl	80061b8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006548:	2300      	movs	r3, #0
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	e01f      	b.n	800658e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006564:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800656c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006574:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006582:	461a      	mov	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	3301      	adds	r3, #1
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b0f      	cmp	r3, #15
 8006592:	d9dc      	bls.n	800654e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006594:	2300      	movs	r3, #0
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	e034      	b.n	8006604 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065b0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065b8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065c0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ce:	461a      	mov	r2, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	3301      	adds	r3, #1
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065e0:	d80c      	bhi.n	80065fc <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f8:	d0ec      	beq.n	80065d4 <USB_StopHost+0xb0>
 80065fa:	e000      	b.n	80065fe <USB_StopHost+0xda>
        break;
 80065fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3301      	adds	r3, #1
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2b0f      	cmp	r3, #15
 8006608:	d9c7      	bls.n	800659a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006610:	461a      	mov	r2, r3
 8006612:	f04f 33ff 	mov.w	r3, #4294967295
 8006616:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f04f 32ff 	mov.w	r2, #4294967295
 800661e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff fd81 	bl	8006128 <USB_EnableGlobalInt>

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f804 	bl	8006654 <USBH_HandleSof>
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b0b      	cmp	r3, #11
 8006664:	d10a      	bne.n	800667c <USBH_HandleSof+0x28>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
  }
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006694:	bf00      	nop
}
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80066b0:	bf00      	nop
}
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f003 fdac 	bl	800a268 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	791b      	ldrb	r3, [r3, #4]
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f80b 	bl	8006732 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	795b      	ldrb	r3, [r3, #5]
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f805 	bl	8006732 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	460b      	mov	r3, r1
 800673c:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	2b0a      	cmp	r3, #10
 8006742:	d80d      	bhi.n	8006760 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	33e0      	adds	r3, #224	; 0xe0
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	33e0      	adds	r3, #224	; 0xe0
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	440b      	add	r3, r1
 800675e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <HDMI_IO_Write>:

extern I2C_HandleTypeDef hi2c1;
extern ADV7513ConfigTypeDef AdvConfigStruct;

static void HDMI_IO_Write(uint8_t deviceAddress, uint8_t reg, uint8_t value)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af04      	add	r7, sp, #16
 8006776:	4603      	mov	r3, r0
 8006778:	71fb      	strb	r3, [r7, #7]
 800677a:	460b      	mov	r3, r1
 800677c:	71bb      	strb	r3, [r7, #6]
 800677e:	4613      	mov	r3, r2
 8006780:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_Mem_Write(&hi2c1,
 8006782:	bf00      	nop
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	b299      	uxth	r1, r3
 8006788:	79bb      	ldrb	r3, [r7, #6]
 800678a:	b29a      	uxth	r2, r3
 800678c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006790:	9302      	str	r3, [sp, #8]
 8006792:	2301      	movs	r3, #1
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	1d7b      	adds	r3, r7, #5
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	2301      	movs	r3, #1
 800679c:	4804      	ldr	r0, [pc, #16]	; (80067b0 <HDMI_IO_Write+0x40>)
 800679e:	f7fc faaf 	bl	8002d00 <HAL_I2C_Mem_Write>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1ed      	bne.n	8006784 <HDMI_IO_Write+0x14>
			reg,
			sizeof(uint8_t),
			&value,
			sizeof(uint8_t),
			ADV7513_I2C_DELAY) != HAL_OK);
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20001450 	.word	0x20001450

080067b4 <HDMI_IO_Read>:

static uint8_t HDMI_IO_Read(uint8_t deviceAddress, uint8_t reg)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af04      	add	r7, sp, #16
 80067ba:	4603      	mov	r3, r0
 80067bc:	460a      	mov	r2, r1
 80067be:	71fb      	strb	r3, [r7, #7]
 80067c0:	4613      	mov	r3, r2
 80067c2:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	73fb      	strb	r3, [r7, #15]

	while(HAL_I2C_Mem_Read(&hi2c1,
 80067c8:	bf00      	nop
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	b299      	uxth	r1, r3
 80067ce:	79bb      	ldrb	r3, [r7, #6]
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80067d6:	9302      	str	r3, [sp, #8]
 80067d8:	2301      	movs	r3, #1
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	f107 030f 	add.w	r3, r7, #15
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	2301      	movs	r3, #1
 80067e4:	4805      	ldr	r0, [pc, #20]	; (80067fc <HDMI_IO_Read+0x48>)
 80067e6:	f7fc fb9f 	bl	8002f28 <HAL_I2C_Mem_Read>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1ec      	bne.n	80067ca <HDMI_IO_Read+0x16>
			I2C_MEMADD_SIZE_8BIT,
			&tmp,
			1,
			ADV7513_I2C_DELAY) != HAL_OK);

	return tmp;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20001450 	.word	0x20001450

08006800 <ADV7513_Init>:
	tmp &= 0xF8;
	HDMI_IO_Write(ADV7513_I2C_CEC_ADDRESS, 0x4A, tmp);
}

uint8_t ADV7513_Init(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PD_GPIO_Port, PD_Pin, GPIO_PIN_SET);
 8006804:	2201      	movs	r2, #1
 8006806:	2140      	movs	r1, #64	; 0x40
 8006808:	4806      	ldr	r0, [pc, #24]	; (8006824 <ADV7513_Init+0x24>)
 800680a:	f7fa ffcb 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PD_GPIO_Port, PD_Pin, GPIO_PIN_RESET);
 800680e:	2200      	movs	r2, #0
 8006810:	2140      	movs	r1, #64	; 0x40
 8006812:	4804      	ldr	r0, [pc, #16]	; (8006824 <ADV7513_Init+0x24>)
 8006814:	f7fa ffc6 	bl	80017a4 <HAL_GPIO_WritePin>
	ADV7513_Configure(&AdvConfigStruct);
 8006818:	4803      	ldr	r0, [pc, #12]	; (8006828 <ADV7513_Init+0x28>)
 800681a:	f000 f817 	bl	800684c <ADV7513_Configure>

	return 0;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40020800 	.word	0x40020800
 8006828:	20001544 	.word	0x20001544

0800682c <ADV7513_ReadDeviceVersion>:
//			ADV7513_I2C_DELAY);
}


uint8_t ADV7513_ReadDeviceVersion(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	71fb      	strb	r3, [r7, #7]

	tmp = HDMI_IO_Read(ADV7513_I2C_MAINMAP_ADDRESS0, 0x00);
 8006836:	2100      	movs	r1, #0
 8006838:	2072      	movs	r0, #114	; 0x72
 800683a:	f7ff ffbb 	bl	80067b4 <HDMI_IO_Read>
 800683e:	4603      	mov	r3, r0
 8006840:	71fb      	strb	r3, [r7, #7]

	return tmp;
 8006842:	79fb      	ldrb	r3, [r7, #7]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <ADV7513_Configure>:

void ADV7513_Configure(ADV7513ConfigTypeDef * config)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	77fb      	strb	r3, [r7, #31]
	uint8_t buffer[16];
	uint16_t deviceAddress = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	83bb      	strh	r3, [r7, #28]
//
//	tmp = HDMI_IO_Read(ADV7513_I2C_MAINMAP_ADDRESS0, 0x42);
//
//	printf("0x42 = %u\n", tmp);

	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x98, 0x03);
 800685c:	2203      	movs	r2, #3
 800685e:	2198      	movs	r1, #152	; 0x98
 8006860:	2072      	movs	r0, #114	; 0x72
 8006862:	f7ff ff85 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x01, 0x00);
 8006866:	2200      	movs	r2, #0
 8006868:	2101      	movs	r1, #1
 800686a:	2072      	movs	r0, #114	; 0x72
 800686c:	f7ff ff80 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x02, 0x18);
 8006870:	2218      	movs	r2, #24
 8006872:	2102      	movs	r1, #2
 8006874:	2072      	movs	r0, #114	; 0x72
 8006876:	f7ff ff7b 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x03, 0x00);
 800687a:	2200      	movs	r2, #0
 800687c:	2103      	movs	r1, #3
 800687e:	2072      	movs	r0, #114	; 0x72
 8006880:	f7ff ff76 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x14, 0x70);
 8006884:	2270      	movs	r2, #112	; 0x70
 8006886:	2114      	movs	r1, #20
 8006888:	2072      	movs	r0, #114	; 0x72
 800688a:	f7ff ff71 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x15, 0x20);
 800688e:	2220      	movs	r2, #32
 8006890:	2115      	movs	r1, #21
 8006892:	2072      	movs	r0, #114	; 0x72
 8006894:	f7ff ff6c 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x16, 0x30);
 8006898:	2230      	movs	r2, #48	; 0x30
 800689a:	2116      	movs	r1, #22
 800689c:	2072      	movs	r0, #114	; 0x72
 800689e:	f7ff ff67 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x18, 0x46);
 80068a2:	2246      	movs	r2, #70	; 0x46
 80068a4:	2118      	movs	r1, #24
 80068a6:	2072      	movs	r0, #114	; 0x72
 80068a8:	f7ff ff62 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x40, 0x80);
 80068ac:	2280      	movs	r2, #128	; 0x80
 80068ae:	2140      	movs	r1, #64	; 0x40
 80068b0:	2072      	movs	r0, #114	; 0x72
 80068b2:	f7ff ff5d 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x41, 0x10);
 80068b6:	2210      	movs	r2, #16
 80068b8:	2141      	movs	r1, #65	; 0x41
 80068ba:	2072      	movs	r0, #114	; 0x72
 80068bc:	f7ff ff58 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x49, 0xA8);
 80068c0:	22a8      	movs	r2, #168	; 0xa8
 80068c2:	2149      	movs	r1, #73	; 0x49
 80068c4:	2072      	movs	r0, #114	; 0x72
 80068c6:	f7ff ff53 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x55, 0x10);
 80068ca:	2210      	movs	r2, #16
 80068cc:	2155      	movs	r1, #85	; 0x55
 80068ce:	2072      	movs	r0, #114	; 0x72
 80068d0:	f7ff ff4e 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x56, 0x08);
 80068d4:	2208      	movs	r2, #8
 80068d6:	2156      	movs	r1, #86	; 0x56
 80068d8:	2072      	movs	r0, #114	; 0x72
 80068da:	f7ff ff49 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x96, 0xF6);
 80068de:	22f6      	movs	r2, #246	; 0xf6
 80068e0:	2196      	movs	r1, #150	; 0x96
 80068e2:	2072      	movs	r0, #114	; 0x72
 80068e4:	f7ff ff44 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x73, 0x07);
 80068e8:	2207      	movs	r2, #7
 80068ea:	2173      	movs	r1, #115	; 0x73
 80068ec:	2072      	movs	r0, #114	; 0x72
 80068ee:	f7ff ff3f 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x76, 0x1F);
 80068f2:	221f      	movs	r2, #31
 80068f4:	2176      	movs	r1, #118	; 0x76
 80068f6:	2072      	movs	r0, #114	; 0x72
 80068f8:	f7ff ff3a 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x98, 0x03);
 80068fc:	2203      	movs	r2, #3
 80068fe:	2198      	movs	r1, #152	; 0x98
 8006900:	2072      	movs	r0, #114	; 0x72
 8006902:	f7ff ff35 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x99, 0x02);
 8006906:	2202      	movs	r2, #2
 8006908:	2199      	movs	r1, #153	; 0x99
 800690a:	2072      	movs	r0, #114	; 0x72
 800690c:	f7ff ff30 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x9A, 0xE0);
 8006910:	22e0      	movs	r2, #224	; 0xe0
 8006912:	219a      	movs	r1, #154	; 0x9a
 8006914:	2072      	movs	r0, #114	; 0x72
 8006916:	f7ff ff2b 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x9C, 0x30);
 800691a:	2230      	movs	r2, #48	; 0x30
 800691c:	219c      	movs	r1, #156	; 0x9c
 800691e:	2072      	movs	r0, #114	; 0x72
 8006920:	f7ff ff26 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x9D, 0x61);
 8006924:	2261      	movs	r2, #97	; 0x61
 8006926:	219d      	movs	r1, #157	; 0x9d
 8006928:	2072      	movs	r0, #114	; 0x72
 800692a:	f7ff ff21 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0xA2, 0xA4);
 800692e:	22a4      	movs	r2, #164	; 0xa4
 8006930:	21a2      	movs	r1, #162	; 0xa2
 8006932:	2072      	movs	r0, #114	; 0x72
 8006934:	f7ff ff1c 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0xA3, 0xA4);
 8006938:	22a4      	movs	r2, #164	; 0xa4
 800693a:	21a3      	movs	r1, #163	; 0xa3
 800693c:	2072      	movs	r0, #114	; 0x72
 800693e:	f7ff ff17 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0xA5, 0x04);
 8006942:	2204      	movs	r2, #4
 8006944:	21a5      	movs	r1, #165	; 0xa5
 8006946:	2072      	movs	r0, #114	; 0x72
 8006948:	f7ff ff12 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0xAB, 0x40);
 800694c:	2240      	movs	r2, #64	; 0x40
 800694e:	21ab      	movs	r1, #171	; 0xab
 8006950:	2072      	movs	r0, #114	; 0x72
 8006952:	f7ff ff0d 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0xAF, 0x16);
 8006956:	2216      	movs	r2, #22
 8006958:	21af      	movs	r1, #175	; 0xaf
 800695a:	2072      	movs	r0, #114	; 0x72
 800695c:	f7ff ff08 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0xBA, 0x60);
 8006960:	2260      	movs	r2, #96	; 0x60
 8006962:	21ba      	movs	r1, #186	; 0xba
 8006964:	2072      	movs	r0, #114	; 0x72
 8006966:	f7ff ff03 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0xD1, 0xFF);
 800696a:	22ff      	movs	r2, #255	; 0xff
 800696c:	21d1      	movs	r1, #209	; 0xd1
 800696e:	2072      	movs	r0, #114	; 0x72
 8006970:	f7ff fefe 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0xDE, 0x10);
 8006974:	2210      	movs	r2, #16
 8006976:	21de      	movs	r1, #222	; 0xde
 8006978:	2072      	movs	r0, #114	; 0x72
 800697a:	f7ff fef9 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0xE4, 0x60);
 800697e:	2260      	movs	r2, #96	; 0x60
 8006980:	21e4      	movs	r1, #228	; 0xe4
 8006982:	2072      	movs	r0, #114	; 0x72
 8006984:	f7ff fef4 	bl	8006770 <HDMI_IO_Write>
	HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0xFA, 0x7D);
 8006988:	227d      	movs	r2, #125	; 0x7d
 800698a:	21fa      	movs	r1, #250	; 0xfa
 800698c:	2072      	movs	r0, #114	; 0x72
 800698e:	f7ff feef 	bl	8006770 <HDMI_IO_Write>
		tmp = HDMI_IO_Read(ADV7513_I2C_MAINMAP_ADDRESS0, 0x17);
 8006992:	2117      	movs	r1, #23
 8006994:	2072      	movs	r0, #114	; 0x72
 8006996:	f7ff ff0d 	bl	80067b4 <HDMI_IO_Read>
 800699a:	4603      	mov	r3, r0
 800699c:	77fb      	strb	r3, [r7, #31]
		tmp &= 0xFC;
 800699e:	7ffb      	ldrb	r3, [r7, #31]
 80069a0:	f023 0303 	bic.w	r3, r3, #3
 80069a4:	77fb      	strb	r3, [r7, #31]
		HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x17, tmp);
 80069a6:	7ffb      	ldrb	r3, [r7, #31]
 80069a8:	461a      	mov	r2, r3
 80069aa:	2117      	movs	r1, #23
 80069ac:	2072      	movs	r0, #114	; 0x72
 80069ae:	f7ff fedf 	bl	8006770 <HDMI_IO_Write>
			tmp = HDMI_IO_Read(ADV7513_I2C_MAINMAP_ADDRESS0, 0x48);
 80069b2:	2148      	movs	r1, #72	; 0x48
 80069b4:	2072      	movs	r0, #114	; 0x72
 80069b6:	f7ff fefd 	bl	80067b4 <HDMI_IO_Read>
 80069ba:	4603      	mov	r3, r0
 80069bc:	77fb      	strb	r3, [r7, #31]
			tmp |= 0x08;
 80069be:	7ffb      	ldrb	r3, [r7, #31]
 80069c0:	f043 0308 	orr.w	r3, r3, #8
 80069c4:	77fb      	strb	r3, [r7, #31]
			HDMI_IO_Write(ADV7513_I2C_MAINMAP_ADDRESS0, 0x48, tmp);
 80069c6:	7ffb      	ldrb	r3, [r7, #31]
 80069c8:	461a      	mov	r2, r3
 80069ca:	2148      	movs	r1, #72	; 0x48
 80069cc:	2072      	movs	r0, #114	; 0x72
 80069ce:	f7ff fecf 	bl	8006770 <HDMI_IO_Write>
}
 80069d2:	bf00      	nop
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <ADV7513_GetDeviceID>:

uint16_t ADV7513_GetDeviceID(void)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
	uint16_t tmp = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	80fb      	strh	r3, [r7, #6]

	tmp = HDMI_IO_Read(ADV7513_I2C_MAINMAP_ADDRESS0, 0xF5) << 8;
 80069e4:	21f5      	movs	r1, #245	; 0xf5
 80069e6:	2072      	movs	r0, #114	; 0x72
 80069e8:	f7ff fee4 	bl	80067b4 <HDMI_IO_Read>
 80069ec:	4603      	mov	r3, r0
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	021b      	lsls	r3, r3, #8
 80069f2:	80fb      	strh	r3, [r7, #6]
	tmp |= HDMI_IO_Read(ADV7513_I2C_MAINMAP_ADDRESS0, 0xF6);
 80069f4:	21f6      	movs	r1, #246	; 0xf6
 80069f6:	2072      	movs	r0, #114	; 0x72
 80069f8:	f7ff fedc 	bl	80067b4 <HDMI_IO_Read>
 80069fc:	4603      	mov	r3, r0
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	88fb      	ldrh	r3, [r7, #6]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	80fb      	strh	r3, [r7, #6]

	return tmp;
 8006a06:	88fb      	ldrh	r3, [r7, #6]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
    {
        return instance;
 8006a14:	4b03      	ldr	r3, [pc, #12]	; (8006a24 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8006a16:	681b      	ldr	r3, [r3, #0]
    }
 8006a18:	4618      	mov	r0, r3
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	20001100 	.word	0x20001100

08006a28 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  fb_sem = 0;
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
  vsync_sem = 0;
 8006a32:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <_ZN8touchgfx10OSWrappers10initializeEv+0x20>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	200000fc 	.word	0x200000fc
 8006a48:	20000100 	.word	0x20000100

08006a4c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
  while(fb_sem);
 8006a50:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	bf14      	ite	ne
 8006a58:	2301      	movne	r3, #1
 8006a5a:	2300      	moveq	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d000      	beq.n	8006a64 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 8006a62:	e7f5      	b.n	8006a50 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x4>
  fb_sem = 1;
 8006a64:	4b03      	ldr	r3, [pc, #12]	; (8006a74 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	200000fc 	.word	0x200000fc

08006a78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
  fb_sem = 0;
 8006a7c:	4b03      	ldr	r3, [pc, #12]	; (8006a8c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	601a      	str	r2, [r3, #0]
}
 8006a82:	bf00      	nop
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	200000fc 	.word	0x200000fc

08006a90 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  fb_sem = 1;
 8006a94:	4b03      	ldr	r3, [pc, #12]	; (8006aa4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8006a96:	2201      	movs	r2, #1
 8006a98:	601a      	str	r2, [r3, #0]
}
 8006a9a:	bf00      	nop
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	200000fc 	.word	0x200000fc

08006aa8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  fb_sem = 0;
 8006aac:	4b03      	ldr	r3, [pc, #12]	; (8006abc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]
}
 8006ab2:	bf00      	nop
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	200000fc 	.word	0x200000fc

08006ac0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  vsync_sem = 1;
 8006ac4:	4b03      	ldr	r3, [pc, #12]	; (8006ad4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
}
 8006aca:	bf00      	nop
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	20000100 	.word	0x20000100

08006ad8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  if(vsync_sem)
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bf14      	ite	ne
 8006ae4:	2301      	movne	r3, #1
 8006ae6:	2300      	moveq	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
  {
    vsync_sem = 0;
 8006aee:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
    HAL::getInstance()->backPorchExited();
 8006af4:	f7ff ff8c 	bl	8006a10 <_ZN8touchgfx3HAL11getInstanceEv>
 8006af8:	4602      	mov	r2, r0
 8006afa:	6813      	ldr	r3, [r2, #0]
 8006afc:	3358      	adds	r3, #88	; 0x58
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4610      	mov	r0, r2
 8006b02:	4798      	blx	r3
  }
}
 8006b04:	bf00      	nop
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20000100 	.word	0x20000100

08006b0c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7f9 fdcd 	bl	80006b8 <HAL_Delay>
}
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
	QSPIHandle.Instance = QUADSPI;
 8006b2e:	4b28      	ldr	r3, [pc, #160]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006b30:	4a28      	ldr	r2, [pc, #160]	; (8006bd4 <BSP_QSPI_Init+0xac>)
 8006b32:	601a      	str	r2, [r3, #0]

	/* Call the DeInit function to reset the driver */
	if(HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8006b34:	4826      	ldr	r0, [pc, #152]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006b36:	f7fd fa39 	bl	8003fac <HAL_QSPI_DeInit>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <BSP_QSPI_Init+0x1c>
	{
		return QSPI_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e041      	b.n	8006bc8 <BSP_QSPI_Init+0xa0>
	}

	/* System level initialization */
	BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8006b44:	2100      	movs	r1, #0
 8006b46:	4822      	ldr	r0, [pc, #136]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006b48:	f000 f876 	bl	8006c38 <BSP_QSPI_MspInit>

	/* QSPI initialization */
	QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 100 MHz/(0+1) = 100 Mhz */
 8006b4c:	4b20      	ldr	r3, [pc, #128]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006b4e:	2201      	movs	r2, #1
 8006b50:	605a      	str	r2, [r3, #4]
	QSPIHandle.Init.FifoThreshold      = 4;
 8006b52:	4b1f      	ldr	r3, [pc, #124]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006b54:	2204      	movs	r2, #4
 8006b56:	609a      	str	r2, [r3, #8]
	QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8006b58:	4b1d      	ldr	r3, [pc, #116]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	60da      	str	r2, [r3, #12]
 8006b5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b62:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	fa93 f3a3 	rbit	r3, r3
 8006b6a:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006b6c:	683b      	ldr	r3, [r7, #0]
	QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8006b6e:	fab3 f383 	clz	r3, r3
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	461a      	mov	r2, r3
 8006b78:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006b7a:	611a      	str	r2, [r3, #16]
	QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE; /* Min 50ns for nonRead command */
 8006b7c:	4b14      	ldr	r3, [pc, #80]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b82:	615a      	str	r2, [r3, #20]
	QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006b84:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	619a      	str	r2, [r3, #24]
	QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8006b8a:	4b11      	ldr	r3, [pc, #68]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	61da      	str	r2, [r3, #28]
	QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8006b90:	4b0f      	ldr	r3, [pc, #60]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	621a      	str	r2, [r3, #32]

	if(HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8006b96:	480e      	ldr	r0, [pc, #56]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006b98:	f7fd f98c 	bl	8003eb4 <HAL_QSPI_Init>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <BSP_QSPI_Init+0x7e>
	{
		return QSPI_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e010      	b.n	8006bc8 <BSP_QSPI_Init+0xa0>
	}

	/* QSPI memory reset */
	if(QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8006ba6:	480a      	ldr	r0, [pc, #40]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006ba8:	f000 f8ce 	bl	8006d48 <QSPI_ResetMemory>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <BSP_QSPI_Init+0x8e>
	{
		return QSPI_NOT_SUPPORTED;
 8006bb2:	2304      	movs	r3, #4
 8006bb4:	e008      	b.n	8006bc8 <BSP_QSPI_Init+0xa0>
	}

	/* Configuration of the dummy cycles on QSPI memory side */
	if(QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8006bb6:	4806      	ldr	r0, [pc, #24]	; (8006bd0 <BSP_QSPI_Init+0xa8>)
 8006bb8:	f000 f908 	bl	8006dcc <QSPI_DummyCyclesCfg>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <BSP_QSPI_Init+0x9e>
	{
		return QSPI_NOT_SUPPORTED;
 8006bc2:	2304      	movs	r3, #4
 8006bc4:	e000      	b.n	8006bc8 <BSP_QSPI_Init+0xa0>
	}

	return QSPI_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	200013a0 	.word	0x200013a0
 8006bd4:	a0001000 	.word	0xa0001000

08006bd8 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b090      	sub	sp, #64	; 0x40
 8006bdc:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef      s_command;
	QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

	/* Configure the command for the read instruction */
	s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006be2:	623b      	str	r3, [r7, #32]
	s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8006be4:	23eb      	movs	r3, #235	; 0xeb
 8006be6:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8006be8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8006bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bf2:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode          = QSPI_DATA_4_LINES;
 8006bf8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8006bfe:	230a      	movs	r3, #10
 8006c00:	61fb      	str	r3, [r7, #28]
	s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006c02:	2300      	movs	r3, #0
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006c06:	2300      	movs	r3, #0
 8006c08:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Configure the memory mapped mode */
	s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	607b      	str	r3, [r7, #4]

	if(HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8006c12:	463a      	mov	r2, r7
 8006c14:	f107 0308 	add.w	r3, r7, #8
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4806      	ldr	r0, [pc, #24]	; (8006c34 <BSP_QSPI_EnableMemoryMappedMode+0x5c>)
 8006c1c:	f7fd fdbc 	bl	8004798 <HAL_QSPI_MemoryMapped>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <BSP_QSPI_EnableMemoryMappedMode+0x52>
	{
		return QSPI_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <BSP_QSPI_EnableMemoryMappedMode+0x54>
	}

	return QSPI_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3740      	adds	r7, #64	; 0x40
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	200013a0 	.word	0x200013a0

08006c38 <BSP_QSPI_MspInit>:
  *           - NVIC configuration for QSPI interrupt
  * @param hqspi: QSPI handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08c      	sub	sp, #48	; 0x30
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c42:	f107 031c 	add.w	r3, r7, #28
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	605a      	str	r2, [r3, #4]
 8006c4c:	609a      	str	r2, [r3, #8]
 8006c4e:	60da      	str	r2, [r3, #12]
 8006c50:	611a      	str	r2, [r3, #16]

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable the QuadSPI memory interface clock */

	/* Enable GPIO clocks */
	QSPI_CS_GPIO_CLK_ENABLE();
 8006c52:	4b3a      	ldr	r3, [pc, #232]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c56:	4a39      	ldr	r2, [pc, #228]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006c58:	f043 0302 	orr.w	r3, r3, #2
 8006c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c5e:	4b37      	ldr	r3, [pc, #220]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	69bb      	ldr	r3, [r7, #24]
	QSPI_CLK_GPIO_CLK_ENABLE();
 8006c6a:	4b34      	ldr	r3, [pc, #208]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6e:	4a33      	ldr	r2, [pc, #204]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006c70:	f043 0302 	orr.w	r3, r3, #2
 8006c74:	6313      	str	r3, [r2, #48]	; 0x30
 8006c76:	4b31      	ldr	r3, [pc, #196]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	617b      	str	r3, [r7, #20]
 8006c80:	697b      	ldr	r3, [r7, #20]
//	QSPI_FORCE_RESET();
//	QSPI_RELEASE_RESET();

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* QSPI CS GPIO pin configuration  */
	__HAL_RCC_QSPI_CLK_ENABLE();
 8006c82:	4b2e      	ldr	r3, [pc, #184]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	4a2d      	ldr	r2, [pc, #180]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006c88:	f043 0302 	orr.w	r3, r3, #2
 8006c8c:	6393      	str	r3, [r2, #56]	; 0x38
 8006c8e:	4b2b      	ldr	r3, [pc, #172]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE();
 8006c9a:	4b28      	ldr	r3, [pc, #160]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	4a27      	ldr	r2, [pc, #156]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006ca0:	f043 0320 	orr.w	r3, r3, #32
 8006ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ca6:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8006cb2:	4b22      	ldr	r3, [pc, #136]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	4a21      	ldr	r2, [pc, #132]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006cb8:	f043 0302 	orr.w	r3, r3, #2
 8006cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cbe:	4b1f      	ldr	r3, [pc, #124]	; (8006d3c <BSP_QSPI_MspInit+0x104>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	60bb      	str	r3, [r7, #8]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
	PF8     ------> QUADSPI_BK1_IO0
	PF9     ------> QUADSPI_BK1_IO1
	PB2     ------> QUADSPI_CLK
	PB10     ------> QUADSPI_BK1_NCS
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006cca:	23c0      	movs	r3, #192	; 0xc0
 8006ccc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006cda:	2309      	movs	r3, #9
 8006cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006cde:	f107 031c 	add.w	r3, r7, #28
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4816      	ldr	r0, [pc, #88]	; (8006d40 <BSP_QSPI_MspInit+0x108>)
 8006ce6:	f7fa fbb3 	bl	8001450 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006cee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006cfc:	230a      	movs	r3, #10
 8006cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006d00:	f107 031c 	add.w	r3, r7, #28
 8006d04:	4619      	mov	r1, r3
 8006d06:	480e      	ldr	r0, [pc, #56]	; (8006d40 <BSP_QSPI_MspInit+0x108>)
 8006d08:	f7fa fba2 	bl	8001450 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8006d0c:	f240 4304 	movw	r3, #1028	; 0x404
 8006d10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d12:	2302      	movs	r3, #2
 8006d14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006d1e:	2309      	movs	r3, #9
 8006d20:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d22:	f107 031c 	add.w	r3, r7, #28
 8006d26:	4619      	mov	r1, r3
 8006d28:	4806      	ldr	r0, [pc, #24]	; (8006d44 <BSP_QSPI_MspInit+0x10c>)
 8006d2a:	f7fa fb91 	bl	8001450 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8006d2e:	205c      	movs	r0, #92	; 0x5c
 8006d30:	f7f9 fddb 	bl	80008ea <HAL_NVIC_EnableIRQ>
}
 8006d34:	bf00      	nop
 8006d36:	3730      	adds	r7, #48	; 0x30
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	40023800 	.word	0x40023800
 8006d40:	40021400 	.word	0x40021400
 8006d44:	40020400 	.word	0x40020400

08006d48 <QSPI_ResetMemory>:
/**
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b090      	sub	sp, #64	; 0x40
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the reset enable command */
	s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d54:	623b      	str	r3, [r7, #32]
	s_command.Instruction       = RESET_ENABLE_CMD;
 8006d56:	2366      	movs	r3, #102	; 0x66
 8006d58:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode          = QSPI_DATA_NONE;
 8006d62:	2300      	movs	r3, #0
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles       = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
	s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006d72:	2300      	movs	r3, #0
 8006d74:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Send the command */
	if(HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006d76:	f107 0308 	add.w	r3, r7, #8
 8006d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fd fb05 	bl	8004390 <HAL_QSPI_Command>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <QSPI_ResetMemory+0x48>
	{
		return QSPI_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e019      	b.n	8006dc4 <QSPI_ResetMemory+0x7c>
	}

	/* Send the reset memory command */
	s_command.Instruction = RESET_MEMORY_CMD;
 8006d90:	2399      	movs	r3, #153	; 0x99
 8006d92:	60bb      	str	r3, [r7, #8]
	if(HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006d94:	f107 0308 	add.w	r3, r7, #8
 8006d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fd faf6 	bl	8004390 <HAL_QSPI_Command>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <QSPI_ResetMemory+0x66>
	{
		return QSPI_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e00a      	b.n	8006dc4 <QSPI_ResetMemory+0x7c>
	}

	/* Configure automatic polling mode to wait the memory is ready */
	if(QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8006dae:	f241 3188 	movw	r1, #5000	; 0x1388
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f8c7 	bl	8006f46 <QSPI_AutoPollingMemReady>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <QSPI_ResetMemory+0x7a>
	{
		return QSPI_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <QSPI_ResetMemory+0x7c>
	}

	return QSPI_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3740      	adds	r7, #64	; 0x40
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <QSPI_DummyCyclesCfg>:
/**
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b094      	sub	sp, #80	; 0x50
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;
	uint8_t reg;

	/* Initialize the read volatile configuration register command */
	s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dd8:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8006dda:	2385      	movs	r3, #133	; 0x85
 8006ddc:	613b      	str	r3, [r7, #16]
	s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DataMode          = QSPI_DATA_1_LINE;
 8006de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dea:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DummyCycles       = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.NbData            = 1;
 8006df0:	2301      	movs	r3, #1
 8006df2:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	647b      	str	r3, [r7, #68]	; 0x44

	/* Configure the command */
	if(HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006e00:	f107 0310 	add.w	r3, r7, #16
 8006e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fd fac0 	bl	8004390 <HAL_QSPI_Command>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <QSPI_DummyCyclesCfg+0x4e>
	{
		return QSPI_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e048      	b.n	8006eac <QSPI_DummyCyclesCfg+0xe0>
	}

	/* Reception of the data */
	if(HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006e1a:	f107 030f 	add.w	r3, r7, #15
 8006e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fd fba3 	bl	8004570 <HAL_QSPI_Receive>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <QSPI_DummyCyclesCfg+0x68>
	{
		return QSPI_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e03b      	b.n	8006eac <QSPI_DummyCyclesCfg+0xe0>
	}

	/* Enable write operations */
	if(QSPI_WriteEnable(hqspi) != QSPI_OK)
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f83d 	bl	8006eb4 <QSPI_WriteEnable>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <QSPI_DummyCyclesCfg+0x78>
	{
		return QSPI_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e033      	b.n	8006eac <QSPI_DummyCyclesCfg+0xe0>
	}

	/* Update volatile configuration register (with new dummy cycles) */
	s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8006e44:	2381      	movs	r3, #129	; 0x81
 8006e46:	613b      	str	r3, [r7, #16]
	MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	b25b      	sxtb	r3, r3
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	b25a      	sxtb	r2, r3
 8006e52:	23f0      	movs	r3, #240	; 0xf0
 8006e54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e58:	fa93 f3a3 	rbit	r3, r3
 8006e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e60:	fab3 f383 	clz	r3, r3
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	4619      	mov	r1, r3
 8006e68:	230a      	movs	r3, #10
 8006e6a:	408b      	lsls	r3, r1
 8006e6c:	b25b      	sxtb	r3, r3
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	b25b      	sxtb	r3, r3
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	73fb      	strb	r3, [r7, #15]

	/* Configure the write volatile configuration register command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006e76:	f107 0310 	add.w	r3, r7, #16
 8006e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7fd fa85 	bl	8004390 <HAL_QSPI_Command>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <QSPI_DummyCyclesCfg+0xc4>
	{
		return QSPI_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e00d      	b.n	8006eac <QSPI_DummyCyclesCfg+0xe0>
	}

	/* Transmission of the data */
	if(HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006e90:	f107 030f 	add.w	r3, r7, #15
 8006e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fd fad6 	bl	800444c <HAL_QSPI_Transmit>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <QSPI_DummyCyclesCfg+0xde>
	{
		return QSPI_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e000      	b.n	8006eac <QSPI_DummyCyclesCfg+0xe0>
	}

	return QSPI_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3750      	adds	r7, #80	; 0x50
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <QSPI_WriteEnable>:
/**
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b096      	sub	sp, #88	; 0x58
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef     s_command;
	QSPI_AutoPollingTypeDef s_config;

	/* Enable write operations */
	s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ec0:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.Instruction       = WRITE_ENABLE_CMD;
 8006ec2:	2306      	movs	r3, #6
 8006ec4:	623b      	str	r3, [r7, #32]
	s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DataMode          = QSPI_DATA_NONE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.DummyCycles       = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006eda:	2300      	movs	r3, #0
 8006edc:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ee2:	f107 0320 	add.w	r3, r7, #32
 8006ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7fd fa4f 	bl	8004390 <HAL_QSPI_Command>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <QSPI_WriteEnable+0x48>
	{
		return QSPI_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e020      	b.n	8006f3e <QSPI_WriteEnable+0x8a>
	}

	/* Configure automatic polling mode to wait for write enabling */
	s_config.Match           = N25Q128A_SR_WREN;
 8006efc:	2302      	movs	r3, #2
 8006efe:	60bb      	str	r3, [r7, #8]
	s_config.Mask            = N25Q128A_SR_WREN;
 8006f00:	2302      	movs	r3, #2
 8006f02:	60fb      	str	r3, [r7, #12]
	s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006f04:	2300      	movs	r3, #0
 8006f06:	61bb      	str	r3, [r7, #24]
	s_config.StatusBytesSize = 1;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	617b      	str	r3, [r7, #20]
	s_config.Interval        = 0x10;
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	613b      	str	r3, [r7, #16]
	s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006f10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f14:	61fb      	str	r3, [r7, #28]

	s_command.Instruction    = READ_STATUS_REG_CMD;
 8006f16:	2305      	movs	r3, #5
 8006f18:	623b      	str	r3, [r7, #32]
	s_command.DataMode       = QSPI_DATA_1_LINE;
 8006f1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f1e:	647b      	str	r3, [r7, #68]	; 0x44

	if(HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f20:	f107 0208 	add.w	r2, r7, #8
 8006f24:	f107 0120 	add.w	r1, r7, #32
 8006f28:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7fd fbbc 	bl	80046aa <HAL_QSPI_AutoPolling>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <QSPI_WriteEnable+0x88>
	{
		return QSPI_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <QSPI_WriteEnable+0x8a>
	}

	return QSPI_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3758      	adds	r7, #88	; 0x58
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <QSPI_AutoPollingMemReady>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b096      	sub	sp, #88	; 0x58
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef     s_command;
	QSPI_AutoPollingTypeDef s_config;

	/* Configure automatic polling mode to wait for memory ready */
	s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f54:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.Instruction       = READ_STATUS_REG_CMD;
 8006f56:	2305      	movs	r3, #5
 8006f58:	623b      	str	r3, [r7, #32]
	s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DataMode          = QSPI_DATA_1_LINE;
 8006f62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f66:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.DummyCycles       = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006f70:	2300      	movs	r3, #0
 8006f72:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006f74:	2300      	movs	r3, #0
 8006f76:	657b      	str	r3, [r7, #84]	; 0x54

	s_config.Match           = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60bb      	str	r3, [r7, #8]
	s_config.Mask            = N25Q128A_SR_WIP;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	60fb      	str	r3, [r7, #12]
	s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61bb      	str	r3, [r7, #24]
	s_config.StatusBytesSize = 1;
 8006f84:	2301      	movs	r3, #1
 8006f86:	617b      	str	r3, [r7, #20]
	s_config.Interval        = 0x10;
 8006f88:	2310      	movs	r3, #16
 8006f8a:	613b      	str	r3, [r7, #16]
	s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006f8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f90:	61fb      	str	r3, [r7, #28]

	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8006f92:	f107 0208 	add.w	r2, r7, #8
 8006f96:	f107 0120 	add.w	r1, r7, #32
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7fd fb84 	bl	80046aa <HAL_QSPI_AutoPolling>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <QSPI_AutoPollingMemReady+0x66>
	{
		return QSPI_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <QSPI_AutoPollingMemReady+0x68>
	}

	return QSPI_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3758      	adds	r7, #88	; 0x58
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <__NVIC_EnableIRQ>:
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	db0d      	blt.n	8006fe6 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	f003 021f 	and.w	r2, r3, #31
 8006fd4:	4907      	ldr	r1, [pc, #28]	; (8006ff4 <__NVIC_EnableIRQ+0x3c>)
 8006fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fda:	095b      	lsrs	r3, r3, #5
 8006fdc:	2001      	movs	r0, #1
 8006fde:	fa00 f202 	lsl.w	r2, r0, r2
 8006fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	e000e100 	.word	0xe000e100

08006ff8 <__NVIC_DisableIRQ>:
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007006:	2b00      	cmp	r3, #0
 8007008:	db12      	blt.n	8007030 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800700a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	f003 021f 	and.w	r2, r3, #31
 8007014:	4909      	ldr	r1, [pc, #36]	; (800703c <__NVIC_DisableIRQ+0x44>)
 8007016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	2001      	movs	r0, #1
 800701e:	fa00 f202 	lsl.w	r2, r0, r2
 8007022:	3320      	adds	r3, #32
 8007024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007028:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800702c:	f3bf 8f6f 	isb	sy
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	e000e100 	.word	0xe000e100

08007040 <_ZN8touchgfx9colortypeC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Creates a black (0) color.
     */
    colortype() : color(0) {}
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <_ZNK8touchgfx9colortype10getColor32Ev>:
     *
     * @see Color::getRedColor()
     * @see Color::getGreenColor()
     * @see Color::getBlueColor()
     */
    inline uint32_t getColor32() const
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
    {
        return color;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
    }
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <_ZNK8touchgfx9colortypecvtEv>:
     *        Cast that converts the given colortype to an uint16_t. Provided only for backward
     *        compatibility. Not recommended to use.
     *
     * @return The result of the operation.
     */
    operator uint16_t() const
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)color;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
    }
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
	...

08007090 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
    {
 8007098:	4a04      	ldr	r2, [pc, #16]	; (80070ac <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	601a      	str	r2, [r3, #0]
    }
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	0801a11c 	.word	0x0801a11c

080070b0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
    }
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff ffe9 	bl	8007090 <_ZN8touchgfx9DMA_QueueD1Ev>
 80070be:	2104      	movs	r1, #4
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f011 fd61 	bl	8018b88 <_ZdlPvj>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3344      	adds	r3, #68	; 0x44
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	4798      	blx	r3
    }
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80070f4:	2300      	movs	r3, #0
    }
 80070f6:	4618      	mov	r0, r3
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
	...

08007104 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
    {
 800710c:	4a04      	ldr	r2, [pc, #16]	; (8007120 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	601a      	str	r2, [r3, #0]
    }
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	0801b30c 	.word	0x0801b30c

08007124 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
    }
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff ffe9 	bl	8007104 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8007132:	210c      	movs	r1, #12
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f011 fd27 	bl	8018b88 <_ZdlPvj>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800714e:	4a09      	ldr	r2, [pc, #36]	; (8007174 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	605a      	str	r2, [r3, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	721a      	strb	r2, [r3, #8]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	725a      	strb	r2, [r3, #9]
    {
    }
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	0801b30c 	.word	0x0801b30c

08007178 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
     *
     * @brief Notify the framework that a DMA interrupt has occurred.
     *
     *        Notify the framework that a DMA interrupt has occurred.
     */
    void signalDMAInterrupt()
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
    {
        dma.signalDMAInterrupt();
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3314      	adds	r3, #20
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4610      	mov	r0, r2
 8007190:	4798      	blx	r3
    }
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <_ZN8touchgfx3HAL3lcdEv+0x22>
 80071ac:	4b08      	ldr	r3, [pc, #32]	; (80071d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 80071b6:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071bc:	e002      	b.n	80071c4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 80071be:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
        }
    }
 80071c4:	4618      	mov	r0, r3
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20001100 	.word	0x20001100

080071d4 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3328      	adds	r3, #40	; 0x28
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4610      	mov	r0, r2
 80071e8:	4798      	blx	r3
    }
 80071ea:	bf00      	nop
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
	...

080071f4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721c:	f023 0107 	bic.w	r1, r3, #7
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007230:	4b06      	ldr	r3, [pc, #24]	; (800724c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8007232:	4013      	ands	r3, r2
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	6812      	ldr	r2, [r2, #0]
 800723a:	430b      	orrs	r3, r1
 800723c:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	ffffc000 	.word	0xffffc000

08007250 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8007258:	f7ff fbda 	bl	8006a10 <_ZN8touchgfx3HAL11getInstanceEv>
 800725c:	4603      	mov	r3, r0
 800725e:	4618      	mov	r0, r3
 8007260:	f7ff ff8a 	bl	8007178 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
    assert(0);
 8007274:	4b02      	ldr	r3, [pc, #8]	; (8007280 <DMA2D_XferErrorCallback+0x14>)
 8007276:	4a03      	ldr	r2, [pc, #12]	; (8007284 <DMA2D_XferErrorCallback+0x18>)
 8007278:	213e      	movs	r1, #62	; 0x3e
 800727a:	4803      	ldr	r0, [pc, #12]	; (8007288 <DMA2D_XferErrorCallback+0x1c>)
 800727c:	f011 fcb0 	bl	8018be0 <__assert_func>
 8007280:	08019c28 	.word	0x08019c28
 8007284:	0801a138 	.word	0x0801a138
 8007288:	08019c2c 	.word	0x08019c2c

0800728c <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3318      	adds	r3, #24
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff fed1 	bl	8007040 <_ZN8touchgfx9colortypeC1Ev>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 80072a8:	b5b0      	push	{r4, r5, r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	330c      	adds	r3, #12
 80072b6:	4619      	mov	r1, r3
 80072b8:	4610      	mov	r0, r2
 80072ba:	f7ff ff43 	bl	8007144 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80072be:	4a0e      	ldr	r2, [pc, #56]	; (80072f8 <_ZN10STM32F7DMAC1Ev+0x50>)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f103 000c 	add.w	r0, r3, #12
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3320      	adds	r3, #32
 80072ce:	2260      	movs	r2, #96	; 0x60
 80072d0:	4619      	mov	r1, r3
 80072d2:	f005 fdc3 	bl	800ce5c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3320      	adds	r3, #32
 80072da:	245f      	movs	r4, #95	; 0x5f
 80072dc:	461d      	mov	r5, r3
 80072de:	2c00      	cmp	r4, #0
 80072e0:	db05      	blt.n	80072ee <_ZN10STM32F7DMAC1Ev+0x46>
 80072e2:	4628      	mov	r0, r5
 80072e4:	f7ff ffd2 	bl	800728c <_ZN8touchgfx6BlitOpC1Ev>
 80072e8:	3520      	adds	r5, #32
 80072ea:	3c01      	subs	r4, #1
 80072ec:	e7f7      	b.n	80072de <_ZN10STM32F7DMAC1Ev+0x36>
{}
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bdb0      	pop	{r4, r5, r7, pc}
 80072f8:	0801a0cc 	.word	0x0801a0cc

080072fc <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	4a0b      	ldr	r2, [pc, #44]	; (8007334 <_ZN10STM32F7DMAD1Ev+0x38>)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 800730a:	480b      	ldr	r0, [pc, #44]	; (8007338 <_ZN10STM32F7DMAD1Ev+0x3c>)
 800730c:	f7f9 fce6 	bl	8000cdc <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8007310:	205a      	movs	r0, #90	; 0x5a
 8007312:	f7ff fe71 	bl	8006ff8 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	330c      	adds	r3, #12
 800731a:	4618      	mov	r0, r3
 800731c:	f000 faa8 	bl	8007870 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff feee 	bl	8007104 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	0801a0cc 	.word	0x0801a0cc
 8007338:	200036b8 	.word	0x200036b8

0800733c <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
}
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff ffd9 	bl	80072fc <_ZN10STM32F7DMAD1Ev>
 800734a:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f011 fc1a 	bl	8018b88 <_ZdlPvj>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8007368:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <_ZN10STM32F7DMA10initializeEv+0x34>)
 800736a:	4a0b      	ldr	r2, [pc, #44]	; (8007398 <_ZN10STM32F7DMA10initializeEv+0x38>)
 800736c:	601a      	str	r2, [r3, #0]
    hdma2d.Init.RedBlueSwap = DMA2D_RB_SWAP;
 800736e:	4b09      	ldr	r3, [pc, #36]	; (8007394 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8007370:	2201      	movs	r2, #1
 8007372:	615a      	str	r2, [r3, #20]
    HAL_DMA2D_Init(&hdma2d);
 8007374:	4807      	ldr	r0, [pc, #28]	; (8007394 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8007376:	f7f9 fc57 	bl	8000c28 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800737a:	4b06      	ldr	r3, [pc, #24]	; (8007394 <_ZN10STM32F7DMA10initializeEv+0x34>)
 800737c:	4a07      	ldr	r2, [pc, #28]	; (800739c <_ZN10STM32F7DMA10initializeEv+0x3c>)
 800737e:	619a      	str	r2, [r3, #24]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8007380:	4b04      	ldr	r3, [pc, #16]	; (8007394 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8007382:	4a07      	ldr	r2, [pc, #28]	; (80073a0 <_ZN10STM32F7DMA10initializeEv+0x40>)
 8007384:	61da      	str	r2, [r3, #28]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8007386:	205a      	movs	r0, #90	; 0x5a
 8007388:	f7ff fe16 	bl	8006fb8 <__NVIC_EnableIRQ>
}
 800738c:	bf00      	nop
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	200036b8 	.word	0x200036b8
 8007398:	4002b000 	.word	0x4002b000
 800739c:	08007251 	.word	0x08007251
 80073a0:	0800726d 	.word	0x0800726d

080073a4 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 80073ac:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 80073bc:	b590      	push	{r4, r7, lr}
 80073be:	b08d      	sub	sp, #52	; 0x34
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80073c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	d007      	beq.n	80073e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b40      	cmp	r3, #64	; 0x40
 80073de:	d003      	beq.n	80073e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d101      	bne.n	80073ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80073ec:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80073ee:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80073f4:	2b80      	cmp	r3, #128	; 0x80
 80073f6:	d004      	beq.n	8007402 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007400:	d101      	bne.n	8007406 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8007406:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8007408:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 800740a:	f7ff fec7 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800740e:	4602      	mov	r2, r0
 8007410:	6813      	ldr	r3, [r2, #0]
 8007412:	3320      	adds	r3, #32
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4610      	mov	r0, r2
 8007418:	4798      	blx	r3
 800741a:	4603      	mov	r3, r0
 800741c:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d01d      	beq.n	8007462 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8007426:	2b40      	cmp	r3, #64	; 0x40
 8007428:	d804      	bhi.n	8007434 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 800742a:	2b04      	cmp	r3, #4
 800742c:	d00e      	beq.n	800744c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 800742e:	2b20      	cmp	r3, #32
 8007430:	d017      	beq.n	8007462 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8007432:	e019      	b.n	8007468 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8007434:	2b80      	cmp	r3, #128	; 0x80
 8007436:	d003      	beq.n	8007440 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8007438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743c:	d003      	beq.n	8007446 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 800743e:	e013      	b.n	8007468 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8007440:	230a      	movs	r3, #10
 8007442:	623b      	str	r3, [r7, #32]
        break;
 8007444:	e01a      	b.n	800747c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8007446:	2309      	movs	r3, #9
 8007448:	623b      	str	r3, [r7, #32]
        break;
 800744a:	e017      	b.n	800747c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800744c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8007452:	7f7b      	ldrb	r3, [r7, #29]
 8007454:	2b10      	cmp	r3, #16
 8007456:	d101      	bne.n	800745c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8007458:	2302      	movs	r3, #2
 800745a:	e000      	b.n	800745e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 800745c:	2301      	movs	r3, #1
 800745e:	623b      	str	r3, [r7, #32]
        break;
 8007460:	e00c      	b.n	800747c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8007462:	2300      	movs	r3, #0
 8007464:	623b      	str	r3, [r7, #32]
        break;
 8007466:	e009      	b.n	800747c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8007468:	2300      	movs	r3, #0
 800746a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800746c:	7f7b      	ldrb	r3, [r7, #29]
 800746e:	2b10      	cmp	r3, #16
 8007470:	d101      	bne.n	8007476 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8007472:	2302      	movs	r3, #2
 8007474:	e000      	b.n	8007478 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8007476:	2301      	movs	r3, #1
 8007478:	623b      	str	r3, [r7, #32]
        break;
 800747a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800747c:	4a79      	ldr	r2, [pc, #484]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	6053      	str	r3, [r2, #4]
    hdma2d.Init.RedBlueSwap = DMA2D_RB_SWAP;
 8007482:	4b78      	ldr	r3, [pc, #480]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8007484:	2201      	movs	r2, #1
 8007486:	615a      	str	r2, [r3, #20]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8007488:	7f7b      	ldrb	r3, [r7, #29]
 800748a:	2b10      	cmp	r3, #16
 800748c:	d101      	bne.n	8007492 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd6>
 800748e:	2302      	movs	r3, #2
 8007490:	e000      	b.n	8007494 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd8>
 8007492:	2301      	movs	r3, #1
 8007494:	4a73      	ldr	r2, [pc, #460]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8007496:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	8adb      	ldrh	r3, [r3, #22]
 800749c:	461a      	mov	r2, r3
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	8a1b      	ldrh	r3, [r3, #16]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	4b6f      	ldr	r3, [pc, #444]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80074a8:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80074aa:	7f7b      	ldrb	r3, [r7, #29]
 80074ac:	2b10      	cmp	r3, #16
 80074ae:	d101      	bne.n	80074b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
 80074b0:	2202      	movs	r2, #2
 80074b2:	e000      	b.n	80074b6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 80074b4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	8adb      	ldrh	r3, [r3, #22]
 80074ba:	4619      	mov	r1, r3
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	8a1b      	ldrh	r3, [r3, #16]
 80074c0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80074c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074c4:	4867      	ldr	r0, [pc, #412]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80074c6:	f7ff fe95 	bl	80071f4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80074ca:	4a66      	ldr	r2, [pc, #408]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	63d3      	str	r3, [r2, #60]	; 0x3c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	8a9b      	ldrh	r3, [r3, #20]
 80074d4:	461a      	mov	r2, r3
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	8a1b      	ldrh	r3, [r3, #16]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	4b61      	ldr	r3, [pc, #388]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80074e0:	639a      	str	r2, [r3, #56]	; 0x38


    if (blendingImage || blendingText)
 80074e2:	7ffb      	ldrb	r3, [r7, #31]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d103      	bne.n	80074f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
 80074e8:	7fbb      	ldrb	r3, [r7, #30]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 8085 	beq.w	80075fa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
    {
        if (blitOp.alpha < 255)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	7f1b      	ldrb	r3, [r3, #28]
 80074f4:	2bff      	cmp	r3, #255	; 0xff
 80074f6:	d008      	beq.n	800750a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80074f8:	4b5a      	ldr	r3, [pc, #360]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80074fa:	2202      	movs	r2, #2
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	7f1b      	ldrb	r3, [r3, #28]
 8007502:	461a      	mov	r2, r3
 8007504:	4b57      	ldr	r3, [pc, #348]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8007506:	645a      	str	r2, [r3, #68]	; 0x44
 8007508:	e002      	b.n	8007510 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800750a:	4b56      	ldr	r3, [pc, #344]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800750c:	2200      	movs	r2, #0
 800750e:	641a      	str	r2, [r3, #64]	; 0x40
        }

        if (blendingText)
 8007510:	7fbb      	ldrb	r3, [r7, #30]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d059      	beq.n	80075ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20e>
        {
            if (bitDepth == 16)
 8007516:	7f7b      	ldrb	r3, [r7, #29]
 8007518:	2b10      	cmp	r3, #16
 800751a:	d14a      	bne.n	80075b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	3318      	adds	r3, #24
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff fda7 	bl	8007074 <_ZNK8touchgfx9colortypecvtEv>
 8007526:	4603      	mov	r3, r0
 8007528:	12db      	asrs	r3, r3, #11
 800752a:	f003 021f 	and.w	r2, r3, #31
 800752e:	4613      	mov	r3, r2
 8007530:	021b      	lsls	r3, r3, #8
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	4a4c      	ldr	r2, [pc, #304]	; (8007668 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8007536:	fb82 1203 	smull	r1, r2, r2, r3
 800753a:	441a      	add	r2, r3
 800753c:	1112      	asrs	r2, r2, #4
 800753e:	17db      	asrs	r3, r3, #31
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	3318      	adds	r3, #24
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff fd93 	bl	8007074 <_ZNK8touchgfx9colortypecvtEv>
 800754e:	4603      	mov	r3, r0
 8007550:	115b      	asrs	r3, r3, #5
 8007552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007556:	4613      	mov	r3, r2
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	4a43      	ldr	r2, [pc, #268]	; (800766c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800755e:	fb82 1203 	smull	r1, r2, r2, r3
 8007562:	441a      	add	r2, r3
 8007564:	1152      	asrs	r2, r2, #5
 8007566:	17db      	asrs	r3, r3, #31
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	3318      	adds	r3, #24
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff fd7f 	bl	8007074 <_ZNK8touchgfx9colortypecvtEv>
 8007576:	4603      	mov	r3, r0
 8007578:	f003 021f 	and.w	r2, r3, #31
 800757c:	4613      	mov	r3, r2
 800757e:	021b      	lsls	r3, r3, #8
 8007580:	1a9b      	subs	r3, r3, r2
 8007582:	4a39      	ldr	r2, [pc, #228]	; (8007668 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8007584:	fb82 1203 	smull	r1, r2, r2, r3
 8007588:	441a      	add	r2, r3
 800758a:	1112      	asrs	r2, r2, #4
 800758c:	17db      	asrs	r3, r3, #31
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	7f1b      	ldrb	r3, [r3, #28]
 8007596:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	061a      	lsls	r2, r3, #24
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	431a      	orrs	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	431a      	orrs	r2, r3
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	4a2d      	ldr	r2, [pc, #180]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80075ae:	6453      	str	r3, [r2, #68]	; 0x44
 80075b0:	e00b      	b.n	80075ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20e>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	3318      	adds	r3, #24
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff fd50 	bl	800705c <_ZNK8touchgfx9colortype10getColor32Ev>
 80075bc:	4602      	mov	r2, r0
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	7f1b      	ldrb	r3, [r3, #28]
 80075c2:	061b      	lsls	r3, r3, #24
 80075c4:	4313      	orrs	r3, r2
 80075c6:	4a27      	ldr	r2, [pc, #156]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80075c8:	6453      	str	r3, [r2, #68]	; 0x44
            }
        }
        hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_SWAP;
 80075ca:	4b26      	ldr	r3, [pc, #152]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80075cc:	2201      	movs	r2, #1
 80075ce:	64da      	str	r2, [r3, #76]	; 0x4c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	8adb      	ldrh	r3, [r3, #22]
 80075d4:	461a      	mov	r2, r3
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	8a1b      	ldrh	r3, [r3, #16]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	4b21      	ldr	r3, [pc, #132]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80075e0:	621a      	str	r2, [r3, #32]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80075e2:	7f7b      	ldrb	r3, [r7, #29]
 80075e4:	2b10      	cmp	r3, #16
 80075e6:	d101      	bne.n	80075ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e000      	b.n	80075ee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 80075ec:	2301      	movs	r3, #1
 80075ee:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80075f0:	6253      	str	r3, [r2, #36]	; 0x24

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80075f2:	2100      	movs	r1, #0
 80075f4:	481b      	ldr	r0, [pc, #108]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80075f6:	f7f9 fdf1 	bl	80011dc <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80075fa:	2101      	movs	r1, #1
 80075fc:	4819      	ldr	r0, [pc, #100]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80075fe:	f7f9 fded 	bl	80011dc <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8007602:	7ffb      	ldrb	r3, [r7, #31]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 8007608:	7fbb      	ldrb	r3, [r7, #30]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d015      	beq.n	800763a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8007612:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8007618:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800761e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8007624:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	9200      	str	r2, [sp, #0]
 800762e:	4623      	mov	r3, r4
 8007630:	4602      	mov	r2, r0
 8007632:	480c      	ldr	r0, [pc, #48]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8007634:	f7f9 fbf5 	bl	8000e22 <HAL_DMA2D_BlendingStart_IT>
 8007638:	e00f      	b.n	800765a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29e>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 800763e:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8007644:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 800764a:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	4603      	mov	r3, r0
 8007654:	4803      	ldr	r0, [pc, #12]	; (8007664 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8007656:	f7f9 fbb1 	bl	8000dbc <HAL_DMA2D_Start_IT>
    }
}
 800765a:	bf00      	nop
 800765c:	372c      	adds	r7, #44	; 0x2c
 800765e:	46bd      	mov	sp, r7
 8007660:	bd90      	pop	{r4, r7, pc}
 8007662:	bf00      	nop
 8007664:	200036b8 	.word	0x200036b8
 8007668:	84210843 	.word	0x84210843
 800766c:	82082083 	.word	0x82082083

08007670 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8007670:	b590      	push	{r4, r7, lr}
 8007672:	b08d      	sub	sp, #52	; 0x34
 8007674:	af02      	add	r7, sp, #8
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 800767a:	f7ff fd8f 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800767e:	4602      	mov	r2, r0
 8007680:	6813      	ldr	r3, [r2, #0]
 8007682:	3320      	adds	r3, #32
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4610      	mov	r0, r2
 8007688:	4798      	blx	r3
 800768a:	4603      	mov	r3, r0
 800768c:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800768e:	7ffb      	ldrb	r3, [r7, #31]
 8007690:	2b10      	cmp	r3, #16
 8007692:	d101      	bne.n	8007698 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8007694:	2302      	movs	r3, #2
 8007696:	e000      	b.n	800769a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8007698:	2301      	movs	r3, #1
 800769a:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 80076a0:	7ffb      	ldrb	r3, [r7, #31]
 80076a2:	2b10      	cmp	r3, #16
 80076a4:	d149      	bne.n	800773a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	3318      	adds	r3, #24
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff fce2 	bl	8007074 <_ZNK8touchgfx9colortypecvtEv>
 80076b0:	4603      	mov	r3, r0
 80076b2:	12db      	asrs	r3, r3, #11
 80076b4:	f003 021f 	and.w	r2, r3, #31
 80076b8:	4613      	mov	r3, r2
 80076ba:	021b      	lsls	r3, r3, #8
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	4a69      	ldr	r2, [pc, #420]	; (8007864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80076c0:	fb82 1203 	smull	r1, r2, r2, r3
 80076c4:	441a      	add	r2, r3
 80076c6:	1112      	asrs	r2, r2, #4
 80076c8:	17db      	asrs	r3, r3, #31
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	3318      	adds	r3, #24
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff fcce 	bl	8007074 <_ZNK8touchgfx9colortypecvtEv>
 80076d8:	4603      	mov	r3, r0
 80076da:	115b      	asrs	r3, r3, #5
 80076dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076e0:	4613      	mov	r3, r2
 80076e2:	021b      	lsls	r3, r3, #8
 80076e4:	1a9b      	subs	r3, r3, r2
 80076e6:	4a60      	ldr	r2, [pc, #384]	; (8007868 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 80076e8:	fb82 1203 	smull	r1, r2, r2, r3
 80076ec:	441a      	add	r2, r3
 80076ee:	1152      	asrs	r2, r2, #5
 80076f0:	17db      	asrs	r3, r3, #31
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	3318      	adds	r3, #24
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff fcba 	bl	8007074 <_ZNK8touchgfx9colortypecvtEv>
 8007700:	4603      	mov	r3, r0
 8007702:	f003 021f 	and.w	r2, r3, #31
 8007706:	4613      	mov	r3, r2
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	1a9b      	subs	r3, r3, r2
 800770c:	4a55      	ldr	r2, [pc, #340]	; (8007864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 800770e:	fb82 1203 	smull	r1, r2, r2, r3
 8007712:	441a      	add	r2, r3
 8007714:	1112      	asrs	r2, r2, #4
 8007716:	17db      	asrs	r3, r3, #31
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	7f1b      	ldrb	r3, [r3, #28]
 8007720:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	061a      	lsls	r2, r3, #24
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	431a      	orrs	r2, r3
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	021b      	lsls	r3, r3, #8
 8007730:	4313      	orrs	r3, r2
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	4313      	orrs	r3, r2
 8007736:	623b      	str	r3, [r7, #32]
 8007738:	e00b      	b.n	8007752 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	7f1b      	ldrb	r3, [r3, #28]
 800773e:	061b      	lsls	r3, r3, #24
 8007740:	461c      	mov	r4, r3
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	3318      	adds	r3, #24
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fc88 	bl	800705c <_ZNK8touchgfx9colortype10getColor32Ev>
 800774c:	4603      	mov	r3, r0
 800774e:	4323      	orrs	r3, r4
 8007750:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b08      	cmp	r3, #8
 8007758:	d103      	bne.n	8007762 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800775a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007760:	e003      	b.n	800776a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8007762:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007768:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800776a:	4a40      	ldr	r2, [pc, #256]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8007770:	7ffb      	ldrb	r3, [r7, #31]
 8007772:	2b10      	cmp	r3, #16
 8007774:	d101      	bne.n	800777a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8007776:	2302      	movs	r3, #2
 8007778:	e000      	b.n	800777c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 800777a:	2301      	movs	r3, #1
 800777c:	4a3b      	ldr	r2, [pc, #236]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800777e:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	8adb      	ldrh	r3, [r3, #22]
 8007784:	461a      	mov	r2, r3
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	8a1b      	ldrh	r3, [r3, #16]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	461a      	mov	r2, r3
 800778e:	4b37      	ldr	r3, [pc, #220]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8007790:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8007792:	7ffb      	ldrb	r3, [r7, #31]
 8007794:	2b10      	cmp	r3, #16
 8007796:	d101      	bne.n	800779c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8007798:	2202      	movs	r2, #2
 800779a:	e000      	b.n	800779e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 800779c:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	8adb      	ldrh	r3, [r3, #22]
 80077a2:	4619      	mov	r1, r3
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	8a1b      	ldrh	r3, [r3, #16]
 80077a8:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80077aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077ac:	482f      	ldr	r0, [pc, #188]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80077ae:	f7ff fd21 	bl	80071f4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077b8:	d11e      	bne.n	80077f8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80077ba:	4b2c      	ldr	r3, [pc, #176]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80077bc:	2201      	movs	r2, #1
 80077be:	641a      	str	r2, [r3, #64]	; 0x40
        hdma2d.LayerCfg[1].InputAlpha = color;
 80077c0:	4a2a      	ldr	r2, [pc, #168]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	6453      	str	r3, [r2, #68]	; 0x44
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 80077c6:	4b29      	ldr	r3, [pc, #164]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80077c8:	2209      	movs	r2, #9
 80077ca:	63da      	str	r2, [r3, #60]	; 0x3c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	8adb      	ldrh	r3, [r3, #22]
 80077d0:	461a      	mov	r2, r3
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	8a1b      	ldrh	r3, [r3, #16]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	4b24      	ldr	r3, [pc, #144]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80077dc:	621a      	str	r2, [r3, #32]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80077de:	7ffb      	ldrb	r3, [r7, #31]
 80077e0:	2b10      	cmp	r3, #16
 80077e2:	d101      	bne.n	80077e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e000      	b.n	80077ea <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 80077e8:	2301      	movs	r3, #1
 80077ea:	4a20      	ldr	r2, [pc, #128]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80077ec:	6253      	str	r3, [r2, #36]	; 0x24
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80077ee:	2100      	movs	r1, #0
 80077f0:	481e      	ldr	r0, [pc, #120]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80077f2:	f7f9 fcf3 	bl	80011dc <HAL_DMA2D_ConfigLayer>
 80077f6:	e005      	b.n	8007804 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80077f8:	4a1c      	ldr	r2, [pc, #112]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	63d3      	str	r3, [r2, #60]	; 0x3c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80077fe:	4b1b      	ldr	r3, [pc, #108]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8007800:	2200      	movs	r2, #0
 8007802:	639a      	str	r2, [r3, #56]	; 0x38
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8007804:	2101      	movs	r1, #1
 8007806:	4819      	ldr	r0, [pc, #100]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8007808:	f7f9 fce8 	bl	80011dc <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007812:	d115      	bne.n	8007840 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8007818:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800781e:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8007824:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800782a:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	9200      	str	r2, [sp, #0]
 8007834:	4623      	mov	r3, r4
 8007836:	4602      	mov	r2, r0
 8007838:	480c      	ldr	r0, [pc, #48]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800783a:	f7f9 faf2 	bl	8000e22 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 800783e:	e00d      	b.n	800785c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800784a:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	460b      	mov	r3, r1
 8007854:	6a39      	ldr	r1, [r7, #32]
 8007856:	4805      	ldr	r0, [pc, #20]	; (800786c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8007858:	f7f9 fab0 	bl	8000dbc <HAL_DMA2D_Start_IT>
}
 800785c:	bf00      	nop
 800785e:	372c      	adds	r7, #44	; 0x2c
 8007860:	46bd      	mov	sp, r7
 8007862:	bd90      	pop	{r4, r7, pc}
 8007864:	84210843 	.word	0x84210843
 8007868:	82082083 	.word	0x82082083
 800786c:	200036b8 	.word	0x200036b8

08007870 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	4a05      	ldr	r2, [pc, #20]	; (8007890 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff fc05 	bl	8007090 <_ZN8touchgfx9DMA_QueueD1Ev>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	0801b35c 	.word	0x0801b35c

08007894 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff ffe7 	bl	8007870 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80078a2:	2114      	movs	r1, #20
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f011 f96f 	bl	8018b88 <_ZdlPvj>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
    {
 80078bc:	4a04      	ldr	r2, [pc, #16]	; (80078d0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	601a      	str	r2, [r3, #0]
    }
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	0801a18c 	.word	0x0801a18c

080078d4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
    }
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ffe9 	bl	80078b4 <_ZN8touchgfx15TouchControllerD1Ev>
 80078e2:	2104      	movs	r1, #4
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f011 f94f 	bl	8018b88 <_ZdlPvj>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
	...

08007924 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	4a05      	ldr	r2, [pc, #20]	; (8007944 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4618      	mov	r0, r3
 8007936:	f7ff ffbd 	bl	80078b4 <_ZN8touchgfx15TouchControllerD1Ev>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	0801a174 	.word	0x0801a174

08007948 <_ZN20STM32TouchControllerD0Ev>:
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff ffe7 	bl	8007924 <_ZN20STM32TouchControllerD1Ev>
 8007956:	2104      	movs	r1, #4
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f011 f915 	bl	8018b88 <_ZdlPvj>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	80da      	strh	r2, [r3, #6]
    }
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
	...

08007998 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     *
     *        Registers an array of texts.
     *
     * @param t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80079a0:	4a04      	ldr	r2, [pc, #16]	; (80079b4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6013      	str	r3, [r2, #0]
    }
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	2000117c 	.word	0x2000117c

080079b8 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
    {
 80079c0:	4a04      	ldr	r2, [pc, #16]	; (80079d4 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	601a      	str	r2, [r3, #0]
    }
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	0801a384 	.word	0x0801a384

080079d8 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
    }
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff ffe9 	bl	80079b8 <_ZN8touchgfx12FontProviderD1Ev>
 80079e6:	2104      	movs	r1, #4
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f011 f8cd 	bl	8018b88 <_ZdlPvj>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8007a06:	4a0b      	ldr	r2, [pc, #44]	; (8007a34 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	605a      	str	r2, [r3, #4]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	609a      	str	r2, [r3, #8]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	60da      	str	r2, [r3, #12]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	611a      	str	r2, [r3, #16]
    {
    }
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	0801a374 	.word	0x0801a374

08007a38 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
    {
 8007a40:	4a04      	ldr	r2, [pc, #16]	; (8007a54 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
    }
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	0801a374 	.word	0x0801a374

08007a58 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
    }
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff ffe9 	bl	8007a38 <_ZN8touchgfx7MVPHeapD1Ev>
 8007a66:	2114      	movs	r1, #20
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f011 f88d 	bl	8018b88 <_ZdlPvj>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4618      	mov	r0, r3
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
    {
 8007a80:	4a04      	ldr	r2, [pc, #16]	; (8007a94 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	601a      	str	r2, [r3, #0]
    }
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	0801b528 	.word	0x0801b528

08007a98 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
    }
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff ffe9 	bl	8007a78 <_ZN8touchgfx3LCDD1Ev>
 8007aa6:	2108      	movs	r1, #8
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f011 f86d 	bl	8018b88 <_ZdlPvj>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
    {
    }
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
    {
    }
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
    {
    }
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	460b      	mov	r3, r1
 8007b04:	70fb      	strb	r3, [r7, #3]
    {
    }
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
    {
    }
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
    {
    }
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
	...

08007b3c <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
    {
 8007b44:	4a04      	ldr	r2, [pc, #16]	; (8007b58 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	601a      	str	r2, [r3, #0]
    }
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	0801a34c 	.word	0x0801a34c

08007b5c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
    }
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff ffe9 	bl	8007b3c <_ZN8touchgfx15UIEventListenerD1Ev>
 8007b6a:	2104      	movs	r1, #4
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f011 f80b 	bl	8018b88 <_ZdlPvj>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
    {
    }
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
    {
 8007b9c:	4a04      	ldr	r2, [pc, #16]	; (8007bb0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	601a      	str	r2, [r3, #0]
    }
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	0801a334 	.word	0x0801a334

08007bb4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
    }
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff ffe9 	bl	8007b94 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8007bc2:	2104      	movs	r1, #4
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f010 ffdf 	bl	8018b88 <_ZdlPvj>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	801a      	strh	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	805a      	strh	r2, [r3, #2]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	809a      	strh	r2, [r3, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	80da      	strh	r2, [r3, #6]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	811a      	strh	r2, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	815a      	strh	r2, [r3, #10]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	819a      	strh	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	739a      	strb	r2, [r3, #14]
        {
        }
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff ffd5 	bl	8007bd4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	611a      	str	r2, [r3, #16]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	829a      	strh	r2, [r3, #20]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8007c4e:	4a44      	ldr	r2, [pc, #272]	; (8007d60 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	605a      	str	r2, [r3, #4]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	609a      	str	r2, [r3, #8]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	60da      	str	r2, [r3, #12]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	611a      	str	r2, [r3, #16]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	615a      	str	r2, [r3, #20]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	619a      	str	r2, [r3, #24]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	331c      	adds	r3, #28
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7ff ffcc 	bl	8007c1a <_ZN8touchgfx8GesturesC1Ev>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	641a      	str	r2, [r3, #64]	; 0x40
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	645a      	str	r2, [r3, #68]	; 0x44
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3350      	adds	r3, #80	; 0x50
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7ff fe53 	bl	8007968 <_ZN8touchgfx4RectC1Ev>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	671a      	str	r2, [r3, #112]	; 0x70
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8007d18:	4a12      	ldr	r2, [pc, #72]	; (8007d64 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8007d1e:	4a12      	ldr	r2, [pc, #72]	; (8007d68 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8007d20:	8b3b      	ldrh	r3, [r7, #24]
 8007d22:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8007d24:	4a11      	ldr	r2, [pc, #68]	; (8007d6c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8007d26:	8bbb      	ldrh	r3, [r7, #28]
 8007d28:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8007d2a:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8007d30:	4b0d      	ldr	r3, [pc, #52]	; (8007d68 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8007d32:	881a      	ldrh	r2, [r3, #0]
 8007d34:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8007d36:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8007d38:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8007d3a:	881a      	ldrh	r2, [r3, #0]
 8007d3c:	4b0e      	ldr	r3, [pc, #56]	; (8007d78 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8007d3e:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8007d40:	8b3a      	ldrh	r2, [r7, #24]
 8007d42:	8bbb      	ldrh	r3, [r7, #28]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d301      	bcc.n	8007d4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	e000      	b.n	8007d4e <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	0801aec8 	.word	0x0801aec8
 8007d64:	20001100 	.word	0x20001100
 8007d68:	200010f4 	.word	0x200010f4
 8007d6c:	200010f6 	.word	0x200010f6
 8007d70:	200010f8 	.word	0x200010f8
 8007d74:	200010fa 	.word	0x200010fa
 8007d78:	200010fc 	.word	0x200010fc

08007d7c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
    {
 8007d84:	4a04      	ldr	r2, [pc, #16]	; (8007d98 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	601a      	str	r2, [r3, #0]
    }
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	0801aec8 	.word	0x0801aec8

08007d9c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
    }
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff ffe9 	bl	8007d7c <_ZN8touchgfx3HALD1Ev>
 8007daa:	2178      	movs	r1, #120	; 0x78
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f010 feeb 	bl	8018b88 <_ZdlPvj>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	4a05      	ldr	r2, [pc, #20]	; (8007ddc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff feb5 	bl	8007b3c <_ZN8touchgfx15UIEventListenerD1Ev>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	0801b604 	.word	0x0801b604

08007de0 <_ZN8touchgfx11ApplicationD0Ev>:
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff ffe7 	bl	8007dbc <_ZN8touchgfx11ApplicationD1Ev>
 8007dee:	f44f 7198 	mov.w	r1, #304	; 0x130
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f010 fec8 	bl	8018b88 <_ZdlPvj>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	4a05      	ldr	r2, [pc, #20]	; (8007e24 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff ffd1 	bl	8007dbc <_ZN8touchgfx11ApplicationD1Ev>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	0801a2f8 	.word	0x0801a2f8

08007e28 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff ffe7 	bl	8007e04 <_ZN8touchgfx14MVPApplicationD1Ev>
 8007e36:	f44f 719c 	mov.w	r1, #312	; 0x138
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f010 fea4 	bl	8018b88 <_ZdlPvj>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f804 	bl	8007e60 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8007e58:	bf00      	nop
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00f      	beq.n	8007e92 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	330c      	adds	r3, #12
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e000      	b.n	8007e94 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8007e92:	2300      	movs	r3, #0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00e      	beq.n	8007eb6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3308      	adds	r3, #8
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4610      	mov	r0, r2
 8007eac:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8007eb6:	bf00      	nop
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	4a08      	ldr	r2, [pc, #32]	; (8007eec <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fb13 	bl	8008500 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff ff91 	bl	8007e04 <_ZN8touchgfx14MVPApplicationD1Ev>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	0801a2a4 	.word	0x0801a2a4

08007ef0 <_ZN23FrontendApplicationBaseD0Ev>:
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff ffe1 	bl	8007ec0 <_ZN23FrontendApplicationBaseD1Ev>
 8007efe:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f010 fe40 	bl	8018b88 <_ZdlPvj>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
	...

08007f14 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	4a05      	ldr	r2, [pc, #20]	; (8007f34 <_ZN19FrontendApplicationD1Ev+0x20>)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff ffcb 	bl	8007ec0 <_ZN23FrontendApplicationBaseD1Ev>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	0801a268 	.word	0x0801a268

08007f38 <_ZN19FrontendApplicationD0Ev>:
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff ffe7 	bl	8007f14 <_ZN19FrontendApplicationD1Ev>
 8007f46:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f010 fe1c 	bl	8018b88 <_ZdlPvj>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f003 fd0d 	bl	800b988 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f006 fb97 	bl	800e6a4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f002 fe44 	bl	800ac18 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
 8007fa4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	f7ff fd21 	bl	80079f8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8007fb6:	4a04      	ldr	r2, [pc, #16]	; (8007fc8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	601a      	str	r2, [r3, #0]
    {

    }
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	0801a254 	.word	0x0801a254

08007fcc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <__tcf_0+0xc>)
 8007fd2:	f000 f9f3 	bl	80083bc <_ZN12FrontendHeapD1Ev>
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20000104 	.word	0x20000104

08007fdc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8007fe0:	4b08      	ldr	r3, [pc, #32]	; (8008004 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d108      	bne.n	8007ffe <_ZN12FrontendHeap11getInstanceEv+0x22>
 8007fec:	4806      	ldr	r0, [pc, #24]	; (8008008 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8007fee:	f000 f831 	bl	8008054 <_ZN12FrontendHeapC1Ev>
 8007ff2:	4b04      	ldr	r3, [pc, #16]	; (8008004 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	4804      	ldr	r0, [pc, #16]	; (800800c <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8007ffa:	f010 fe0f 	bl	8018c1c <atexit>
        return instance;
 8007ffe:	4b02      	ldr	r3, [pc, #8]	; (8008008 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8008000:	4618      	mov	r0, r3
 8008002:	bd80      	pop	{r7, pc}
 8008004:	20000340 	.word	0x20000340
 8008008:	20000104 	.word	0x20000104
 800800c:	08007fcd 	.word	0x08007fcd

08008010 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	4a05      	ldr	r2, [pc, #20]	; (8008030 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fd09 	bl	8007a38 <_ZN8touchgfx7MVPHeapD1Ev>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4618      	mov	r0, r3
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	0801a254 	.word	0x0801a254

08008034 <_ZN16FrontendHeapBaseD0Ev>:
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff ffe7 	bl	8008010 <_ZN16FrontendHeapBaseD1Ev>
 8008042:	2114      	movs	r1, #20
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f010 fd9f 	bl	8018b88 <_ZdlPvj>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8008054:	b590      	push	{r4, r7, lr}
 8008056:	b085      	sub	sp, #20
 8008058:	af02      	add	r7, sp, #8
 800805a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f103 0114 	add.w	r1, r3, #20
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	33e8      	adds	r3, #232	; 0xe8
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	4623      	mov	r3, r4
 8008078:	f7ff ff8e 	bl	8007f98 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800807c:	4a16      	ldr	r2, [pc, #88]	; (80080d8 <_ZN12FrontendHeapC1Ev+0x84>)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3314      	adds	r3, #20
 8008086:	4618      	mov	r0, r3
 8008088:	f000 f8fc 	bl	8008284 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	332c      	adds	r3, #44	; 0x2c
 8008090:	4618      	mov	r0, r3
 8008092:	f000 f92b 	bl	80082ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	33d4      	adds	r3, #212	; 0xd4
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f95a 	bl	8008354 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	4619      	mov	r1, r3
 80080b0:	f003 fc46 	bl	800b940 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80080ba:	4618      	mov	r0, r3
 80080bc:	f003 fc56 	bl	800b96c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	33e8      	adds	r3, #232	; 0xe8
 80080c6:	4619      	mov	r1, r3
 80080c8:	4610      	mov	r0, r2
 80080ca:	f7ff ff58 	bl	8007f7e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd90      	pop	{r4, r7, pc}
 80080d8:	0801a1a4 	.word	0x0801a1a4

080080dc <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
    {
 80080e4:	4a05      	ldr	r2, [pc, #20]	; (80080fc <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff fcc3 	bl	8007a78 <_ZN8touchgfx3LCDD1Ev>
    }
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	0801c868 	.word	0x0801c868

08008100 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
    }
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff ffe7 	bl	80080dc <_ZN8touchgfx8LCD24bppD1Ev>
 800810e:	2158      	movs	r1, #88	; 0x58
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f010 fd39 	bl	8018b88 <_ZdlPvj>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af02      	add	r7, sp, #8
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	8bbb      	ldrh	r3, [r7, #28]
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	8b3b      	ldrh	r3, [r7, #24]
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	f7ff fd7f 	bl	8007c40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8008142:	4a04      	ldr	r2, [pc, #16]	; (8008154 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	601a      	str	r2, [r3, #0]
    {
    }
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	0801a398 	.word	0x0801a398

08008158 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	4a05      	ldr	r2, [pc, #20]	; (8008178 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff fe07 	bl	8007d7c <_ZN8touchgfx3HALD1Ev>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	0801a398 	.word	0x0801a398

0800817c <_ZN20TouchGFXGeneratedHALD0Ev>:
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff ffe7 	bl	8008158 <_ZN20TouchGFXGeneratedHALD1Ev>
 800818a:	2178      	movs	r1, #120	; 0x78
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f010 fcfb 	bl	8018b88 <_ZdlPvj>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af02      	add	r7, sp, #8
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	603b      	str	r3, [r7, #0]
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	8bbb      	ldrh	r3, [r7, #28]
 80081ae:	9301      	str	r3, [sp, #4]
 80081b0:	8b3b      	ldrh	r3, [r7, #24]
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	f7ff ffb1 	bl	8008120 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80081be:	4a04      	ldr	r2, [pc, #16]	; (80081d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	601a      	str	r2, [r3, #0]
    {
    }
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	0801a4f0 	.word	0x0801a4f0

080081d4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	4a04      	ldr	r2, [pc, #16]	; (80081f0 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	0801a18c 	.word	0x0801a18c

080081f4 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff ffe8 	bl	80081d4 <_ZN8touchgfx15TouchControllerC1Ev>
 8008204:	4a03      	ldr	r2, [pc, #12]	; (8008214 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	0801a174 	.word	0x0801a174

08008218 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 640, 480);

void touchgfx_init()
{
 8008218:	b590      	push	{r4, r7, lr}
 800821a:	b085      	sub	sp, #20
 800821c:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800821e:	f003 fab5 	bl	800b78c <_ZN14BitmapDatabase11getInstanceEv>
 8008222:	4604      	mov	r4, r0
 8008224:	f003 fabc 	bl	800b7a0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8008228:	4603      	mov	r3, r0
 800822a:	4619      	mov	r1, r3
 800822c:	2300      	movs	r3, #0
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	2300      	movs	r3, #0
 8008232:	2200      	movs	r2, #0
 8008234:	4620      	mov	r0, r4
 8008236:	f008 fb55 	bl	80108e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 800823a:	480c      	ldr	r0, [pc, #48]	; (800826c <touchgfx_init+0x54>)
 800823c:	f7ff fbac 	bl	8007998 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8008240:	2000      	movs	r0, #0
 8008242:	f003 fad1 	bl	800b7e8 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8008246:	480a      	ldr	r0, [pc, #40]	; (8008270 <touchgfx_init+0x58>)
 8008248:	f008 fa9a 	bl	8010780 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 800824c:	f7ff fec6 	bl	8007fdc <_ZN12FrontendHeap11getInstanceEv>
 8008250:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8008252:	4808      	ldr	r0, [pc, #32]	; (8008274 <touchgfx_init+0x5c>)
 8008254:	f000 fe70 	bl	8008f38 <_ZN11TouchGFXHAL10initializeEv>
  hal.enableLCDControllerInterrupt();
 8008258:	4806      	ldr	r0, [pc, #24]	; (8008274 <touchgfx_init+0x5c>)
 800825a:	f000 fec6 	bl	8008fea <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>
  hal.enableInterrupts();
 800825e:	4805      	ldr	r0, [pc, #20]	; (8008274 <touchgfx_init+0x5c>)
 8008260:	f000 feab 	bl	8008fba <_ZN11TouchGFXHAL16enableInterruptsEv>
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	bd90      	pop	{r4, r7, pc}
 800826c:	20000fc0 	.word	0x20000fc0
 8008270:	2000000c 	.word	0x2000000c
 8008274:	20000fc4 	.word	0x20000fc4

08008278 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
 /*
  * This function check if a VSYNC has occured.
  * If VSYNC has occured, signal TouchGFX to start a rendering
  */
  OSWrappers::waitForVSync();
 800827c:	f7fe fc2c 	bl	8006ad8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
}
 8008280:	bf00      	nop
 8008282:	bd80      	pop	{r7, pc}

08008284 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4618      	mov	r0, r3
 8008290:	f003 fd5e 	bl	800bd50 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8008294:	4a03      	ldr	r2, [pc, #12]	; (80082a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	601a      	str	r2, [r3, #0]
    {
    }
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	0801a220 	.word	0x0801a220

080082a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
    {
    }
 80082b0:	4a05      	ldr	r2, [pc, #20]	; (80082c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f003 fd47 	bl	800bd4c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	0801a220 	.word	0x0801a220

080082cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
    }
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff ffe7 	bl	80082a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80082da:	2118      	movs	r1, #24
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f010 fc53 	bl	8018b88 <_ZdlPvj>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f003 fd2a 	bl	800bd50 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80082fc:	4a03      	ldr	r2, [pc, #12]	; (800830c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	601a      	str	r2, [r3, #0]
    }
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4618      	mov	r0, r3
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	0801a1ec 	.word	0x0801a1ec

08008310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
    }
 8008318:	4a05      	ldr	r2, [pc, #20]	; (8008330 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4618      	mov	r0, r3
 8008322:	f003 fd13 	bl	800bd4c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	0801a1ec 	.word	0x0801a1ec

08008334 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
    }
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7ff ffe7 	bl	8008310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8008342:	21a8      	movs	r1, #168	; 0xa8
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f010 fc1f 	bl	8018b88 <_ZdlPvj>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4618      	mov	r0, r3
 8008360:	f003 fcf6 	bl	800bd50 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8008364:	4a03      	ldr	r2, [pc, #12]	; (8008374 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	601a      	str	r2, [r3, #0]
    }
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	0801a1b8 	.word	0x0801a1b8

08008378 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
    }
 8008380:	4a05      	ldr	r2, [pc, #20]	; (8008398 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4618      	mov	r0, r3
 800838a:	f003 fcdf 	bl	800bd4c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	0801a1b8 	.word	0x0801a1b8

0800839c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
    }
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7ff ffe7 	bl	8008378 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80083aa:	2114      	movs	r1, #20
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f010 fbeb 	bl	8018b88 <_ZdlPvj>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	4a0f      	ldr	r2, [pc, #60]	; (8008404 <_ZN12FrontendHeapD1Ev+0x48>)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	33e8      	adds	r3, #232	; 0xe8
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fda0 	bl	8007f14 <_ZN19FrontendApplicationD1Ev>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	33d4      	adds	r3, #212	; 0xd4
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff ffcd 	bl	8008378 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	332c      	adds	r3, #44	; 0x2c
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7ff ff94 	bl	8008310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3314      	adds	r3, #20
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7ff ff5b 	bl	80082a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff fe0b 	bl	8008010 <_ZN16FrontendHeapBaseD1Ev>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	0801a1a4 	.word	0x0801a1a4

08008408 <_ZN12FrontendHeapD0Ev>:
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7ff ffd3 	bl	80083bc <_ZN12FrontendHeapD1Ev>
 8008416:	f44f 710f 	mov.w	r1, #572	; 0x23c
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f010 fbb4 	bl	8018b88 <_ZdlPvj>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	4a05      	ldr	r2, [pc, #20]	; (800844c <_ZN11TouchGFXHALD1Ev+0x20>)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff fe8b 	bl	8008158 <_ZN20TouchGFXGeneratedHALD1Ev>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	0801a4f0 	.word	0x0801a4f0

08008450 <_ZN11TouchGFXHALD0Ev>:
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff ffe7 	bl	800842c <_ZN11TouchGFXHALD1Ev>
 800845e:	2178      	movs	r1, #120	; 0x78
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f010 fb91 	bl	8018b88 <_ZdlPvj>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <_Z41__static_initialization_and_destruction_0ii>:
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af02      	add	r7, sp, #8
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d119      	bne.n	80084b4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008486:	4293      	cmp	r3, r2
 8008488:	d114      	bne.n	80084b4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800848a:	4818      	ldr	r0, [pc, #96]	; (80084ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800848c:	f7ff feb2 	bl	80081f4 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8008490:	4817      	ldr	r0, [pc, #92]	; (80084f0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8008492:	f7fe ff09 	bl	80072a8 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8008496:	4817      	ldr	r0, [pc, #92]	; (80084f4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008498:	f00a fc4a 	bl	8012d30 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 640, 480);
 800849c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	4b10      	ldr	r3, [pc, #64]	; (80084ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80084aa:	4a12      	ldr	r2, [pc, #72]	; (80084f4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80084ac:	4910      	ldr	r1, [pc, #64]	; (80084f0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80084ae:	4812      	ldr	r0, [pc, #72]	; (80084f8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80084b0:	f7ff fe74 	bl	800819c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d113      	bne.n	80084e2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d10e      	bne.n	80084e2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80084c4:	480c      	ldr	r0, [pc, #48]	; (80084f8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80084c6:	f7ff ffb1 	bl	800842c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80084ca:	480c      	ldr	r0, [pc, #48]	; (80084fc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80084cc:	f000 f83a 	bl	8008544 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80084d0:	4808      	ldr	r0, [pc, #32]	; (80084f4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80084d2:	f7ff fe03 	bl	80080dc <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80084d6:	4806      	ldr	r0, [pc, #24]	; (80084f0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80084d8:	f7fe ff10 	bl	80072fc <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80084dc:	4803      	ldr	r0, [pc, #12]	; (80084ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80084de:	f7ff fa21 	bl	8007924 <_ZN20STM32TouchControllerD1Ev>
}
 80084e2:	bf00      	nop
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	20000344 	.word	0x20000344
 80084f0:	20000348 	.word	0x20000348
 80084f4:	20000f68 	.word	0x20000f68
 80084f8:	20000fc4 	.word	0x20000fc4
 80084fc:	2000000c 	.word	0x2000000c

08008500 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	4a05      	ldr	r2, [pc, #20]	; (8008520 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4618      	mov	r0, r3
 8008512:	f7ff fb3f 	bl	8007b94 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	0801a2e0 	.word	0x0801a2e0

08008524 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff ffe7 	bl	8008500 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8008532:	2110      	movs	r1, #16
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f010 fb27 	bl	8018b88 <_ZdlPvj>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	4a05      	ldr	r2, [pc, #20]	; (8008564 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff fa2f 	bl	80079b8 <_ZN8touchgfx12FontProviderD1Ev>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	0801a5b4 	.word	0x0801a5b4

08008568 <_ZN23ApplicationFontProviderD0Ev>:
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff ffe7 	bl	8008544 <_ZN23ApplicationFontProviderD1Ev>
 8008576:	2104      	movs	r1, #4
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f010 fb05 	bl	8018b88 <_ZdlPvj>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8008590:	2301      	movs	r3, #1
    }
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80085a6:	230c      	movs	r3, #12
    }
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80085c0:	887a      	ldrh	r2, [r7, #2]
 80085c2:	4613      	mov	r3, r2
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	3308      	adds	r3, #8
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	4413      	add	r3, r2
    }
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80085e8:	887a      	ldrh	r2, [r7, #2]
 80085ea:	4613      	mov	r3, r2
 80085ec:	005b      	lsls	r3, r3, #1
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	3308      	adds	r3, #8
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	4413      	add	r3, r2
    }
 80085f8:	4618      	mov	r0, r3
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800860c:	2301      	movs	r3, #1
    }
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8008622:	23a0      	movs	r3, #160	; 0xa0
    }
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800863c:	887a      	ldrh	r2, [r7, #2]
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	015b      	lsls	r3, r3, #5
 8008646:	3308      	adds	r3, #8
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	4413      	add	r3, r2
    }
 800864c:	4618      	mov	r0, r3
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8008664:	887a      	ldrh	r2, [r7, #2]
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	015b      	lsls	r3, r3, #5
 800866e:	3308      	adds	r3, #8
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	4413      	add	r3, r2
    }
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8008688:	2301      	movs	r3, #1
    }
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800869e:	2310      	movs	r3, #16
    }
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80086b8:	887b      	ldrh	r3, [r7, #2]
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	3308      	adds	r3, #8
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	4413      	add	r3, r2
    }
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80086da:	887b      	ldrh	r3, [r7, #2]
 80086dc:	011b      	lsls	r3, r3, #4
 80086de:	3308      	adds	r3, #8
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4413      	add	r3, r2
    }
 80086e4:	4618      	mov	r0, r3
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	68d2      	ldr	r2, [r2, #12]
 8008700:	1052      	asrs	r2, r2, #1
 8008702:	1899      	adds	r1, r3, r2
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	e00a      	b.n	800872c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	68d2      	ldr	r2, [r2, #12]
 800871e:	1052      	asrs	r2, r2, #1
 8008720:	4413      	add	r3, r2
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	6892      	ldr	r2, [r2, #8]
 8008728:	4413      	add	r3, r2
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4608      	mov	r0, r1
 800872e:	4798      	blx	r3
    }
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d010      	beq.n	800876a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d107      	bne.n	8008760 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800875c:	2301      	movs	r3, #1
 800875e:	e000      	b.n	8008762 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8008760:	2300      	movs	r3, #0
 8008762:	2b01      	cmp	r3, #1
 8008764:	d001      	beq.n	800876a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8008766:	2301      	movs	r3, #1
 8008768:	e000      	b.n	800876c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800876a:	2300      	movs	r3, #0
    }
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <_GLOBAL__sub_I_touchgfx_init>:
 8008778:	b580      	push	{r7, lr}
 800877a:	af00      	add	r7, sp, #0
 800877c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008780:	2001      	movs	r0, #1
 8008782:	f7ff fe75 	bl	8008470 <_Z41__static_initialization_and_destruction_0ii>
 8008786:	bd80      	pop	{r7, pc}

08008788 <_GLOBAL__sub_D_touchgfx_init>:
 8008788:	b580      	push	{r7, lr}
 800878a:	af00      	add	r7, sp, #0
 800878c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008790:	2000      	movs	r0, #0
 8008792:	f7ff fe6d 	bl	8008470 <_Z41__static_initialization_and_destruction_0ii>
 8008796:	bd80      	pop	{r7, pc}

08008798 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]

}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	4603      	mov	r3, r0
 80087b6:	71fb      	strb	r3, [r7, #7]

}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	71fb      	strb	r3, [r7, #7]

}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	78fa      	ldrb	r2, [r7, #3]
 80087ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3318      	adds	r3, #24
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	4798      	blx	r3
    }
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
     *
     * @param enableLock True to lock DMA transfers to the front porch signal. Conservative,
     *                   default setting. False to disable, which will normally yield substantial
     *                   performance improvement.
     */
    void lockDMAToFrontPorch(bool enableLock)
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	460b      	mov	r3, r1
 8008828:	70fb      	strb	r3, [r7, #3]
    {
        lockDMAToPorch = enableLock;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	78fa      	ldrb	r2, [r7, #3]
 800882e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 800883e:	b580      	push	{r7, lr}
 8008840:	b082      	sub	sp, #8
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4610      	mov	r0, r2
 8008854:	4798      	blx	r3
 8008856:	4603      	mov	r3, r0
    }
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <_ZN8touchgfx3HAL5vSyncEv>:
     *
     * @brief Called by the VSync interrupt.
     *
     *        Called by the VSync interrupt for counting of LCD refreshes.
     */
    void vSync()
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
    {
        vSyncCnt++;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800886e:	3301      	adds	r3, #1
 8008870:	b2da      	uxtb	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f004 f9bf 	bl	800cc10 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	3390      	adds	r3, #144	; 0x90
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	4798      	blx	r3
    }
 800889e:	bf00      	nop
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	6039      	str	r1, [r7, #0]
    {
        return false;
 80088b0:	2300      	movs	r3, #0
    }
 80088b2:	4618      	mov	r0, r3
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
	...

080088c0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80088c0:	b590      	push	{r4, r7, lr}
 80088c2:	b08b      	sub	sp, #44	; 0x2c
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	460b      	mov	r3, r1
 80088d0:	80fb      	strh	r3, [r7, #6]
 80088d2:	4613      	mov	r3, r2
 80088d4:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 80088d6:	f7fe fc61 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 80088da:	4602      	mov	r2, r0
 80088dc:	6813      	ldr	r3, [r2, #0]
 80088de:	3328      	adds	r3, #40	; 0x28
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4610      	mov	r0, r2
 80088e4:	4798      	blx	r3
 80088e6:	4603      	mov	r3, r0
 80088e8:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80088ea:	8b7b      	ldrh	r3, [r7, #26]
 80088ec:	4a3d      	ldr	r2, [pc, #244]	; (80089e4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80088ee:	8812      	ldrh	r2, [r2, #0]
 80088f0:	fb02 f303 	mul.w	r3, r2, r3
 80088f4:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8008902:	797b      	ldrb	r3, [r7, #5]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d005      	beq.n	8008914 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8008908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	4413      	add	r3, r2
 800890e:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8008914:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 800891c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	4413      	add	r3, r2
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8008928:	88fb      	ldrh	r3, [r7, #6]
 800892a:	3b01      	subs	r3, #1
 800892c:	2b1f      	cmp	r3, #31
 800892e:	d84d      	bhi.n	80089cc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8008930:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	080089b9 	.word	0x080089b9
 800893c:	080089b9 	.word	0x080089b9
 8008940:	080089cd 	.word	0x080089cd
 8008944:	080089b9 	.word	0x080089b9
 8008948:	080089cd 	.word	0x080089cd
 800894c:	080089cd 	.word	0x080089cd
 8008950:	080089cd 	.word	0x080089cd
 8008954:	080089b9 	.word	0x080089b9
 8008958:	080089cd 	.word	0x080089cd
 800895c:	080089cd 	.word	0x080089cd
 8008960:	080089cd 	.word	0x080089cd
 8008964:	080089cd 	.word	0x080089cd
 8008968:	080089cd 	.word	0x080089cd
 800896c:	080089cd 	.word	0x080089cd
 8008970:	080089cd 	.word	0x080089cd
 8008974:	080089b9 	.word	0x080089b9
 8008978:	080089cd 	.word	0x080089cd
 800897c:	080089cd 	.word	0x080089cd
 8008980:	080089cd 	.word	0x080089cd
 8008984:	080089cd 	.word	0x080089cd
 8008988:	080089cd 	.word	0x080089cd
 800898c:	080089cd 	.word	0x080089cd
 8008990:	080089cd 	.word	0x080089cd
 8008994:	080089b9 	.word	0x080089b9
 8008998:	080089cd 	.word	0x080089cd
 800899c:	080089cd 	.word	0x080089cd
 80089a0:	080089cd 	.word	0x080089cd
 80089a4:	080089cd 	.word	0x080089cd
 80089a8:	080089cd 	.word	0x080089cd
 80089ac:	080089cd 	.word	0x080089cd
 80089b0:	080089cd 	.word	0x080089cd
 80089b4:	080089b9 	.word	0x080089b9
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3374      	adds	r3, #116	; 0x74
 80089be:	681c      	ldr	r4, [r3, #0]
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	6a3a      	ldr	r2, [r7, #32]
 80089c4:	68b9      	ldr	r1, [r7, #8]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	47a0      	blx	r4
            break;
 80089ca:	e006      	b.n	80089da <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 80089cc:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 80089ce:	4a07      	ldr	r2, [pc, #28]	; (80089ec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80089d0:	f240 3125 	movw	r1, #805	; 0x325
 80089d4:	4806      	ldr	r0, [pc, #24]	; (80089f0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80089d6:	f010 f903 	bl	8018be0 <__assert_func>
            break;
        }
    }
 80089da:	bf00      	nop
 80089dc:	372c      	adds	r7, #44	; 0x2c
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd90      	pop	{r4, r7, pc}
 80089e2:	bf00      	nop
 80089e4:	200010fc 	.word	0x200010fc
 80089e8:	08019c40 	.word	0x08019c40
 80089ec:	0801a494 	.word	0x0801a494
 80089f0:	08019c60 	.word	0x08019c60

080089f4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d106      	bne.n	8008a16 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8008a08:	4b11      	ldr	r3, [pc, #68]	; (8008a50 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8008a0a:	4a12      	ldr	r2, [pc, #72]	; (8008a54 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8008a0c:	f240 3137 	movw	r1, #823	; 0x337
 8008a10:	4811      	ldr	r0, [pc, #68]	; (8008a58 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8008a12:	f010 f8e5 	bl	8018be0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	bf14      	ite	ne
 8008a2e:	2301      	movne	r3, #1
 8008a30:	2300      	moveq	r3, #0
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8008a36:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	bf14      	ite	ne
 8008a3e:	2301      	movne	r3, #1
 8008a40:	2300      	moveq	r3, #0
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8008a46:	701a      	strb	r2, [r3, #0]
    }
 8008a48:	bf00      	nop
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	08019ca4 	.word	0x08019ca4
 8008a54:	0801a444 	.word	0x0801a444
 8008a58:	08019c60 	.word	0x08019c60
 8008a5c:	200010fe 	.word	0x200010fe
 8008a60:	200010ff 	.word	0x200010ff

08008a64 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
     *
     * @param s The desired strategy to use.
     *
     * @return true if the desired strategy will be used, false otherwise.
     */
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
    {
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8008a70:	78fb      	ldrb	r3, [r7, #3]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d105      	bne.n	8008a88 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
        {
            refreshStrategy = s;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e027      	b.n	8008ad8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        }
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8008a88:	78fb      	ldrb	r3, [r7, #3]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d123      	bne.n	8008ad6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
        {
            // Perform sanity checks. This strategy requires
            //   - task delay function
            //   - a TFT controller (+ an impl of getTFTCurrentLine())
            //   - single buffering
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d014      	beq.n	8008ac0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3380      	adds	r3, #128	; 0x80
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	4798      	blx	r3
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d008      	beq.n	8008ac0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8008aae:	4b0c      	ldr	r3, [pc, #48]	; (8008ae0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	f083 0301 	eor.w	r3, r3, #1
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8008abc:	2301      	movs	r3, #1
 8008abe:	e000      	b.n	8008ac2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d005      	beq.n	8008ad2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
            {
                refreshStrategy = s;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	78fa      	ldrb	r2, [r7, #3]
 8008aca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e002      	b.n	8008ad8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            }
            return false;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e000      	b.n	8008ad8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        }
        // Unknown strategy
        return false;
 8008ad6:	2300      	movs	r3, #0
    }
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	200010fe 	.word	0x200010fe

08008ae4 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
     *
     * @note The task delay capability is only used when the frame refresh strategy
     *       REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL is selected. Otherwise it is not
     *       necessary to register a delay function.
     */
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
    {
        taskDelayFunc = delayF;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d004      	beq.n	8008b1e <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b18:	887a      	ldrh	r2, [r7, #2]
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	4798      	blx	r3
        }
    }
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b082      	sub	sp, #8
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3318      	adds	r3, #24
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	4798      	blx	r3
 8008b40:	4603      	mov	r3, r0
    }
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d017      	beq.n	8008b94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8008b64:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d12a      	bne.n	8008bc2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8008b6c:	4b19      	ldr	r3, [pc, #100]	; (8008bd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8008b6e:	881a      	ldrh	r2, [r3, #0]
 8008b70:	4b19      	ldr	r3, [pc, #100]	; (8008bd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8008b72:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8008b74:	4b19      	ldr	r3, [pc, #100]	; (8008bdc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8008b76:	881a      	ldrh	r2, [r3, #0]
 8008b78:	4b19      	ldr	r3, [pc, #100]	; (8008be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8008b7a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8008b7c:	4b16      	ldr	r3, [pc, #88]	; (8008bd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8008b7e:	881a      	ldrh	r2, [r3, #0]
 8008b80:	4b16      	ldr	r3, [pc, #88]	; (8008bdc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8008b82:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8008b84:	4b16      	ldr	r3, [pc, #88]	; (8008be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8008b86:	881a      	ldrh	r2, [r3, #0]
 8008b88:	4b12      	ldr	r3, [pc, #72]	; (8008bd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8008b8a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8008b8c:	4b10      	ldr	r3, [pc, #64]	; (8008bd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8008b8e:	2201      	movs	r2, #1
 8008b90:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8008b92:	e016      	b.n	8008bc2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8008b94:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d012      	beq.n	8008bc2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8008b9c:	4b0f      	ldr	r3, [pc, #60]	; (8008bdc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8008b9e:	881a      	ldrh	r2, [r3, #0]
 8008ba0:	4b0d      	ldr	r3, [pc, #52]	; (8008bd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8008ba2:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8008ba4:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8008ba6:	881a      	ldrh	r2, [r3, #0]
 8008ba8:	4b0d      	ldr	r3, [pc, #52]	; (8008be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8008baa:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8008bac:	4b0c      	ldr	r3, [pc, #48]	; (8008be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8008bae:	881a      	ldrh	r2, [r3, #0]
 8008bb0:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8008bb2:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8008bb4:	4b08      	ldr	r3, [pc, #32]	; (8008bd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8008bb6:	881a      	ldrh	r2, [r3, #0]
 8008bb8:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8008bba:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8008bbc:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	701a      	strb	r2, [r3, #0]
    }
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	200010f8 	.word	0x200010f8
 8008bd4:	200010f4 	.word	0x200010f4
 8008bd8:	200010fa 	.word	0x200010fa
 8008bdc:	200010f6 	.word	0x200010f6
 8008be0:	200010fc 	.word	0x200010fc

08008be4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f003 fa90 	bl	800c114 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <__NVIC_EnableIRQ>:
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	db0d      	blt.n	8008c2a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	f003 021f 	and.w	r2, r3, #31
 8008c18:	4907      	ldr	r1, [pc, #28]	; (8008c38 <__NVIC_EnableIRQ+0x3c>)
 8008c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c1e:	095b      	lsrs	r3, r3, #5
 8008c20:	2001      	movs	r0, #1
 8008c22:	fa00 f202 	lsl.w	r2, r0, r2
 8008c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	e000e100 	.word	0xe000e100

08008c3c <__NVIC_DisableIRQ>:
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	db12      	blt.n	8008c74 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	f003 021f 	and.w	r2, r3, #31
 8008c58:	4909      	ldr	r1, [pc, #36]	; (8008c80 <__NVIC_DisableIRQ+0x44>)
 8008c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c5e:	095b      	lsrs	r3, r3, #5
 8008c60:	2001      	movs	r0, #1
 8008c62:	fa00 f202 	lsl.w	r2, r0, r2
 8008c66:	3320      	adds	r3, #32
 8008c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008c6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008c70:	f3bf 8f6f 	isb	sy
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	e000e100 	.word	0xe000e100

08008c84 <__NVIC_SetPriority>:
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	6039      	str	r1, [r7, #0]
 8008c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	db0c      	blt.n	8008cb2 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	4a0e      	ldr	r2, [pc, #56]	; (8008cd8 <__NVIC_SetPriority+0x54>)
 8008c9e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8008ca2:	4608      	mov	r0, r1
 8008ca4:	011b      	lsls	r3, r3, #4
 8008ca6:	b2d9      	uxtb	r1, r3
 8008ca8:	1813      	adds	r3, r2, r0
 8008caa:	460a      	mov	r2, r1
 8008cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008cb0:	e00c      	b.n	8008ccc <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	4909      	ldr	r1, [pc, #36]	; (8008cdc <__NVIC_SetPriority+0x58>)
 8008cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	f003 030f 	and.w	r3, r3, #15
 8008cc2:	3b04      	subs	r3, #4
 8008cc4:	0112      	lsls	r2, r2, #4
 8008cc6:	b2d2      	uxtb	r2, r2
 8008cc8:	440b      	add	r3, r1
 8008cca:	761a      	strb	r2, [r3, #24]
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	e000e100 	.word	0xe000e100
 8008cdc:	e000ed00 	.word	0xe000ed00

08008ce0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8008ce0:	b5b0      	push	{r4, r5, r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f003 fd08 	bl	800c700 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8008cf0:	687d      	ldr	r5, [r7, #4]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	334c      	adds	r3, #76	; 0x4c
 8008cf8:	681c      	ldr	r4, [r3, #0]
 8008cfa:	f005 fdff 	bl	800e8fc <_ZN8touchgfx11Application11getInstanceEv>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	4619      	mov	r1, r3
 8008d02:	4628      	mov	r0, r5
 8008d04:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	490d      	ldr	r1, [pc, #52]	; (8008d40 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7ff feea 	bl	8008ae4 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2101      	movs	r1, #1
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff fea5 	bl	8008a64 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3374      	adds	r3, #116	; 0x74
 8008d22:	681c      	ldr	r4, [r3, #0]
 8008d24:	2300      	movs	r3, #0
 8008d26:	2200      	movs	r2, #0
 8008d28:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8008d2c:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2101      	movs	r1, #1
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff fd73 	bl	800881e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8008d38:	bf00      	nop
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8008d40:	08006b0d 	.word	0x08006b0d

08008d44 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8008d4c:	2109      	movs	r1, #9
 8008d4e:	205a      	movs	r0, #90	; 0x5a
 8008d50:	f7ff ff98 	bl	8008c84 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8008d54:	2109      	movs	r1, #9
 8008d56:	2058      	movs	r0, #88	; 0x58
 8008d58:	f7ff ff94 	bl	8008c84 <__NVIC_SetPriority>
}
 8008d5c:	bf00      	nop
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8008d6c:	205a      	movs	r0, #90	; 0x5a
 8008d6e:	f7ff ff45 	bl	8008bfc <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8008d72:	2058      	movs	r0, #88	; 0x58
 8008d74:	f7ff ff42 	bl	8008bfc <__NVIC_EnableIRQ>
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8008d88:	205a      	movs	r0, #90	; 0x5a
 8008d8a:	f7ff ff57 	bl	8008c3c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8008d8e:	2058      	movs	r0, #88	; 0x58
 8008d90:	f7ff ff54 	bl	8008c3c <__NVIC_DisableIRQ>
}
 8008d94:	bf00      	nop
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8008da4:	4b11      	ldr	r3, [pc, #68]	; (8008dec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	3b01      	subs	r3, #1
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8008db6:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8008db8:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8008dca:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8008dcc:	4b08      	ldr	r3, [pc, #32]	; (8008df0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8008dce:	881a      	ldrh	r2, [r3, #0]
 8008dd0:	4b06      	ldr	r3, [pc, #24]	; (8008dec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8008dd2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8008dd4:	4b05      	ldr	r3, [pc, #20]	; (8008dec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8008dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd8:	4a04      	ldr	r2, [pc, #16]	; (8008dec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8008dda:	f043 0301 	orr.w	r3, r3, #1
 8008dde:	6353      	str	r3, [r2, #52]	; 0x34
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	40016800 	.word	0x40016800
 8008df0:	2000103c 	.word	0x2000103c
 8008df4:	2000103e 	.word	0x2000103e

08008df8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8008e00:	4b03      	ldr	r3, [pc, #12]	; (8008e10 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	40016884 	.word	0x40016884

08008e14 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8008e1e:	4a06      	ldr	r2, [pc, #24]	; (8008e38 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8008e24:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8008e26:	2201      	movs	r2, #1
 8008e28:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	40016884 	.word	0x40016884
 8008e3c:	40016800 	.word	0x40016800

08008e40 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f003 f966 	bl	800c120 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8008e64:	4b0d      	ldr	r3, [pc, #52]	; (8008e9c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8008e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e68:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3301      	adds	r3, #1
 8008e78:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8008e7a:	89fa      	ldrh	r2, [r7, #14]
 8008e7c:	89bb      	ldrh	r3, [r7, #12]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d201      	bcs.n	8008e86 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	e003      	b.n	8008e8e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8008e86:	89fa      	ldrh	r2, [r7, #14]
 8008e88:	89bb      	ldrh	r3, [r7, #12]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	b29b      	uxth	r3, r3
    }
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	40016800 	.word	0x40016800

08008ea0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8008ea8:	4b1a      	ldr	r3, [pc, #104]	; (8008f14 <HAL_LTDC_LineEventCallback+0x74>)
 8008eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eac:	4a1a      	ldr	r2, [pc, #104]	; (8008f18 <HAL_LTDC_LineEventCallback+0x78>)
 8008eae:	8812      	ldrh	r2, [r2, #0]
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	bf0c      	ite	eq
 8008eb4:	2301      	moveq	r3, #1
 8008eb6:	2300      	movne	r3, #0
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d017      	beq.n	8008eee <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8008ebe:	4b17      	ldr	r3, [pc, #92]	; (8008f1c <HAL_LTDC_LineEventCallback+0x7c>)
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7fa fdc3 	bl	8003a50 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8008eca:	f7fd fda1 	bl	8006a10 <_ZN8touchgfx3HAL11getInstanceEv>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7ff fcc5 	bl	8008860 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8008ed6:	f7fd fdf3 	bl	8006ac0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8008eda:	f7fd fd99 	bl	8006a10 <_ZN8touchgfx3HAL11getInstanceEv>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f003 fe95 	bl	800cc10 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f7ff fc56 	bl	8008798 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8008eec:	e00e      	b.n	8008f0c <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8008eee:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <HAL_LTDC_LineEventCallback+0x78>)
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7fa fdab 	bl	8003a50 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8008efa:	2000      	movs	r0, #0
 8008efc:	f7ff fc57 	bl	80087ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8008f00:	f7fd fd86 	bl	8006a10 <_ZN8touchgfx3HAL11getInstanceEv>
 8008f04:	4603      	mov	r3, r0
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff fc7b 	bl	8008802 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40016800 	.word	0x40016800
 8008f18:	2000103c 	.word	0x2000103c
 8008f1c:	2000103e 	.word	0x2000103e

08008f20 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7ff fe5a 	bl	8008be4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff fecc 	bl	8008ce0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8008f48:	bf00      	nop
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7ff ff4c 	bl	8008df8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8008f60:	4603      	mov	r3, r0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7ff ff4b 	bl	8008e14 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7ff ff53 	bl	8008e40 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8008f9a:	bf00      	nop
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7ff fec9 	bl	8008d44 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7ff fecd 	bl	8008d64 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8008fca:	bf00      	nop
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff fecf 	bl	8008d80 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8008fe2:	bf00      	nop
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff fed1 	bl	8008d9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8009006:	f7ff f907 	bl	8008218 <touchgfx_init>
}
 800900a:	bf00      	nop
 800900c:	bd80      	pop	{r7, pc}

0800900e <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 8009012:	f7ff f931 	bl	8008278 <touchgfx_taskEntry>
}
 8009016:	bf00      	nop
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <SCB_EnableICache>:
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009020:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009024:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009028:	4b0b      	ldr	r3, [pc, #44]	; (8009058 <SCB_EnableICache+0x3c>)
 800902a:	2200      	movs	r2, #0
 800902c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009030:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009034:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009038:	4b07      	ldr	r3, [pc, #28]	; (8009058 <SCB_EnableICache+0x3c>)
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	4a06      	ldr	r2, [pc, #24]	; (8009058 <SCB_EnableICache+0x3c>)
 800903e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009042:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009044:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009048:	f3bf 8f6f 	isb	sy
}
 800904c:	bf00      	nop
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	e000ed00 	.word	0xe000ed00

0800905c <SCB_EnableDCache>:
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8009062:	4b1d      	ldr	r3, [pc, #116]	; (80090d8 <SCB_EnableDCache+0x7c>)
 8009064:	2200      	movs	r2, #0
 8009066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800906a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800906e:	4b1a      	ldr	r3, [pc, #104]	; (80090d8 <SCB_EnableDCache+0x7c>)
 8009070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009074:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	0b5b      	lsrs	r3, r3, #13
 800907a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800907e:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	08db      	lsrs	r3, r3, #3
 8009084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009088:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8009092:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009098:	490f      	ldr	r1, [pc, #60]	; (80090d8 <SCB_EnableDCache+0x7c>)
 800909a:	4313      	orrs	r3, r2
 800909c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	1e5a      	subs	r2, r3, #1
 80090a4:	60ba      	str	r2, [r7, #8]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1ef      	bne.n	800908a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	1e5a      	subs	r2, r3, #1
 80090ae:	60fa      	str	r2, [r7, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e5      	bne.n	8009080 <SCB_EnableDCache+0x24>
 80090b4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80090b8:	4b07      	ldr	r3, [pc, #28]	; (80090d8 <SCB_EnableDCache+0x7c>)
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	4a06      	ldr	r2, [pc, #24]	; (80090d8 <SCB_EnableDCache+0x7c>)
 80090be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090c2:	6153      	str	r3, [r2, #20]
 80090c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80090c8:	f3bf 8f6f 	isb	sy
}
 80090cc:	bf00      	nop
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	e000ed00 	.word	0xe000ed00

080090dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80090e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80090e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d013      	beq.n	800911c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80090f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80090f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80090fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00b      	beq.n	800911c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8009104:	e000      	b.n	8009108 <ITM_SendChar+0x2c>
    {
      __NOP();
 8009106:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8009108:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0f9      	beq.n	8009106 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8009112:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	b2d2      	uxtb	r2, r2
 800911a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800911c:	687b      	ldr	r3, [r7, #4]
}
 800911e:	4618      	mov	r0, r3
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <__io_putchar>:
TestStatus_t SDRAM_Test(void);
uint8_t QSPI_EnableMemoryMappedMode(void);


int __io_putchar(int ch)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff ffd1 	bl	80090dc <ITM_SendChar>

	return ch;
 800913a:	687b      	ldr	r3, [r7, #4]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <MPU_Config>:
  * @brief  Configure the MPU attributes .
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

//	/* Disable the MPU */
	HAL_MPU_Disable();
 800914a:	f7f7 fbe9 	bl	8000920 <HAL_MPU_Disable>

	/* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800914e:	2301      	movs	r3, #1
 8009150:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = SDRAM_BANK_ADDR;
 8009152:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009156:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8009158:	231b      	movs	r3, #27
 800915a:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800915c:	2303      	movs	r3, #3
 800915e:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8009164:	2300      	movs	r3, #0
 8009166:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8009168:	2300      	movs	r3, #0
 800916a:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800916c:	2300      	movs	r3, #0
 800916e:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8009170:	2300      	movs	r3, #0
 8009172:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8009174:	2300      	movs	r3, #0
 8009176:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8009178:	2301      	movs	r3, #1
 800917a:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800917c:	463b      	mov	r3, r7
 800917e:	4618      	mov	r0, r3
 8009180:	f7f7 fc02 	bl	8000988 <HAL_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8009184:	2301      	movs	r3, #1
 8009186:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = SDRAM_BANK_ADDR;
 8009188:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800918c:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800918e:	2318      	movs	r3, #24
 8009190:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8009192:	2303      	movs	r3, #3
 8009194:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800919a:	2301      	movs	r3, #1
 800919c:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800919e:	2300      	movs	r3, #0
 80091a0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80091a2:	2301      	movs	r3, #1
 80091a4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80091aa:	2300      	movs	r3, #0
 80091ac:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80091ae:	2301      	movs	r3, #1
 80091b0:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80091b2:	463b      	mov	r3, r7
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7f7 fbe7 	bl	8000988 <HAL_MPU_ConfigRegion>

	/** Initializes and configures the Region and the memory to be protected
	*/
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80091ba:	2301      	movs	r3, #1
 80091bc:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80091be:	2302      	movs	r3, #2
 80091c0:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x90000000;
 80091c2:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80091c6:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80091c8:	231b      	movs	r3, #27
 80091ca:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80091d0:	2300      	movs	r3, #0
 80091d2:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80091d4:	2300      	movs	r3, #0
 80091d6:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80091d8:	2301      	movs	r3, #1
 80091da:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80091dc:	2300      	movs	r3, #0
 80091de:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80091e8:	463b      	mov	r3, r7
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7f7 fbcc 	bl	8000988 <HAL_MPU_ConfigRegion>
	/** Initializes and configures the Region and the memory to be protected
	*/
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80091f0:	2301      	movs	r3, #1
 80091f2:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80091f4:	2303      	movs	r3, #3
 80091f6:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x90000000;
 80091f8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80091fc:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80091fe:	2317      	movs	r3, #23
 8009200:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
 8009202:	2300      	movs	r3, #0
 8009204:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8009206:	2300      	movs	r3, #0
 8009208:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800920a:	2303      	movs	r3, #3
 800920c:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800920e:	2301      	movs	r3, #1
 8009210:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8009212:	2300      	movs	r3, #0
 8009214:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8009216:	2301      	movs	r3, #1
 8009218:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800921a:	2300      	movs	r3, #0
 800921c:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800921e:	463b      	mov	r3, r7
 8009220:	4618      	mov	r0, r3
 8009222:	f7f7 fbb1 	bl	8000988 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8009226:	2004      	movs	r0, #4
 8009228:	f7f7 fb90 	bl	800094c <HAL_MPU_Enable>
}
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b092      	sub	sp, #72	; 0x48
 8009238:	af00      	add	r7, sp, #0
	uint8_t version = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint16_t deviceId = 0;
 8009240:	2300      	movs	r3, #0
 8009242:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	QSPI_CommandTypeDef      sCommand;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	MPU_Config();
 8009246:	f7ff ff7d 	bl	8009144 <MPU_Config>
	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 800924a:	f7ff fee7 	bl	800901c <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 800924e:	f7ff ff05 	bl	800905c <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009252:	f7f7 f9c5 	bl	80005e0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8009256:	f000 f853 	bl	8009300 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800925a:	f000 faed 	bl	8009838 <MX_GPIO_Init>
	MX_CRC_Init();
 800925e:	f000 f97d 	bl	800955c <MX_CRC_Init>

	MX_FMC_Init();
 8009262:	f000 fa99 	bl	8009798 <MX_FMC_Init>

	BSP_QSPI_Init();
 8009266:	f7fd fc5f 	bl	8006b28 <BSP_QSPI_Init>
	BSP_QSPI_EnableMemoryMappedMode();
 800926a:	f7fd fcb5 	bl	8006bd8 <BSP_QSPI_EnableMemoryMappedMode>
	/* Program the SDRAM external device */
	BSP_SDRAM_Initialization_Sequence(&hsdram1);
 800926e:	481f      	ldr	r0, [pc, #124]	; (80092ec <main+0xb8>)
 8009270:	f000 fbd0 	bl	8009a14 <BSP_SDRAM_Initialization_Sequence>

	/*##-2- SDRAM memory read/write access */
	if(SDRAM_Test() != PASSED)
 8009274:	f000 f8fe 	bl	8009474 <SDRAM_Test>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <main+0x4e>
	{
		Error_Handler();
 800927e:	f000 fc49 	bl	8009b14 <Error_Handler>
	}

	/* Initialize QuadSPI structures ------------------------------------------- */

	MX_I2C1_Init();
 8009282:	f000 f9c7 	bl	8009614 <MX_I2C1_Init>
	MX_DMA2D_Init();
 8009286:	f000 f98b 	bl	80095a0 <MX_DMA2D_Init>
	MX_LTDC_Init();
 800928a:	f000 fa03 	bl	8009694 <MX_LTDC_Init>

	//
	//	//MX_USB_HOST_Init();

	ADV7513_Init();
 800928e:	f7fd fab7 	bl	8006800 <ADV7513_Init>
	version = ADV7513_ReadDeviceVersion();
 8009292:	f7fd facb 	bl	800682c <ADV7513_ReadDeviceVersion>
 8009296:	4603      	mov	r3, r0
 8009298:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	deviceId = ADV7513_GetDeviceID();
 800929c:	f7fd fb9d 	bl	80069da <ADV7513_GetDeviceID>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	printf("Device version %u\n", version);
 80092a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092aa:	4619      	mov	r1, r3
 80092ac:	4810      	ldr	r0, [pc, #64]	; (80092f0 <main+0xbc>)
 80092ae:	f010 f893 	bl	80193d8 <iprintf>
	printf("Device Id = %x\n", deviceId);
 80092b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80092b6:	4619      	mov	r1, r3
 80092b8:	480e      	ldr	r0, [pc, #56]	; (80092f4 <main+0xc0>)
 80092ba:	f010 f88d 	bl	80193d8 <iprintf>
	MX_TouchGFX_Init();
 80092be:	f7ff fea0 	bl	8009002 <MX_TouchGFX_Init>

	__HAL_LTDC_LAYER_ENABLE(&hltdc, 0);
 80092c2:	4b0d      	ldr	r3, [pc, #52]	; (80092f8 <main+0xc4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3384      	adds	r3, #132	; 0x84
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a0b      	ldr	r2, [pc, #44]	; (80092f8 <main+0xc4>)
 80092cc:	6812      	ldr	r2, [r2, #0]
 80092ce:	3284      	adds	r2, #132	; 0x84
 80092d0:	f043 0301 	orr.w	r3, r3, #1
 80092d4:	6013      	str	r3, [r2, #0]
//		BSP_LCD_Clear(LCD_COLOR_GREEN);
//		HAL_Delay(2000);
//		BSP_LCD_Clear(LCD_COLOR_BLUE);
//		HAL_Delay(2000);

		MX_TouchGFX_Process();
 80092d6:	f7ff fe9a 	bl	800900e <MX_TouchGFX_Process>
		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 80092da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80092de:	4807      	ldr	r0, [pc, #28]	; (80092fc <main+0xc8>)
 80092e0:	f7f8 fa79 	bl	80017d6 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 80092e4:	2032      	movs	r0, #50	; 0x32
 80092e6:	f7f7 f9e7 	bl	80006b8 <HAL_Delay>
		MX_TouchGFX_Process();
 80092ea:	e7f4      	b.n	80092d6 <main+0xa2>
 80092ec:	20003794 	.word	0x20003794
 80092f0:	08019cdc 	.word	0x08019cdc
 80092f4:	08019cf0 	.word	0x08019cf0
 80092f8:	20001558 	.word	0x20001558
 80092fc:	40020c00 	.word	0x40020c00

08009300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b0b8      	sub	sp, #224	; 0xe0
 8009304:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009306:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800930a:	2234      	movs	r2, #52	; 0x34
 800930c:	2100      	movs	r1, #0
 800930e:	4618      	mov	r0, r3
 8009310:	f00f fce9 	bl	8018ce6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009314:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009318:	2200      	movs	r2, #0
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	605a      	str	r2, [r3, #4]
 800931e:	609a      	str	r2, [r3, #8]
 8009320:	60da      	str	r2, [r3, #12]
 8009322:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009324:	f107 0308 	add.w	r3, r7, #8
 8009328:	2290      	movs	r2, #144	; 0x90
 800932a:	2100      	movs	r1, #0
 800932c:	4618      	mov	r0, r3
 800932e:	f00f fcda 	bl	8018ce6 <memset>

	/** Configure LSE Drive Capability
	*/
	HAL_PWR_EnableBkUpAccess();
 8009332:	f7fa fd5f 	bl	8003df4 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8009336:	4b4c      	ldr	r3, [pc, #304]	; (8009468 <SystemClock_Config+0x168>)
 8009338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933a:	4a4b      	ldr	r2, [pc, #300]	; (8009468 <SystemClock_Config+0x168>)
 800933c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009340:	6413      	str	r3, [r2, #64]	; 0x40
 8009342:	4b49      	ldr	r3, [pc, #292]	; (8009468 <SystemClock_Config+0x168>)
 8009344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800934a:	607b      	str	r3, [r7, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800934e:	4b47      	ldr	r3, [pc, #284]	; (800946c <SystemClock_Config+0x16c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a46      	ldr	r2, [pc, #280]	; (800946c <SystemClock_Config+0x16c>)
 8009354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	4b44      	ldr	r3, [pc, #272]	; (800946c <SystemClock_Config+0x16c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009362:	603b      	str	r3, [r7, #0]
 8009364:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8009366:	2309      	movs	r3, #9
 8009368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800936c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009374:	2301      	movs	r3, #1
 8009376:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800937a:	2302      	movs	r3, #2
 800937c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009380:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009384:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 25;
 8009388:	2319      	movs	r3, #25
 800938a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 400;
 800938e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009392:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009396:	2302      	movs	r3, #2
 8009398:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 8;
 800939c:	2308      	movs	r3, #8
 800939e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80093a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fb fca6 	bl	8004cf8 <HAL_RCC_OscConfig>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <SystemClock_Config+0xb6>
	{
		Error_Handler();
 80093b2:	f000 fbaf 	bl	8009b14 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	*/
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80093b6:	f7fa fd2d 	bl	8003e14 <HAL_PWREx_EnableOverDrive>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80093c0:	f000 fba8 	bl	8009b14 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80093c4:	230f      	movs	r3, #15
 80093c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80093ca:	2302      	movs	r3, #2
 80093cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80093d0:	2300      	movs	r3, #0
 80093d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80093d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80093da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80093de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80093e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80093ea:	2107      	movs	r1, #7
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fb ff31 	bl	8005254 <HAL_RCC_ClockConfig>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <SystemClock_Config+0xfc>
	{
		Error_Handler();
 80093f8:	f000 fb8c 	bl	8009b14 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80093fc:	4b1c      	ldr	r3, [pc, #112]	; (8009470 <SystemClock_Config+0x170>)
 80093fe:	60bb      	str	r3, [r7, #8]
							  |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
							  |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_I2S
							  |RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8009400:	23c0      	movs	r3, #192	; 0xc0
 8009402:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8009404:	2302      	movs	r3, #2
 8009406:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8009408:	2302      	movs	r3, #2
 800940a:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800940c:	2302      	movs	r3, #2
 800940e:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8009410:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009414:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8009416:	2307      	movs	r3, #7
 8009418:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 800941a:	2308      	movs	r3, #8
 800941c:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800941e:	2303      	movs	r3, #3
 8009420:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 8009422:	2301      	movs	r3, #1
 8009424:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009426:	2301      	movs	r3, #1
 8009428:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800942a:	2300      	movs	r3, #0
 800942c:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800942e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009432:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8009434:	2300      	movs	r3, #0
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8009438:	2300      	movs	r3, #0
 800943a:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800943c:	2300      	movs	r3, #0
 800943e:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8009440:	2300      	movs	r3, #0
 8009442:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8009446:	2300      	movs	r3, #0
 8009448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800944c:	f107 0308 	add.w	r3, r7, #8
 8009450:	4618      	mov	r0, r3
 8009452:	f7fc f89d 	bl	8005590 <HAL_RCCEx_PeriphCLKConfig>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <SystemClock_Config+0x160>
	{
		Error_Handler();
 800945c:	f000 fb5a 	bl	8009b14 <Error_Handler>
	}
}
 8009460:	bf00      	nop
 8009462:	37e0      	adds	r7, #224	; 0xe0
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	40023800 	.word	0x40023800
 800946c:	40007000 	.word	0x40007000
 8009470:	00a84029 	.word	0x00a84029

08009474 <SDRAM_Test>:

TestStatus_t SDRAM_Test(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
	/* Fill the buffer to write */
	Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0x2442);
 8009478:	f242 4242 	movw	r2, #9282	; 0x2442
 800947c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009480:	4831      	ldr	r0, [pc, #196]	; (8009548 <SDRAM_Test+0xd4>)
 8009482:	f000 fb23 	bl	8009acc <Fill_Buffer>

	/* Write data to the SDRAM memory */
	for(uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8009486:	4b31      	ldr	r3, [pc, #196]	; (800954c <SDRAM_Test+0xd8>)
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	e010      	b.n	80094b0 <SDRAM_Test+0x3c>
	{
		*(__IO uint16_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 2*uwIndex) = aTxBuffer[uwIndex];
 800948e:	4b2f      	ldr	r3, [pc, #188]	; (800954c <SDRAM_Test+0xd8>)
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	4b2e      	ldr	r3, [pc, #184]	; (800954c <SDRAM_Test+0xd8>)
 8009494:	6819      	ldr	r1, [r3, #0]
 8009496:	4b2e      	ldr	r3, [pc, #184]	; (8009550 <SDRAM_Test+0xdc>)
 8009498:	440b      	add	r3, r1
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	4619      	mov	r1, r3
 800949e:	4b2a      	ldr	r3, [pc, #168]	; (8009548 <SDRAM_Test+0xd4>)
 80094a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80094a4:	800b      	strh	r3, [r1, #0]
	for(uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80094a6:	4b29      	ldr	r3, [pc, #164]	; (800954c <SDRAM_Test+0xd8>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	4a27      	ldr	r2, [pc, #156]	; (800954c <SDRAM_Test+0xd8>)
 80094ae:	6013      	str	r3, [r2, #0]
 80094b0:	4b26      	ldr	r3, [pc, #152]	; (800954c <SDRAM_Test+0xd8>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b8:	d3e9      	bcc.n	800948e <SDRAM_Test+0x1a>
	}

	/* Read back data from the SDRAM memory */
	for(uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80094ba:	4b24      	ldr	r3, [pc, #144]	; (800954c <SDRAM_Test+0xd8>)
 80094bc:	2200      	movs	r2, #0
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	e011      	b.n	80094e6 <SDRAM_Test+0x72>
	{
		aRxBuffer[uwIndex] = *(__IO uint16_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 2*uwIndex);
 80094c2:	4b22      	ldr	r3, [pc, #136]	; (800954c <SDRAM_Test+0xd8>)
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	4b22      	ldr	r3, [pc, #136]	; (8009550 <SDRAM_Test+0xdc>)
 80094c8:	4413      	add	r3, r2
 80094ca:	005b      	lsls	r3, r3, #1
 80094cc:	461a      	mov	r2, r3
 80094ce:	4b1f      	ldr	r3, [pc, #124]	; (800954c <SDRAM_Test+0xd8>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	8812      	ldrh	r2, [r2, #0]
 80094d4:	b291      	uxth	r1, r2
 80094d6:	4a1f      	ldr	r2, [pc, #124]	; (8009554 <SDRAM_Test+0xe0>)
 80094d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80094dc:	4b1b      	ldr	r3, [pc, #108]	; (800954c <SDRAM_Test+0xd8>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3301      	adds	r3, #1
 80094e2:	4a1a      	ldr	r2, [pc, #104]	; (800954c <SDRAM_Test+0xd8>)
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	4b19      	ldr	r3, [pc, #100]	; (800954c <SDRAM_Test+0xd8>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ee:	d3e8      	bcc.n	80094c2 <SDRAM_Test+0x4e>
	}

	/*##-3- Checking data integrity ############################################*/

	for(uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 80094f0:	4b16      	ldr	r3, [pc, #88]	; (800954c <SDRAM_Test+0xd8>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	e015      	b.n	8009524 <SDRAM_Test+0xb0>
	{
		if(aRxBuffer[uwIndex] != aTxBuffer[uwIndex])
 80094f8:	4b14      	ldr	r3, [pc, #80]	; (800954c <SDRAM_Test+0xd8>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a15      	ldr	r2, [pc, #84]	; (8009554 <SDRAM_Test+0xe0>)
 80094fe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8009502:	4b12      	ldr	r3, [pc, #72]	; (800954c <SDRAM_Test+0xd8>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4910      	ldr	r1, [pc, #64]	; (8009548 <SDRAM_Test+0xd4>)
 8009508:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800950c:	429a      	cmp	r2, r3
 800950e:	d004      	beq.n	800951a <SDRAM_Test+0xa6>
		{
			uwWriteReadStatus++;
 8009510:	4b11      	ldr	r3, [pc, #68]	; (8009558 <SDRAM_Test+0xe4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3301      	adds	r3, #1
 8009516:	4a10      	ldr	r2, [pc, #64]	; (8009558 <SDRAM_Test+0xe4>)
 8009518:	6013      	str	r3, [r2, #0]
	for(uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 800951a:	4b0c      	ldr	r3, [pc, #48]	; (800954c <SDRAM_Test+0xd8>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3301      	adds	r3, #1
 8009520:	4a0a      	ldr	r2, [pc, #40]	; (800954c <SDRAM_Test+0xd8>)
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	4b09      	ldr	r3, [pc, #36]	; (800954c <SDRAM_Test+0xd8>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800952c:	d203      	bcs.n	8009536 <SDRAM_Test+0xc2>
 800952e:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <SDRAM_Test+0xe4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0e0      	beq.n	80094f8 <SDRAM_Test+0x84>
		}
	}

	if(uwWriteReadStatus != PASSED)
 8009536:	4b08      	ldr	r3, [pc, #32]	; (8009558 <SDRAM_Test+0xe4>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <SDRAM_Test+0xce>
	{
		return FAILED;
 800953e:	2301      	movs	r3, #1
 8009540:	e000      	b.n	8009544 <SDRAM_Test+0xd0>
	}

	return PASSED;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	bd80      	pop	{r7, pc}
 8009548:	200037c8 	.word	0x200037c8
 800954c:	20001044 	.word	0x20001044
 8009550:	60000400 	.word	0x60000400
 8009554:	200016b8 	.word	0x200016b8
 8009558:	20001040 	.word	0x20001040

0800955c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8009560:	4b0d      	ldr	r3, [pc, #52]	; (8009598 <MX_CRC_Init+0x3c>)
 8009562:	4a0e      	ldr	r2, [pc, #56]	; (800959c <MX_CRC_Init+0x40>)
 8009564:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8009566:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <MX_CRC_Init+0x3c>)
 8009568:	2200      	movs	r2, #0
 800956a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800956c:	4b0a      	ldr	r3, [pc, #40]	; (8009598 <MX_CRC_Init+0x3c>)
 800956e:	2200      	movs	r2, #0
 8009570:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8009572:	4b09      	ldr	r3, [pc, #36]	; (8009598 <MX_CRC_Init+0x3c>)
 8009574:	2200      	movs	r2, #0
 8009576:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8009578:	4b07      	ldr	r3, [pc, #28]	; (8009598 <MX_CRC_Init+0x3c>)
 800957a:	2200      	movs	r2, #0
 800957c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800957e:	4b06      	ldr	r3, [pc, #24]	; (8009598 <MX_CRC_Init+0x3c>)
 8009580:	2201      	movs	r2, #1
 8009582:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8009584:	4804      	ldr	r0, [pc, #16]	; (8009598 <MX_CRC_Init+0x3c>)
 8009586:	f7f7 fa43 	bl	8000a10 <HAL_CRC_Init>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8009590:	f000 fac0 	bl	8009b14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8009594:	bf00      	nop
 8009596:	bd80      	pop	{r7, pc}
 8009598:	2000149c 	.word	0x2000149c
 800959c:	40023000 	.word	0x40023000

080095a0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
	hdma2d.Instance = DMA2D;
 80095a4:	4b19      	ldr	r3, [pc, #100]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095a6:	4a1a      	ldr	r2, [pc, #104]	; (8009610 <MX_DMA2D_Init+0x70>)
 80095a8:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 80095aa:	4b18      	ldr	r3, [pc, #96]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80095b0:	4b16      	ldr	r3, [pc, #88]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095b2:	2201      	movs	r2, #1
 80095b4:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 80095b6:	4b15      	ldr	r3, [pc, #84]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	60da      	str	r2, [r3, #12]
	hdma2d.Init.RedBlueSwap = DMA2D_RB_SWAP;
 80095bc:	4b13      	ldr	r3, [pc, #76]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095be:	2201      	movs	r2, #1
 80095c0:	615a      	str	r2, [r3, #20]

	hdma2d.LayerCfg[1].InputOffset = 0;
 80095c2:	4b12      	ldr	r3, [pc, #72]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	639a      	str	r2, [r3, #56]	; 0x38
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 80095c8:	4b10      	ldr	r3, [pc, #64]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095ca:	2201      	movs	r2, #1
 80095cc:	63da      	str	r2, [r3, #60]	; 0x3c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80095ce:	4b0f      	ldr	r3, [pc, #60]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	641a      	str	r2, [r3, #64]	; 0x40
	hdma2d.LayerCfg[1].InputAlpha = 0;
 80095d4:	4b0d      	ldr	r3, [pc, #52]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	645a      	str	r2, [r3, #68]	; 0x44
	hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80095da:	4b0c      	ldr	r3, [pc, #48]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095dc:	2200      	movs	r2, #0
 80095de:	649a      	str	r2, [r3, #72]	; 0x48
	hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_SWAP;
 80095e0:	4b0a      	ldr	r3, [pc, #40]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095e2:	2201      	movs	r2, #1
 80095e4:	64da      	str	r2, [r3, #76]	; 0x4c
	if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80095e6:	4809      	ldr	r0, [pc, #36]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095e8:	f7f7 fb1e 	bl	8000c28 <HAL_DMA2D_Init>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 80095f2:	f000 fa8f 	bl	8009b14 <Error_Handler>
	}
	if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80095f6:	2101      	movs	r1, #1
 80095f8:	4804      	ldr	r0, [pc, #16]	; (800960c <MX_DMA2D_Init+0x6c>)
 80095fa:	f7f7 fdef 	bl	80011dc <HAL_DMA2D_ConfigLayer>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <MX_DMA2D_Init+0x68>
	{
		Error_Handler();
 8009604:	f000 fa86 	bl	8009b14 <Error_Handler>
	}

}
 8009608:	bf00      	nop
 800960a:	bd80      	pop	{r7, pc}
 800960c:	200036b8 	.word	0x200036b8
 8009610:	4002b000 	.word	0x4002b000

08009614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8009618:	4b1b      	ldr	r3, [pc, #108]	; (8009688 <MX_I2C1_Init+0x74>)
 800961a:	4a1c      	ldr	r2, [pc, #112]	; (800968c <MX_I2C1_Init+0x78>)
 800961c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0xA010131A;
 800961e:	4b1a      	ldr	r3, [pc, #104]	; (8009688 <MX_I2C1_Init+0x74>)
 8009620:	4a1b      	ldr	r2, [pc, #108]	; (8009690 <MX_I2C1_Init+0x7c>)
 8009622:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8009624:	4b18      	ldr	r3, [pc, #96]	; (8009688 <MX_I2C1_Init+0x74>)
 8009626:	2200      	movs	r2, #0
 8009628:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800962a:	4b17      	ldr	r3, [pc, #92]	; (8009688 <MX_I2C1_Init+0x74>)
 800962c:	2201      	movs	r2, #1
 800962e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009630:	4b15      	ldr	r3, [pc, #84]	; (8009688 <MX_I2C1_Init+0x74>)
 8009632:	2200      	movs	r2, #0
 8009634:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8009636:	4b14      	ldr	r3, [pc, #80]	; (8009688 <MX_I2C1_Init+0x74>)
 8009638:	2200      	movs	r2, #0
 800963a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800963c:	4b12      	ldr	r3, [pc, #72]	; (8009688 <MX_I2C1_Init+0x74>)
 800963e:	2200      	movs	r2, #0
 8009640:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009642:	4b11      	ldr	r3, [pc, #68]	; (8009688 <MX_I2C1_Init+0x74>)
 8009644:	2200      	movs	r2, #0
 8009646:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009648:	4b0f      	ldr	r3, [pc, #60]	; (8009688 <MX_I2C1_Init+0x74>)
 800964a:	2200      	movs	r2, #0
 800964c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800964e:	480e      	ldr	r0, [pc, #56]	; (8009688 <MX_I2C1_Init+0x74>)
 8009650:	f7f9 fac6 	bl	8002be0 <HAL_I2C_Init>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 800965a:	f000 fa5b 	bl	8009b14 <Error_Handler>
	}
	/** Configure Analogue filter
	*/
	if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLED) != HAL_OK)
 800965e:	2100      	movs	r1, #0
 8009660:	4809      	ldr	r0, [pc, #36]	; (8009688 <MX_I2C1_Init+0x74>)
 8009662:	f7f9 ff97 	bl	8003594 <HAL_I2CEx_ConfigAnalogFilter>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 800966c:	f000 fa52 	bl	8009b14 <Error_Handler>
	}
	/** Configure Digital filter
	*/
	if(HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 8009670:	2105      	movs	r1, #5
 8009672:	4805      	ldr	r0, [pc, #20]	; (8009688 <MX_I2C1_Init+0x74>)
 8009674:	f7f9 ffd9 	bl	800362a <HAL_I2CEx_ConfigDigitalFilter>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 800967e:	f000 fa49 	bl	8009b14 <Error_Handler>
	}
}
 8009682:	bf00      	nop
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	20001450 	.word	0x20001450
 800968c:	40005400 	.word	0x40005400
 8009690:	a010131a 	.word	0xa010131a

08009694 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08e      	sub	sp, #56	; 0x38
 8009698:	af00      	add	r7, sp, #0
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800969a:	1d3b      	adds	r3, r7, #4
 800969c:	2234      	movs	r2, #52	; 0x34
 800969e:	2100      	movs	r1, #0
 80096a0:	4618      	mov	r0, r3
 80096a2:	f00f fb20 	bl	8018ce6 <memset>

	hltdc.Instance = LTDC;
 80096a6:	4b3a      	ldr	r3, [pc, #232]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096a8:	4a3a      	ldr	r2, [pc, #232]	; (8009794 <MX_LTDC_Init+0x100>)
 80096aa:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80096ac:	4b38      	ldr	r3, [pc, #224]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096ae:	2200      	movs	r2, #0
 80096b0:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80096b2:	4b37      	ldr	r3, [pc, #220]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80096b8:	4b35      	ldr	r3, [pc, #212]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80096be:	4b34      	ldr	r3, [pc, #208]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 95;
 80096c4:	4b32      	ldr	r3, [pc, #200]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096c6:	225f      	movs	r2, #95	; 0x5f
 80096c8:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
 80096ca:	4b31      	ldr	r3, [pc, #196]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096cc:	2201      	movs	r2, #1
 80096ce:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 143;
 80096d0:	4b2f      	ldr	r3, [pc, #188]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096d2:	228f      	movs	r2, #143	; 0x8f
 80096d4:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 32;
 80096d6:	4b2e      	ldr	r3, [pc, #184]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096d8:	2220      	movs	r2, #32
 80096da:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 783;
 80096dc:	4b2c      	ldr	r3, [pc, #176]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096de:	f240 320f 	movw	r2, #783	; 0x30f
 80096e2:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 512;
 80096e4:	4b2a      	ldr	r3, [pc, #168]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096ea:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 799;
 80096ec:	4b28      	ldr	r3, [pc, #160]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096ee:	f240 321f 	movw	r2, #799	; 0x31f
 80096f2:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 523;
 80096f4:	4b26      	ldr	r3, [pc, #152]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096f6:	f240 220b 	movw	r2, #523	; 0x20b
 80096fa:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 40;
 80096fc:	4b24      	ldr	r3, [pc, #144]	; (8009790 <MX_LTDC_Init+0xfc>)
 80096fe:	2228      	movs	r2, #40	; 0x28
 8009700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 80;
 8009704:	4b22      	ldr	r3, [pc, #136]	; (8009790 <MX_LTDC_Init+0xfc>)
 8009706:	2250      	movs	r2, #80	; 0x50
 8009708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 225;
 800970c:	4b20      	ldr	r3, [pc, #128]	; (8009790 <MX_LTDC_Init+0xfc>)
 800970e:	22e1      	movs	r2, #225	; 0xe1
 8009710:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if(HAL_LTDC_Init(&hltdc) != HAL_OK)
 8009714:	481e      	ldr	r0, [pc, #120]	; (8009790 <MX_LTDC_Init+0xfc>)
 8009716:	f7f9 ffd5 	bl	80036c4 <HAL_LTDC_Init>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8009720:	f000 f9f8 	bl	8009b14 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 640;
 8009728:	f44f 7320 	mov.w	r3, #640	; 0x280
 800972c:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 480;
 8009732:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009736:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8009738:	2301      	movs	r3, #1
 800973a:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 800973c:	23ff      	movs	r3, #255	; 0xff
 800973e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8009744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009748:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800974a:	2305      	movs	r3, #5
 800974c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 800974e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009752:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 640;
 8009754:	f44f 7320 	mov.w	r3, #640	; 0x280
 8009758:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 480;
 800975a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800975e:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 255;
 8009760:	23ff      	movs	r3, #255	; 0xff
 8009762:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8009772:	1d3b      	adds	r3, r7, #4
 8009774:	2200      	movs	r2, #0
 8009776:	4619      	mov	r1, r3
 8009778:	4805      	ldr	r0, [pc, #20]	; (8009790 <MX_LTDC_Init+0xfc>)
 800977a:	f7fa f92b 	bl	80039d4 <HAL_LTDC_ConfigLayer>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8009784:	f000 f9c6 	bl	8009b14 <Error_Handler>
	}
}
 8009788:	bf00      	nop
 800978a:	3738      	adds	r7, #56	; 0x38
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	20001558 	.word	0x20001558
 8009794:	40016800 	.word	0x40016800

08009798 <MX_FMC_Init>:

}

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800979e:	1d3b      	adds	r3, r7, #4
 80097a0:	2200      	movs	r2, #0
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	605a      	str	r2, [r3, #4]
 80097a6:	609a      	str	r2, [r3, #8]
 80097a8:	60da      	str	r2, [r3, #12]
 80097aa:	611a      	str	r2, [r3, #16]
 80097ac:	615a      	str	r2, [r3, #20]
 80097ae:	619a      	str	r2, [r3, #24]

	/** Perform the SDRAM1 memory initialization sequence
	*/
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80097b0:	4b1f      	ldr	r3, [pc, #124]	; (8009830 <MX_FMC_Init+0x98>)
 80097b2:	4a20      	ldr	r2, [pc, #128]	; (8009834 <MX_FMC_Init+0x9c>)
 80097b4:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80097b6:	4b1e      	ldr	r3, [pc, #120]	; (8009830 <MX_FMC_Init+0x98>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_10;
 80097bc:	4b1c      	ldr	r3, [pc, #112]	; (8009830 <MX_FMC_Init+0x98>)
 80097be:	2202      	movs	r2, #2
 80097c0:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80097c2:	4b1b      	ldr	r3, [pc, #108]	; (8009830 <MX_FMC_Init+0x98>)
 80097c4:	2208      	movs	r2, #8
 80097c6:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80097c8:	4b19      	ldr	r3, [pc, #100]	; (8009830 <MX_FMC_Init+0x98>)
 80097ca:	2210      	movs	r2, #16
 80097cc:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80097ce:	4b18      	ldr	r3, [pc, #96]	; (8009830 <MX_FMC_Init+0x98>)
 80097d0:	2240      	movs	r2, #64	; 0x40
 80097d2:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80097d4:	4b16      	ldr	r3, [pc, #88]	; (8009830 <MX_FMC_Init+0x98>)
 80097d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097da:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80097dc:	4b14      	ldr	r3, [pc, #80]	; (8009830 <MX_FMC_Init+0x98>)
 80097de:	2200      	movs	r2, #0
 80097e0:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80097e2:	4b13      	ldr	r3, [pc, #76]	; (8009830 <MX_FMC_Init+0x98>)
 80097e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097e8:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80097ea:	4b11      	ldr	r3, [pc, #68]	; (8009830 <MX_FMC_Init+0x98>)
 80097ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80097f0:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80097f2:	4b0f      	ldr	r3, [pc, #60]	; (8009830 <MX_FMC_Init+0x98>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 80097f8:	2302      	movs	r3, #2
 80097fa:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 80097fc:	2307      	movs	r3, #7
 80097fe:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8009800:	2304      	movs	r3, #4
 8009802:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8009804:	2307      	movs	r3, #7
 8009806:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 2;
 8009808:	2302      	movs	r3, #2
 800980a:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 800980c:	2302      	movs	r3, #2
 800980e:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8009810:	2302      	movs	r3, #2
 8009812:	61fb      	str	r3, [r7, #28]

	if(HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009814:	1d3b      	adds	r3, r7, #4
 8009816:	4619      	mov	r1, r3
 8009818:	4805      	ldr	r0, [pc, #20]	; (8009830 <MX_FMC_Init+0x98>)
 800981a:	f7fc fadf 	bl	8005ddc <HAL_SDRAM_Init>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 8009824:	f000 f976 	bl	8009b14 <Error_Handler>
	}
}
 8009828:	bf00      	nop
 800982a:	3720      	adds	r7, #32
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20003794 	.word	0x20003794
 8009834:	a0000140 	.word	0xa0000140

08009838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08e      	sub	sp, #56	; 0x38
 800983c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800983e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	605a      	str	r2, [r3, #4]
 8009848:	609a      	str	r2, [r3, #8]
 800984a:	60da      	str	r2, [r3, #12]
 800984c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800984e:	4b6c      	ldr	r3, [pc, #432]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 8009850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009852:	4a6b      	ldr	r2, [pc, #428]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 8009854:	f043 0310 	orr.w	r3, r3, #16
 8009858:	6313      	str	r3, [r2, #48]	; 0x30
 800985a:	4b69      	ldr	r3, [pc, #420]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 800985c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985e:	f003 0310 	and.w	r3, r3, #16
 8009862:	623b      	str	r3, [r7, #32]
 8009864:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8009866:	4b66      	ldr	r3, [pc, #408]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 8009868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986a:	4a65      	ldr	r2, [pc, #404]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 800986c:	f043 0304 	orr.w	r3, r3, #4
 8009870:	6313      	str	r3, [r2, #48]	; 0x30
 8009872:	4b63      	ldr	r3, [pc, #396]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 8009874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009876:	f003 0304 	and.w	r3, r3, #4
 800987a:	61fb      	str	r3, [r7, #28]
 800987c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800987e:	4b60      	ldr	r3, [pc, #384]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 8009880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009882:	4a5f      	ldr	r2, [pc, #380]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 8009884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009888:	6313      	str	r3, [r2, #48]	; 0x30
 800988a:	4b5d      	ldr	r3, [pc, #372]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009892:	61bb      	str	r3, [r7, #24]
 8009894:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8009896:	4b5a      	ldr	r3, [pc, #360]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 8009898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989a:	4a59      	ldr	r2, [pc, #356]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 800989c:	f043 0320 	orr.w	r3, r3, #32
 80098a0:	6313      	str	r3, [r2, #48]	; 0x30
 80098a2:	4b57      	ldr	r3, [pc, #348]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 80098a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a6:	f003 0320 	and.w	r3, r3, #32
 80098aa:	617b      	str	r3, [r7, #20]
 80098ac:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80098ae:	4b54      	ldr	r3, [pc, #336]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 80098b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b2:	4a53      	ldr	r2, [pc, #332]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 80098b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b8:	6313      	str	r3, [r2, #48]	; 0x30
 80098ba:	4b51      	ldr	r3, [pc, #324]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 80098bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c2:	613b      	str	r3, [r7, #16]
 80098c4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80098c6:	4b4e      	ldr	r3, [pc, #312]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 80098c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ca:	4a4d      	ldr	r2, [pc, #308]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 80098cc:	f043 0301 	orr.w	r3, r3, #1
 80098d0:	6313      	str	r3, [r2, #48]	; 0x30
 80098d2:	4b4b      	ldr	r3, [pc, #300]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	60fb      	str	r3, [r7, #12]
 80098dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80098de:	4b48      	ldr	r3, [pc, #288]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	4a47      	ldr	r2, [pc, #284]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 80098e4:	f043 0302 	orr.w	r3, r3, #2
 80098e8:	6313      	str	r3, [r2, #48]	; 0x30
 80098ea:	4b45      	ldr	r3, [pc, #276]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 80098ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	60bb      	str	r3, [r7, #8]
 80098f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80098f6:	4b42      	ldr	r3, [pc, #264]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 80098f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fa:	4a41      	ldr	r2, [pc, #260]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 80098fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009900:	6313      	str	r3, [r2, #48]	; 0x30
 8009902:	4b3f      	ldr	r3, [pc, #252]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 8009904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990a:	607b      	str	r3, [r7, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800990e:	4b3c      	ldr	r3, [pc, #240]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 8009910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009912:	4a3b      	ldr	r2, [pc, #236]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 8009914:	f043 0308 	orr.w	r3, r3, #8
 8009918:	6313      	str	r3, [r2, #48]	; 0x30
 800991a:	4b39      	ldr	r3, [pc, #228]	; (8009a00 <MX_GPIO_Init+0x1c8>)
 800991c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991e:	f003 0308 	and.w	r3, r3, #8
 8009922:	603b      	str	r3, [r7, #0]
 8009924:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8009926:	2200      	movs	r2, #0
 8009928:	210c      	movs	r1, #12
 800992a:	4836      	ldr	r0, [pc, #216]	; (8009a04 <MX_GPIO_Init+0x1cc>)
 800992c:	f7f7 ff3a 	bl	80017a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED_STATUS_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8009930:	2200      	movs	r2, #0
 8009932:	f242 0120 	movw	r1, #8224	; 0x2020
 8009936:	4834      	ldr	r0, [pc, #208]	; (8009a08 <MX_GPIO_Init+0x1d0>)
 8009938:	f7f7 ff34 	bl	80017a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PD_GPIO_Port, PD_Pin, GPIO_PIN_SET);
 800993c:	2201      	movs	r2, #1
 800993e:	2140      	movs	r1, #64	; 0x40
 8009940:	4832      	ldr	r0, [pc, #200]	; (8009a0c <MX_GPIO_Init+0x1d4>)
 8009942:	f7f7 ff2f 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8009946:	200a      	movs	r0, #10
 8009948:	f7f6 feb6 	bl	80006b8 <HAL_Delay>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PD_GPIO_Port, PD_Pin, GPIO_PIN_RESET);
 800994c:	2200      	movs	r2, #0
 800994e:	2140      	movs	r1, #64	; 0x40
 8009950:	482e      	ldr	r0, [pc, #184]	; (8009a0c <MX_GPIO_Init+0x1d4>)
 8009952:	f7f7 ff27 	bl	80017a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : NRF24_CSN_Pin NRF24_CE_Pin */
	GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8009956:	230c      	movs	r3, #12
 8009958:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800995a:	2301      	movs	r3, #1
 800995c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800995e:	2300      	movs	r3, #0
 8009960:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009962:	2300      	movs	r3, #0
 8009964:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800996a:	4619      	mov	r1, r3
 800996c:	4825      	ldr	r0, [pc, #148]	; (8009a04 <MX_GPIO_Init+0x1cc>)
 800996e:	f7f7 fd6f 	bl	8001450 <HAL_GPIO_Init>

	/*Configure GPIO pin : NRF24_IRQ_Pin */
	GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8009972:	2310      	movs	r3, #16
 8009974:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009976:	4b26      	ldr	r3, [pc, #152]	; (8009a10 <MX_GPIO_Init+0x1d8>)
 8009978:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800997a:	2300      	movs	r3, #0
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800997e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009982:	4619      	mov	r1, r3
 8009984:	481f      	ldr	r0, [pc, #124]	; (8009a04 <MX_GPIO_Init+0x1cc>)
 8009986:	f7f7 fd63 	bl	8001450 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_DETECT_Pin PD4 */
	GPIO_InitStruct.Pin = SD_DETECT_Pin|GPIO_PIN_4;
 800998a:	f241 0310 	movw	r3, #4112	; 0x1010
 800998e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009990:	2300      	movs	r3, #0
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009994:	2300      	movs	r3, #0
 8009996:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800999c:	4619      	mov	r1, r3
 800999e:	481a      	ldr	r0, [pc, #104]	; (8009a08 <MX_GPIO_Init+0x1d0>)
 80099a0:	f7f7 fd56 	bl	8001450 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_STATUS_Pin PD5 */
	GPIO_InitStruct.Pin = LED_STATUS_Pin|GPIO_PIN_5;
 80099a4:	f242 0320 	movw	r3, #8224	; 0x2020
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80099aa:	2301      	movs	r3, #1
 80099ac:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099b2:	2300      	movs	r3, #0
 80099b4:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80099b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099ba:	4619      	mov	r1, r3
 80099bc:	4812      	ldr	r0, [pc, #72]	; (8009a08 <MX_GPIO_Init+0x1d0>)
 80099be:	f7f7 fd47 	bl	8001450 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD_Pin */
	GPIO_InitStruct.Pin = PD_Pin;
 80099c2:	2340      	movs	r3, #64	; 0x40
 80099c4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80099c6:	2301      	movs	r3, #1
 80099c8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099ce:	2300      	movs	r3, #0
 80099d0:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(PD_GPIO_Port, &GPIO_InitStruct);
 80099d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099d6:	4619      	mov	r1, r3
 80099d8:	480c      	ldr	r0, [pc, #48]	; (8009a0c <MX_GPIO_Init+0x1d4>)
 80099da:	f7f7 fd39 	bl	8001450 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_HDMI_Pin */
	GPIO_InitStruct.Pin = INT_HDMI_Pin;
 80099de:	2380      	movs	r3, #128	; 0x80
 80099e0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80099e2:	4b0b      	ldr	r3, [pc, #44]	; (8009a10 <MX_GPIO_Init+0x1d8>)
 80099e4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(INT_HDMI_GPIO_Port, &GPIO_InitStruct);
 80099ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099ee:	4619      	mov	r1, r3
 80099f0:	4806      	ldr	r0, [pc, #24]	; (8009a0c <MX_GPIO_Init+0x1d4>)
 80099f2:	f7f7 fd2d 	bl	8001450 <HAL_GPIO_Init>

}
 80099f6:	bf00      	nop
 80099f8:	3738      	adds	r7, #56	; 0x38
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	40023800 	.word	0x40023800
 8009a04:	40021000 	.word	0x40021000
 8009a08:	40020c00 	.word	0x40020c00
 8009a0c:	40020800 	.word	0x40020800
 8009a10:	10110000 	.word	0x10110000

08009a14 <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
	FMC_SDRAM_CommandTypeDef Command = {0};
 8009a1c:	f107 0310 	add.w	r3, r7, #16
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	605a      	str	r2, [r3, #4]
 8009a26:	609a      	str	r2, [r3, #8]
 8009a28:	60da      	str	r2, [r3, #12]
	__IO uint32_t tmpmrd =0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60fb      	str	r3, [r7, #12]
	/* Step 3:  Configure a clock configuration enable command */
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	613b      	str	r3, [r7, #16]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8009a32:	2310      	movs	r3, #16
 8009a34:	617b      	str	r3, [r7, #20]
	Command.AutoRefreshNumber = 1;
 8009a36:	2301      	movs	r3, #1
 8009a38:	61bb      	str	r3, [r7, #24]
	Command.ModeRegisterDefinition = 0;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	61fb      	str	r3, [r7, #28]

	/* Send the command */
	HAL_SDRAM_SendCommand(hsdram, &Command, SDRAM_TIMEOUT);
 8009a3e:	f107 0310 	add.w	r3, r7, #16
 8009a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7fc f9fb 	bl	8005e44 <HAL_SDRAM_SendCommand>

	/* Step 4: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8009a4e:	2001      	movs	r0, #1
 8009a50:	f7f6 fe32 	bl	80006b8 <HAL_Delay>

	/* Step 5: Configure a PALL (precharge all) command */
	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8009a54:	2302      	movs	r3, #2
 8009a56:	613b      	str	r3, [r7, #16]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8009a58:	2310      	movs	r3, #16
 8009a5a:	617b      	str	r3, [r7, #20]
	Command.AutoRefreshNumber = 1;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	61bb      	str	r3, [r7, #24]
	Command.ModeRegisterDefinition = 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61fb      	str	r3, [r7, #28]

	/* Send the command */
	HAL_SDRAM_SendCommand(hsdram, &Command, SDRAM_TIMEOUT);
 8009a64:	f107 0310 	add.w	r3, r7, #16
 8009a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7fc f9e8 	bl	8005e44 <HAL_SDRAM_SendCommand>

	/* Step 6 : Configure a Auto-Refresh command */
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8009a74:	2303      	movs	r3, #3
 8009a76:	613b      	str	r3, [r7, #16]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8009a78:	2310      	movs	r3, #16
 8009a7a:	617b      	str	r3, [r7, #20]
	Command.AutoRefreshNumber = 8;
 8009a7c:	2308      	movs	r3, #8
 8009a7e:	61bb      	str	r3, [r7, #24]
	Command.ModeRegisterDefinition = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	61fb      	str	r3, [r7, #28]

	/* Send the command */
	HAL_SDRAM_SendCommand(hsdram, &Command, SDRAM_TIMEOUT);
 8009a84:	f107 0310 	add.w	r3, r7, #16
 8009a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7fc f9d8 	bl	8005e44 <HAL_SDRAM_SendCommand>

	/* Step 7: Program the external memory mode register */
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8009a94:	f44f 7308 	mov.w	r3, #544	; 0x220
 8009a98:	60fb      	str	r3, [r7, #12]
					 SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
					 SDRAM_MODEREG_CAS_LATENCY_2           |
					 SDRAM_MODEREG_OPERATING_MODE_STANDARD |
					 SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8009a9a:	2304      	movs	r3, #4
 8009a9c:	613b      	str	r3, [r7, #16]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8009a9e:	2310      	movs	r3, #16
 8009aa0:	617b      	str	r3, [r7, #20]
	Command.AutoRefreshNumber = 1;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	61bb      	str	r3, [r7, #24]
	Command.ModeRegisterDefinition = tmpmrd;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	61fb      	str	r3, [r7, #28]

	/* Send the command */
	HAL_SDRAM_SendCommand(hsdram, &Command, SDRAM_TIMEOUT);
 8009aaa:	f107 0310 	add.w	r3, r7, #16
 8009aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7fc f9c5 	bl	8005e44 <HAL_SDRAM_SendCommand>

	/* Step 8: Set the refresh rate counter */
	/* (15.62 us x Freq) - 20 */
	/* Set the device refresh counter */
	//hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
	HAL_SDRAM_ProgramRefreshRate(hsdram, 0x0603);
 8009aba:	f240 6103 	movw	r1, #1539	; 0x603
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7fc f9eb 	bl	8005e9a <HAL_SDRAM_ProgramRefreshRate>
}
 8009ac4:	bf00      	nop
 8009ac6:	3720      	adds	r7, #32
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <Fill_Buffer>:
  * @param  uwBufferLenght: size of the buffer to fill
  * @param  uwOffset: first value to fill on the buffer
  * @retval None
  */
static void Fill_Buffer(uint16_t *pBuffer, uint32_t uwBufferLenght, uint16_t uwOffset)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	80fb      	strh	r3, [r7, #6]
	uint32_t tmpIndex = 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	617b      	str	r3, [r7, #20]

	/* Put in global buffer different values */
	for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]
 8009ae2:	e00c      	b.n	8009afe <Fill_Buffer+0x32>
	{
		pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	b299      	uxth	r1, r3
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	4413      	add	r3, r2
 8009af0:	88fa      	ldrh	r2, [r7, #6]
 8009af2:	440a      	add	r2, r1
 8009af4:	b292      	uxth	r2, r2
 8009af6:	801a      	strh	r2, [r3, #0]
	for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	3301      	adds	r3, #1
 8009afc:	617b      	str	r3, [r7, #20]
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d3ee      	bcc.n	8009ae4 <Fill_Buffer+0x18>
	}
}
 8009b06:	bf00      	nop
 8009b08:	371c      	adds	r7, #28
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
	...

08009b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8009b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009b1c:	4803      	ldr	r0, [pc, #12]	; (8009b2c <Error_Handler+0x18>)
 8009b1e:	f7f7 fe5a 	bl	80017d6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8009b22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009b26:	f7f6 fdc7 	bl	80006b8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8009b2a:	e7f5      	b.n	8009b18 <Error_Handler+0x4>
 8009b2c:	40020c00 	.word	0x40020c00

08009b30 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009b36:	4b0f      	ldr	r3, [pc, #60]	; (8009b74 <HAL_MspInit+0x44>)
 8009b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3a:	4a0e      	ldr	r2, [pc, #56]	; (8009b74 <HAL_MspInit+0x44>)
 8009b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b40:	6413      	str	r3, [r2, #64]	; 0x40
 8009b42:	4b0c      	ldr	r3, [pc, #48]	; (8009b74 <HAL_MspInit+0x44>)
 8009b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b4a:	607b      	str	r3, [r7, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b4e:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <HAL_MspInit+0x44>)
 8009b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b52:	4a08      	ldr	r2, [pc, #32]	; (8009b74 <HAL_MspInit+0x44>)
 8009b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b58:	6453      	str	r3, [r2, #68]	; 0x44
 8009b5a:	4b06      	ldr	r3, [pc, #24]	; (8009b74 <HAL_MspInit+0x44>)
 8009b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b62:	603b      	str	r3, [r7, #0]
 8009b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009b66:	bf00      	nop
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	40023800 	.word	0x40023800

08009b78 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a0a      	ldr	r2, [pc, #40]	; (8009bb0 <HAL_CRC_MspInit+0x38>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d10b      	bne.n	8009ba2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009b8a:	4b0a      	ldr	r3, [pc, #40]	; (8009bb4 <HAL_CRC_MspInit+0x3c>)
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8e:	4a09      	ldr	r2, [pc, #36]	; (8009bb4 <HAL_CRC_MspInit+0x3c>)
 8009b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b94:	6313      	str	r3, [r2, #48]	; 0x30
 8009b96:	4b07      	ldr	r3, [pc, #28]	; (8009bb4 <HAL_CRC_MspInit+0x3c>)
 8009b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b9e:	60fb      	str	r3, [r7, #12]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8009ba2:	bf00      	nop
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	40023000 	.word	0x40023000
 8009bb4:	40023800 	.word	0x40023800

08009bb8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a0a      	ldr	r2, [pc, #40]	; (8009bf0 <HAL_DMA2D_MspInit+0x38>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d10b      	bne.n	8009be2 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8009bca:	4b0a      	ldr	r3, [pc, #40]	; (8009bf4 <HAL_DMA2D_MspInit+0x3c>)
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bce:	4a09      	ldr	r2, [pc, #36]	; (8009bf4 <HAL_DMA2D_MspInit+0x3c>)
 8009bd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8009bd6:	4b07      	ldr	r3, [pc, #28]	; (8009bf4 <HAL_DMA2D_MspInit+0x3c>)
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8009be2:	bf00      	nop
 8009be4:	3714      	adds	r7, #20
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	4002b000 	.word	0x4002b000
 8009bf4:	40023800 	.word	0x40023800

08009bf8 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a07      	ldr	r2, [pc, #28]	; (8009c24 <HAL_DMA2D_MspDeInit+0x2c>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d105      	bne.n	8009c16 <HAL_DMA2D_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8009c0a:	4b07      	ldr	r3, [pc, #28]	; (8009c28 <HAL_DMA2D_MspDeInit+0x30>)
 8009c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0e:	4a06      	ldr	r2, [pc, #24]	; (8009c28 <HAL_DMA2D_MspDeInit+0x30>)
 8009c10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009c14:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8009c16:	bf00      	nop
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	4002b000 	.word	0x4002b000
 8009c28:	40023800 	.word	0x40023800

08009c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08a      	sub	sp, #40	; 0x28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c34:	f107 0314 	add.w	r3, r7, #20
 8009c38:	2200      	movs	r2, #0
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	605a      	str	r2, [r3, #4]
 8009c3e:	609a      	str	r2, [r3, #8]
 8009c40:	60da      	str	r2, [r3, #12]
 8009c42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a17      	ldr	r2, [pc, #92]	; (8009ca8 <HAL_I2C_MspInit+0x7c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d128      	bne.n	8009ca0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c4e:	4b17      	ldr	r3, [pc, #92]	; (8009cac <HAL_I2C_MspInit+0x80>)
 8009c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c52:	4a16      	ldr	r2, [pc, #88]	; (8009cac <HAL_I2C_MspInit+0x80>)
 8009c54:	f043 0302 	orr.w	r3, r3, #2
 8009c58:	6313      	str	r3, [r2, #48]	; 0x30
 8009c5a:	4b14      	ldr	r3, [pc, #80]	; (8009cac <HAL_I2C_MspInit+0x80>)
 8009c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	613b      	str	r3, [r7, #16]
 8009c64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009c66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009c6c:	2312      	movs	r3, #18
 8009c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009c70:	2301      	movs	r3, #1
 8009c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c74:	2303      	movs	r3, #3
 8009c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009c78:	2304      	movs	r3, #4
 8009c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c7c:	f107 0314 	add.w	r3, r7, #20
 8009c80:	4619      	mov	r1, r3
 8009c82:	480b      	ldr	r0, [pc, #44]	; (8009cb0 <HAL_I2C_MspInit+0x84>)
 8009c84:	f7f7 fbe4 	bl	8001450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009c88:	4b08      	ldr	r3, [pc, #32]	; (8009cac <HAL_I2C_MspInit+0x80>)
 8009c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8c:	4a07      	ldr	r2, [pc, #28]	; (8009cac <HAL_I2C_MspInit+0x80>)
 8009c8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c92:	6413      	str	r3, [r2, #64]	; 0x40
 8009c94:	4b05      	ldr	r3, [pc, #20]	; (8009cac <HAL_I2C_MspInit+0x80>)
 8009c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009ca0:	bf00      	nop
 8009ca2:	3728      	adds	r7, #40	; 0x28
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	40005400 	.word	0x40005400
 8009cac:	40023800 	.word	0x40023800
 8009cb0:	40020400 	.word	0x40020400

08009cb4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08e      	sub	sp, #56	; 0x38
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	609a      	str	r2, [r3, #8]
 8009cc8:	60da      	str	r2, [r3, #12]
 8009cca:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a51      	ldr	r2, [pc, #324]	; (8009e18 <HAL_LTDC_MspInit+0x164>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	f040 809c 	bne.w	8009e10 <HAL_LTDC_MspInit+0x15c>

	  /* USER CODE BEGIN LTDC_MspInit 0 */

	   /* USER CODE END LTDC_MspInit 0 */
	     /* Peripheral clock enable */
	     __HAL_RCC_LTDC_CLK_ENABLE();
 8009cd8:	4b50      	ldr	r3, [pc, #320]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cdc:	4a4f      	ldr	r2, [pc, #316]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009cde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ce2:	6453      	str	r3, [r2, #68]	; 0x44
 8009ce4:	4b4d      	ldr	r3, [pc, #308]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009cec:	623b      	str	r3, [r7, #32]
 8009cee:	6a3b      	ldr	r3, [r7, #32]

	     __HAL_RCC_GPIOE_CLK_ENABLE();
 8009cf0:	4b4a      	ldr	r3, [pc, #296]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf4:	4a49      	ldr	r2, [pc, #292]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009cf6:	f043 0310 	orr.w	r3, r3, #16
 8009cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8009cfc:	4b47      	ldr	r3, [pc, #284]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d00:	f003 0310 	and.w	r3, r3, #16
 8009d04:	61fb      	str	r3, [r7, #28]
 8009d06:	69fb      	ldr	r3, [r7, #28]
	     __HAL_RCC_GPIOI_CLK_ENABLE();
 8009d08:	4b44      	ldr	r3, [pc, #272]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0c:	4a43      	ldr	r2, [pc, #268]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d12:	6313      	str	r3, [r2, #48]	; 0x30
 8009d14:	4b41      	ldr	r3, [pc, #260]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d1c:	61bb      	str	r3, [r7, #24]
 8009d1e:	69bb      	ldr	r3, [r7, #24]
	     __HAL_RCC_GPIOF_CLK_ENABLE();
 8009d20:	4b3e      	ldr	r3, [pc, #248]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d24:	4a3d      	ldr	r2, [pc, #244]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009d26:	f043 0320 	orr.w	r3, r3, #32
 8009d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8009d2c:	4b3b      	ldr	r3, [pc, #236]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d30:	f003 0320 	and.w	r3, r3, #32
 8009d34:	617b      	str	r3, [r7, #20]
 8009d36:	697b      	ldr	r3, [r7, #20]
	     __HAL_RCC_GPIOH_CLK_ENABLE();
 8009d38:	4b38      	ldr	r3, [pc, #224]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3c:	4a37      	ldr	r2, [pc, #220]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d42:	6313      	str	r3, [r2, #48]	; 0x30
 8009d44:	4b35      	ldr	r3, [pc, #212]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d4c:	613b      	str	r3, [r7, #16]
 8009d4e:	693b      	ldr	r3, [r7, #16]
	     __HAL_RCC_GPIOG_CLK_ENABLE();
 8009d50:	4b32      	ldr	r3, [pc, #200]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d54:	4a31      	ldr	r2, [pc, #196]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8009d5c:	4b2f      	ldr	r3, [pc, #188]	; (8009e1c <HAL_LTDC_MspInit+0x168>)
 8009d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	68fb      	ldr	r3, [r7, #12]
	     PI4     ------> LTDC_B4
	     PI5     ------> LTDC_B5
	     PI6     ------> LTDC_B6
	     PI7     ------> LTDC_B7
	     */
	     GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009d68:	2360      	movs	r3, #96	; 0x60
 8009d6a:	627b      	str	r3, [r7, #36]	; 0x24
	     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	62bb      	str	r3, [r7, #40]	; 0x28
	     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d70:	2300      	movs	r3, #0
 8009d72:	62fb      	str	r3, [r7, #44]	; 0x2c
	     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009d74:	2302      	movs	r3, #2
 8009d76:	633b      	str	r3, [r7, #48]	; 0x30
	     GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009d78:	230e      	movs	r3, #14
 8009d7a:	637b      	str	r3, [r7, #52]	; 0x34
	     HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d80:	4619      	mov	r1, r3
 8009d82:	4827      	ldr	r0, [pc, #156]	; (8009e20 <HAL_LTDC_MspInit+0x16c>)
 8009d84:	f7f7 fb64 	bl	8001450 <HAL_GPIO_Init>

	     GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8009d88:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8009d8c:	627b      	str	r3, [r7, #36]	; 0x24
	                           |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                           |GPIO_PIN_7;
	     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d8e:	2302      	movs	r3, #2
 8009d90:	62bb      	str	r3, [r7, #40]	; 0x28
	     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d92:	2300      	movs	r3, #0
 8009d94:	62fb      	str	r3, [r7, #44]	; 0x2c
	     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009d96:	2302      	movs	r3, #2
 8009d98:	633b      	str	r3, [r7, #48]	; 0x30
	     GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009d9a:	230e      	movs	r3, #14
 8009d9c:	637b      	str	r3, [r7, #52]	; 0x34
	     HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009da2:	4619      	mov	r1, r3
 8009da4:	481f      	ldr	r0, [pc, #124]	; (8009e24 <HAL_LTDC_MspInit+0x170>)
 8009da6:	f7f7 fb53 	bl	8001450 <HAL_GPIO_Init>

	     GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24
	     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009db0:	2302      	movs	r3, #2
 8009db2:	62bb      	str	r3, [r7, #40]	; 0x28
	     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009db4:	2300      	movs	r3, #0
 8009db6:	62fb      	str	r3, [r7, #44]	; 0x2c
	     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009db8:	2302      	movs	r3, #2
 8009dba:	633b      	str	r3, [r7, #48]	; 0x30
	     GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009dbc:	230e      	movs	r3, #14
 8009dbe:	637b      	str	r3, [r7, #52]	; 0x34
	     HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	4818      	ldr	r0, [pc, #96]	; (8009e28 <HAL_LTDC_MspInit+0x174>)
 8009dc8:	f7f7 fb42 	bl	8001450 <HAL_GPIO_Init>

	     GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8009dcc:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
	                           |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
	                           |GPIO_PIN_14|GPIO_PIN_15;
	     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	62bb      	str	r3, [r7, #40]	; 0x28
	     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009dda:	2302      	movs	r3, #2
 8009ddc:	633b      	str	r3, [r7, #48]	; 0x30
	     GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009dde:	230e      	movs	r3, #14
 8009de0:	637b      	str	r3, [r7, #52]	; 0x34
	     HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009de6:	4619      	mov	r1, r3
 8009de8:	4810      	ldr	r0, [pc, #64]	; (8009e2c <HAL_LTDC_MspInit+0x178>)
 8009dea:	f7f7 fb31 	bl	8001450 <HAL_GPIO_Init>

	     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
 8009dee:	f645 43c0 	movw	r3, #23744	; 0x5cc0
 8009df2:	627b      	str	r3, [r7, #36]	; 0x24
	                           |GPIO_PIN_12|GPIO_PIN_14;
	     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009df4:	2302      	movs	r3, #2
 8009df6:	62bb      	str	r3, [r7, #40]	; 0x28
	     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	633b      	str	r3, [r7, #48]	; 0x30
	     GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009e00:	230e      	movs	r3, #14
 8009e02:	637b      	str	r3, [r7, #52]	; 0x34
	     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4809      	ldr	r0, [pc, #36]	; (8009e30 <HAL_LTDC_MspInit+0x17c>)
 8009e0c:	f7f7 fb20 	bl	8001450 <HAL_GPIO_Init>
  }

}
 8009e10:	bf00      	nop
 8009e12:	3738      	adds	r7, #56	; 0x38
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	40016800 	.word	0x40016800
 8009e1c:	40023800 	.word	0x40023800
 8009e20:	40021000 	.word	0x40021000
 8009e24:	40022000 	.word	0x40022000
 8009e28:	40021400 	.word	0x40021400
 8009e2c:	40021c00 	.word	0x40021c00
 8009e30:	40021800 	.word	0x40021800

08009e34 <HAL_FMC_MspInit>:
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8009e3a:	1d3b      	adds	r3, r7, #4
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]
 8009e40:	605a      	str	r2, [r3, #4]
 8009e42:	609a      	str	r2, [r3, #8]
 8009e44:	60da      	str	r2, [r3, #12]
 8009e46:	611a      	str	r2, [r3, #16]
	if (FMC_Initialized)
 8009e48:	4b3a      	ldr	r3, [pc, #232]	; (8009f34 <HAL_FMC_MspInit+0x100>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d16d      	bne.n	8009f2c <HAL_FMC_MspInit+0xf8>
	{
		return;
	}
	FMC_Initialized = 1;
 8009e50:	4b38      	ldr	r3, [pc, #224]	; (8009f34 <HAL_FMC_MspInit+0x100>)
 8009e52:	2201      	movs	r2, #1
 8009e54:	601a      	str	r2, [r3, #0]

	/* Peripheral clock enable */
	__HAL_RCC_FMC_CLK_ENABLE();
 8009e56:	4b38      	ldr	r3, [pc, #224]	; (8009f38 <HAL_FMC_MspInit+0x104>)
 8009e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5a:	4a37      	ldr	r2, [pc, #220]	; (8009f38 <HAL_FMC_MspInit+0x104>)
 8009e5c:	f043 0301 	orr.w	r3, r3, #1
 8009e60:	6393      	str	r3, [r2, #56]	; 0x38
 8009e62:	4b35      	ldr	r3, [pc, #212]	; (8009f38 <HAL_FMC_MspInit+0x104>)
 8009e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	603b      	str	r3, [r7, #0]
 8009e6c:	683b      	ldr	r3, [r7, #0]
	PD1   ------> FMC_D3
	PG15   ------> FMC_SDNCAS
	PE0   ------> FMC_NBL0
	PE1   ------> FMC_NBL1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8009e6e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8009e72:	607b      	str	r3, [r7, #4]
						  |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
						  |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e74:	2302      	movs	r3, #2
 8009e76:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009e80:	230c      	movs	r3, #12
 8009e82:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009e84:	1d3b      	adds	r3, r7, #4
 8009e86:	4619      	mov	r1, r3
 8009e88:	482c      	ldr	r0, [pc, #176]	; (8009f3c <HAL_FMC_MspInit+0x108>)
 8009e8a:	f7f7 fae1 	bl	8001450 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009e8e:	230c      	movs	r3, #12
 8009e90:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e92:	2302      	movs	r3, #2
 8009e94:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009e9e:	230c      	movs	r3, #12
 8009ea0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ea2:	1d3b      	adds	r3, r7, #4
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4826      	ldr	r0, [pc, #152]	; (8009f40 <HAL_FMC_MspInit+0x10c>)
 8009ea8:	f7f7 fad2 	bl	8001450 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009eac:	2320      	movs	r3, #32
 8009eae:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009ebc:	230c      	movs	r3, #12
 8009ebe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009ec0:	1d3b      	adds	r3, r7, #4
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	481f      	ldr	r0, [pc, #124]	; (8009f44 <HAL_FMC_MspInit+0x110>)
 8009ec6:	f7f7 fac3 	bl	8001450 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8009eca:	f248 1337 	movw	r3, #33079	; 0x8137
 8009ece:	607b      	str	r3, [r7, #4]
						  |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009edc:	230c      	movs	r3, #12
 8009ede:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009ee0:	1d3b      	adds	r3, r7, #4
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	4818      	ldr	r0, [pc, #96]	; (8009f48 <HAL_FMC_MspInit+0x114>)
 8009ee6:	f7f7 fab3 	bl	8001450 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8009eea:	f64f 7383 	movw	r3, #65411	; 0xff83
 8009eee:	607b      	str	r3, [r7, #4]
						  |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
						  |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009efc:	230c      	movs	r3, #12
 8009efe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009f00:	1d3b      	adds	r3, r7, #4
 8009f02:	4619      	mov	r1, r3
 8009f04:	4811      	ldr	r0, [pc, #68]	; (8009f4c <HAL_FMC_MspInit+0x118>)
 8009f06:	f7f7 faa3 	bl	8001450 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8009f0a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8009f0e:	607b      	str	r3, [r7, #4]
						  |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f10:	2302      	movs	r3, #2
 8009f12:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009f1c:	230c      	movs	r3, #12
 8009f1e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009f20:	1d3b      	adds	r3, r7, #4
 8009f22:	4619      	mov	r1, r3
 8009f24:	480a      	ldr	r0, [pc, #40]	; (8009f50 <HAL_FMC_MspInit+0x11c>)
 8009f26:	f7f7 fa93 	bl	8001450 <HAL_GPIO_Init>
 8009f2a:	e000      	b.n	8009f2e <HAL_FMC_MspInit+0xfa>
		return;
 8009f2c:	bf00      	nop
}
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	20001048 	.word	0x20001048
 8009f38:	40023800 	.word	0x40023800
 8009f3c:	40021400 	.word	0x40021400
 8009f40:	40020800 	.word	0x40020800
 8009f44:	40021c00 	.word	0x40021c00
 8009f48:	40021800 	.word	0x40021800
 8009f4c:	40021000 	.word	0x40021000
 8009f50:	40020c00 	.word	0x40020c00

08009f54 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
	HAL_FMC_MspInit();
 8009f5c:	f7ff ff6a 	bl	8009e34 <HAL_FMC_MspInit>
}
 8009f60:	bf00      	nop
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	af00      	add	r7, sp, #0

}
 8009f6c:	bf00      	nop
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009f76:	b480      	push	{r7}
 8009f78:	af00      	add	r7, sp, #0

	while (1)
 8009f7a:	e7fe      	b.n	8009f7a <HardFault_Handler+0x4>

08009f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	af00      	add	r7, sp, #0

	while (1)
 8009f80:	e7fe      	b.n	8009f80 <MemManage_Handler+0x4>

08009f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009f82:	b480      	push	{r7}
 8009f84:	af00      	add	r7, sp, #0

	while (1)
 8009f86:	e7fe      	b.n	8009f86 <BusFault_Handler+0x4>

08009f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	af00      	add	r7, sp, #0

	while (1)
 8009f8c:	e7fe      	b.n	8009f8c <UsageFault_Handler+0x4>

08009f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	af00      	add	r7, sp, #0

}
 8009f92:	bf00      	nop
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	af00      	add	r7, sp, #0

}
 8009fa0:	bf00      	nop
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009faa:	b480      	push	{r7}
 8009fac:	af00      	add	r7, sp, #0

}
 8009fae:	bf00      	nop
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8009fbc:	f7f6 fb5c 	bl	8000678 <HAL_IncTick>
}
 8009fc0:	bf00      	nop
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	af00      	add	r7, sp, #0
	HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8009fc8:	4802      	ldr	r0, [pc, #8]	; (8009fd4 <OTG_FS_IRQHandler+0x10>)
 8009fca:	f7f7 fc1e 	bl	800180a <HAL_HCD_IRQHandler>
}
 8009fce:	bf00      	nop
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	200057c8 	.word	0x200057c8

08009fd8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
	HAL_LTDC_IRQHandler(&hltdc);
 8009fdc:	4802      	ldr	r0, [pc, #8]	; (8009fe8 <LTDC_IRQHandler+0x10>)
 8009fde:	f7f9 fc41 	bl	8003864 <HAL_LTDC_IRQHandler>
}
 8009fe2:	bf00      	nop
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20001558 	.word	0x20001558

08009fec <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	af00      	add	r7, sp, #0
	HAL_DMA2D_IRQHandler(&hdma2d);
 8009ff0:	4802      	ldr	r0, [pc, #8]	; (8009ffc <DMA2D_IRQHandler+0x10>)
 8009ff2:	f7f6 ffe2 	bl	8000fba <HAL_DMA2D_IRQHandler>
}
 8009ff6:	bf00      	nop
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	200036b8 	.word	0x200036b8

0800a000 <QUADSPI_IRQHandler>:

void QUADSPI_IRQHandler(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
	HAL_QSPI_IRQHandler(&QSPIHandle);
 800a004:	4802      	ldr	r0, [pc, #8]	; (800a010 <QUADSPI_IRQHandler+0x10>)
 800a006:	f7fa f809 	bl	800401c <HAL_QSPI_IRQHandler>
}
 800a00a:	bf00      	nop
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	200013a0 	.word	0x200013a0

0800a014 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a014:	b480      	push	{r7}
 800a016:	af00      	add	r7, sp, #0
	return 1;
 800a018:	2301      	movs	r3, #1
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <_kill>:

int _kill(int pid, int sig)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a02e:	4b05      	ldr	r3, [pc, #20]	; (800a044 <_kill+0x20>)
 800a030:	2216      	movs	r2, #22
 800a032:	601a      	str	r2, [r3, #0]
	return -1;
 800a034:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	20005a8c 	.word	0x20005a8c

0800a048 <_exit>:

void _exit (int status)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a050:	f04f 31ff 	mov.w	r1, #4294967295
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7ff ffe5 	bl	800a024 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a05a:	e7fe      	b.n	800a05a <_exit+0x12>

0800a05c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a068:	2300      	movs	r3, #0
 800a06a:	617b      	str	r3, [r7, #20]
 800a06c:	e00a      	b.n	800a084 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a06e:	f3af 8000 	nop.w
 800a072:	4601      	mov	r1, r0
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	1c5a      	adds	r2, r3, #1
 800a078:	60ba      	str	r2, [r7, #8]
 800a07a:	b2ca      	uxtb	r2, r1
 800a07c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	3301      	adds	r3, #1
 800a082:	617b      	str	r3, [r7, #20]
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	429a      	cmp	r2, r3
 800a08a:	dbf0      	blt.n	800a06e <_read+0x12>
	}

return len;
 800a08c:	687b      	ldr	r3, [r7, #4]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b086      	sub	sp, #24
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	60f8      	str	r0, [r7, #12]
 800a09e:	60b9      	str	r1, [r7, #8]
 800a0a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	617b      	str	r3, [r7, #20]
 800a0a6:	e009      	b.n	800a0bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	60ba      	str	r2, [r7, #8]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7ff f83a 	bl	800912a <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	617b      	str	r3, [r7, #20]
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	dbf1      	blt.n	800a0a8 <_write+0x12>
	}
	return len;
 800a0c4:	687b      	ldr	r3, [r7, #4]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3718      	adds	r7, #24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <_close>:

int _close(int file)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
	return -1;
 800a0d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a0f6:	605a      	str	r2, [r3, #4]
	return 0;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	370c      	adds	r7, #12
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <_isatty>:

int _isatty(int file)
{
 800a106:	b480      	push	{r7}
 800a108:	b083      	sub	sp, #12
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
	return 1;
 800a10e:	2301      	movs	r3, #1
}
 800a110:	4618      	mov	r0, r3
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
	return 0;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
	...

0800a138 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a140:	4b11      	ldr	r3, [pc, #68]	; (800a188 <_sbrk+0x50>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d102      	bne.n	800a14e <_sbrk+0x16>
		heap_end = &end;
 800a148:	4b0f      	ldr	r3, [pc, #60]	; (800a188 <_sbrk+0x50>)
 800a14a:	4a10      	ldr	r2, [pc, #64]	; (800a18c <_sbrk+0x54>)
 800a14c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a14e:	4b0e      	ldr	r3, [pc, #56]	; (800a188 <_sbrk+0x50>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a154:	4b0c      	ldr	r3, [pc, #48]	; (800a188 <_sbrk+0x50>)
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4413      	add	r3, r2
 800a15c:	466a      	mov	r2, sp
 800a15e:	4293      	cmp	r3, r2
 800a160:	d905      	bls.n	800a16e <_sbrk+0x36>
	{
		errno = ENOMEM;
 800a162:	4b0b      	ldr	r3, [pc, #44]	; (800a190 <_sbrk+0x58>)
 800a164:	220c      	movs	r2, #12
 800a166:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800a168:	f04f 33ff 	mov.w	r3, #4294967295
 800a16c:	e006      	b.n	800a17c <_sbrk+0x44>
	}

	heap_end += incr;
 800a16e:	4b06      	ldr	r3, [pc, #24]	; (800a188 <_sbrk+0x50>)
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4413      	add	r3, r2
 800a176:	4a04      	ldr	r2, [pc, #16]	; (800a188 <_sbrk+0x50>)
 800a178:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a17a:	68fb      	ldr	r3, [r7, #12]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	2000104c 	.word	0x2000104c
 800a18c:	20005a90 	.word	0x20005a90
 800a190:	20005a8c 	.word	0x20005a8c

0800a194 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a194:	b480      	push	{r7}
 800a196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a198:	4b08      	ldr	r3, [pc, #32]	; (800a1bc <SystemInit+0x28>)
 800a19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19e:	4a07      	ldr	r2, [pc, #28]	; (800a1bc <SystemInit+0x28>)
 800a1a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a1a8:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <SystemInit+0x28>)
 800a1aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a1ae:	609a      	str	r2, [r3, #8]
#endif
}
 800a1b0:	bf00      	nop
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	e000ed00 	.word	0xe000ed00

0800a1c0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fc fa2e 	bl	8006630 <USBH_LL_IncTimer>
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fc fa66 	bl	80066bc <USBH_LL_Connect>
}
 800a1f0:	bf00      	nop
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a206:	4618      	mov	r0, r3
 800a208:	f7fc fa6f 	bl	80066ea <USBH_LL_Disconnect>
}
 800a20c:	bf00      	nop
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	460b      	mov	r3, r1
 800a21e:	70fb      	strb	r3, [r7, #3]
 800a220:	4613      	mov	r3, r2
 800a222:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fc fa20 	bl	8006684 <USBH_LL_PortEnabled>
} 
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fc fa20 	bl	80066a0 <USBH_LL_PortDisabled>
} 
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a27e:	4618      	mov	r0, r3
 800a280:	f7f7 fbc7 	bl	8001a12 <HAL_HCD_Stop>
 800a284:	4603      	mov	r3, r0
 800a286:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 f808 	bl	800a2a0 <USBH_Get_USB_Status>
 800a290:	4603      	mov	r3, r0
 800a292:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800a294:	7bbb      	ldrb	r3, [r7, #14]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
	...

0800a2a0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2ae:	79fb      	ldrb	r3, [r7, #7]
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	d817      	bhi.n	800a2e4 <USBH_Get_USB_Status+0x44>
 800a2b4:	a201      	add	r2, pc, #4	; (adr r2, 800a2bc <USBH_Get_USB_Status+0x1c>)
 800a2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ba:	bf00      	nop
 800a2bc:	0800a2cd 	.word	0x0800a2cd
 800a2c0:	0800a2d3 	.word	0x0800a2d3
 800a2c4:	0800a2d9 	.word	0x0800a2d9
 800a2c8:	0800a2df 	.word	0x0800a2df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d0:	e00b      	b.n	800a2ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d6:	e008      	b.n	800a2ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	73fb      	strb	r3, [r7, #15]
    break;
 800a2dc:	e005      	b.n	800a2ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a2de:	2302      	movs	r3, #2
 800a2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e2:	e002      	b.n	800a2ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e8:	bf00      	nop
  }
  return usb_status;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800a304:	887b      	ldrh	r3, [r7, #2]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d008      	beq.n	800a31c <_ZN23ApplicationFontProvider7getFontEt+0x24>
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d00b      	beq.n	800a326 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10e      	bne.n	800a330 <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800a312:	f001 fae1 	bl	800b8d8 <_ZN17TypedTextDatabase8getFontsEv>
 800a316:	4603      	mov	r3, r0
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	e00a      	b.n	800a332 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800a31c:	f001 fadc 	bl	800b8d8 <_ZN17TypedTextDatabase8getFontsEv>
 800a320:	4603      	mov	r3, r0
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	e005      	b.n	800a332 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800a326:	f001 fad7 	bl	800b8d8 <_ZN17TypedTextDatabase8getFontsEv>
 800a32a:	4603      	mov	r3, r0
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	e000      	b.n	800a332 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 800a330:	2300      	movs	r3, #0
    }
}
 800a332:	4618      	mov	r0, r3
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
	...

0800a33c <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	4a04      	ldr	r2, [pc, #16]	; (800a358 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4618      	mov	r0, r3
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	0801b6ec 	.word	0x0801b6ec

0800a35c <_ZN8touchgfx4FontD0Ev>:
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff ffe9 	bl	800a33c <_ZN8touchgfx4FontD1Ev>
 800a36a:	2110      	movs	r1, #16
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f00e fc0b 	bl	8018b88 <_ZdlPvj>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800a37c:	b590      	push	{r4, r7, lr}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	460b      	mov	r3, r1
 800a386:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3308      	adds	r3, #8
 800a396:	681c      	ldr	r4, [r3, #0]
 800a398:	f107 030f 	add.w	r3, r7, #15
 800a39c:	f107 0210 	add.w	r2, r7, #16
 800a3a0:	8879      	ldrh	r1, [r7, #2]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	47a0      	blx	r4
 800a3a6:	6178      	str	r0, [r7, #20]
        return glyph;
 800a3a8:	697b      	ldr	r3, [r7, #20]
    }
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	371c      	adds	r7, #28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd90      	pop	{r4, r7, pc}

0800a3b2 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800a3b2:	b480      	push	{r7}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	895b      	ldrh	r3, [r3, #10]
    }
 800a3be:	4618      	mov	r0, r3
 800a3c0:	370c      	adds	r7, #12
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800a3ca:	b480      	push	{r7}
 800a3cc:	b083      	sub	sp, #12
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	899b      	ldrh	r3, [r3, #12]
    }
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800a3e2:	b480      	push	{r7}
 800a3e4:	b083      	sub	sp, #12
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	889b      	ldrh	r3, [r3, #4]
    }
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	889a      	ldrh	r2, [r3, #4]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	799b      	ldrb	r3, [r3, #6]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	4413      	add	r3, r2
 800a40e:	b29b      	uxth	r3, r3
    }
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	79db      	ldrb	r3, [r3, #7]
 800a428:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800a42c:	b2db      	uxtb	r3, r3
    }
 800a42e:	4618      	mov	r0, r3
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800a43a:	b480      	push	{r7}
 800a43c:	b083      	sub	sp, #12
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	79db      	ldrb	r3, [r3, #7]
 800a446:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a44a:	b2db      	uxtb	r3, r3
    }
 800a44c:	4618      	mov	r0, r3
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	4a05      	ldr	r2, [pc, #20]	; (800a478 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4618      	mov	r0, r3
 800a46a:	f7ff ff67 	bl	800a33c <_ZN8touchgfx4FontD1Ev>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4618      	mov	r0, r3
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	0801b7a4 	.word	0x0801b7a4

0800a47c <_ZN8touchgfx9ConstFontD0Ev>:
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff ffe7 	bl	800a458 <_ZN8touchgfx9ConstFontD1Ev>
 800a48a:	2118      	movs	r1, #24
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f00e fb7b 	bl	8018b88 <_ZdlPvj>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4618      	mov	r0, r3
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	4a05      	ldr	r2, [pc, #20]	; (800a4bc <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7ff ffd3 	bl	800a458 <_ZN8touchgfx9ConstFontD1Ev>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	0801a5f8 	.word	0x0801a5f8

0800a4c0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff ffe7 	bl	800a49c <_ZN8touchgfx13GeneratedFontD1Ev>
 800a4ce:	2124      	movs	r1, #36	; 0x24
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f00e fb59 	bl	8018b88 <_ZdlPvj>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <_ZNK8touchgfx9TypedText7getFontEv>:
    const Font* getFont() const
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
        assertValid();
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f82d 	bl	800a548 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800a4ee:	4b08      	ldr	r3, [pc, #32]	; (800a510 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	4b08      	ldr	r3, [pc, #32]	; (800a514 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800a4f4:	6819      	ldr	r1, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	440b      	add	r3, r1
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	681b      	ldr	r3, [r3, #0]
    }
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	20001178 	.word	0x20001178
 800a514:	20001170 	.word	0x20001170

0800a518 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
    TextDirection getTextDirection() const
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
        assertValid();
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f811 	bl	800a548 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800a526:	4b07      	ldr	r3, [pc, #28]	; (800a544 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	4413      	add	r3, r2
 800a532:	785b      	ldrb	r3, [r3, #1]
 800a534:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a538:	b2db      	uxtb	r3, r3
    }
 800a53a:	4618      	mov	r0, r3
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	20001170 	.word	0x20001170

0800a548 <_ZNK8touchgfx9TypedText11assertValidEv>:

private:
    void assertValid() const
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800a550:	4b0c      	ldr	r3, [pc, #48]	; (800a584 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d105      	bne.n	800a564 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800a558:	4b0b      	ldr	r3, [pc, #44]	; (800a588 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800a55a:	4a0c      	ldr	r2, [pc, #48]	; (800a58c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800a55c:	21de      	movs	r1, #222	; 0xde
 800a55e:	480c      	ldr	r0, [pc, #48]	; (800a590 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800a560:	f00e fb3e 	bl	8018be0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	881a      	ldrh	r2, [r3, #0]
 800a568:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800a56a:	881b      	ldrh	r3, [r3, #0]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d305      	bcc.n	800a57c <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800a570:	4b09      	ldr	r3, [pc, #36]	; (800a598 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800a572:	4a06      	ldr	r2, [pc, #24]	; (800a58c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800a574:	21df      	movs	r1, #223	; 0xdf
 800a576:	4806      	ldr	r0, [pc, #24]	; (800a590 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800a578:	f00e fb32 	bl	8018be0 <__assert_func>
    }
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	20001170 	.word	0x20001170
 800a588:	08019d00 	.word	0x08019d00
 800a58c:	0801a5c0 	.word	0x0801a5c0
 800a590:	08019d44 	.word	0x08019d44
 800a594:	20001174 	.word	0x20001174
 800a598:	08019d88 	.word	0x08019d88

0800a59c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	7b5b      	ldrb	r3, [r3, #13]
 800a5a8:	021b      	lsls	r3, r3, #8
 800a5aa:	b21b      	sxth	r3, r3
 800a5ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5b0:	b21a      	sxth	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	7adb      	ldrb	r3, [r3, #11]
 800a5b6:	b21b      	sxth	r3, r3
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	b21b      	sxth	r3, r3
 800a5bc:	b29b      	uxth	r3, r3
    }
 800a5be:	4618      	mov	r0, r3
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800a5ca:	b480      	push	{r7}
 800a5cc:	b083      	sub	sp, #12
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
    }
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
	...

0800a5e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b08c      	sub	sp, #48	; 0x30
 800a5e8:	af08      	add	r7, sp, #32
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	4611      	mov	r1, r2
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	80fb      	strh	r3, [r7, #6]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	88b9      	ldrh	r1, [r7, #4]
 800a5fe:	88fa      	ldrh	r2, [r7, #6]
 800a600:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a602:	9306      	str	r3, [sp, #24]
 800a604:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a606:	9305      	str	r3, [sp, #20]
 800a608:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a60c:	9304      	str	r3, [sp, #16]
 800a60e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a612:	9303      	str	r3, [sp, #12]
 800a614:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a618:	9302      	str	r3, [sp, #8]
 800a61a:	7f3b      	ldrb	r3, [r7, #28]
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	7e3b      	ldrb	r3, [r7, #24]
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	460b      	mov	r3, r1
 800a624:	68b9      	ldr	r1, [r7, #8]
 800a626:	f004 fe51 	bl	800f2cc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800a62a:	4a08      	ldr	r2, [pc, #32]	; (800a64c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	601a      	str	r2, [r3, #0]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a634:	619a      	str	r2, [r3, #24]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a63a:	61da      	str	r2, [r3, #28]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a640:	621a      	str	r2, [r3, #32]
{
}
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	4618      	mov	r0, r3
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	0801a5f8 	.word	0x0801a5f8

0800a650 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	889b      	ldrh	r3, [r3, #4]
 800a664:	0adb      	lsrs	r3, r3, #11
 800a666:	b29b      	uxth	r3, r3
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	4413      	add	r3, r2
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4413      	add	r3, r2
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b086      	sub	sp, #24
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	460b      	mov	r3, r1
 800a68c:	607a      	str	r2, [r7, #4]
 800a68e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	7b1b      	ldrb	r3, [r3, #12]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e023      	b.n	800a6ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7ff ff7a 	bl	800a59c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800a6ac:	8abb      	ldrh	r3, [r7, #20]
 800a6ae:	82fb      	strh	r3, [r7, #22]
 800a6b0:	8afa      	ldrh	r2, [r7, #22]
 800a6b2:	8abb      	ldrh	r3, [r7, #20]
 800a6b4:	6879      	ldr	r1, [r7, #4]
 800a6b6:	7b09      	ldrb	r1, [r1, #12]
 800a6b8:	440b      	add	r3, r1
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	da14      	bge.n	800a6e8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	69da      	ldr	r2, [r3, #28]
 800a6c2:	8afb      	ldrh	r3, [r7, #22]
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	881b      	ldrh	r3, [r3, #0]
 800a6ca:	897a      	ldrh	r2, [r7, #10]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d107      	bne.n	800a6e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	69da      	ldr	r2, [r3, #28]
 800a6d4:	8afb      	ldrh	r3, [r7, #22]
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a6de:	e004      	b.n	800a6ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800a6e0:	8afb      	ldrh	r3, [r7, #22]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	82fb      	strh	r3, [r7, #22]
 800a6e6:	e7e3      	b.n	800a6b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3718      	adds	r7, #24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	4801      	ldr	r0, [pc, #4]	; (800a700 <__tcf_0+0xc>)
 800a6fa:	f7ff fecf 	bl	800a49c <_ZN8touchgfx13GeneratedFontD1Ev>
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	20001050 	.word	0x20001050

0800a704 <_Z23getFont_verdana_10_4bppv>:
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b08a      	sub	sp, #40	; 0x28
 800a708:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800a70a:	4b15      	ldr	r3, [pc, #84]	; (800a760 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	d11f      	bne.n	800a756 <_Z23getFont_verdana_10_4bppv+0x52>
 800a716:	2300      	movs	r3, #0
 800a718:	9309      	str	r3, [sp, #36]	; 0x24
 800a71a:	2300      	movs	r3, #0
 800a71c:	9308      	str	r3, [sp, #32]
 800a71e:	233f      	movs	r3, #63	; 0x3f
 800a720:	9307      	str	r3, [sp, #28]
 800a722:	4b10      	ldr	r3, [pc, #64]	; (800a764 <_Z23getFont_verdana_10_4bppv+0x60>)
 800a724:	9306      	str	r3, [sp, #24]
 800a726:	4b10      	ldr	r3, [pc, #64]	; (800a768 <_Z23getFont_verdana_10_4bppv+0x64>)
 800a728:	9305      	str	r3, [sp, #20]
 800a72a:	2300      	movs	r3, #0
 800a72c:	9304      	str	r3, [sp, #16]
 800a72e:	2300      	movs	r3, #0
 800a730:	9303      	str	r3, [sp, #12]
 800a732:	2301      	movs	r3, #1
 800a734:	9302      	str	r3, [sp, #8]
 800a736:	2304      	movs	r3, #4
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	2300      	movs	r3, #0
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	230a      	movs	r3, #10
 800a740:	2201      	movs	r2, #1
 800a742:	490a      	ldr	r1, [pc, #40]	; (800a76c <_Z23getFont_verdana_10_4bppv+0x68>)
 800a744:	480a      	ldr	r0, [pc, #40]	; (800a770 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800a746:	f7ff ff4d 	bl	800a5e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800a74c:	2201      	movs	r2, #1
 800a74e:	601a      	str	r2, [r3, #0]
 800a750:	4808      	ldr	r0, [pc, #32]	; (800a774 <_Z23getFont_verdana_10_4bppv+0x70>)
 800a752:	f00e fa63 	bl	8018c1c <atexit>
    return verdana_10_4bpp;
 800a756:	4b06      	ldr	r3, [pc, #24]	; (800a770 <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 800a758:	4618      	mov	r0, r3
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20001074 	.word	0x20001074
 800a764:	0803addc 	.word	0x0803addc
 800a768:	0801a644 	.word	0x0801a644
 800a76c:	0803ae04 	.word	0x0803ae04
 800a770:	20001050 	.word	0x20001050
 800a774:	0800a6f5 	.word	0x0800a6f5

0800a778 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800a778:	b580      	push	{r7, lr}
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	4801      	ldr	r0, [pc, #4]	; (800a784 <__tcf_0+0xc>)
 800a77e:	f7ff fe8d 	bl	800a49c <_ZN8touchgfx13GeneratedFontD1Ev>
 800a782:	bd80      	pop	{r7, pc}
 800a784:	20001078 	.word	0x20001078

0800a788 <_Z23getFont_verdana_20_4bppv>:
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08a      	sub	sp, #40	; 0x28
 800a78c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800a78e:	4b15      	ldr	r3, [pc, #84]	; (800a7e4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	2b00      	cmp	r3, #0
 800a798:	d11f      	bne.n	800a7da <_Z23getFont_verdana_20_4bppv+0x52>
 800a79a:	2300      	movs	r3, #0
 800a79c:	9309      	str	r3, [sp, #36]	; 0x24
 800a79e:	2300      	movs	r3, #0
 800a7a0:	9308      	str	r3, [sp, #32]
 800a7a2:	233f      	movs	r3, #63	; 0x3f
 800a7a4:	9307      	str	r3, [sp, #28]
 800a7a6:	4b10      	ldr	r3, [pc, #64]	; (800a7e8 <_Z23getFont_verdana_20_4bppv+0x60>)
 800a7a8:	9306      	str	r3, [sp, #24]
 800a7aa:	4b10      	ldr	r3, [pc, #64]	; (800a7ec <_Z23getFont_verdana_20_4bppv+0x64>)
 800a7ac:	9305      	str	r3, [sp, #20]
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	9304      	str	r3, [sp, #16]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	9303      	str	r3, [sp, #12]
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	9302      	str	r3, [sp, #8]
 800a7ba:	2304      	movs	r3, #4
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	2314      	movs	r3, #20
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	490a      	ldr	r1, [pc, #40]	; (800a7f0 <_Z23getFont_verdana_20_4bppv+0x68>)
 800a7c8:	480a      	ldr	r0, [pc, #40]	; (800a7f4 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800a7ca:	f7ff ff0b 	bl	800a5e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a7ce:	4b05      	ldr	r3, [pc, #20]	; (800a7e4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	4808      	ldr	r0, [pc, #32]	; (800a7f8 <_Z23getFont_verdana_20_4bppv+0x70>)
 800a7d6:	f00e fa21 	bl	8018c1c <atexit>
    return verdana_20_4bpp;
 800a7da:	4b06      	ldr	r3, [pc, #24]	; (800a7f4 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	2000109c 	.word	0x2000109c
 800a7e8:	0803ade0 	.word	0x0803ade0
 800a7ec:	0801a648 	.word	0x0801a648
 800a7f0:	0803ae14 	.word	0x0803ae14
 800a7f4:	20001078 	.word	0x20001078
 800a7f8:	0800a779 	.word	0x0800a779

0800a7fc <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 9, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	4801      	ldr	r0, [pc, #4]	; (800a808 <__tcf_0+0xc>)
 800a802:	f7ff fe4b 	bl	800a49c <_ZN8touchgfx13GeneratedFontD1Ev>
 800a806:	bd80      	pop	{r7, pc}
 800a808:	200010a0 	.word	0x200010a0

0800a80c <_Z23getFont_verdana_40_4bppv>:
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08a      	sub	sp, #40	; 0x28
 800a810:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 9, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800a812:	4b15      	ldr	r3, [pc, #84]	; (800a868 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d11f      	bne.n	800a85e <_Z23getFont_verdana_40_4bppv+0x52>
 800a81e:	2300      	movs	r3, #0
 800a820:	9309      	str	r3, [sp, #36]	; 0x24
 800a822:	2300      	movs	r3, #0
 800a824:	9308      	str	r3, [sp, #32]
 800a826:	233f      	movs	r3, #63	; 0x3f
 800a828:	9307      	str	r3, [sp, #28]
 800a82a:	4b10      	ldr	r3, [pc, #64]	; (800a86c <_Z23getFont_verdana_40_4bppv+0x60>)
 800a82c:	9306      	str	r3, [sp, #24]
 800a82e:	4b10      	ldr	r3, [pc, #64]	; (800a870 <_Z23getFont_verdana_40_4bppv+0x64>)
 800a830:	9305      	str	r3, [sp, #20]
 800a832:	2301      	movs	r3, #1
 800a834:	9304      	str	r3, [sp, #16]
 800a836:	2300      	movs	r3, #0
 800a838:	9303      	str	r3, [sp, #12]
 800a83a:	2301      	movs	r3, #1
 800a83c:	9302      	str	r3, [sp, #8]
 800a83e:	2304      	movs	r3, #4
 800a840:	9301      	str	r3, [sp, #4]
 800a842:	2308      	movs	r3, #8
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	2328      	movs	r3, #40	; 0x28
 800a848:	2209      	movs	r2, #9
 800a84a:	490a      	ldr	r1, [pc, #40]	; (800a874 <_Z23getFont_verdana_40_4bppv+0x68>)
 800a84c:	480a      	ldr	r0, [pc, #40]	; (800a878 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800a84e:	f7ff fec9 	bl	800a5e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a852:	4b05      	ldr	r3, [pc, #20]	; (800a868 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800a854:	2201      	movs	r2, #1
 800a856:	601a      	str	r2, [r3, #0]
 800a858:	4808      	ldr	r0, [pc, #32]	; (800a87c <_Z23getFont_verdana_40_4bppv+0x70>)
 800a85a:	f00e f9df 	bl	8018c1c <atexit>
    return verdana_40_4bpp;
 800a85e:	4b06      	ldr	r3, [pc, #24]	; (800a878 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800a860:	4618      	mov	r0, r3
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	200010c4 	.word	0x200010c4
 800a86c:	0803ade4 	.word	0x0803ade4
 800a870:	0801a64c 	.word	0x0801a64c
 800a874:	0803ae24 	.word	0x0803ae24
 800a878:	200010a0 	.word	0x200010a0
 800a87c:	0800a7fd 	.word	0x0800a7fd

0800a880 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	4618      	mov	r0, r3
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800a8a0:	4a07      	ldr	r2, [pc, #28]	; (800a8c0 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	605a      	str	r2, [r3, #4]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	721a      	strb	r2, [r3, #8]
    {
    }
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	0801a678 	.word	0x0801a678

0800a8c4 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
    {
 800a8cc:	4a04      	ldr	r2, [pc, #16]	; (800a8e0 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	601a      	str	r2, [r3, #0]
    }
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	0801a678 	.word	0x0801a678

0800a8e4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
    }
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff ffe9 	bl	800a8c4 <_ZN8touchgfx10TransitionD1Ev>
 800a8f2:	210c      	movs	r1, #12
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f00e f947 	bl	8018b88 <_ZdlPvj>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	bf00      	nop
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	605a      	str	r2, [r3, #4]
    }
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication() :
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
        pendingScreenTransitionCallback(0)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4618      	mov	r0, r3
 800a968:	f003 ffea 	bl	800e940 <_ZN8touchgfx11ApplicationC1Ev>
 800a96c:	4a09      	ldr	r2, [pc, #36]	; (800a994 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        instance = this;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a04      	ldr	r2, [pc, #16]	; (800a998 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800a986:	6013      	str	r3, [r2, #0]
    }
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4618      	mov	r0, r3
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	0801a2f8 	.word	0x0801a2f8
 800a998:	2000116c 	.word	0x2000116c

0800a99c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800a9a8:	f003 ffa8 	bl	800e8fc <_ZN8touchgfx11Application11getInstanceEv>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f003 ffaa 	bl	800e908 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d008      	beq.n	800a9ce <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	330c      	adds	r3, #12
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4610      	mov	r0, r2
 800a9cc:	4798      	blx	r3
    }
    if (*currentTrans)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d007      	beq.n	800a9e6 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4610      	mov	r0, r2
 800a9e4:	4798      	blx	r3
    }
    if (*currentScreen)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d008      	beq.n	800aa00 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3314      	adds	r3, #20
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	4798      	blx	r3
    }
    if (*currentPresenter)
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d008      	beq.n	800aa1a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3304      	adds	r3, #4
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4610      	mov	r0, r2
 800aa18:	4798      	blx	r3
    }
    if (*currentScreen)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d007      	beq.n	800aa32 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4610      	mov	r0, r2
 800aa30:	4798      	blx	r3
    }
    if (*currentPresenter)
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d008      	beq.n	800aa4c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	3308      	adds	r3, #8
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4610      	mov	r0, r2
 800aa4a:	4798      	blx	r3
    }
}
 800aa4c:	bf00      	nop
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	330c      	adds	r3, #12
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	4798      	blx	r3
    newPresenter->activate();
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68b8      	ldr	r0, [r7, #8]
 800aa74:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800aa76:	6879      	ldr	r1, [r7, #4]
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f005 f811 	bl	800faa0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	3310      	adds	r3, #16
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	4798      	blx	r3

    Application::getInstance()->draw();
 800aa8a:	f003 ff37 	bl	800e8fc <_ZN8touchgfx11Application11getInstanceEv>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	6813      	ldr	r3, [r2, #0]
 800aa92:	3328      	adds	r3, #40	; 0x28
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4610      	mov	r0, r2
 800aa98:	4798      	blx	r3
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	601a      	str	r2, [r3, #0]
    }
 800aab2:	bf00      	nop
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
	...

0800aac0 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff fee4 	bl	800a898 <_ZN8touchgfx10TransitionC1Ev>
 800aad0:	4a03      	ldr	r2, [pc, #12]	; (800aae0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	601a      	str	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4618      	mov	r0, r3
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	0801a658 	.word	0x0801a658

0800aae4 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	4a05      	ldr	r2, [pc, #20]	; (800ab04 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	601a      	str	r2, [r3, #0]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7ff fee5 	bl	800a8c4 <_ZN8touchgfx10TransitionD1Ev>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	0801a658 	.word	0x0801a658

0800ab08 <_ZN8touchgfx12NoTransitionD0Ev>:
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7ff ffe7 	bl	800aae4 <_ZN8touchgfx12NoTransitionD1Ev>
 800ab16:	210c      	movs	r1, #12
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f00e f835 	bl	8018b88 <_ZdlPvj>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	721a      	strb	r2, [r3, #8]
    }
 800ab36:	bf00      	nop
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	605a      	str	r2, [r3, #4]
    }
 800ab52:	bf00      	nop
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
	...

0800ab60 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff fef4 	bl	800a95c <_ZN8touchgfx14MVPApplicationC1Ev>
 800ab74:	4a13      	ldr	r2, [pc, #76]	; (800abc4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ab80:	4618      	mov	r0, r3
 800ab82:	f000 f89f 	bl	800acc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800ab96:	f7fb ff3b 	bl	8006a10 <_ZN8touchgfx3HAL11getInstanceEv>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	6813      	ldr	r3, [r2, #0]
 800ab9e:	3308      	adds	r3, #8
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2100      	movs	r1, #0
 800aba4:	4610      	mov	r0, r2
 800aba6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800aba8:	2000      	movs	r0, #0
 800abaa:	f000 fe1d 	bl	800b7e8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800abae:	f7fc faf5 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800abb2:	4603      	mov	r3, r0
 800abb4:	4618      	mov	r0, r3
 800abb6:	f009 f8de 	bl	8013d76 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	0801a2a4 	.word	0x0801a2a4

0800abc8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4618      	mov	r0, r3
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	4611      	mov	r1, r2
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7ff ffe9 	bl	800abc8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	685a      	ldr	r2, [r3, #4]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	605a      	str	r2, [r3, #4]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	3308      	adds	r3, #8
 800ac04:	3208      	adds	r2, #8
 800ac06:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ac0a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4618      	mov	r0, r3
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800ac18:	b590      	push	{r4, r7, lr}
 800ac1a:	b089      	sub	sp, #36	; 0x24
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800ac26:	4b10      	ldr	r3, [pc, #64]	; (800ac68 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800ac28:	61bb      	str	r3, [r7, #24]
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	61fb      	str	r3, [r7, #28]
 800ac2e:	f107 0008 	add.w	r0, r7, #8
 800ac32:	f107 0318 	add.w	r3, r7, #24
 800ac36:	cb0c      	ldmia	r3, {r2, r3}
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	f000 f85f 	bl	800acfc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ac3e:	f107 0308 	add.w	r3, r7, #8
 800ac42:	4619      	mov	r1, r3
 800ac44:	4620      	mov	r0, r4
 800ac46:	f7ff ffcb 	bl	800abe0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ac4a:	f107 0308 	add.w	r3, r7, #8
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fd fc56 	bl	8008500 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800ac60:	bf00      	nop
 800ac62:	3724      	adds	r7, #36	; 0x24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd90      	pop	{r4, r7, pc}
 800ac68:	0800ac6d 	.word	0x0800ac6d

0800ac6c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800ac80:	461a      	mov	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	4b04      	ldr	r3, [pc, #16]	; (800ac9c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800ac8c:	4804      	ldr	r0, [pc, #16]	; (800aca0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800ac8e:	f000 f855 	bl	800ad3c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20001160 	.word	0x20001160
 800aca0:	2000115c 	.word	0x2000115c

0800aca4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	4a04      	ldr	r2, [pc, #16]	; (800acc0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	601a      	str	r2, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4618      	mov	r0, r3
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr
 800acc0:	0801a334 	.word	0x0801a334

0800acc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback() : pobject(0), pmemfun_0(0) { }
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4618      	mov	r0, r3
 800acd0:	f7ff ffe8 	bl	800aca4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800acd4:	4a08      	ldr	r2, [pc, #32]	; (800acf8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	605a      	str	r2, [r3, #4]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	609a      	str	r2, [r3, #8]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	60da      	str	r2, [r3, #12]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4618      	mov	r0, r3
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	0801a2e0 	.word	0x0801a2e0

0800acfc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	4639      	mov	r1, r7
 800ad08:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff ffc8 	bl	800aca4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ad14:	4a08      	ldr	r2, [pc, #32]	; (800ad38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3308      	adds	r3, #8
 800ad24:	463a      	mov	r2, r7
 800ad26:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ad2a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	4618      	mov	r0, r3
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	0801a2e0 	.word	0x0801a2e0

0800ad3c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ad3c:	b590      	push	{r4, r7, lr}
 800ad3e:	b089      	sub	sp, #36	; 0x24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
 800ad48:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	689a      	ldr	r2, [r3, #8]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3320      	adds	r3, #32
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4610      	mov	r0, r2
 800ad5a:	4798      	blx	r3
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b9f      	cmp	r3, #159	; 0x9f
 800ad60:	d805      	bhi.n	800ad6e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800ad62:	4b4d      	ldr	r3, [pc, #308]	; (800ae98 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 800ad64:	4a4d      	ldr	r2, [pc, #308]	; (800ae9c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800ad66:	21c2      	movs	r1, #194	; 0xc2
 800ad68:	484d      	ldr	r0, [pc, #308]	; (800aea0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800ad6a:	f00d ff39 	bl	8018be0 <__assert_func>
 800ad6e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685a      	ldr	r2, [r3, #4]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3320      	adds	r3, #32
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4610      	mov	r0, r2
 800ad80:	4798      	blx	r3
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b0f      	cmp	r3, #15
 800ad86:	d805      	bhi.n	800ad94 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800ad88:	4b46      	ldr	r3, [pc, #280]	; (800aea4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ad8a:	4a44      	ldr	r2, [pc, #272]	; (800ae9c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800ad8c:	21c3      	movs	r1, #195	; 0xc3
 800ad8e:	4844      	ldr	r0, [pc, #272]	; (800aea0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800ad90:	f00d ff26 	bl	8018be0 <__assert_func>
 800ad94:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68da      	ldr	r2, [r3, #12]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	3320      	adds	r3, #32
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4610      	mov	r0, r2
 800ada6:	4798      	blx	r3
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b0b      	cmp	r3, #11
 800adac:	d805      	bhi.n	800adba <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800adae:	4b3e      	ldr	r3, [pc, #248]	; (800aea8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800adb0:	4a3a      	ldr	r2, [pc, #232]	; (800ae9c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800adb2:	21c4      	movs	r1, #196	; 0xc4
 800adb4:	483a      	ldr	r0, [pc, #232]	; (800aea0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800adb6:	f00d ff13 	bl	8018be0 <__assert_func>
 800adba:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7ff fdeb 	bl	800a99c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	2100      	movs	r1, #0
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 f86d 	bl	800aeac <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800add2:	4603      	mov	r3, r0
 800add4:	4619      	mov	r1, r3
 800add6:	200c      	movs	r0, #12
 800add8:	f7ff fd52 	bl	800a880 <_ZnwjPv>
 800addc:	4604      	mov	r4, r0
 800adde:	2c00      	cmp	r4, #0
 800ade0:	d004      	beq.n	800adec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
 800ade2:	4620      	mov	r0, r4
 800ade4:	f7ff fe6c 	bl	800aac0 <_ZN8touchgfx12NoTransitionC1Ev>
 800ade8:	4623      	mov	r3, r4
 800adea:	e000      	b.n	800adee <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800adec:	4623      	mov	r3, r4
 800adee:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	2100      	movs	r1, #0
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 f86b 	bl	800aed2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800adfc:	4603      	mov	r3, r0
 800adfe:	4619      	mov	r1, r3
 800ae00:	20a0      	movs	r0, #160	; 0xa0
 800ae02:	f7ff fd3d 	bl	800a880 <_ZnwjPv>
 800ae06:	4604      	mov	r4, r0
 800ae08:	2c00      	cmp	r4, #0
 800ae0a:	d004      	beq.n	800ae16 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xda>
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f000 fec7 	bl	800bba0 <_ZN11Screen1ViewC1Ev>
 800ae12:	4623      	mov	r3, r4
 800ae14:	e000      	b.n	800ae18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 800ae16:	4623      	mov	r3, r4
 800ae18:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	2100      	movs	r1, #0
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 f869 	bl	800aef8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800ae26:	4603      	mov	r3, r0
 800ae28:	4619      	mov	r1, r3
 800ae2a:	2010      	movs	r0, #16
 800ae2c:	f7ff fd28 	bl	800a880 <_ZnwjPv>
 800ae30:	4604      	mov	r4, r0
 800ae32:	2c00      	cmp	r4, #0
 800ae34:	d005      	beq.n	800ae42 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x106>
 800ae36:	69b9      	ldr	r1, [r7, #24]
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f000 fe5b 	bl	800baf4 <_ZN16Screen1PresenterC1ER11Screen1View>
 800ae3e:	4623      	mov	r3, r4
 800ae40:	e000      	b.n	800ae44 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 800ae42:	4623      	mov	r3, r4
 800ae44:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	69fa      	ldr	r2, [r7, #28]
 800ae4a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	69ba      	ldr	r2, [r7, #24]
 800ae56:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	3304      	adds	r3, #4
 800ae62:	e000      	b.n	800ae66 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 800ae64:	2300      	movs	r3, #0
 800ae66:	4619      	mov	r1, r3
 800ae68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae6a:	f7ff fe1a 	bl	800aaa2 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	3304      	adds	r3, #4
 800ae72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7ff fe64 	bl	800ab42 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	6979      	ldr	r1, [r7, #20]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f000 f84d 	bl	800af1e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800ae84:	69fa      	ldr	r2, [r7, #28]
 800ae86:	6979      	ldr	r1, [r7, #20]
 800ae88:	69b8      	ldr	r0, [r7, #24]
 800ae8a:	f7ff fde3 	bl	800aa54 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800ae8e:	697b      	ldr	r3, [r7, #20]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3724      	adds	r7, #36	; 0x24
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd90      	pop	{r4, r7, pc}
 800ae98:	08019ddc 	.word	0x08019ddc
 800ae9c:	0801a690 	.word	0x0801a690
 800aea0:	08019e6c 	.word	0x08019e6c
 800aea4:	08019eb0 	.word	0x08019eb0
 800aea8:	08019f54 	.word	0x08019f54

0800aeac <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3324      	adds	r3, #36	; 0x24
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	887a      	ldrh	r2, [r7, #2]
 800aec2:	4611      	mov	r1, r2
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	4798      	blx	r3
 800aec8:	4603      	mov	r3, r0
    }
 800aeca:	4618      	mov	r0, r3
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b082      	sub	sp, #8
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	460b      	mov	r3, r1
 800aedc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	3324      	adds	r3, #36	; 0x24
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	887a      	ldrh	r2, [r7, #2]
 800aee8:	4611      	mov	r1, r2
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	4798      	blx	r3
 800aeee:	4603      	mov	r3, r0
    }
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	3324      	adds	r3, #36	; 0x24
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	887a      	ldrh	r2, [r7, #2]
 800af0e:	4611      	mov	r1, r2
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	4798      	blx	r3
 800af14:	4603      	mov	r3, r0
    }
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800af1e:	b480      	push	{r7}
 800af20:	b083      	sub	sp, #12
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800af2e:	bf00      	nop
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800af3a:	b480      	push	{r7}
 800af3c:	b083      	sub	sp, #12
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	6039      	str	r1, [r7, #0]
        color = col;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	601a      	str	r2, [r3, #0]
    }
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4618      	mov	r0, r3
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	4608      	mov	r0, r1
 800af62:	4611      	mov	r1, r2
 800af64:	461a      	mov	r2, r3
 800af66:	4603      	mov	r3, r0
 800af68:	817b      	strh	r3, [r7, #10]
 800af6a:	460b      	mov	r3, r1
 800af6c:	813b      	strh	r3, [r7, #8]
 800af6e:	4613      	mov	r3, r2
 800af70:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	897a      	ldrh	r2, [r7, #10]
 800af76:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	893a      	ldrh	r2, [r7, #8]
 800af7c:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	88fa      	ldrh	r2, [r7, #6]
 800af82:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	8b3a      	ldrh	r2, [r7, #24]
 800af88:	80da      	strh	r2, [r3, #6]
    }
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	4618      	mov	r0, r3
 800af8e:	3714      	adds	r7, #20
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	887a      	ldrh	r2, [r7, #2]
 800afa8:	801a      	strh	r2, [r3, #0]
    {
    }
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4618      	mov	r0, r3
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af02      	add	r7, sp, #8
 800afbe:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 800afc0:	4a13      	ldr	r2, [pc, #76]	; (800b010 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	1d18      	adds	r0, r3, #4
 800afca:	2300      	movs	r3, #0
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	2300      	movs	r3, #0
 800afd0:	2200      	movs	r2, #0
 800afd2:	2100      	movs	r1, #0
 800afd4:	f7ff ffc0 	bl	800af58 <_ZN8touchgfx4RectC1Essss>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	330c      	adds	r3, #12
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fc fcc3 	bl	8007968 <_ZN8touchgfx4RectC1Ev>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	615a      	str	r2, [r3, #20]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	619a      	str	r2, [r3, #24]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	61da      	str	r2, [r3, #28]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4618      	mov	r0, r3
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	0801b73c 	.word	0x0801b73c

0800b014 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	4a04      	ldr	r2, [pc, #16]	; (800b030 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4618      	mov	r0, r3
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	0801b73c 	.word	0x0801b73c

0800b034 <_ZN8touchgfx8DrawableD0Ev>:
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7ff ffe9 	bl	800b014 <_ZN8touchgfx8DrawableD1Ev>
 800b042:	2128      	movs	r1, #40	; 0x28
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f00d fd9f 	bl	8018b88 <_ZdlPvj>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4618      	mov	r0, r3
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	4608      	mov	r0, r1
 800b05e:	4611      	mov	r1, r2
 800b060:	461a      	mov	r2, r3
 800b062:	4603      	mov	r3, r0
 800b064:	817b      	strh	r3, [r7, #10]
 800b066:	460b      	mov	r3, r1
 800b068:	813b      	strh	r3, [r7, #8]
 800b06a:	4613      	mov	r3, r2
 800b06c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3334      	adds	r3, #52	; 0x34
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b07a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	4798      	blx	r3
        setWidth(width);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3338      	adds	r3, #56	; 0x38
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b08e:	4611      	mov	r1, r2
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	4798      	blx	r3
        setHeight(height);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	333c      	adds	r3, #60	; 0x3c
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	4798      	blx	r3
    }
 800b0a6:	bf00      	nop
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800b0ae:	b480      	push	{r7}
 800b0b0:	b083      	sub	sp, #12
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	887a      	ldrh	r2, [r7, #2]
 800b0be:	809a      	strh	r2, [r3, #4]
    }
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	887a      	ldrh	r2, [r7, #2]
 800b0dc:	80da      	strh	r2, [r3, #6]
    }
 800b0de:	bf00      	nop
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b082      	sub	sp, #8
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	807b      	strh	r3, [r7, #2]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	332c      	adds	r3, #44	; 0x2c
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800b106:	4611      	mov	r1, r2
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	4798      	blx	r3
        setY(y);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3330      	adds	r3, #48	; 0x30
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f9b7 2000 	ldrsh.w	r2, [r7]
 800b118:	4611      	mov	r1, r2
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	4798      	blx	r3
    }
 800b11e:	bf00      	nop
 800b120:	3708      	adds	r7, #8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	460b      	mov	r3, r1
 800b130:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	887a      	ldrh	r2, [r7, #2]
 800b136:	811a      	strh	r2, [r3, #8]
    }
 800b138:	bf00      	nop
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	887a      	ldrh	r2, [r7, #2]
 800b154:	815a      	strh	r2, [r3, #10]
    }
 800b156:	bf00      	nop
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800b162:	b480      	push	{r7}
 800b164:	b083      	sub	sp, #12
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	bf00      	nop
 800b16c:	370c      	adds	r7, #12
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800b176:	b480      	push	{r7}
 800b178:	b083      	sub	sp, #12
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	6039      	str	r1, [r7, #0]
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
 800b196:	bf00      	nop
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800b1a2:	b480      	push	{r7}
 800b1a4:	b083      	sub	sp, #12
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	6039      	str	r1, [r7, #0]
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800b1da:	4618      	mov	r0, r3
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	460b      	mov	r3, r1
 800b20a:	807b      	strh	r3, [r7, #2]
 800b20c:	4613      	mov	r3, r2
 800b20e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3354      	adds	r3, #84	; 0x54
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	8879      	ldrh	r1, [r7, #2]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b220:	b292      	uxth	r2, r2
 800b222:	1a8a      	subs	r2, r1, r2
 800b224:	b292      	uxth	r2, r2
 800b226:	b210      	sxth	r0, r2
 800b228:	8839      	ldrh	r1, [r7, #0]
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800b230:	b292      	uxth	r2, r2
 800b232:	1a8a      	subs	r2, r1, r2
 800b234:	b292      	uxth	r2, r2
 800b236:	b212      	sxth	r2, r2
 800b238:	4601      	mov	r1, r0
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	4798      	blx	r3
    }
 800b23e:	bf00      	nop
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800b246:	b480      	push	{r7}
 800b248:	b083      	sub	sp, #12
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b254:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b25c:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b264:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800b266:	bf00      	nop
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800b272:	b580      	push	{r7, lr}
 800b274:	b084      	sub	sp, #16
 800b276:	af00      	add	r7, sp, #0
 800b278:	60f8      	str	r0, [r7, #12]
 800b27a:	60b9      	str	r1, [r7, #8]
 800b27c:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f7ff ffe1 	bl	800b246 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	601a      	str	r2, [r3, #0]
    }
 800b292:	bf00      	nop
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
	...

0800b29c <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	4a05      	ldr	r2, [pc, #20]	; (800b2bc <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7ff feb1 	bl	800b014 <_ZN8touchgfx8DrawableD1Ev>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	0801ac20 	.word	0x0801ac20

0800b2c0 <_ZN8touchgfx9ContainerD0Ev>:
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7ff ffe7 	bl	800b29c <_ZN8touchgfx9ContainerD1Ev>
 800b2ce:	212c      	movs	r1, #44	; 0x2c
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f00d fc59 	bl	8018b88 <_ZdlPvj>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	4a06      	ldr	r2, [pc, #24]	; (800b304 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff ffd2 	bl	800b29c <_ZN8touchgfx9ContainerD1Ev>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	0801b834 	.word	0x0801b834

0800b308 <_ZN8touchgfx6ScreenD0Ev>:
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7ff ffe5 	bl	800b2e0 <_ZN8touchgfx6ScreenD1Ev>
 800b316:	213c      	movs	r1, #60	; 0x3c
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f00d fc35 	bl	8018b88 <_ZdlPvj>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4618      	mov	r0, r3
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
    {
    }
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	460b      	mov	r3, r1
 800b382:	70fb      	strb	r3, [r7, #3]
    {
    }
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3304      	adds	r3, #4
 800b39e:	6839      	ldr	r1, [r7, #0]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 fd75 	bl	800be90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800b3a6:	bf00      	nop
 800b3a8:	3708      	adds	r7, #8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
	...

0800b3b0 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7ff fdfc 	bl	800afb8 <_ZN8touchgfx8DrawableC1Ev>
 800b3c0:	4a03      	ldr	r2, [pc, #12]	; (800b3d0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	601a      	str	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	0801a808 	.word	0x0801a808

0800b3d4 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	4a05      	ldr	r2, [pc, #20]	; (800b3f4 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7ff fe15 	bl	800b014 <_ZN8touchgfx8DrawableD1Ev>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	0801a808 	.word	0x0801a808

0800b3f8 <_ZN8touchgfx6WidgetD0Ev>:
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7ff ffe7 	bl	800b3d4 <_ZN8touchgfx6WidgetD1Ev>
 800b406:	2128      	movs	r1, #40	; 0x28
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f00d fbbd 	bl	8018b88 <_ZdlPvj>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	607b      	str	r3, [r7, #4]
 800b422:	460b      	mov	r3, r1
 800b424:	817b      	strh	r3, [r7, #10]
 800b426:	4613      	mov	r3, r2
 800b428:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7ff fecd 	bl	800b1cc <_ZNK8touchgfx8Drawable9isVisibleEv>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d008      	beq.n	800b44a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7ff fed3 	bl	800b1e6 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800b446:	2301      	movs	r3, #1
 800b448:	e000      	b.n	800b44c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800b44a:	2300      	movs	r3, #0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	601a      	str	r2, [r3, #0]
        }
    }
 800b456:	bf00      	nop
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800b45e:	b480      	push	{r7}
 800b460:	b083      	sub	sp, #12
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	460b      	mov	r3, r1
 800b468:	807b      	strh	r3, [r7, #2]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	887a      	ldrh	r2, [r7, #2]
 800b46e:	801a      	strh	r2, [r3, #0]
    }
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4618      	mov	r0, r3
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
	...

0800b480 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7ff ff90 	bl	800b3b0 <_ZN8touchgfx6WidgetC1Ev>
 800b490:	4a13      	ldr	r2, [pc, #76]	; (800b4e0 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	601a      	str	r2, [r3, #0]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	3326      	adds	r3, #38	; 0x26
 800b49a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7ff ffdd 	bl	800b45e <_ZN8touchgfx9TypedTextC1Et>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	3328      	adds	r3, #40	; 0x28
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7ff fd45 	bl	800af3a <_ZN8touchgfx9colortypeC1Em>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	859a      	strh	r2, [r3, #44]	; 0x2c
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	22ff      	movs	r2, #255	; 0xff
 800b4ba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	0801b4ac 	.word	0x0801b4ac

0800b4e4 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	683a      	ldr	r2, [r7, #0]
 800b4f2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	460b      	mov	r3, r1
 800b50a:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	887a      	ldrh	r2, [r7, #2]
 800b510:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 800b512:	bf00      	nop
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
	...

0800b520 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	4a05      	ldr	r2, [pc, #20]	; (800b540 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	601a      	str	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4618      	mov	r0, r3
 800b532:	f7ff fed5 	bl	800b2e0 <_ZN8touchgfx6ScreenD1Ev>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4618      	mov	r0, r3
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	0801a7d4 	.word	0x0801a7d4

0800b544 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff ffe7 	bl	800b520 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800b552:	2140      	movs	r1, #64	; 0x40
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f00d fb17 	bl	8018b88 <_ZdlPvj>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4618      	mov	r0, r3
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	4a0a      	ldr	r2, [pc, #40]	; (800b598 <_ZN15Screen1ViewBaseD1Ev+0x34>)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	601a      	str	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	336c      	adds	r3, #108	; 0x6c
 800b576:	4618      	mov	r0, r3
 800b578:	f000 f8e6 	bl	800b748 <_ZN8touchgfx8TextAreaD1Ev>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3340      	adds	r3, #64	; 0x40
 800b580:	4618      	mov	r0, r3
 800b582:	f001 fc81 	bl	800ce88 <_ZN8touchgfx13ScalableImageD1Ev>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4618      	mov	r0, r3
 800b58a:	f7ff ffc9 	bl	800b520 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4618      	mov	r0, r3
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	0801a79c 	.word	0x0801a79c

0800b59c <_ZN15Screen1ViewBaseD0Ev>:
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7ff ffdd 	bl	800b564 <_ZN15Screen1ViewBaseD1Ev>
 800b5aa:	21a0      	movs	r1, #160	; 0xa0
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f00d faeb 	bl	8018b88 <_ZdlPvj>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800b5bc:	b590      	push	{r4, r7, lr}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	71fb      	strb	r3, [r7, #7]
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	71bb      	strb	r3, [r7, #6]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800b5ce:	f7fb fa1f 	bl	8006a10 <_ZN8touchgfx3HAL11getInstanceEv>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d105      	bne.n	800b5e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800b5d8:	4b0a      	ldr	r3, [pc, #40]	; (800b604 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800b5da:	4a0b      	ldr	r2, [pc, #44]	; (800b608 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800b5dc:	2138      	movs	r1, #56	; 0x38
 800b5de:	480b      	ldr	r0, [pc, #44]	; (800b60c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800b5e0:	f00d fafe 	bl	8018be0 <__assert_func>
 800b5e4:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800b5e6:	f7fb fdd9 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800b5ea:	6803      	ldr	r3, [r0, #0]
 800b5ec:	332c      	adds	r3, #44	; 0x2c
 800b5ee:	681c      	ldr	r4, [r3, #0]
 800b5f0:	797b      	ldrb	r3, [r7, #5]
 800b5f2:	79ba      	ldrb	r2, [r7, #6]
 800b5f4:	79f9      	ldrb	r1, [r7, #7]
 800b5f6:	47a0      	blx	r4
 800b5f8:	4603      	mov	r3, r0
    }
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd90      	pop	{r4, r7, pc}
 800b602:	bf00      	nop
 800b604:	08019ff8 	.word	0x08019ff8
 800b608:	0801a868 	.word	0x0801a868
 800b60c:	0801a03c 	.word	0x0801a03c

0800b610 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase()
 800b610:	b590      	push	{r4, r7, lr}
 800b612:	b087      	sub	sp, #28
 800b614:	af02      	add	r7, sp, #8
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 f87e 	bl	800b71c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800b620:	4a33      	ldr	r2, [pc, #204]	; (800b6f0 <_ZN15Screen1ViewBaseC1Ev+0xe0>)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	3340      	adds	r3, #64	; 0x40
 800b62a:	4618      	mov	r0, r3
 800b62c:	f001 fc7e 	bl	800cf2c <_ZN8touchgfx13ScalableImageC1Ev>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	336c      	adds	r3, #108	; 0x6c
 800b634:	4618      	mov	r0, r3
 800b636:	f7ff ff23 	bl	800b480 <_ZN8touchgfx8TextAreaC1Ev>
{

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_POR_SOL_ID));
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800b640:	f107 0308 	add.w	r3, r7, #8
 800b644:	2100      	movs	r1, #0
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff fca6 	bl	800af98 <_ZN8touchgfx6BitmapC1Et>
 800b64c:	f107 0308 	add.w	r3, r7, #8
 800b650:	4619      	mov	r1, r3
 800b652:	4620      	mov	r0, r4
 800b654:	f001 fc26 	bl	800cea4 <_ZN8touchgfx13ScalableImage9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(0, 0, 640, 480);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b65e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	f44f 7320 	mov.w	r3, #640	; 0x280
 800b668:	2200      	movs	r2, #0
 800b66a:	2100      	movs	r1, #0
 800b66c:	f7ff fcf2 	bl	800b054 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	3340      	adds	r3, #64	; 0x40
 800b674:	2100      	movs	r1, #0
 800b676:	4618      	mov	r0, r3
 800b678:	f001 fc07 	bl	800ce8a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>

    textArea1.setXY(52, 59);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	336c      	adds	r3, #108	; 0x6c
 800b680:	223b      	movs	r2, #59	; 0x3b
 800b682:	2134      	movs	r1, #52	; 0x34
 800b684:	4618      	mov	r0, r3
 800b686:	f7ff fd30 	bl	800b0ea <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(230, 217, 217));
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800b690:	22d9      	movs	r2, #217	; 0xd9
 800b692:	21d9      	movs	r1, #217	; 0xd9
 800b694:	20e6      	movs	r0, #230	; 0xe6
 800b696:	f7ff ff91 	bl	800b5bc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800b69a:	4603      	mov	r3, r0
 800b69c:	4619      	mov	r1, r3
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f7ff ff20 	bl	800b4e4 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	336c      	adds	r3, #108	; 0x6c
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff ff28 	bl	800b500 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800b6b6:	f107 030c 	add.w	r3, r7, #12
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7ff fece 	bl	800b45e <_ZN8touchgfx9TypedTextC1Et>
 800b6c2:	89b9      	ldrh	r1, [r7, #12]
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f001 ff59 	bl	800d57c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(scalableImage1);
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	3340      	adds	r3, #64	; 0x40
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	4610      	mov	r0, r2
 800b6d4:	f7ff fe5c 	bl	800b390 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	336c      	adds	r3, #108	; 0x6c
 800b6de:	4619      	mov	r1, r3
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	f7ff fe55 	bl	800b390 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3714      	adds	r7, #20
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd90      	pop	{r4, r7, pc}
 800b6f0:	0801a79c 	.word	0x0801a79c

0800b6f4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]

}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <_ZN15Screen1ViewBase7action1Ev>:

void Screen1ViewBase::action1()
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]

}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4618      	mov	r0, r3
 800b728:	f004 f840 	bl	800f7ac <_ZN8touchgfx6ScreenC1Ev>
 800b72c:	4a05      	ldr	r2, [pc, #20]	; (800b744 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	601a      	str	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4618      	mov	r0, r3
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	0801a7d4 	.word	0x0801a7d4

0800b748 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	4a05      	ldr	r2, [pc, #20]	; (800b768 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	601a      	str	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff fe3b 	bl	800b3d4 <_ZN8touchgfx6WidgetD1Ev>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4618      	mov	r0, r3
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	0801b4ac 	.word	0x0801b4ac

0800b76c <_ZN8touchgfx8TextAreaD0Ev>:
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f7ff ffe7 	bl	800b748 <_ZN8touchgfx8TextAreaD1Ev>
 800b77a:	2134      	movs	r1, #52	; 0x34
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f00d fa03 	bl	8018b88 <_ZdlPvj>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4618      	mov	r0, r3
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0
    return bitmap_database;
 800b790:	4b02      	ldr	r3, [pc, #8]	; (800b79c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800b792:	4618      	mov	r0, r3
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	0801a8c4 	.word	0x0801a8c4

0800b7a0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800b7a4:	2301      	movs	r3, #1
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800b7be:	4a07      	ldr	r2, [pc, #28]	; (800b7dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6013      	str	r3, [r2, #0]
        fonts = f;
 800b7c4:	4a06      	ldr	r2, [pc, #24]	; (800b7e0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800b7ca:	4a06      	ldr	r2, [pc, #24]	; (800b7e4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800b7cc:	88fb      	ldrh	r3, [r7, #6]
 800b7ce:	8013      	strh	r3, [r2, #0]
    }
 800b7d0:	bf00      	nop
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	20001170 	.word	0x20001170
 800b7e0:	20001178 	.word	0x20001178
 800b7e4:	20001174 	.word	0x20001174

0800b7e8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800b7e8:	b590      	push	{r4, r7, lr}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800b7f6:	88fb      	ldrh	r3, [r7, #6]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d127      	bne.n	800b84c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800b7fc:	88fb      	ldrh	r3, [r7, #6]
 800b7fe:	4a1e      	ldr	r2, [pc, #120]	; (800b878 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800b800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d016      	beq.n	800b836 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800b808:	88fb      	ldrh	r3, [r7, #6]
 800b80a:	4a1b      	ldr	r2, [pc, #108]	; (800b878 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800b80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b810:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	4413      	add	r3, r2
 800b81a:	4a18      	ldr	r2, [pc, #96]	; (800b87c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800b81c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	4413      	add	r3, r2
 800b826:	4a16      	ldr	r2, [pc, #88]	; (800b880 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800b828:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	4413      	add	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]
 800b834:	e00a      	b.n	800b84c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800b836:	4b11      	ldr	r3, [pc, #68]	; (800b87c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800b838:	4a12      	ldr	r2, [pc, #72]	; (800b884 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800b83a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800b83c:	4a12      	ldr	r2, [pc, #72]	; (800b888 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800b83e:	4b10      	ldr	r3, [pc, #64]	; (800b880 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800b840:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800b842:	88fb      	ldrh	r3, [r7, #6]
 800b844:	4a11      	ldr	r2, [pc, #68]	; (800b88c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800b846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b84a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00d      	beq.n	800b86e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800b852:	4a0f      	ldr	r2, [pc, #60]	; (800b890 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800b854:	88fb      	ldrh	r3, [r7, #6]
 800b856:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800b858:	f000 f83e 	bl	800b8d8 <_ZN17TypedTextDatabase8getFontsEv>
 800b85c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800b85e:	f000 f833 	bl	800b8c8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800b862:	4603      	mov	r3, r0
 800b864:	461a      	mov	r2, r3
 800b866:	4621      	mov	r1, r4
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f7ff ffa1 	bl	800b7b0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800b86e:	bf00      	nop
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	bd90      	pop	{r4, r7, pc}
 800b876:	bf00      	nop
 800b878:	200010d8 	.word	0x200010d8
 800b87c:	200010e0 	.word	0x200010e0
 800b880:	200010e4 	.word	0x200010e4
 800b884:	0803aea8 	.word	0x0803aea8
 800b888:	0803aea4 	.word	0x0803aea4
 800b88c:	0803aec4 	.word	0x0803aec4
 800b890:	200010dc 	.word	0x200010dc

0800b894 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800b8a0:	4b07      	ldr	r3, [pc, #28]	; (800b8c0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	4b07      	ldr	r3, [pc, #28]	; (800b8c4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800b8a6:	6819      	ldr	r1, [r3, #0]
 800b8a8:	887b      	ldrh	r3, [r7, #2]
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	440b      	add	r3, r1
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	4413      	add	r3, r2
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	200010e0 	.word	0x200010e0
 800b8c4:	200010e4 	.word	0x200010e4

0800b8c8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800b8cc:	2301      	movs	r3, #1
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800b8d8:	b480      	push	{r7}
 800b8da:	af00      	add	r7, sp, #0
    return _fonts;
 800b8dc:	4b02      	ldr	r3, [pc, #8]	; (800b8e8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	200010e8 	.word	0x200010e8

0800b8ec <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        _fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d113      	bne.n	800b924 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b902:	4293      	cmp	r3, r2
 800b904:	d10e      	bne.n	800b924 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800b906:	f7fe ff3f 	bl	800a788 <_Z23getFont_verdana_20_4bppv>
 800b90a:	4602      	mov	r2, r0
};
 800b90c:	4b07      	ldr	r3, [pc, #28]	; (800b92c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b90e:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 800b910:	f7fe ff7c 	bl	800a80c <_Z23getFont_verdana_40_4bppv>
 800b914:	4602      	mov	r2, r0
};
 800b916:	4b05      	ldr	r3, [pc, #20]	; (800b92c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b918:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 800b91a:	f7fe fef3 	bl	800a704 <_Z23getFont_verdana_10_4bppv>
 800b91e:	4602      	mov	r2, r0
};
 800b920:	4b02      	ldr	r3, [pc, #8]	; (800b92c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b922:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 800b924:	bf00      	nop
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	200010e8 	.word	0x200010e8

0800b930 <_GLOBAL__sub_I__fonts>:
 800b930:	b580      	push	{r7, lr}
 800b932:	af00      	add	r7, sp, #0
 800b934:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b938:	2001      	movs	r0, #1
 800b93a:	f7ff ffd7 	bl	800b8ec <_Z41__static_initialization_and_destruction_0ii>
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	68b9      	ldr	r1, [r7, #8]
 800b952:	4618      	mov	r0, r3
 800b954:	f7ff f904 	bl	800ab60 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800b958:	4a03      	ldr	r2, [pc, #12]	; (800b968 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	601a      	str	r2, [r3, #0]
{

}
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	0801a268 	.word	0x0801a268

0800b96c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	601a      	str	r2, [r3, #0]
{

}
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4618      	mov	r0, r3
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <_ZN5Model4tickEv>:

void Model::tick()
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]

}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
    {
    }
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
    {
    }
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
    {
 800b9cc:	4a04      	ldr	r2, [pc, #16]	; (800b9e0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	601a      	str	r2, [r3, #0]
    }
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	0801a918 	.word	0x0801a918

0800b9e4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
    }
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7ff ffe9 	bl	800b9c4 <_ZN8touchgfx9PresenterD1Ev>
 800b9f2:	2104      	movs	r1, #4
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f00d f8c7 	bl	8018b88 <_ZdlPvj>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
    {
 800ba0c:	4a04      	ldr	r2, [pc, #16]	; (800ba20 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	601a      	str	r2, [r3, #0]
    }
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4618      	mov	r0, r3
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	0801a918 	.word	0x0801a918

0800ba24 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	4a06      	ldr	r2, [pc, #24]	; (800ba48 <_ZN13ModelListenerC1Ev+0x24>)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	601a      	str	r2, [r3, #0]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	605a      	str	r2, [r3, #4]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	370c      	adds	r7, #12
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop
 800ba48:	0801a908 	.word	0x0801a908

0800ba4c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	4a04      	ldr	r2, [pc, #16]	; (800ba68 <_ZN13ModelListenerD1Ev+0x1c>)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	0801a908 	.word	0x0801a908

0800ba6c <_ZN13ModelListenerD0Ev>:
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7ff ffe9 	bl	800ba4c <_ZN13ModelListenerD1Ev>
 800ba7a:	2108      	movs	r1, #8
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f00d f883 	bl	8018b88 <_ZdlPvj>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4618      	mov	r0, r3
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	4a09      	ldr	r2, [pc, #36]	; (800babc <_ZN16Screen1PresenterD1Ev+0x30>)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	601a      	str	r2, [r3, #0]
 800ba9a:	4a09      	ldr	r2, [pc, #36]	; (800bac0 <_ZN16Screen1PresenterD1Ev+0x34>)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	605a      	str	r2, [r3, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3304      	adds	r3, #4
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7ff ffd1 	bl	800ba4c <_ZN13ModelListenerD1Ev>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	4618      	mov	r0, r3
 800baae:	f7ff ff89 	bl	800b9c4 <_ZN8touchgfx9PresenterD1Ev>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4618      	mov	r0, r3
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	0801a8e0 	.word	0x0801a8e0
 800bac0:	0801a8f8 	.word	0x0801a8f8

0800bac4 <_ZThn4_N16Screen1PresenterD1Ev>:
 800bac4:	f1a0 0004 	sub.w	r0, r0, #4
 800bac8:	e7e0      	b.n	800ba8c <_ZN16Screen1PresenterD1Ev>
 800baca:	bf00      	nop

0800bacc <_ZN16Screen1PresenterD0Ev>:
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7ff ffd9 	bl	800ba8c <_ZN16Screen1PresenterD1Ev>
 800bada:	2110      	movs	r1, #16
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f00d f853 	bl	8018b88 <_ZdlPvj>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4618      	mov	r0, r3
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <_ZThn4_N16Screen1PresenterD0Ev>:
 800baec:	f1a0 0004 	sub.w	r0, r0, #4
 800baf0:	e7ec      	b.n	800bacc <_ZN16Screen1PresenterD0Ev>
	...

0800baf4 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
    : view(v)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7ff ff7f 	bl	800ba04 <_ZN8touchgfx9PresenterC1Ev>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	3304      	adds	r3, #4
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff ff8a 	bl	800ba24 <_ZN13ModelListenerC1Ev>
 800bb10:	4a06      	ldr	r2, [pc, #24]	; (800bb2c <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	601a      	str	r2, [r3, #0]
 800bb16:	4a06      	ldr	r2, [pc, #24]	; (800bb30 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	605a      	str	r2, [r3, #4]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	683a      	ldr	r2, [r7, #0]
 800bb20:	60da      	str	r2, [r3, #12]
{

}
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4618      	mov	r0, r3
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	0801a8e0 	.word	0x0801a8e0
 800bb30:	0801a8f8 	.word	0x0801a8f8

0800bb34 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]

}
 800bb3c:	bf00      	nop
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]

}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	4a05      	ldr	r2, [pc, #20]	; (800bb7c <_ZN11Screen1ViewD1Ev+0x20>)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	601a      	str	r2, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7ff fcf9 	bl	800b564 <_ZN15Screen1ViewBaseD1Ev>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4618      	mov	r0, r3
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	0801a930 	.word	0x0801a930

0800bb80 <_ZN11Screen1ViewD0Ev>:
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7ff ffe7 	bl	800bb5c <_ZN11Screen1ViewD1Ev>
 800bb8e:	21a0      	movs	r1, #160	; 0xa0
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f00c fff9 	bl	8018b88 <_ZdlPvj>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff fd30 	bl	800b610 <_ZN15Screen1ViewBaseC1Ev>
 800bbb0:	4a03      	ldr	r2, [pc, #12]	; (800bbc0 <_ZN11Screen1ViewC1Ev+0x20>)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	601a      	str	r2, [r3, #0]
{

}
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	0801a930 	.word	0x0801a930

0800bbc4 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7ff fd90 	bl	800b6f4 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800bbd4:	bf00      	nop
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7ff fbb2 	bl	800b350 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800bbf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bc2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bbf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bbfa:	e003      	b.n	800bc04 <LoopCopyDataInit>

0800bbfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bbfc:	4b0c      	ldr	r3, [pc, #48]	; (800bc30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bbfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bc00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bc02:	3104      	adds	r1, #4

0800bc04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bc04:	480b      	ldr	r0, [pc, #44]	; (800bc34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bc06:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bc08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bc0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bc0c:	d3f6      	bcc.n	800bbfc <CopyDataInit>
  ldr  r2, =_sbss
 800bc0e:	4a0b      	ldr	r2, [pc, #44]	; (800bc3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bc10:	e002      	b.n	800bc18 <LoopFillZerobss>

0800bc12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bc12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bc14:	f842 3b04 	str.w	r3, [r2], #4

0800bc18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bc18:	4b09      	ldr	r3, [pc, #36]	; (800bc40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bc1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bc1c:	d3f9      	bcc.n	800bc12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800bc1e:	f7fe fab9 	bl	800a194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bc22:	f00d f821 	bl	8018c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bc26:	f7fd fb05 	bl	8009234 <main>
  bx  lr    
 800bc2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bc2c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800bc30:	0803a2f8 	.word	0x0803a2f8
  ldr  r0, =_sdata
 800bc34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bc38:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 800bc3c:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 800bc40:	20005a90 	.word	0x20005a90

0800bc44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bc44:	e7fe      	b.n	800bc44 <ADC_IRQHandler>

0800bc46 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800bc46:	8880      	ldrh	r0, [r0, #4]
 800bc48:	4770      	bx	lr

0800bc4a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	8083      	strh	r3, [r0, #4]
 800bc4e:	4770      	bx	lr

0800bc50 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc52:	6803      	ldr	r3, [r0, #0]
 800bc54:	460e      	mov	r6, r1
 800bc56:	2100      	movs	r1, #0
 800bc58:	4605      	mov	r5, r0
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	4798      	blx	r3
 800bc5e:	4604      	mov	r4, r0
 800bc60:	682b      	ldr	r3, [r5, #0]
 800bc62:	4628      	mov	r0, r5
 800bc64:	1b34      	subs	r4, r6, r4
 800bc66:	6a1b      	ldr	r3, [r3, #32]
 800bc68:	b2a4      	uxth	r4, r4
 800bc6a:	4798      	blx	r3
 800bc6c:	88ab      	ldrh	r3, [r5, #4]
 800bc6e:	fbb4 f4f0 	udiv	r4, r4, r0
 800bc72:	42a3      	cmp	r3, r4
 800bc74:	d805      	bhi.n	800bc82 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800bc76:	4b0e      	ldr	r3, [pc, #56]	; (800bcb0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800bc78:	211e      	movs	r1, #30
 800bc7a:	4a0e      	ldr	r2, [pc, #56]	; (800bcb4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800bc7c:	480e      	ldr	r0, [pc, #56]	; (800bcb8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800bc7e:	f00c ffaf 	bl	8018be0 <__assert_func>
 800bc82:	682b      	ldr	r3, [r5, #0]
 800bc84:	2100      	movs	r1, #0
 800bc86:	4628      	mov	r0, r5
 800bc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8a:	4798      	blx	r3
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	4607      	mov	r7, r0
 800bc90:	4628      	mov	r0, r5
 800bc92:	6a1b      	ldr	r3, [r3, #32]
 800bc94:	4798      	blx	r3
 800bc96:	1bf3      	subs	r3, r6, r7
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	fbb3 f2f0 	udiv	r2, r3, r0
 800bc9e:	fb02 3010 	mls	r0, r2, r0, r3
 800bca2:	b118      	cbz	r0, 800bcac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800bca4:	4b05      	ldr	r3, [pc, #20]	; (800bcbc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800bca6:	211f      	movs	r1, #31
 800bca8:	4a02      	ldr	r2, [pc, #8]	; (800bcb4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800bcaa:	e7e7      	b.n	800bc7c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800bcac:	4620      	mov	r0, r4
 800bcae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb0:	0801a960 	.word	0x0801a960
 800bcb4:	0801aace 	.word	0x0801aace
 800bcb8:	0801a975 	.word	0x0801a975
 800bcbc:	0801a9a3 	.word	0x0801a9a3

0800bcc0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	6803      	ldr	r3, [r0, #0]
 800bcc4:	460d      	mov	r5, r1
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
 800bcca:	4798      	blx	r3
 800bccc:	4285      	cmp	r5, r0
 800bcce:	d905      	bls.n	800bcdc <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800bcd0:	4b0c      	ldr	r3, [pc, #48]	; (800bd04 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800bcd2:	212f      	movs	r1, #47	; 0x2f
 800bcd4:	4a0c      	ldr	r2, [pc, #48]	; (800bd08 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800bcd6:	480d      	ldr	r0, [pc, #52]	; (800bd0c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800bcd8:	f00c ff82 	bl	8018be0 <__assert_func>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	4620      	mov	r0, r4
 800bce0:	88a5      	ldrh	r5, [r4, #4]
 800bce2:	69db      	ldr	r3, [r3, #28]
 800bce4:	4798      	blx	r3
 800bce6:	4285      	cmp	r5, r0
 800bce8:	d303      	bcc.n	800bcf2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800bcea:	4b09      	ldr	r3, [pc, #36]	; (800bd10 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800bcec:	2130      	movs	r1, #48	; 0x30
 800bcee:	4a06      	ldr	r2, [pc, #24]	; (800bd08 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800bcf0:	e7f1      	b.n	800bcd6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	88a1      	ldrh	r1, [r4, #4]
 800bcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfa:	4798      	blx	r3
 800bcfc:	88a3      	ldrh	r3, [r4, #4]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	80a3      	strh	r3, [r4, #4]
 800bd02:	bd38      	pop	{r3, r4, r5, pc}
 800bd04:	0801aa1d 	.word	0x0801aa1d
 800bd08:	0801ab11 	.word	0x0801ab11
 800bd0c:	0801a975 	.word	0x0801a975
 800bd10:	0801aa34 	.word	0x0801aa34

0800bd14 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	6803      	ldr	r3, [r0, #0]
 800bd18:	4616      	mov	r6, r2
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	460d      	mov	r5, r1
 800bd1e:	6a1b      	ldr	r3, [r3, #32]
 800bd20:	4798      	blx	r3
 800bd22:	4286      	cmp	r6, r0
 800bd24:	d905      	bls.n	800bd32 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800bd26:	4b06      	ldr	r3, [pc, #24]	; (800bd40 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800bd28:	2139      	movs	r1, #57	; 0x39
 800bd2a:	4a06      	ldr	r2, [pc, #24]	; (800bd44 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800bd2c:	4806      	ldr	r0, [pc, #24]	; (800bd48 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800bd2e:	f00c ff57 	bl	8018be0 <__assert_func>
 800bd32:	6823      	ldr	r3, [r4, #0]
 800bd34:	4629      	mov	r1, r5
 800bd36:	4620      	mov	r0, r4
 800bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd3e:	4718      	bx	r3
 800bd40:	0801aa1d 	.word	0x0801aa1d
 800bd44:	0801aa84 	.word	0x0801aa84
 800bd48:	0801a975 	.word	0x0801a975

0800bd4c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800bd4c:	4770      	bx	lr
	...

0800bd50 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800bd50:	4a02      	ldr	r2, [pc, #8]	; (800bd5c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800bd52:	6002      	str	r2, [r0, #0]
 800bd54:	2200      	movs	r2, #0
 800bd56:	8082      	strh	r2, [r0, #4]
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	0801aa58 	.word	0x0801aa58

0800bd60 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800bd60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bd62:	2000      	movs	r0, #0
 800bd64:	b12b      	cbz	r3, 800bd72 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800bd66:	b920      	cbnz	r0, 800bd72 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800bd68:	1a5a      	subs	r2, r3, r1
 800bd6a:	699b      	ldr	r3, [r3, #24]
 800bd6c:	4250      	negs	r0, r2
 800bd6e:	4150      	adcs	r0, r2
 800bd70:	e7f8      	b.n	800bd64 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800bd72:	4770      	bx	lr

0800bd74 <_ZN8touchgfx9Container9removeAllEv>:
 800bd74:	2200      	movs	r2, #0
 800bd76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bd78:	b123      	cbz	r3, 800bd84 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800bd7a:	6999      	ldr	r1, [r3, #24]
 800bd7c:	6281      	str	r1, [r0, #40]	; 0x28
 800bd7e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800bd82:	e7f8      	b.n	800bd76 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800bd84:	4770      	bx	lr

0800bd86 <_ZN8touchgfx9Container6unlinkEv>:
 800bd86:	2300      	movs	r3, #0
 800bd88:	6283      	str	r3, [r0, #40]	; 0x28
 800bd8a:	4770      	bx	lr

0800bd8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800bd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd90:	461f      	mov	r7, r3
 800bd92:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800bd96:	460d      	mov	r5, r1
 800bd98:	4616      	mov	r6, r2
 800bd9a:	b103      	cbz	r3, 800bd9e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800bd9c:	6038      	str	r0, [r7, #0]
 800bd9e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800bda0:	b314      	cbz	r4, 800bde8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800bda2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800bda6:	b1eb      	cbz	r3, 800bde4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bda8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800bdac:	428d      	cmp	r5, r1
 800bdae:	db19      	blt.n	800bde4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bdb0:	b289      	uxth	r1, r1
 800bdb2:	8923      	ldrh	r3, [r4, #8]
 800bdb4:	440b      	add	r3, r1
 800bdb6:	b21b      	sxth	r3, r3
 800bdb8:	429d      	cmp	r5, r3
 800bdba:	da13      	bge.n	800bde4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bdbc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800bdc0:	4296      	cmp	r6, r2
 800bdc2:	db0f      	blt.n	800bde4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bdc4:	b292      	uxth	r2, r2
 800bdc6:	8963      	ldrh	r3, [r4, #10]
 800bdc8:	4413      	add	r3, r2
 800bdca:	b21b      	sxth	r3, r3
 800bdcc:	429e      	cmp	r6, r3
 800bdce:	da09      	bge.n	800bde4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bdd0:	6823      	ldr	r3, [r4, #0]
 800bdd2:	1ab2      	subs	r2, r6, r2
 800bdd4:	1a69      	subs	r1, r5, r1
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800bddc:	b212      	sxth	r2, r2
 800bdde:	463b      	mov	r3, r7
 800bde0:	b209      	sxth	r1, r1
 800bde2:	47c0      	blx	r8
 800bde4:	69a4      	ldr	r4, [r4, #24]
 800bde6:	e7db      	b.n	800bda0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800bde8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bdec <_ZNK8touchgfx9Container12getSolidRectEv>:
 800bdec:	2200      	movs	r2, #0
 800bdee:	8002      	strh	r2, [r0, #0]
 800bdf0:	8042      	strh	r2, [r0, #2]
 800bdf2:	8082      	strh	r2, [r0, #4]
 800bdf4:	80c2      	strh	r2, [r0, #6]
 800bdf6:	4770      	bx	lr

0800bdf8 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800bdf8:	b570      	push	{r4, r5, r6, lr}
 800bdfa:	460d      	mov	r5, r1
 800bdfc:	4616      	mov	r6, r2
 800bdfe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800be00:	b13c      	cbz	r4, 800be12 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	4620      	mov	r0, r4
 800be06:	4632      	mov	r2, r6
 800be08:	4629      	mov	r1, r5
 800be0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be0c:	4798      	blx	r3
 800be0e:	69a4      	ldr	r4, [r4, #24]
 800be10:	e7f6      	b.n	800be00 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800be12:	bd70      	pop	{r4, r5, r6, pc}

0800be14 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	460d      	mov	r5, r1
 800be18:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800be1a:	b134      	cbz	r4, 800be2a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800be1c:	682b      	ldr	r3, [r5, #0]
 800be1e:	4621      	mov	r1, r4
 800be20:	4628      	mov	r0, r5
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	4798      	blx	r3
 800be26:	69a4      	ldr	r4, [r4, #24]
 800be28:	e7f7      	b.n	800be1a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800be2a:	bd38      	pop	{r3, r4, r5, pc}

0800be2c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800be2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800be2e:	b19b      	cbz	r3, 800be58 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800be30:	428b      	cmp	r3, r1
 800be32:	d109      	bne.n	800be48 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800be34:	699a      	ldr	r2, [r3, #24]
 800be36:	2100      	movs	r1, #0
 800be38:	6159      	str	r1, [r3, #20]
 800be3a:	6282      	str	r2, [r0, #40]	; 0x28
 800be3c:	b902      	cbnz	r2, 800be40 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800be3e:	4770      	bx	lr
 800be40:	6199      	str	r1, [r3, #24]
 800be42:	4770      	bx	lr
 800be44:	4613      	mov	r3, r2
 800be46:	b13a      	cbz	r2, 800be58 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800be48:	699a      	ldr	r2, [r3, #24]
 800be4a:	428a      	cmp	r2, r1
 800be4c:	d1fa      	bne.n	800be44 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800be4e:	698a      	ldr	r2, [r1, #24]
 800be50:	619a      	str	r2, [r3, #24]
 800be52:	2300      	movs	r3, #0
 800be54:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800be58:	4770      	bx	lr

0800be5a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800be5a:	b410      	push	{r4}
 800be5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800be5e:	4604      	mov	r4, r0
 800be60:	b92b      	cbnz	r3, 800be6e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800be62:	6803      	ldr	r3, [r0, #0]
 800be64:	4611      	mov	r1, r2
 800be66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be6c:	4718      	bx	r3
 800be6e:	b941      	cbnz	r1, 800be82 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800be70:	6193      	str	r3, [r2, #24]
 800be72:	6282      	str	r2, [r0, #40]	; 0x28
 800be74:	6154      	str	r4, [r2, #20]
 800be76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	4603      	mov	r3, r0
 800be7e:	2800      	cmp	r0, #0
 800be80:	d0f9      	beq.n	800be76 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800be82:	4299      	cmp	r1, r3
 800be84:	6998      	ldr	r0, [r3, #24]
 800be86:	d1f9      	bne.n	800be7c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800be88:	6190      	str	r0, [r2, #24]
 800be8a:	618a      	str	r2, [r1, #24]
 800be8c:	e7f2      	b.n	800be74 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800be90 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800be90:	4288      	cmp	r0, r1
 800be92:	b508      	push	{r3, lr}
 800be94:	d105      	bne.n	800bea2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800be96:	4b11      	ldr	r3, [pc, #68]	; (800bedc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800be98:	2123      	movs	r1, #35	; 0x23
 800be9a:	4a11      	ldr	r2, [pc, #68]	; (800bee0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800be9c:	4811      	ldr	r0, [pc, #68]	; (800bee4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800be9e:	f00c fe9f 	bl	8018be0 <__assert_func>
 800bea2:	694b      	ldr	r3, [r1, #20]
 800bea4:	b11b      	cbz	r3, 800beae <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800bea6:	4b10      	ldr	r3, [pc, #64]	; (800bee8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800bea8:	2124      	movs	r1, #36	; 0x24
 800beaa:	4a0d      	ldr	r2, [pc, #52]	; (800bee0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800beac:	e7f6      	b.n	800be9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800beae:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800beb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800beb4:	b913      	cbnz	r3, 800bebc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800beb6:	6281      	str	r1, [r0, #40]	; 0x28
 800beb8:	bd08      	pop	{r3, pc}
 800beba:	4613      	mov	r3, r2
 800bebc:	699a      	ldr	r2, [r3, #24]
 800bebe:	b12a      	cbz	r2, 800becc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800bec0:	428b      	cmp	r3, r1
 800bec2:	d1fa      	bne.n	800beba <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800bec4:	4b09      	ldr	r3, [pc, #36]	; (800beec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800bec6:	2135      	movs	r1, #53	; 0x35
 800bec8:	4a05      	ldr	r2, [pc, #20]	; (800bee0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800beca:	e7e7      	b.n	800be9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800becc:	428b      	cmp	r3, r1
 800bece:	d103      	bne.n	800bed8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800bed0:	4b06      	ldr	r3, [pc, #24]	; (800beec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800bed2:	2138      	movs	r1, #56	; 0x38
 800bed4:	4a02      	ldr	r2, [pc, #8]	; (800bee0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800bed6:	e7e1      	b.n	800be9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800bed8:	6199      	str	r1, [r3, #24]
 800beda:	e7ed      	b.n	800beb8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800bedc:	0801ab4f 	.word	0x0801ab4f
 800bee0:	0801aca4 	.word	0x0801aca4
 800bee4:	0801ab7b 	.word	0x0801ab7b
 800bee8:	0801abae 	.word	0x0801abae
 800beec:	0801abe4 	.word	0x0801abe4

0800bef0 <_ZN8touchgfx4RectaNERKS0_>:
 800bef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef4:	888b      	ldrh	r3, [r1, #4]
 800bef6:	f9b1 9000 	ldrsh.w	r9, [r1]
 800befa:	f9b0 a000 	ldrsh.w	sl, [r0]
 800befe:	444b      	add	r3, r9
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	fa0f f883 	sxth.w	r8, r3
 800bf06:	45c2      	cmp	sl, r8
 800bf08:	da30      	bge.n	800bf6c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800bf0a:	8882      	ldrh	r2, [r0, #4]
 800bf0c:	4452      	add	r2, sl
 800bf0e:	b292      	uxth	r2, r2
 800bf10:	fa0f fe82 	sxth.w	lr, r2
 800bf14:	45f1      	cmp	r9, lr
 800bf16:	da29      	bge.n	800bf6c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800bf18:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800bf1c:	88cc      	ldrh	r4, [r1, #6]
 800bf1e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800bf22:	442c      	add	r4, r5
 800bf24:	b224      	sxth	r4, r4
 800bf26:	42a6      	cmp	r6, r4
 800bf28:	da20      	bge.n	800bf6c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800bf2a:	88c7      	ldrh	r7, [r0, #6]
 800bf2c:	4437      	add	r7, r6
 800bf2e:	b2bf      	uxth	r7, r7
 800bf30:	fa0f fc87 	sxth.w	ip, r7
 800bf34:	4565      	cmp	r5, ip
 800bf36:	da19      	bge.n	800bf6c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800bf38:	45ca      	cmp	sl, r9
 800bf3a:	4654      	mov	r4, sl
 800bf3c:	bfb8      	it	lt
 800bf3e:	464c      	movlt	r4, r9
 800bf40:	42b5      	cmp	r5, r6
 800bf42:	bfb8      	it	lt
 800bf44:	4635      	movlt	r5, r6
 800bf46:	45f0      	cmp	r8, lr
 800bf48:	bfc8      	it	gt
 800bf4a:	4613      	movgt	r3, r2
 800bf4c:	1b1b      	subs	r3, r3, r4
 800bf4e:	8083      	strh	r3, [r0, #4]
 800bf50:	88ca      	ldrh	r2, [r1, #6]
 800bf52:	884b      	ldrh	r3, [r1, #2]
 800bf54:	8004      	strh	r4, [r0, #0]
 800bf56:	4413      	add	r3, r2
 800bf58:	8045      	strh	r5, [r0, #2]
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	b21a      	sxth	r2, r3
 800bf5e:	4594      	cmp	ip, r2
 800bf60:	bfb8      	it	lt
 800bf62:	463b      	movlt	r3, r7
 800bf64:	1b5b      	subs	r3, r3, r5
 800bf66:	80c3      	strh	r3, [r0, #6]
 800bf68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	8003      	strh	r3, [r0, #0]
 800bf70:	8043      	strh	r3, [r0, #2]
 800bf72:	8083      	strh	r3, [r0, #4]
 800bf74:	80c3      	strh	r3, [r0, #6]
 800bf76:	e7f7      	b.n	800bf68 <_ZN8touchgfx4RectaNERKS0_+0x78>

0800bf78 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800bf78:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800bf7c:	b12b      	cbz	r3, 800bf8a <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 800bf7e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800bf82:	fab0 f080 	clz	r0, r0
 800bf86:	0940      	lsrs	r0, r0, #5
 800bf88:	4770      	bx	lr
 800bf8a:	2001      	movs	r0, #1
 800bf8c:	4770      	bx	lr

0800bf8e <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800bf8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf92:	2300      	movs	r3, #0
 800bf94:	4604      	mov	r4, r0
 800bf96:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800bf98:	8003      	strh	r3, [r0, #0]
 800bf9a:	8043      	strh	r3, [r0, #2]
 800bf9c:	8083      	strh	r3, [r0, #4]
 800bf9e:	80c3      	strh	r3, [r0, #6]
 800bfa0:	2d00      	cmp	r5, #0
 800bfa2:	d040      	beq.n	800c026 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800bfa4:	1d28      	adds	r0, r5, #4
 800bfa6:	f7ff ffe7 	bl	800bf78 <_ZNK8touchgfx4Rect7isEmptyEv>
 800bfaa:	b988      	cbnz	r0, 800bfd0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800bfac:	4620      	mov	r0, r4
 800bfae:	f7ff ffe3 	bl	800bf78 <_ZNK8touchgfx4Rect7isEmptyEv>
 800bfb2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800bfb6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800bfba:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800bfbe:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800bfc2:	b138      	cbz	r0, 800bfd4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800bfc4:	8022      	strh	r2, [r4, #0]
 800bfc6:	8063      	strh	r3, [r4, #2]
 800bfc8:	f8a4 e004 	strh.w	lr, [r4, #4]
 800bfcc:	f8a4 c006 	strh.w	ip, [r4, #6]
 800bfd0:	69ad      	ldr	r5, [r5, #24]
 800bfd2:	e7e5      	b.n	800bfa0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800bfd4:	f9b4 0000 	ldrsh.w	r0, [r4]
 800bfd8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800bfdc:	4290      	cmp	r0, r2
 800bfde:	4607      	mov	r7, r0
 800bfe0:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800bfe4:	460e      	mov	r6, r1
 800bfe6:	bfa8      	it	ge
 800bfe8:	4617      	movge	r7, r2
 800bfea:	4299      	cmp	r1, r3
 800bfec:	4472      	add	r2, lr
 800bfee:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800bff2:	bfa8      	it	ge
 800bff4:	461e      	movge	r6, r3
 800bff6:	4440      	add	r0, r8
 800bff8:	4471      	add	r1, lr
 800bffa:	4463      	add	r3, ip
 800bffc:	b200      	sxth	r0, r0
 800bffe:	8027      	strh	r7, [r4, #0]
 800c000:	b212      	sxth	r2, r2
 800c002:	8066      	strh	r6, [r4, #2]
 800c004:	b209      	sxth	r1, r1
 800c006:	b21b      	sxth	r3, r3
 800c008:	4290      	cmp	r0, r2
 800c00a:	bfac      	ite	ge
 800c00c:	ebc7 0200 	rsbge	r2, r7, r0
 800c010:	ebc7 0202 	rsblt	r2, r7, r2
 800c014:	4299      	cmp	r1, r3
 800c016:	bfac      	ite	ge
 800c018:	ebc6 0301 	rsbge	r3, r6, r1
 800c01c:	ebc6 0303 	rsblt	r3, r6, r3
 800c020:	80a2      	strh	r2, [r4, #4]
 800c022:	80e3      	strh	r3, [r4, #6]
 800c024:	e7d4      	b.n	800bfd0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800c026:	4620      	mov	r0, r4
 800c028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c02c <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800c02c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c030:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800c034:	b383      	cbz	r3, 800c098 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800c036:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c038:	b374      	cbz	r4, 800c098 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800c03a:	f9b1 5000 	ldrsh.w	r5, [r1]
 800c03e:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800c042:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800c046:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800c04a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c04e:	b303      	cbz	r3, 800c092 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800c050:	4668      	mov	r0, sp
 800c052:	1d21      	adds	r1, r4, #4
 800c054:	f8ad 5000 	strh.w	r5, [sp]
 800c058:	f8ad 6002 	strh.w	r6, [sp, #2]
 800c05c:	f8ad 7004 	strh.w	r7, [sp, #4]
 800c060:	f8ad 8006 	strh.w	r8, [sp, #6]
 800c064:	f7ff ff44 	bl	800bef0 <_ZN8touchgfx4RectaNERKS0_>
 800c068:	4668      	mov	r0, sp
 800c06a:	f7ff ff85 	bl	800bf78 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c06e:	b980      	cbnz	r0, 800c092 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800c070:	f8bd 3000 	ldrh.w	r3, [sp]
 800c074:	4669      	mov	r1, sp
 800c076:	88a2      	ldrh	r2, [r4, #4]
 800c078:	4620      	mov	r0, r4
 800c07a:	1a9b      	subs	r3, r3, r2
 800c07c:	88e2      	ldrh	r2, [r4, #6]
 800c07e:	f8ad 3000 	strh.w	r3, [sp]
 800c082:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c086:	1a9b      	subs	r3, r3, r2
 800c088:	f8ad 3002 	strh.w	r3, [sp, #2]
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	4798      	blx	r3
 800c092:	69a4      	ldr	r4, [r4, #24]
 800c094:	2c00      	cmp	r4, #0
 800c096:	d1d8      	bne.n	800c04a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800c098:	b002      	add	sp, #8
 800c09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c09e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800c09e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0a0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800c0a4:	460d      	mov	r5, r1
 800c0a6:	4616      	mov	r6, r2
 800c0a8:	b323      	cbz	r3, 800c0f4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800c0aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c0ac:	b314      	cbz	r4, 800c0f4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800c0ae:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c0b2:	b1eb      	cbz	r3, 800c0f0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800c0b4:	6828      	ldr	r0, [r5, #0]
 800c0b6:	466b      	mov	r3, sp
 800c0b8:	6869      	ldr	r1, [r5, #4]
 800c0ba:	c303      	stmia	r3!, {r0, r1}
 800c0bc:	4668      	mov	r0, sp
 800c0be:	1d21      	adds	r1, r4, #4
 800c0c0:	f7ff ff16 	bl	800bef0 <_ZN8touchgfx4RectaNERKS0_>
 800c0c4:	4668      	mov	r0, sp
 800c0c6:	f7ff ff57 	bl	800bf78 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c0ca:	b988      	cbnz	r0, 800c0f0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800c0cc:	f8bd 3000 	ldrh.w	r3, [sp]
 800c0d0:	4669      	mov	r1, sp
 800c0d2:	88a2      	ldrh	r2, [r4, #4]
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	1a9b      	subs	r3, r3, r2
 800c0d8:	88e2      	ldrh	r2, [r4, #6]
 800c0da:	f8ad 3000 	strh.w	r3, [sp]
 800c0de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c0e2:	1a9b      	subs	r3, r3, r2
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	f8ad 3002 	strh.w	r3, [sp, #2]
 800c0ea:	6823      	ldr	r3, [r4, #0]
 800c0ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0ee:	4798      	blx	r3
 800c0f0:	69a4      	ldr	r4, [r4, #24]
 800c0f2:	e7db      	b.n	800c0ac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800c0f4:	b002      	add	sp, #8
 800c0f6:	bd70      	pop	{r4, r5, r6, pc}

0800c0f8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 800c0f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c0fc:	4770      	bx	lr

0800c0fe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800c0fe:	6803      	ldr	r3, [r0, #0]
 800c100:	b513      	push	{r0, r1, r4, lr}
 800c102:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800c106:	2300      	movs	r3, #0
 800c108:	e9cd 3300 	strd	r3, r3, [sp]
 800c10c:	466b      	mov	r3, sp
 800c10e:	47a0      	blx	r4
 800c110:	b002      	add	sp, #8
 800c112:	bd10      	pop	{r4, pc}

0800c114 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800c114:	2301      	movs	r3, #1
 800c116:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800c11a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800c11e:	4770      	bx	lr

0800c120 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800c120:	2301      	movs	r3, #1
 800c122:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800c126:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800c12a:	4770      	bx	lr

0800c12c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800c12c:	6843      	ldr	r3, [r0, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	725a      	strb	r2, [r3, #9]
 800c132:	6840      	ldr	r0, [r0, #4]
 800c134:	6803      	ldr	r3, [r0, #0]
 800c136:	691b      	ldr	r3, [r3, #16]
 800c138:	4718      	bx	r3

0800c13a <_ZN8touchgfx3HAL8flushDMAEv>:
 800c13a:	6840      	ldr	r0, [r0, #4]
 800c13c:	6803      	ldr	r3, [r0, #0]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	4718      	bx	r3
	...

0800c144 <_ZN8touchgfx3HAL10beginFrameEv>:
 800c144:	4b04      	ldr	r3, [pc, #16]	; (800c158 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	b123      	cbz	r3, 800c154 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800c14a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800c14e:	f080 0001 	eor.w	r0, r0, #1
 800c152:	4770      	bx	lr
 800c154:	2001      	movs	r0, #1
 800c156:	4770      	bx	lr
 800c158:	200010fe 	.word	0x200010fe

0800c15c <_ZN8touchgfx3HAL8endFrameEv>:
 800c15c:	b510      	push	{r4, lr}
 800c15e:	4604      	mov	r4, r0
 800c160:	6840      	ldr	r0, [r0, #4]
 800c162:	6803      	ldr	r3, [r0, #0]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	4798      	blx	r3
 800c168:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800c16c:	b113      	cbz	r3, 800c174 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800c16e:	2301      	movs	r3, #1
 800c170:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800c174:	bd10      	pop	{r4, pc}

0800c176 <_ZN8touchgfx3HAL9taskEntryEv>:
 800c176:	b508      	push	{r3, lr}
 800c178:	6803      	ldr	r3, [r0, #0]
 800c17a:	4604      	mov	r4, r0
 800c17c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c17e:	4798      	blx	r3
 800c180:	6823      	ldr	r3, [r4, #0]
 800c182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c184:	4620      	mov	r0, r4
 800c186:	4798      	blx	r3
 800c188:	f7fa fca6 	bl	8006ad8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800c18c:	6823      	ldr	r3, [r4, #0]
 800c18e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c190:	e7f8      	b.n	800c184 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0800c194 <_ZN8touchgfx3HAL4tickEv>:
 800c194:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c196:	6803      	ldr	r3, [r0, #0]
 800c198:	4604      	mov	r4, r0
 800c19a:	4d5c      	ldr	r5, [pc, #368]	; (800c30c <_ZN8touchgfx3HAL4tickEv+0x178>)
 800c19c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c1a0:	4798      	blx	r3
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	f000 8097 	beq.w	800c2d6 <_ZN8touchgfx3HAL4tickEv+0x142>
 800c1a8:	2001      	movs	r0, #1
 800c1aa:	2600      	movs	r6, #0
 800c1ac:	f7fc faf4 	bl	8008798 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800c1b0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800c1b4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800c1b8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800c1bc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800c1c0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800c1c4:	b133      	cbz	r3, 800c1d4 <_ZN8touchgfx3HAL4tickEv+0x40>
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c1ce:	4798      	blx	r3
 800c1d0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800c1d4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800c1d8:	2601      	movs	r6, #1
 800c1da:	6862      	ldr	r2, [r4, #4]
 800c1dc:	f083 0301 	eor.w	r3, r3, #1
 800c1e0:	702e      	strb	r6, [r5, #0]
 800c1e2:	7253      	strb	r3, [r2, #9]
 800c1e4:	f002 fb8a 	bl	800e8fc <_ZN8touchgfx11Application11getInstanceEv>
 800c1e8:	6803      	ldr	r3, [r0, #0]
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ee:	4798      	blx	r3
 800c1f0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800c1f4:	b90b      	cbnz	r3, 800c1fa <_ZN8touchgfx3HAL4tickEv+0x66>
 800c1f6:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800c1fa:	f002 fb7f 	bl	800e8fc <_ZN8touchgfx11Application11getInstanceEv>
 800c1fe:	6803      	ldr	r3, [r0, #0]
 800c200:	695b      	ldr	r3, [r3, #20]
 800c202:	4798      	blx	r3
 800c204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c206:	6803      	ldr	r3, [r0, #0]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	4798      	blx	r3
 800c20c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800c210:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800c214:	3b01      	subs	r3, #1
 800c216:	b2db      	uxtb	r3, r3
 800c218:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800c21c:	b10a      	cbz	r2, 800c222 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1eb      	bne.n	800c1fa <_ZN8touchgfx3HAL4tickEv+0x66>
 800c222:	4a3b      	ldr	r2, [pc, #236]	; (800c310 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800c224:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800c228:	7813      	ldrb	r3, [r2, #0]
 800c22a:	3301      	adds	r3, #1
 800c22c:	b25b      	sxtb	r3, r3
 800c22e:	4299      	cmp	r1, r3
 800c230:	7013      	strb	r3, [r2, #0]
 800c232:	dc10      	bgt.n	800c256 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800c234:	2300      	movs	r3, #0
 800c236:	68e0      	ldr	r0, [r4, #12]
 800c238:	a902      	add	r1, sp, #8
 800c23a:	7013      	strb	r3, [r2, #0]
 800c23c:	aa03      	add	r2, sp, #12
 800c23e:	6803      	ldr	r3, [r0, #0]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	4798      	blx	r3
 800c244:	6823      	ldr	r3, [r4, #0]
 800c246:	2800      	cmp	r0, #0
 800c248:	d051      	beq.n	800c2ee <_ZN8touchgfx3HAL4tickEv+0x15a>
 800c24a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c24e:	4620      	mov	r0, r4
 800c250:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c254:	4798      	blx	r3
 800c256:	2300      	movs	r3, #0
 800c258:	6960      	ldr	r0, [r4, #20]
 800c25a:	f88d 3007 	strb.w	r3, [sp, #7]
 800c25e:	b158      	cbz	r0, 800c278 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800c260:	6803      	ldr	r3, [r0, #0]
 800c262:	f10d 0107 	add.w	r1, sp, #7
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	4798      	blx	r3
 800c26a:	b128      	cbz	r0, 800c278 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800c26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c26e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c272:	6803      	ldr	r3, [r0, #0]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	4798      	blx	r3
 800c278:	f104 001c 	add.w	r0, r4, #28
 800c27c:	f00c fbcc 	bl	8018a18 <_ZN8touchgfx8Gestures4tickEv>
 800c280:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800c284:	b30b      	cbz	r3, 800c2ca <_ZN8touchgfx3HAL4tickEv+0x136>
 800c286:	6920      	ldr	r0, [r4, #16]
 800c288:	6803      	ldr	r3, [r0, #0]
 800c28a:	691b      	ldr	r3, [r3, #16]
 800c28c:	4798      	blx	r3
 800c28e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c290:	4606      	mov	r6, r0
 800c292:	b903      	cbnz	r3, 800c296 <_ZN8touchgfx3HAL4tickEv+0x102>
 800c294:	6720      	str	r0, [r4, #112]	; 0x70
 800c296:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c298:	4a1e      	ldr	r2, [pc, #120]	; (800c314 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800c29a:	1af3      	subs	r3, r6, r3
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d914      	bls.n	800c2ca <_ZN8touchgfx3HAL4tickEv+0x136>
 800c2a0:	6920      	ldr	r0, [r4, #16]
 800c2a2:	6803      	ldr	r3, [r0, #0]
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	4798      	blx	r3
 800c2a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c2aa:	2264      	movs	r2, #100	; 0x64
 800c2ac:	1af3      	subs	r3, r6, r3
 800c2ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2b2:	fbb0 f0f3 	udiv	r0, r0, r3
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	dc1e      	bgt.n	800c2f8 <_ZN8touchgfx3HAL4tickEv+0x164>
 800c2ba:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800c2be:	6920      	ldr	r0, [r4, #16]
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	6803      	ldr	r3, [r0, #0]
 800c2c4:	69db      	ldr	r3, [r3, #28]
 800c2c6:	4798      	blx	r3
 800c2c8:	6726      	str	r6, [r4, #112]	; 0x70
 800c2ca:	f002 fb17 	bl	800e8fc <_ZN8touchgfx11Application11getInstanceEv>
 800c2ce:	6803      	ldr	r3, [r0, #0]
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d4:	4798      	blx	r3
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2de:	4798      	blx	r3
 800c2e0:	2001      	movs	r0, #1
 800c2e2:	f7fc fa64 	bl	80087ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	702b      	strb	r3, [r5, #0]
 800c2ea:	b004      	add	sp, #16
 800c2ec:	bd70      	pop	{r4, r5, r6, pc}
 800c2ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	4798      	blx	r3
 800c2f6:	e7ae      	b.n	800c256 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800c2f8:	2863      	cmp	r0, #99	; 0x63
 800c2fa:	bfcb      	itete	gt
 800c2fc:	2300      	movgt	r3, #0
 800c2fe:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800c302:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800c306:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800c30a:	e7d8      	b.n	800c2be <_ZN8touchgfx3HAL4tickEv+0x12a>
 800c30c:	20001104 	.word	0x20001104
 800c310:	20001105 	.word	0x20001105
 800c314:	05f5e100 	.word	0x05f5e100

0800c318 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800c318:	f7fa bbae 	b.w	8006a78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800c31c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800c31c:	6581      	str	r1, [r0, #88]	; 0x58
 800c31e:	301c      	adds	r0, #28
 800c320:	f00c bb78 	b.w	8018a14 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800c324 <_ZN8touchgfx3HAL5touchEll>:
 800c324:	b530      	push	{r4, r5, lr}
 800c326:	b087      	sub	sp, #28
 800c328:	4604      	mov	r4, r0
 800c32a:	a804      	add	r0, sp, #16
 800c32c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800c330:	f002 f886 	bl	800e440 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800c334:	9b04      	ldr	r3, [sp, #16]
 800c336:	a906      	add	r1, sp, #24
 800c338:	a803      	add	r0, sp, #12
 800c33a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c33e:	9b05      	ldr	r3, [sp, #20]
 800c340:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800c344:	f002 f8ca 	bl	800e4dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800c348:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800c34c:	f104 001c 	add.w	r0, r4, #28
 800c350:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800c354:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c358:	b189      	cbz	r1, 800c37e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800c35a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	4613      	mov	r3, r2
 800c362:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800c366:	462a      	mov	r2, r5
 800c368:	f00c fb64 	bl	8018a34 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800c36c:	b128      	cbz	r0, 800c37a <_ZN8touchgfx3HAL5touchEll+0x56>
 800c36e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800c372:	65e3      	str	r3, [r4, #92]	; 0x5c
 800c374:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800c378:	6623      	str	r3, [r4, #96]	; 0x60
 800c37a:	b007      	add	sp, #28
 800c37c:	bd30      	pop	{r4, r5, pc}
 800c37e:	f00c fb9d 	bl	8018abc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800c382:	2301      	movs	r3, #1
 800c384:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800c388:	e7f1      	b.n	800c36e <_ZN8touchgfx3HAL5touchEll+0x4a>

0800c38a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800c38a:	b570      	push	{r4, r5, r6, lr}
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d050      	beq.n	800c432 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800c390:	ea81 0002 	eor.w	r0, r1, r2
 800c394:	07c6      	lsls	r6, r0, #31
 800c396:	d508      	bpl.n	800c3aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800c398:	3a01      	subs	r2, #1
 800c39a:	18cc      	adds	r4, r1, r3
 800c39c:	42a1      	cmp	r1, r4
 800c39e:	d048      	beq.n	800c432 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800c3a0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800c3a4:	f801 0b01 	strb.w	r0, [r1], #1
 800c3a8:	e7f8      	b.n	800c39c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800c3aa:	07d5      	lsls	r5, r2, #31
 800c3ac:	bf42      	ittt	mi
 800c3ae:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800c3b2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800c3b6:	f801 0b01 	strbmi.w	r0, [r1], #1
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d915      	bls.n	800c3ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800c3be:	ea82 0001 	eor.w	r0, r2, r1
 800c3c2:	0784      	lsls	r4, r0, #30
 800c3c4:	d02d      	beq.n	800c422 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 800c3c6:	1e94      	subs	r4, r2, #2
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	18ce      	adds	r6, r1, r3
 800c3cc:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 800c3d0:	f820 5b02 	strh.w	r5, [r0], #2
 800c3d4:	1a35      	subs	r5, r6, r0
 800c3d6:	2d01      	cmp	r5, #1
 800c3d8:	d8f8      	bhi.n	800c3cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 800c3da:	1e98      	subs	r0, r3, #2
 800c3dc:	f003 0301 	and.w	r3, r3, #1
 800c3e0:	f020 0001 	bic.w	r0, r0, #1
 800c3e4:	3002      	adds	r0, #2
 800c3e6:	4401      	add	r1, r0
 800c3e8:	4402      	add	r2, r0
 800c3ea:	1f14      	subs	r4, r2, #4
 800c3ec:	4608      	mov	r0, r1
 800c3ee:	18ce      	adds	r6, r1, r3
 800c3f0:	1a35      	subs	r5, r6, r0
 800c3f2:	2d03      	cmp	r5, #3
 800c3f4:	d810      	bhi.n	800c418 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 800c3f6:	089c      	lsrs	r4, r3, #2
 800c3f8:	00a0      	lsls	r0, r4, #2
 800c3fa:	4401      	add	r1, r0
 800c3fc:	3801      	subs	r0, #1
 800c3fe:	4402      	add	r2, r0
 800c400:	f06f 0003 	mvn.w	r0, #3
 800c404:	fb00 3404 	mla	r4, r0, r4, r3
 800c408:	440c      	add	r4, r1
 800c40a:	42a1      	cmp	r1, r4
 800c40c:	d011      	beq.n	800c432 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800c40e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c412:	f801 3b01 	strb.w	r3, [r1], #1
 800c416:	e7f8      	b.n	800c40a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 800c418:	f854 5f04 	ldr.w	r5, [r4, #4]!
 800c41c:	f840 5b04 	str.w	r5, [r0], #4
 800c420:	e7e6      	b.n	800c3f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 800c422:	0790      	lsls	r0, r2, #30
 800c424:	d0e1      	beq.n	800c3ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800c426:	f832 0b02 	ldrh.w	r0, [r2], #2
 800c42a:	3b02      	subs	r3, #2
 800c42c:	f821 0b02 	strh.w	r0, [r1], #2
 800c430:	e7db      	b.n	800c3ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800c432:	2001      	movs	r0, #1
 800c434:	bd70      	pop	{r4, r5, r6, pc}

0800c436 <_ZN8touchgfx3HAL7noTouchEv>:
 800c436:	b510      	push	{r4, lr}
 800c438:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800c43c:	4604      	mov	r4, r0
 800c43e:	b153      	cbz	r3, 800c456 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800c440:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800c444:	2101      	movs	r1, #1
 800c446:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800c44a:	301c      	adds	r0, #28
 800c44c:	f00c fb36 	bl	8018abc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800c450:	2300      	movs	r3, #0
 800c452:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800c456:	bd10      	pop	{r4, pc}

0800c458 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800c458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c45c:	4605      	mov	r5, r0
 800c45e:	6980      	ldr	r0, [r0, #24]
 800c460:	b085      	sub	sp, #20
 800c462:	460f      	mov	r7, r1
 800c464:	4690      	mov	r8, r2
 800c466:	4699      	mov	r9, r3
 800c468:	b930      	cbnz	r0, 800c478 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800c46a:	4b1f      	ldr	r3, [pc, #124]	; (800c4e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800c46c:	f44f 7198 	mov.w	r1, #304	; 0x130
 800c470:	4a1e      	ldr	r2, [pc, #120]	; (800c4ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800c472:	481f      	ldr	r0, [pc, #124]	; (800c4f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 800c474:	f00c fbb4 	bl	8018be0 <__assert_func>
 800c478:	ac04      	add	r4, sp, #16
 800c47a:	2600      	movs	r6, #0
 800c47c:	f844 6d04 	str.w	r6, [r4, #-4]!
 800c480:	6806      	ldr	r6, [r0, #0]
 800c482:	9401      	str	r4, [sp, #4]
 800c484:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800c488:	9400      	str	r4, [sp, #0]
 800c48a:	6834      	ldr	r4, [r6, #0]
 800c48c:	47a0      	blx	r4
 800c48e:	4c19      	ldr	r4, [pc, #100]	; (800c4f4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 800c490:	4606      	mov	r6, r0
 800c492:	f8a4 9000 	strh.w	r9, [r4]
 800c496:	f7fa fe81 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800c49a:	6803      	ldr	r3, [r0, #0]
 800c49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49e:	4798      	blx	r3
 800c4a0:	280c      	cmp	r0, #12
 800c4a2:	d80f      	bhi.n	800c4c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 800c4a4:	e8df f000 	tbb	[pc, r0]
 800c4a8:	1b1b1207 	.word	0x1b1b1207
 800c4ac:	1b1b1b1b 	.word	0x1b1b1b1b
 800c4b0:	1b1b1b1b 	.word	0x1b1b1b1b
 800c4b4:	1b          	.byte	0x1b
 800c4b5:	00          	.byte	0x00
 800c4b6:	8823      	ldrh	r3, [r4, #0]
 800c4b8:	fb08 7203 	mla	r2, r8, r3, r7
 800c4bc:	9b03      	ldr	r3, [sp, #12]
 800c4be:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800c4c2:	63eb      	str	r3, [r5, #60]	; 0x3c
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	b005      	add	sp, #20
 800c4c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4cc:	8822      	ldrh	r2, [r4, #0]
 800c4ce:	9b03      	ldr	r3, [sp, #12]
 800c4d0:	fb08 7202 	mla	r2, r8, r2, r7
 800c4d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c4d8:	1a9a      	subs	r2, r3, r2
 800c4da:	63ea      	str	r2, [r5, #60]	; 0x3c
 800c4dc:	e7f2      	b.n	800c4c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 800c4de:	4b06      	ldr	r3, [pc, #24]	; (800c4f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 800c4e0:	f240 114d 	movw	r1, #333	; 0x14d
 800c4e4:	4a01      	ldr	r2, [pc, #4]	; (800c4ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800c4e6:	e7c4      	b.n	800c472 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800c4e8:	0801ad4d 	.word	0x0801ad4d
 800c4ec:	0801b05e 	.word	0x0801b05e
 800c4f0:	0801ad92 	.word	0x0801ad92
 800c4f4:	200010fa 	.word	0x200010fa
 800c4f8:	0801adb8 	.word	0x0801adb8

0800c4fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 800c4fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c500:	4698      	mov	r8, r3
 800c502:	6803      	ldr	r3, [r0, #0]
 800c504:	b087      	sub	sp, #28
 800c506:	460e      	mov	r6, r1
 800c508:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800c50a:	4617      	mov	r7, r2
 800c50c:	4b0d      	ldr	r3, [pc, #52]	; (800c544 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 800c50e:	4604      	mov	r4, r0
 800c510:	f8b3 9000 	ldrh.w	r9, [r3]
 800c514:	f7fa fe42 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800c518:	6803      	ldr	r3, [r0, #0]
 800c51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51c:	4798      	blx	r3
 800c51e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800c522:	463a      	mov	r2, r7
 800c524:	4631      	mov	r1, r6
 800c526:	9302      	str	r3, [sp, #8]
 800c528:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c532:	e9cd 9003 	strd	r9, r0, [sp, #12]
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	4620      	mov	r0, r4
 800c53a:	4643      	mov	r3, r8
 800c53c:	47a8      	blx	r5
 800c53e:	b007      	add	sp, #28
 800c540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c544:	200010fa 	.word	0x200010fa

0800c548 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800c548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54c:	4606      	mov	r6, r0
 800c54e:	b089      	sub	sp, #36	; 0x24
 800c550:	4610      	mov	r0, r2
 800c552:	460c      	mov	r4, r1
 800c554:	4691      	mov	r9, r2
 800c556:	4698      	mov	r8, r3
 800c558:	f004 f918 	bl	801078c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	f000 8092 	beq.w	800c686 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 800c562:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800c6a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800c566:	ad08      	add	r5, sp, #32
 800c568:	f8df b138 	ldr.w	fp, [pc, #312]	; 800c6a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 800c56c:	f8da 0000 	ldr.w	r0, [sl]
 800c570:	4f4a      	ldr	r7, [pc, #296]	; (800c69c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 800c572:	6802      	ldr	r2, [r0, #0]
 800c574:	6a12      	ldr	r2, [r2, #32]
 800c576:	4790      	blx	r2
 800c578:	f8da 0000 	ldr.w	r0, [sl]
 800c57c:	6802      	ldr	r2, [r0, #0]
 800c57e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c580:	4790      	blx	r2
 800c582:	f8bb 3000 	ldrh.w	r3, [fp]
 800c586:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 800c58a:	4628      	mov	r0, r5
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	883b      	ldrh	r3, [r7, #0]
 800c590:	9301      	str	r3, [sp, #4]
 800c592:	f004 f9bb 	bl	801090c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800c596:	f8ab 0000 	strh.w	r0, [fp]
 800c59a:	4628      	mov	r0, r5
 800c59c:	f004 f9f0 	bl	8010980 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800c5a0:	f8da b000 	ldr.w	fp, [sl]
 800c5a4:	8038      	strh	r0, [r7, #0]
 800c5a6:	4648      	mov	r0, r9
 800c5a8:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 800c5ac:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 800c5b0:	9302      	str	r3, [sp, #8]
 800c5b2:	f004 f8eb 	bl	801078c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800c5b6:	f8da 2000 	ldr.w	r2, [sl]
 800c5ba:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 800c5be:	63d0      	str	r0, [r2, #60]	; 0x3c
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	6822      	ldr	r2, [r4, #0]
 800c5c4:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 800c5c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	4798      	blx	r3
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 800c5da:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800c5de:	1d22      	adds	r2, r4, #4
 800c5e0:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 800c5e4:	2900      	cmp	r1, #0
 800c5e6:	d051      	beq.n	800c68c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 800c5e8:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 800c5ec:	2900      	cmp	r1, #0
 800c5ee:	d04d      	beq.n	800c68c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 800c5f0:	6810      	ldr	r0, [r2, #0]
 800c5f2:	f10d 0c18 	add.w	ip, sp, #24
 800c5f6:	6851      	ldr	r1, [r2, #4]
 800c5f8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800c5fc:	4641      	mov	r1, r8
 800c5fe:	a806      	add	r0, sp, #24
 800c600:	f7ff fc76 	bl	800bef0 <_ZN8touchgfx4RectaNERKS0_>
 800c604:	4628      	mov	r0, r5
 800c606:	f004 fb0d 	bl	8010c24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800c60a:	4680      	mov	r8, r0
 800c60c:	f7fa fdc6 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800c610:	6802      	ldr	r2, [r0, #0]
 800c612:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c614:	4790      	blx	r2
 800c616:	4580      	cmp	r8, r0
 800c618:	d03d      	beq.n	800c696 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 800c61a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800c61c:	b150      	cbz	r0, 800c634 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 800c61e:	4628      	mov	r0, r5
 800c620:	f004 fb00 	bl	8010c24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800c624:	4605      	mov	r5, r0
 800c626:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800c628:	6803      	ldr	r3, [r0, #0]
 800c62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62c:	4798      	blx	r3
 800c62e:	1a2b      	subs	r3, r5, r0
 800c630:	4258      	negs	r0, r3
 800c632:	4158      	adcs	r0, r3
 800c634:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 800c638:	2500      	movs	r5, #0
 800c63a:	6963      	ldr	r3, [r4, #20]
 800c63c:	4620      	mov	r0, r4
 800c63e:	6822      	ldr	r2, [r4, #0]
 800c640:	a906      	add	r1, sp, #24
 800c642:	6165      	str	r5, [r4, #20]
 800c644:	9303      	str	r3, [sp, #12]
 800c646:	6892      	ldr	r2, [r2, #8]
 800c648:	4790      	blx	r2
 800c64a:	9b03      	ldr	r3, [sp, #12]
 800c64c:	4620      	mov	r0, r4
 800c64e:	4652      	mov	r2, sl
 800c650:	6163      	str	r3, [r4, #20]
 800c652:	4649      	mov	r1, r9
 800c654:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 800c658:	6823      	ldr	r3, [r4, #0]
 800c65a:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 800c65e:	4c10      	ldr	r4, [pc, #64]	; (800c6a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 800c660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c662:	4798      	blx	r3
 800c664:	6820      	ldr	r0, [r4, #0]
 800c666:	9b02      	ldr	r3, [sp, #8]
 800c668:	9a00      	ldr	r2, [sp, #0]
 800c66a:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 800c66e:	4b0d      	ldr	r3, [pc, #52]	; (800c6a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 800c670:	801a      	strh	r2, [r3, #0]
 800c672:	4b0a      	ldr	r3, [pc, #40]	; (800c69c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 800c674:	9a01      	ldr	r2, [sp, #4]
 800c676:	801a      	strh	r2, [r3, #0]
 800c678:	6803      	ldr	r3, [r0, #0]
 800c67a:	6a1b      	ldr	r3, [r3, #32]
 800c67c:	4798      	blx	r3
 800c67e:	6820      	ldr	r0, [r4, #0]
 800c680:	6803      	ldr	r3, [r0, #0]
 800c682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c684:	4798      	blx	r3
 800c686:	b009      	add	sp, #36	; 0x24
 800c688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68c:	ab06      	add	r3, sp, #24
 800c68e:	6810      	ldr	r0, [r2, #0]
 800c690:	6851      	ldr	r1, [r2, #4]
 800c692:	c303      	stmia	r3!, {r0, r1}
 800c694:	e7b6      	b.n	800c604 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 800c696:	2000      	movs	r0, #0
 800c698:	e7cc      	b.n	800c634 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 800c69a:	bf00      	nop
 800c69c:	200010fc 	.word	0x200010fc
 800c6a0:	20001100 	.word	0x20001100
 800c6a4:	200010fa 	.word	0x200010fa

0800c6a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800c6a8:	4b07      	ldr	r3, [pc, #28]	; (800c6c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800c6aa:	b510      	push	{r4, lr}
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	b13b      	cbz	r3, 800c6c2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800c6b2:	6803      	ldr	r3, [r0, #0]
 800c6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b6:	4798      	blx	r3
 800c6b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c6ba:	4283      	cmp	r3, r0
 800c6bc:	d101      	bne.n	800c6c2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800c6be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800c6c0:	bd10      	pop	{r4, pc}
 800c6c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c6c4:	e7fc      	b.n	800c6c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800c6c6:	bf00      	nop
 800c6c8:	200010fe 	.word	0x200010fe

0800c6cc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800c6cc:	4b0b      	ldr	r3, [pc, #44]	; (800c6fc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 800c6ce:	b510      	push	{r4, lr}
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	b95b      	cbnz	r3, 800c6ee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c6d6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d007      	beq.n	800c6ee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c6de:	6840      	ldr	r0, [r0, #4]
 800c6e0:	f000 fbc8 	bl	800ce74 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800c6e4:	b118      	cbz	r0, 800c6ee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c6e6:	6862      	ldr	r2, [r4, #4]
 800c6e8:	7a53      	ldrb	r3, [r2, #9]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d0fc      	beq.n	800c6e8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800c6ee:	f7fa f9ad 	bl	8006a4c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f7ff ffd8 	bl	800c6a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c6f8:	bd10      	pop	{r4, pc}
 800c6fa:	bf00      	nop
 800c6fc:	200010fe 	.word	0x200010fe

0800c700 <_ZN8touchgfx3HAL10initializeEv>:
 800c700:	b510      	push	{r4, lr}
 800c702:	4604      	mov	r4, r0
 800c704:	f7fa f990 	bl	8006a28 <_ZN8touchgfx10OSWrappers10initializeEv>
 800c708:	6860      	ldr	r0, [r4, #4]
 800c70a:	6803      	ldr	r3, [r0, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	4798      	blx	r3
 800c710:	68e0      	ldr	r0, [r4, #12]
 800c712:	6803      	ldr	r3, [r0, #0]
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	4798      	blx	r3
 800c718:	6823      	ldr	r3, [r4, #0]
 800c71a:	4620      	mov	r0, r4
 800c71c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c71e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c722:	4718      	bx	r3

0800c724 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800c724:	b508      	push	{r3, lr}
 800c726:	290c      	cmp	r1, #12
 800c728:	d817      	bhi.n	800c75a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800c72a:	e8df f001 	tbb	[pc, r1]
 800c72e:	090b      	.short	0x090b
 800c730:	0d0d0d07 	.word	0x0d0d0d07
 800c734:	1414140d 	.word	0x1414140d
 800c738:	1414      	.short	0x1414
 800c73a:	0d          	.byte	0x0d
 800c73b:	00          	.byte	0x00
 800c73c:	2020      	movs	r0, #32
 800c73e:	bd08      	pop	{r3, pc}
 800c740:	2018      	movs	r0, #24
 800c742:	e7fc      	b.n	800c73e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800c744:	2010      	movs	r0, #16
 800c746:	e7fa      	b.n	800c73e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800c748:	4b05      	ldr	r3, [pc, #20]	; (800c760 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800c74a:	f44f 710c 	mov.w	r1, #560	; 0x230
 800c74e:	4a05      	ldr	r2, [pc, #20]	; (800c764 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800c750:	4805      	ldr	r0, [pc, #20]	; (800c768 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800c752:	f00c fa45 	bl	8018be0 <__assert_func>
 800c756:	2008      	movs	r0, #8
 800c758:	e7f1      	b.n	800c73e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800c75a:	2000      	movs	r0, #0
 800c75c:	e7ef      	b.n	800c73e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800c75e:	bf00      	nop
 800c760:	0801ae8b 	.word	0x0801ae8b
 800c764:	0801b220 	.word	0x0801b220
 800c768:	0801ad92 	.word	0x0801ad92

0800c76c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800c76c:	b570      	push	{r4, r5, r6, lr}
 800c76e:	460d      	mov	r5, r1
 800c770:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800c774:	4616      	mov	r6, r2
 800c776:	461c      	mov	r4, r3
 800c778:	f7ff ffd4 	bl	800c724 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800c77c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c780:	10c0      	asrs	r0, r0, #3
 800c782:	fb06 5101 	mla	r1, r6, r1, r5
 800c786:	fb00 4001 	mla	r0, r0, r1, r4
 800c78a:	bd70      	pop	{r4, r5, r6, pc}

0800c78c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 800c78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c790:	b08a      	sub	sp, #40	; 0x28
 800c792:	f04f 0c00 	mov.w	ip, #0
 800c796:	4604      	mov	r4, r0
 800c798:	469a      	mov	sl, r3
 800c79a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 800c79e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800c7a2:	f1b8 0f02 	cmp.w	r8, #2
 800c7a6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800c7aa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800c7ae:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800c7b2:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800c7b6:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 800c7ba:	f8cd c020 	str.w	ip, [sp, #32]
 800c7be:	d030      	beq.n	800c822 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 800c7c0:	2bff      	cmp	r3, #255	; 0xff
 800c7c2:	d12c      	bne.n	800c81e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 800c7c4:	4560      	cmp	r0, ip
 800c7c6:	bf14      	ite	ne
 800c7c8:	2004      	movne	r0, #4
 800c7ca:	2001      	moveq	r0, #1
 800c7cc:	9204      	str	r2, [sp, #16]
 800c7ce:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800c7d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c7d6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800c7da:	f8ad 6018 	strh.w	r6, [sp, #24]
 800c7de:	f8ad 501a 	strh.w	r5, [sp, #26]
 800c7e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f7ff ff5e 	bl	800c6a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c7ec:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	4651      	mov	r1, sl
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	e9cd 9700 	strd	r9, r7, [sp]
 800c7fa:	f7ff ffb7 	bl	800c76c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800c7fe:	f8ad 901e 	strh.w	r9, [sp, #30]
 800c802:	9005      	str	r0, [sp, #20]
 800c804:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 800c808:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800c80c:	b106      	cbz	r6, 800c810 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 800c80e:	b98d      	cbnz	r5, 800c834 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 800c810:	4b12      	ldr	r3, [pc, #72]	; (800c85c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 800c812:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800c816:	4a12      	ldr	r2, [pc, #72]	; (800c860 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800c818:	4812      	ldr	r0, [pc, #72]	; (800c864 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 800c81a:	f00c f9e1 	bl	8018be0 <__assert_func>
 800c81e:	2004      	movs	r0, #4
 800c820:	e7d4      	b.n	800c7cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800c822:	2bff      	cmp	r3, #255	; 0xff
 800c824:	d104      	bne.n	800c830 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 800c826:	2800      	cmp	r0, #0
 800c828:	bf14      	ite	ne
 800c82a:	2040      	movne	r0, #64	; 0x40
 800c82c:	2020      	moveq	r0, #32
 800c82e:	e7cd      	b.n	800c7cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800c830:	2040      	movs	r0, #64	; 0x40
 800c832:	e7cb      	b.n	800c7cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	4620      	mov	r0, r4
 800c838:	9d02      	ldr	r5, [sp, #8]
 800c83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c83c:	4798      	blx	r3
 800c83e:	4228      	tst	r0, r5
 800c840:	d104      	bne.n	800c84c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 800c842:	4b09      	ldr	r3, [pc, #36]	; (800c868 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 800c844:	f240 11b1 	movw	r1, #433	; 0x1b1
 800c848:	4a05      	ldr	r2, [pc, #20]	; (800c860 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800c84a:	e7e5      	b.n	800c818 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 800c84c:	6860      	ldr	r0, [r4, #4]
 800c84e:	a902      	add	r1, sp, #8
 800c850:	6803      	ldr	r3, [r0, #0]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	4798      	blx	r3
 800c856:	b00a      	add	sp, #40	; 0x28
 800c858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c85c:	0801ae0e 	.word	0x0801ae0e
 800c860:	0801b0c2 	.word	0x0801b0c2
 800c864:	0801ad92 	.word	0x0801ad92
 800c868:	0801ae46 	.word	0x0801ae46

0800c86c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 800c86c:	b510      	push	{r4, lr}
 800c86e:	b08a      	sub	sp, #40	; 0x28
 800c870:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 800c874:	9408      	str	r4, [sp, #32]
 800c876:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 800c87a:	9407      	str	r4, [sp, #28]
 800c87c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 800c880:	9406      	str	r4, [sp, #24]
 800c882:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 800c886:	9405      	str	r4, [sp, #20]
 800c888:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 800c88c:	9404      	str	r4, [sp, #16]
 800c88e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800c892:	9403      	str	r4, [sp, #12]
 800c894:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 800c898:	9402      	str	r4, [sp, #8]
 800c89a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800c89e:	e9cd 3400 	strd	r3, r4, [sp]
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f7ff ff71 	bl	800c78c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800c8aa:	b00a      	add	sp, #40	; 0x28
 800c8ac:	bd10      	pop	{r4, pc}
	...

0800c8b0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 800c8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8b2:	b08b      	sub	sp, #44	; 0x2c
 800c8b4:	4616      	mov	r6, r2
 800c8b6:	460d      	mov	r5, r1
 800c8b8:	461f      	mov	r7, r3
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	f7fa fc6e 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800c8c0:	6803      	ldr	r3, [r0, #0]
 800c8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c4:	4798      	blx	r3
 800c8c6:	4b0e      	ldr	r3, [pc, #56]	; (800c900 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800c8d0:	881b      	ldrh	r3, [r3, #0]
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	9306      	str	r3, [sp, #24]
 800c8d6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800c8da:	9305      	str	r3, [sp, #20]
 800c8dc:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800c8e0:	9304      	str	r3, [sp, #16]
 800c8e2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c8e6:	9303      	str	r3, [sp, #12]
 800c8e8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800c8ec:	9302      	str	r3, [sp, #8]
 800c8ee:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c8f2:	e9cd 7300 	strd	r7, r3, [sp]
 800c8f6:	4633      	mov	r3, r6
 800c8f8:	f7ff ff48 	bl	800c78c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800c8fc:	b00b      	add	sp, #44	; 0x2c
 800c8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c900:	200010fa 	.word	0x200010fa

0800c904 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 800c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c908:	461f      	mov	r7, r3
 800c90a:	4b14      	ldr	r3, [pc, #80]	; (800c95c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 800c90c:	b08a      	sub	sp, #40	; 0x28
 800c90e:	4616      	mov	r6, r2
 800c910:	f8b3 8000 	ldrh.w	r8, [r3]
 800c914:	460d      	mov	r5, r1
 800c916:	4604      	mov	r4, r0
 800c918:	f7fa fc40 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800c91c:	6803      	ldr	r3, [r0, #0]
 800c91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c920:	4798      	blx	r3
 800c922:	2302      	movs	r3, #2
 800c924:	9008      	str	r0, [sp, #32]
 800c926:	2200      	movs	r2, #0
 800c928:	4629      	mov	r1, r5
 800c92a:	4620      	mov	r0, r4
 800c92c:	e9cd 8306 	strd	r8, r3, [sp, #24]
 800c930:	2301      	movs	r3, #1
 800c932:	9305      	str	r3, [sp, #20]
 800c934:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800c938:	9304      	str	r3, [sp, #16]
 800c93a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c93e:	9303      	str	r3, [sp, #12]
 800c940:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800c944:	9302      	str	r3, [sp, #8]
 800c946:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c94a:	e9cd 7300 	strd	r7, r3, [sp]
 800c94e:	4633      	mov	r3, r6
 800c950:	f7ff ff1c 	bl	800c78c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800c954:	b00a      	add	sp, #40	; 0x28
 800c956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c95a:	bf00      	nop
 800c95c:	200010fa 	.word	0x200010fa

0800c960 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 800c960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	b08b      	sub	sp, #44	; 0x2c
 800c966:	469b      	mov	fp, r3
 800c968:	4604      	mov	r4, r0
 800c96a:	4692      	mov	sl, r2
 800c96c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800c970:	2600      	movs	r6, #0
 800c972:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800c976:	4689      	mov	r9, r1
 800c978:	2fff      	cmp	r7, #255	; 0xff
 800c97a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800c97e:	9608      	str	r6, [sp, #32]
 800c980:	bf14      	ite	ne
 800c982:	2308      	movne	r3, #8
 800c984:	2302      	moveq	r3, #2
 800c986:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800c98a:	f7ff fe8d 	bl	800c6a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c98e:	465a      	mov	r2, fp
 800c990:	4603      	mov	r3, r0
 800c992:	4651      	mov	r1, sl
 800c994:	4620      	mov	r0, r4
 800c996:	e9cd 8500 	strd	r8, r5, [sp]
 800c99a:	f7ff fee7 	bl	800c76c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800c99e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800c9a2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800c9a6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c9aa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800c9ae:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800c9b2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c9b6:	6823      	ldr	r3, [r4, #0]
 800c9b8:	9d02      	ldr	r5, [sp, #8]
 800c9ba:	9005      	str	r0, [sp, #20]
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f8ad 601c 	strh.w	r6, [sp, #28]
 800c9c2:	f8ad 801e 	strh.w	r8, [sp, #30]
 800c9c6:	f8cd 9020 	str.w	r9, [sp, #32]
 800c9ca:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800c9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d0:	4798      	blx	r3
 800c9d2:	4228      	tst	r0, r5
 800c9d4:	d106      	bne.n	800c9e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 800c9d6:	4b07      	ldr	r3, [pc, #28]	; (800c9f4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 800c9d8:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800c9dc:	4a06      	ldr	r2, [pc, #24]	; (800c9f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 800c9de:	4807      	ldr	r0, [pc, #28]	; (800c9fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 800c9e0:	f00c f8fe 	bl	8018be0 <__assert_func>
 800c9e4:	6860      	ldr	r0, [r4, #4]
 800c9e6:	a902      	add	r1, sp, #8
 800c9e8:	6803      	ldr	r3, [r0, #0]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	4798      	blx	r3
 800c9ee:	b00b      	add	sp, #44	; 0x2c
 800c9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f4:	0801ae46 	.word	0x0801ae46
 800c9f8:	0801b18b 	.word	0x0801b18b
 800c9fc:	0801ad92 	.word	0x0801ad92

0800ca00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800ca00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ca04:	461f      	mov	r7, r3
 800ca06:	4b0b      	ldr	r3, [pc, #44]	; (800ca34 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800ca08:	460d      	mov	r5, r1
 800ca0a:	4616      	mov	r6, r2
 800ca0c:	f8b3 8000 	ldrh.w	r8, [r3]
 800ca10:	4604      	mov	r4, r0
 800ca12:	f7fa fbc3 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800ca16:	6803      	ldr	r3, [r0, #0]
 800ca18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca1a:	4798      	blx	r3
 800ca1c:	463b      	mov	r3, r7
 800ca1e:	4632      	mov	r2, r6
 800ca20:	4629      	mov	r1, r5
 800ca22:	e9cd 8000 	strd	r8, r0, [sp]
 800ca26:	4620      	mov	r0, r4
 800ca28:	f7ff fea0 	bl	800c76c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800ca2c:	b002      	add	sp, #8
 800ca2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca32:	bf00      	nop
 800ca34:	200010fa 	.word	0x200010fa

0800ca38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 800ca38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3c:	4698      	mov	r8, r3
 800ca3e:	b088      	sub	sp, #32
 800ca40:	2300      	movs	r3, #0
 800ca42:	4617      	mov	r7, r2
 800ca44:	4604      	mov	r4, r0
 800ca46:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800ca4a:	9306      	str	r3, [sp, #24]
 800ca4c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800ca50:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800ca54:	f8ad 6010 	strh.w	r6, [sp, #16]
 800ca58:	f8ad 5012 	strh.w	r5, [sp, #18]
 800ca5c:	e9cd 3100 	strd	r3, r1, [sp]
 800ca60:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ca64:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ca68:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800ca6c:	f88d 301c 	strb.w	r3, [sp, #28]
 800ca70:	f7ff fe1a 	bl	800c6a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ca74:	4642      	mov	r2, r8
 800ca76:	4603      	mov	r3, r0
 800ca78:	4639      	mov	r1, r7
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f7ff ffc0 	bl	800ca00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ca80:	4b16      	ldr	r3, [pc, #88]	; (800cadc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 800ca82:	9003      	str	r0, [sp, #12]
 800ca84:	881b      	ldrh	r3, [r3, #0]
 800ca86:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ca8a:	f7fa fb87 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800ca8e:	6803      	ldr	r3, [r0, #0]
 800ca90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca92:	4798      	blx	r3
 800ca94:	f88d 001e 	strb.w	r0, [sp, #30]
 800ca98:	f88d 001d 	strb.w	r0, [sp, #29]
 800ca9c:	b106      	cbz	r6, 800caa0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 800ca9e:	b935      	cbnz	r5, 800caae <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 800caa0:	4b0f      	ldr	r3, [pc, #60]	; (800cae0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 800caa2:	f240 11cd 	movw	r1, #461	; 0x1cd
 800caa6:	4a0f      	ldr	r2, [pc, #60]	; (800cae4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800caa8:	480f      	ldr	r0, [pc, #60]	; (800cae8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 800caaa:	f00c f899 	bl	8018be0 <__assert_func>
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	4620      	mov	r0, r4
 800cab2:	9d00      	ldr	r5, [sp, #0]
 800cab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab6:	4798      	blx	r3
 800cab8:	4228      	tst	r0, r5
 800caba:	d104      	bne.n	800cac6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 800cabc:	4b0b      	ldr	r3, [pc, #44]	; (800caec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 800cabe:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800cac2:	4a08      	ldr	r2, [pc, #32]	; (800cae4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800cac4:	e7f0      	b.n	800caa8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 800cac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cac8:	4669      	mov	r1, sp
 800caca:	6860      	ldr	r0, [r4, #4]
 800cacc:	9306      	str	r3, [sp, #24]
 800cace:	6803      	ldr	r3, [r0, #0]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	4798      	blx	r3
 800cad4:	b008      	add	sp, #32
 800cad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cada:	bf00      	nop
 800cadc:	200010fa 	.word	0x200010fa
 800cae0:	0801ae0e 	.word	0x0801ae0e
 800cae4:	0801af74 	.word	0x0801af74
 800cae8:	0801ad92 	.word	0x0801ad92
 800caec:	0801ae46 	.word	0x0801ae46

0800caf0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	b08a      	sub	sp, #40	; 0x28
 800caf4:	4604      	mov	r4, r0
 800caf6:	466b      	mov	r3, sp
 800caf8:	e883 0006 	stmia.w	r3, {r1, r2}
 800cafc:	4b1f      	ldr	r3, [pc, #124]	; (800cb7c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	b933      	cbnz	r3, 800cb10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800cb02:	4b1f      	ldr	r3, [pc, #124]	; (800cb80 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800cb04:	f240 11f9 	movw	r1, #505	; 0x1f9
 800cb08:	4a1e      	ldr	r2, [pc, #120]	; (800cb84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800cb0a:	481f      	ldr	r0, [pc, #124]	; (800cb88 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800cb0c:	f00c f868 	bl	8018be0 <__assert_func>
 800cb10:	2300      	movs	r3, #0
 800cb12:	f8bd 5000 	ldrh.w	r5, [sp]
 800cb16:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800cb1a:	9308      	str	r3, [sp, #32]
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	9302      	str	r3, [sp, #8]
 800cb20:	6803      	ldr	r3, [r0, #0]
 800cb22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb24:	4798      	blx	r3
 800cb26:	4632      	mov	r2, r6
 800cb28:	4629      	mov	r1, r5
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f7ff ff67 	bl	800ca00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800cb32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cb34:	9003      	str	r0, [sp, #12]
 800cb36:	9305      	str	r3, [sp, #20]
 800cb38:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800cb3c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cb40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cb44:	f8ad 301a 	strh.w	r3, [sp, #26]
 800cb48:	4b10      	ldr	r3, [pc, #64]	; (800cb8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800cb4a:	881b      	ldrh	r3, [r3, #0]
 800cb4c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cb50:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cb54:	f7fa fb22 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800cb58:	6803      	ldr	r3, [r0, #0]
 800cb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5c:	4798      	blx	r3
 800cb5e:	23ff      	movs	r3, #255	; 0xff
 800cb60:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800cb64:	a902      	add	r1, sp, #8
 800cb66:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800cb6a:	6860      	ldr	r0, [r4, #4]
 800cb6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800cb70:	6803      	ldr	r3, [r0, #0]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	4798      	blx	r3
 800cb76:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800cb78:	b00a      	add	sp, #40	; 0x28
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	200010ff 	.word	0x200010ff
 800cb80:	0801acdf 	.word	0x0801acdf
 800cb84:	0801b018 	.word	0x0801b018
 800cb88:	0801ad92 	.word	0x0801ad92
 800cb8c:	200010fa 	.word	0x200010fa

0800cb90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800cb90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb92:	b08b      	sub	sp, #44	; 0x2c
 800cb94:	4604      	mov	r4, r0
 800cb96:	466d      	mov	r5, sp
 800cb98:	e885 0006 	stmia.w	r5, {r1, r2}
 800cb9c:	461d      	mov	r5, r3
 800cb9e:	2300      	movs	r3, #0
 800cba0:	f8bd 6000 	ldrh.w	r6, [sp]
 800cba4:	9308      	str	r3, [sp, #32]
 800cba6:	2301      	movs	r3, #1
 800cba8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800cbac:	9302      	str	r3, [sp, #8]
 800cbae:	6803      	ldr	r3, [r0, #0]
 800cbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb2:	4798      	blx	r3
 800cbb4:	463a      	mov	r2, r7
 800cbb6:	4631      	mov	r1, r6
 800cbb8:	4603      	mov	r3, r0
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f7ff ff20 	bl	800ca00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800cbc0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800cbc4:	9003      	str	r0, [sp, #12]
 800cbc6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cbca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cbce:	9505      	str	r5, [sp, #20]
 800cbd0:	f8ad 301a 	strh.w	r3, [sp, #26]
 800cbd4:	4b0d      	ldr	r3, [pc, #52]	; (800cc0c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 800cbd6:	881b      	ldrh	r3, [r3, #0]
 800cbd8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cbdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbde:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cbe2:	f7fa fadb 	bl	800719c <_ZN8touchgfx3HAL3lcdEv>
 800cbe6:	6803      	ldr	r3, [r0, #0]
 800cbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbea:	4798      	blx	r3
 800cbec:	23ff      	movs	r3, #255	; 0xff
 800cbee:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800cbf2:	a902      	add	r1, sp, #8
 800cbf4:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800cbf8:	6860      	ldr	r0, [r4, #4]
 800cbfa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800cbfe:	6803      	ldr	r3, [r0, #0]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	4798      	blx	r3
 800cc04:	4628      	mov	r0, r5
 800cc06:	b00b      	add	sp, #44	; 0x2c
 800cc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	200010fa 	.word	0x200010fa

0800cc10 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800cc10:	b570      	push	{r4, r5, r6, lr}
 800cc12:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800cc16:	4604      	mov	r4, r0
 800cc18:	b19b      	cbz	r3, 800cc42 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800cc1a:	2002      	movs	r0, #2
 800cc1c:	f7fb fdd2 	bl	80087c4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800cc20:	2300      	movs	r3, #0
 800cc22:	4620      	mov	r0, r4
 800cc24:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800cc28:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800cc32:	f7ff fd39 	bl	800c6a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cc36:	4601      	mov	r1, r0
 800cc38:	4620      	mov	r0, r4
 800cc3a:	462b      	mov	r3, r5
 800cc3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc40:	4718      	bx	r3
 800cc42:	bd70      	pop	{r4, r5, r6, pc}

0800cc44 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800cc44:	4770      	bx	lr

0800cc46 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800cc46:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800cc4a:	1a13      	subs	r3, r2, r0
 800cc4c:	4258      	negs	r0, r3
 800cc4e:	4158      	adcs	r0, r3
 800cc50:	4770      	bx	lr

0800cc52 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800cc52:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800cc56:	1a9b      	subs	r3, r3, r2
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	bfdc      	itt	le
 800cc5c:	6882      	ldrle	r2, [r0, #8]
 800cc5e:	189b      	addle	r3, r3, r2
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	bfcc      	ite	gt
 800cc64:	2000      	movgt	r0, #0
 800cc66:	2001      	movle	r0, #1
 800cc68:	4770      	bx	lr

0800cc6a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800cc6a:	6902      	ldr	r2, [r0, #16]
 800cc6c:	6840      	ldr	r0, [r0, #4]
 800cc6e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800cc72:	4770      	bx	lr

0800cc74 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800cc74:	6803      	ldr	r3, [r0, #0]
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	4718      	bx	r3

0800cc7a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800cc7a:	4770      	bx	lr

0800cc7c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800cc7c:	4770      	bx	lr
	...

0800cc80 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800cc80:	2301      	movs	r3, #1
 800cc82:	b570      	push	{r4, r5, r6, lr}
 800cc84:	7203      	strb	r3, [r0, #8]
 800cc86:	4604      	mov	r4, r0
 800cc88:	6840      	ldr	r0, [r0, #4]
 800cc8a:	6803      	ldr	r3, [r0, #0]
 800cc8c:	699b      	ldr	r3, [r3, #24]
 800cc8e:	4798      	blx	r3
 800cc90:	6803      	ldr	r3, [r0, #0]
 800cc92:	4605      	mov	r5, r0
 800cc94:	2b08      	cmp	r3, #8
 800cc96:	d01e      	beq.n	800ccd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 800cc98:	d80b      	bhi.n	800ccb2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800cc9a:	2b02      	cmp	r3, #2
 800cc9c:	d027      	beq.n	800ccee <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800cc9e:	2b04      	cmp	r3, #4
 800cca0:	d011      	beq.n	800ccc6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d028      	beq.n	800ccf8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800cca6:	4b17      	ldr	r3, [pc, #92]	; (800cd04 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 800cca8:	218b      	movs	r1, #139	; 0x8b
 800ccaa:	4a17      	ldr	r2, [pc, #92]	; (800cd08 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 800ccac:	4817      	ldr	r0, [pc, #92]	; (800cd0c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 800ccae:	f00b ff97 	bl	8018be0 <__assert_func>
 800ccb2:	2b40      	cmp	r3, #64	; 0x40
 800ccb4:	d020      	beq.n	800ccf8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800ccb6:	d801      	bhi.n	800ccbc <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800ccb8:	2b20      	cmp	r3, #32
 800ccba:	e7f3      	b.n	800cca4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 800ccbc:	2b80      	cmp	r3, #128	; 0x80
 800ccbe:	d01b      	beq.n	800ccf8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800ccc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccc4:	e7ee      	b.n	800cca4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 800ccc6:	6823      	ldr	r3, [r4, #0]
 800ccc8:	7f01      	ldrb	r1, [r0, #28]
 800ccca:	4620      	mov	r0, r4
 800cccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccce:	4798      	blx	r3
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd4:	e006      	b.n	800cce4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	7f01      	ldrb	r1, [r0, #28]
 800ccda:	4620      	mov	r0, r4
 800ccdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccde:	4798      	blx	r3
 800cce0:	6823      	ldr	r3, [r4, #0]
 800cce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cce4:	4629      	mov	r1, r5
 800cce6:	4620      	mov	r0, r4
 800cce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccec:	4718      	bx	r3
 800ccee:	6823      	ldr	r3, [r4, #0]
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf4:	4798      	blx	r3
 800ccf6:	e7f3      	b.n	800cce0 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 800ccf8:	6823      	ldr	r3, [r4, #0]
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccfe:	4798      	blx	r3
 800cd00:	e7e6      	b.n	800ccd0 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 800cd02:	bf00      	nop
 800cd04:	0801b269 	.word	0x0801b269
 800cd08:	0801b378 	.word	0x0801b378
 800cd0c:	0801b28e 	.word	0x0801b28e

0800cd10 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800cd10:	b570      	push	{r4, r5, r6, lr}
 800cd12:	4604      	mov	r4, r0
 800cd14:	460e      	mov	r6, r1
 800cd16:	6860      	ldr	r0, [r4, #4]
 800cd18:	6803      	ldr	r3, [r0, #0]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	4798      	blx	r3
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	d1f9      	bne.n	800cd16 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800cd22:	4d0b      	ldr	r5, [pc, #44]	; (800cd50 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 800cd24:	6828      	ldr	r0, [r5, #0]
 800cd26:	6803      	ldr	r3, [r0, #0]
 800cd28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd2a:	4798      	blx	r3
 800cd2c:	f7f9 feb0 	bl	8006a90 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800cd30:	6860      	ldr	r0, [r4, #4]
 800cd32:	4631      	mov	r1, r6
 800cd34:	6803      	ldr	r3, [r0, #0]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	4798      	blx	r3
 800cd3a:	6823      	ldr	r3, [r4, #0]
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd40:	4798      	blx	r3
 800cd42:	6828      	ldr	r0, [r5, #0]
 800cd44:	6803      	ldr	r3, [r0, #0]
 800cd46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd4c:	4718      	bx	r3
 800cd4e:	bf00      	nop
 800cd50:	20001100 	.word	0x20001100

0800cd54 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800cd54:	b508      	push	{r3, lr}
 800cd56:	f7f9 fe79 	bl	8006a4c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800cd5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cd5e:	f7f9 be8b 	b.w	8006a78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800cd62 <_ZN8touchgfx13DMA_Interface5startEv>:
 800cd62:	b510      	push	{r4, lr}
 800cd64:	4604      	mov	r4, r0
 800cd66:	6840      	ldr	r0, [r0, #4]
 800cd68:	6803      	ldr	r3, [r0, #0]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4798      	blx	r3
 800cd6e:	b948      	cbnz	r0, 800cd84 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800cd70:	7a63      	ldrb	r3, [r4, #9]
 800cd72:	b13b      	cbz	r3, 800cd84 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800cd74:	7a23      	ldrb	r3, [r4, #8]
 800cd76:	b92b      	cbnz	r3, 800cd84 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800cd78:	6823      	ldr	r3, [r4, #0]
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd82:	4718      	bx	r3
 800cd84:	bd10      	pop	{r4, pc}
	...

0800cd88 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800cd88:	b510      	push	{r4, lr}
 800cd8a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 800cd8e:	1b12      	subs	r2, r2, r4
 800cd90:	2a00      	cmp	r2, #0
 800cd92:	bfdc      	itt	le
 800cd94:	6883      	ldrle	r3, [r0, #8]
 800cd96:	18d2      	addle	r2, r2, r3
 800cd98:	2a01      	cmp	r2, #1
 800cd9a:	dd18      	ble.n	800cdce <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 800cd9c:	6843      	ldr	r3, [r0, #4]
 800cd9e:	f101 021c 	add.w	r2, r1, #28
 800cda2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800cda6:	f851 4b04 	ldr.w	r4, [r1], #4
 800cdaa:	4291      	cmp	r1, r2
 800cdac:	f843 4b04 	str.w	r4, [r3], #4
 800cdb0:	d1f9      	bne.n	800cda6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 800cdb2:	880a      	ldrh	r2, [r1, #0]
 800cdb4:	801a      	strh	r2, [r3, #0]
 800cdb6:	788a      	ldrb	r2, [r1, #2]
 800cdb8:	709a      	strb	r2, [r3, #2]
 800cdba:	68c3      	ldr	r3, [r0, #12]
 800cdbc:	6882      	ldr	r2, [r0, #8]
 800cdbe:	f3bf 8f5b 	dmb	ish
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	bfd8      	it	le
 800cdc8:	1a9b      	suble	r3, r3, r2
 800cdca:	60c3      	str	r3, [r0, #12]
 800cdcc:	bd10      	pop	{r4, pc}
 800cdce:	4b03      	ldr	r3, [pc, #12]	; (800cddc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800cdd0:	2139      	movs	r1, #57	; 0x39
 800cdd2:	4a03      	ldr	r2, [pc, #12]	; (800cde0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 800cdd4:	4803      	ldr	r0, [pc, #12]	; (800cde4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 800cdd6:	f00b ff03 	bl	8018be0 <__assert_func>
 800cdda:	bf00      	nop
 800cddc:	0801b2b4 	.word	0x0801b2b4
 800cde0:	0801b3a8 	.word	0x0801b3a8
 800cde4:	0801b28e 	.word	0x0801b28e

0800cde8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800cde8:	b510      	push	{r4, lr}
 800cdea:	6803      	ldr	r3, [r0, #0]
 800cdec:	4604      	mov	r4, r0
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4798      	blx	r3
 800cdf2:	b128      	cbz	r0, 800ce00 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800cdf4:	4b07      	ldr	r3, [pc, #28]	; (800ce14 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800cdf6:	213f      	movs	r1, #63	; 0x3f
 800cdf8:	4a07      	ldr	r2, [pc, #28]	; (800ce18 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800cdfa:	4808      	ldr	r0, [pc, #32]	; (800ce1c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800cdfc:	f00b fef0 	bl	8018be0 <__assert_func>
 800ce00:	6923      	ldr	r3, [r4, #16]
 800ce02:	68a2      	ldr	r2, [r4, #8]
 800ce04:	f3bf 8f5b 	dmb	ish
 800ce08:	3301      	adds	r3, #1
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	bfd8      	it	le
 800ce0e:	1a9b      	suble	r3, r3, r2
 800ce10:	6123      	str	r3, [r4, #16]
 800ce12:	bd10      	pop	{r4, pc}
 800ce14:	0801b2d7 	.word	0x0801b2d7
 800ce18:	0801b3f6 	.word	0x0801b3f6
 800ce1c:	0801b28e 	.word	0x0801b28e

0800ce20 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	4604      	mov	r4, r0
 800ce24:	6840      	ldr	r0, [r0, #4]
 800ce26:	6803      	ldr	r3, [r0, #0]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4798      	blx	r3
 800ce2c:	4605      	mov	r5, r0
 800ce2e:	b930      	cbnz	r0, 800ce3e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ce30:	7a23      	ldrb	r3, [r4, #8]
 800ce32:	b123      	cbz	r3, 800ce3e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ce34:	6860      	ldr	r0, [r4, #4]
 800ce36:	6803      	ldr	r3, [r0, #0]
 800ce38:	695b      	ldr	r3, [r3, #20]
 800ce3a:	4798      	blx	r3
 800ce3c:	7225      	strb	r5, [r4, #8]
 800ce3e:	6860      	ldr	r0, [r4, #4]
 800ce40:	6803      	ldr	r3, [r0, #0]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4798      	blx	r3
 800ce46:	b928      	cbnz	r0, 800ce54 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800ce48:	6823      	ldr	r3, [r4, #0]
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce52:	4718      	bx	r3
 800ce54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce58:	f7f9 be26 	b.w	8006aa8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800ce5c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800ce5c:	b510      	push	{r4, lr}
 800ce5e:	6082      	str	r2, [r0, #8]
 800ce60:	2200      	movs	r2, #0
 800ce62:	4c03      	ldr	r4, [pc, #12]	; (800ce70 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800ce64:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800ce68:	e9c0 4100 	strd	r4, r1, [r0]
 800ce6c:	bd10      	pop	{r4, pc}
 800ce6e:	bf00      	nop
 800ce70:	0801b35c 	.word	0x0801b35c

0800ce74 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800ce74:	6840      	ldr	r0, [r0, #4]
 800ce76:	6803      	ldr	r3, [r0, #0]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4718      	bx	r3

0800ce7c <_ZN8touchgfx13ScalableImage8setAlphaEh>:
 800ce7c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
 800ce80:	4770      	bx	lr

0800ce82 <_ZNK8touchgfx13ScalableImage8getAlphaEv>:
 800ce82:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 800ce86:	4770      	bx	lr

0800ce88 <_ZN8touchgfx13ScalableImageD1Ev>:
 800ce88:	4770      	bx	lr

0800ce8a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 800ce8a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 800ce8e:	4770      	bx	lr

0800ce90 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 800ce90:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800ce94:	4770      	bx	lr

0800ce96 <_ZN8touchgfx13ScalableImageD0Ev>:
 800ce96:	b510      	push	{r4, lr}
 800ce98:	4604      	mov	r4, r0
 800ce9a:	212c      	movs	r1, #44	; 0x2c
 800ce9c:	f00b fe74 	bl	8018b88 <_ZdlPvj>
 800cea0:	4620      	mov	r0, r4
 800cea2:	bd10      	pop	{r4, pc}

0800cea4 <_ZN8touchgfx13ScalableImage9setBitmapERKNS_6BitmapE>:
 800cea4:	b570      	push	{r4, r5, r6, lr}
 800cea6:	4605      	mov	r5, r0
 800cea8:	880b      	ldrh	r3, [r1, #0]
 800ceaa:	4604      	mov	r4, r0
 800ceac:	8503      	strh	r3, [r0, #40]	; 0x28
 800ceae:	f855 3b28 	ldr.w	r3, [r5], #40
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800ceb6:	f003 fd29 	bl	801090c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ceba:	b201      	sxth	r1, r0
 800cebc:	4620      	mov	r0, r4
 800cebe:	47b0      	blx	r6
 800cec0:	6823      	ldr	r3, [r4, #0]
 800cec2:	4628      	mov	r0, r5
 800cec4:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800cec6:	f003 fd5b 	bl	8010980 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ceca:	b201      	sxth	r1, r0
 800cecc:	4620      	mov	r0, r4
 800cece:	4633      	mov	r3, r6
 800ced0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ced4:	4718      	bx	r3

0800ced6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 800ced6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ced8:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 800cedc:	4605      	mov	r5, r0
 800cede:	2bff      	cmp	r3, #255	; 0xff
 800cee0:	d007      	beq.n	800cef2 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x1c>
 800cee2:	2300      	movs	r3, #0
 800cee4:	802b      	strh	r3, [r5, #0]
 800cee6:	806b      	strh	r3, [r5, #2]
 800cee8:	80ab      	strh	r3, [r5, #4]
 800ceea:	80eb      	strh	r3, [r5, #6]
 800ceec:	4628      	mov	r0, r5
 800ceee:	b004      	add	sp, #16
 800cef0:	bd70      	pop	{r4, r5, r6, pc}
 800cef2:	f101 0428 	add.w	r4, r1, #40	; 0x28
 800cef6:	4668      	mov	r0, sp
 800cef8:	4621      	mov	r1, r4
 800cefa:	f003 fd7b 	bl	80109f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800cefe:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800cf02:	4620      	mov	r0, r4
 800cf04:	f003 fd02 	bl	801090c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cf08:	4286      	cmp	r6, r0
 800cf0a:	d1ea      	bne.n	800cee2 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	a802      	add	r0, sp, #8
 800cf10:	f003 fd70 	bl	80109f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800cf14:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f003 fd31 	bl	8010980 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cf1e:	4286      	cmp	r6, r0
 800cf20:	d1df      	bne.n	800cee2 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800cf22:	4621      	mov	r1, r4
 800cf24:	4628      	mov	r0, r5
 800cf26:	f003 fd65 	bl	80109f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800cf2a:	e7df      	b.n	800ceec <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x16>

0800cf2c <_ZN8touchgfx13ScalableImageC1Ev>:
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	490d      	ldr	r1, [pc, #52]	; (800cf64 <_ZN8touchgfx13ScalableImageC1Ev+0x38>)
 800cf30:	8082      	strh	r2, [r0, #4]
 800cf32:	80c2      	strh	r2, [r0, #6]
 800cf34:	8102      	strh	r2, [r0, #8]
 800cf36:	8142      	strh	r2, [r0, #10]
 800cf38:	8182      	strh	r2, [r0, #12]
 800cf3a:	81c2      	strh	r2, [r0, #14]
 800cf3c:	8202      	strh	r2, [r0, #16]
 800cf3e:	8242      	strh	r2, [r0, #18]
 800cf40:	61c2      	str	r2, [r0, #28]
 800cf42:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800cf46:	6001      	str	r1, [r0, #0]
 800cf48:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 800cf52:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
 800cf56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf5a:	8502      	strh	r2, [r0, #40]	; 0x28
 800cf5c:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	0801b430 	.word	0x0801b430

0800cf68 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 800cf68:	4603      	mov	r3, r0
 800cf6a:	3028      	adds	r0, #40	; 0x28
 800cf6c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800cf70:	b90b      	cbnz	r3, 800cf76 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 800cf72:	f002 ba0a 	b.w	800f38a <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 800cf76:	f002 ba18 	b.w	800f3aa <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0800cf7c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	4604      	mov	r4, r0
 800cf82:	469b      	mov	fp, r3
 800cf84:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800cf88:	b0ab      	sub	sp, #172	; 0xac
 800cf8a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800cf8e:	f9b1 6000 	ldrsh.w	r6, [r1]
 800cf92:	8888      	ldrh	r0, [r1, #4]
 800cf94:	9206      	str	r2, [sp, #24]
 800cf96:	2200      	movs	r2, #0
 800cf98:	4430      	add	r0, r6
 800cf9a:	920e      	str	r2, [sp, #56]	; 0x38
 800cf9c:	b280      	uxth	r0, r0
 800cf9e:	fa0f fe80 	sxth.w	lr, r0
 800cfa2:	4596      	cmp	lr, r2
 800cfa4:	e9dd a934 	ldrd	sl, r9, [sp, #208]	; 0xd0
 800cfa8:	e9dd 8736 	ldrd	r8, r7, [sp, #216]	; 0xd8
 800cfac:	f340 80f2 	ble.w	800d194 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x218>
 800cfb0:	45b4      	cmp	ip, r6
 800cfb2:	f340 80ef 	ble.w	800d194 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x218>
 800cfb6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800cfba:	88ca      	ldrh	r2, [r1, #6]
 800cfbc:	442a      	add	r2, r5
 800cfbe:	b292      	uxth	r2, r2
 800cfc0:	b211      	sxth	r1, r2
 800cfc2:	2900      	cmp	r1, #0
 800cfc4:	f340 80e6 	ble.w	800d194 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x218>
 800cfc8:	42ab      	cmp	r3, r5
 800cfca:	f340 80e3 	ble.w	800d194 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x218>
 800cfce:	45f4      	cmp	ip, lr
 800cfd0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800cfd4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800cfd8:	bfb8      	it	lt
 800cfda:	fa1f f08c 	uxthlt.w	r0, ip
 800cfde:	428b      	cmp	r3, r1
 800cfe0:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 800cfe4:	bfb8      	it	lt
 800cfe6:	b29a      	uxthlt	r2, r3
 800cfe8:	1b80      	subs	r0, r0, r6
 800cfea:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
 800cfee:	1b52      	subs	r2, r2, r5
 800cff0:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800cff4:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 800cff8:	ab0e      	add	r3, sp, #56	; 0x38
 800cffa:	ad10      	add	r5, sp, #64	; 0x40
 800cffc:	6822      	ldr	r2, [r4, #0]
 800cffe:	1d26      	adds	r6, r4, #4
 800d000:	9307      	str	r3, [sp, #28]
 800d002:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d004:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d008:	e885 0003 	stmia.w	r5, {r0, r1}
 800d00c:	4629      	mov	r1, r5
 800d00e:	4620      	mov	r0, r4
 800d010:	4790      	blx	r2
 800d012:	4621      	mov	r1, r4
 800d014:	a812      	add	r0, sp, #72	; 0x48
 800d016:	f002 f946 	bl	800f2a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d01a:	a812      	add	r0, sp, #72	; 0x48
 800d01c:	f001 fae8 	bl	800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d020:	9b07      	ldr	r3, [sp, #28]
 800d022:	4631      	mov	r1, r6
 800d024:	4618      	mov	r0, r3
 800d026:	f001 facb 	bl	800e5c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800d02a:	4628      	mov	r0, r5
 800d02c:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800d030:	f001 fade 	bl	800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d034:	4628      	mov	r0, r5
 800d036:	f003 fd71 	bl	8010b1c <_ZNK8touchgfx6Bitmap7getDataEv>
 800d03a:	9007      	str	r0, [sp, #28]
 800d03c:	2800      	cmp	r0, #0
 800d03e:	f000 80a6 	beq.w	800d18e <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x212>
 800d042:	f8db 2000 	ldr.w	r2, [fp]
 800d046:	a90b      	add	r1, sp, #44	; 0x2c
 800d048:	a808      	add	r0, sp, #32
 800d04a:	9208      	str	r2, [sp, #32]
 800d04c:	f8db 2004 	ldr.w	r2, [fp, #4]
 800d050:	9209      	str	r2, [sp, #36]	; 0x24
 800d052:	f8db 2008 	ldr.w	r2, [fp, #8]
 800d056:	920a      	str	r2, [sp, #40]	; 0x28
 800d058:	f8da 2000 	ldr.w	r2, [sl]
 800d05c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d05e:	f8da 2004 	ldr.w	r2, [sl, #4]
 800d062:	920c      	str	r2, [sp, #48]	; 0x30
 800d064:	f8da 2008 	ldr.w	r2, [sl, #8]
 800d068:	920d      	str	r2, [sp, #52]	; 0x34
 800d06a:	4632      	mov	r2, r6
 800d06c:	f001 fa8c 	bl	800e588 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800d070:	4632      	mov	r2, r6
 800d072:	a90c      	add	r1, sp, #48	; 0x30
 800d074:	a809      	add	r0, sp, #36	; 0x24
 800d076:	f001 fa87 	bl	800e588 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800d07a:	4632      	mov	r2, r6
 800d07c:	a90d      	add	r1, sp, #52	; 0x34
 800d07e:	a80a      	add	r0, sp, #40	; 0x28
 800d080:	f001 fa82 	bl	800e588 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800d084:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800d088:	ed97 6a00 	vldr	s12, [r7]
 800d08c:	eeb0 7a67 	vmov.f32	s14, s15
 800d090:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800d094:	ed99 5a00 	vldr	s10, [r9]
 800d098:	edd8 5a00 	vldr	s11, [r8]
 800d09c:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800d0a0:	edd9 6a01 	vldr	s13, [r9, #4]
 800d0a4:	f8d9 e008 	ldr.w	lr, [r9, #8]
 800d0a8:	f8d8 c008 	ldr.w	ip, [r8, #8]
 800d0ac:	ee17 6a10 	vmov	r6, s14
 800d0b0:	eeb0 7a67 	vmov.f32	s14, s15
 800d0b4:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800d0b8:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800d0bc:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800d0c0:	9b06      	ldr	r3, [sp, #24]
 800d0c2:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d0c6:	68bf      	ldr	r7, [r7, #8]
 800d0c8:	ee17 0a10 	vmov	r0, s14
 800d0cc:	eeb0 7a67 	vmov.f32	s14, s15
 800d0d0:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800d0d4:	ed8d 5a1d 	vstr	s10, [sp, #116]	; 0x74
 800d0d8:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800d0dc:	edcd 5a1e 	vstr	s11, [sp, #120]	; 0x78
 800d0e0:	ed8d 6a1f 	vstr	s12, [sp, #124]	; 0x7c
 800d0e4:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 800d0e8:	ee17 1a10 	vmov	r1, s14
 800d0ec:	eeb0 7a67 	vmov.f32	s14, s15
 800d0f0:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800d0f4:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
 800d0f8:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800d0fc:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
 800d100:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800d104:	9314      	str	r3, [sp, #80]	; 0x50
 800d106:	961c      	str	r6, [sp, #112]	; 0x70
 800d108:	ee17 2a10 	vmov	r2, s14
 800d10c:	ed9d 7a08 	vldr	s14, [sp, #32]
 800d110:	edcd 7a26 	vstr	s15, [sp, #152]	; 0x98
 800d114:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800d118:	9225      	str	r2, [sp, #148]	; 0x94
 800d11a:	4a20      	ldr	r2, [pc, #128]	; (800d19c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 800d11c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800d120:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 800d124:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 800d128:	9729      	str	r7, [sp, #164]	; 0xa4
 800d12a:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 800d12e:	8812      	ldrh	r2, [r2, #0]
 800d130:	4628      	mov	r0, r5
 800d132:	9b07      	ldr	r3, [sp, #28]
 800d134:	9215      	str	r2, [sp, #84]	; 0x54
 800d136:	9316      	str	r3, [sp, #88]	; 0x58
 800d138:	f003 fd22 	bl	8010b80 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800d13c:	9017      	str	r0, [sp, #92]	; 0x5c
 800d13e:	4628      	mov	r0, r5
 800d140:	f003 fbe4 	bl	801090c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d144:	9018      	str	r0, [sp, #96]	; 0x60
 800d146:	4628      	mov	r0, r5
 800d148:	f003 fc1a 	bl	8010980 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d14c:	9019      	str	r0, [sp, #100]	; 0x64
 800d14e:	4628      	mov	r0, r5
 800d150:	f003 fbdc 	bl	801090c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d154:	4b12      	ldr	r3, [pc, #72]	; (800d1a0 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x224>)
 800d156:	901a      	str	r0, [sp, #104]	; 0x68
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d15e:	b10a      	cbz	r2, 800d164 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1e8>
 800d160:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800d162:	b905      	cbnz	r5, 800d166 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 800d164:	689d      	ldr	r5, [r3, #8]
 800d166:	4620      	mov	r0, r4
 800d168:	f7ff fefe 	bl	800cf68 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 800d16c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d170:	aa1b      	add	r2, sp, #108	; 0x6c
 800d172:	a914      	add	r1, sp, #80	; 0x50
 800d174:	9304      	str	r3, [sp, #16]
 800d176:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800d17a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d17e:	ab10      	add	r3, sp, #64	; 0x40
 800d180:	4628      	mov	r0, r5
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	ab12      	add	r3, sp, #72	; 0x48
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	ab16      	add	r3, sp, #88	; 0x58
 800d18a:	f000 ffad 	bl	800e0e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 800d18e:	b02b      	add	sp, #172	; 0xac
 800d190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d194:	2300      	movs	r3, #0
 800d196:	930f      	str	r3, [sp, #60]	; 0x3c
 800d198:	e72e      	b.n	800cff8 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 800d19a:	bf00      	nop
 800d19c:	200010fa 	.word	0x200010fa
 800d1a0:	20001100 	.word	0x20001100

0800d1a4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 800d1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a8:	ed2d 8b0a 	vpush	{d8-d12}
 800d1ac:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800d1b0:	b095      	sub	sp, #84	; 0x54
 800d1b2:	4680      	mov	r8, r0
 800d1b4:	4689      	mov	r9, r1
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f000 808a 	beq.w	800d2d0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x12c>
 800d1bc:	4c4b      	ldr	r4, [pc, #300]	; (800d2ec <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x148>)
 800d1be:	f108 0528 	add.w	r5, r8, #40	; 0x28
 800d1c2:	ed9f 8a4b 	vldr	s16, [pc, #300]	; 800d2f0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x14c>
 800d1c6:	6820      	ldr	r0, [r4, #0]
 800d1c8:	46a3      	mov	fp, r4
 800d1ca:	6803      	ldr	r3, [r0, #0]
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	4798      	blx	r3
 800d1d0:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 800d1d4:	4682      	mov	sl, r0
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	ee09 3a10 	vmov	s18, r3
 800d1dc:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
 800d1e0:	ee08 3a90 	vmov	s17, r3
 800d1e4:	4b43      	ldr	r3, [pc, #268]	; (800d2f4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x150>)
 800d1e6:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800d1ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1ec:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800d1f0:	930c      	str	r3, [sp, #48]	; 0x30
 800d1f2:	930d      	str	r3, [sp, #52]	; 0x34
 800d1f4:	f003 fb8a 	bl	801090c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d1f8:	ee07 0a90 	vmov	s15, r0
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	ee39 9a08 	vadd.f32	s18, s18, s16
 800d202:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800d206:	f003 fbbb 	bl	8010980 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d20a:	4b3b      	ldr	r3, [pc, #236]	; (800d2f8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x154>)
 800d20c:	ee07 0a90 	vmov	s15, r0
 800d210:	ee78 8a88 	vadd.f32	s17, s17, s16
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	eef8 9a67 	vcvt.f32.u32	s19, s15
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d15d      	bne.n	800d2da <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x136>
 800d21e:	eef0 aa4a 	vmov.f32	s21, s20
 800d222:	eef0 ba69 	vmov.f32	s23, s19
 800d226:	eeb0 ca69 	vmov.f32	s24, s19
 800d22a:	eeb0 ba4a 	vmov.f32	s22, s20
 800d22e:	eef0 9a48 	vmov.f32	s19, s16
 800d232:	eeb0 aa48 	vmov.f32	s20, s16
 800d236:	af11      	add	r7, sp, #68	; 0x44
 800d238:	ae0e      	add	r6, sp, #56	; 0x38
 800d23a:	ad0b      	add	r5, sp, #44	; 0x2c
 800d23c:	ac08      	add	r4, sp, #32
 800d23e:	ab05      	add	r3, sp, #20
 800d240:	4652      	mov	r2, sl
 800d242:	4649      	mov	r1, r9
 800d244:	4640      	mov	r0, r8
 800d246:	9703      	str	r7, [sp, #12]
 800d248:	9602      	str	r6, [sp, #8]
 800d24a:	9501      	str	r5, [sp, #4]
 800d24c:	9400      	str	r4, [sp, #0]
 800d24e:	ed8d 8a05 	vstr	s16, [sp, #20]
 800d252:	ed8d 9a06 	vstr	s18, [sp, #24]
 800d256:	ed8d 9a07 	vstr	s18, [sp, #28]
 800d25a:	ed8d 8a08 	vstr	s16, [sp, #32]
 800d25e:	ed8d 8a09 	vstr	s16, [sp, #36]	; 0x24
 800d262:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 800d266:	ed8d 8a0e 	vstr	s16, [sp, #56]	; 0x38
 800d26a:	ed8d aa0f 	vstr	s20, [sp, #60]	; 0x3c
 800d26e:	ed8d ca10 	vstr	s24, [sp, #64]	; 0x40
 800d272:	ed8d ba11 	vstr	s22, [sp, #68]	; 0x44
 800d276:	ed8d 8a12 	vstr	s16, [sp, #72]	; 0x48
 800d27a:	edcd 9a13 	vstr	s19, [sp, #76]	; 0x4c
 800d27e:	f7ff fe7d 	bl	800cf7c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>
 800d282:	ab05      	add	r3, sp, #20
 800d284:	4640      	mov	r0, r8
 800d286:	4652      	mov	r2, sl
 800d288:	4649      	mov	r1, r9
 800d28a:	ed8d 8a05 	vstr	s16, [sp, #20]
 800d28e:	ed8d 9a06 	vstr	s18, [sp, #24]
 800d292:	ed8d 8a07 	vstr	s16, [sp, #28]
 800d296:	ed8d 8a08 	vstr	s16, [sp, #32]
 800d29a:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 800d29e:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 800d2a2:	ed8d 8a0e 	vstr	s16, [sp, #56]	; 0x38
 800d2a6:	ed8d ca0f 	vstr	s24, [sp, #60]	; 0x3c
 800d2aa:	edcd ba10 	vstr	s23, [sp, #64]	; 0x40
 800d2ae:	ed8d ba11 	vstr	s22, [sp, #68]	; 0x44
 800d2b2:	edcd 9a12 	vstr	s19, [sp, #72]	; 0x48
 800d2b6:	edcd aa13 	vstr	s21, [sp, #76]	; 0x4c
 800d2ba:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d2be:	e9cd 4500 	strd	r4, r5, [sp]
 800d2c2:	f7ff fe5b 	bl	800cf7c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>
 800d2c6:	f8db 0000 	ldr.w	r0, [fp]
 800d2ca:	6803      	ldr	r3, [r0, #0]
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ce:	4798      	blx	r3
 800d2d0:	b015      	add	sp, #84	; 0x54
 800d2d2:	ecbd 8b0a 	vpop	{d8-d12}
 800d2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2da:	eef0 aa69 	vmov.f32	s21, s19
 800d2de:	eeb0 ca4a 	vmov.f32	s24, s20
 800d2e2:	eef0 ba48 	vmov.f32	s23, s16
 800d2e6:	eeb0 ba48 	vmov.f32	s22, s16
 800d2ea:	e7a4      	b.n	800d236 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x92>
 800d2ec:	20001100 	.word	0x20001100
 800d2f0:	00000000 	.word	0x00000000
 800d2f4:	42c80000 	.word	0x42c80000
 800d2f8:	200010f8 	.word	0x200010f8

0800d2fc <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	8002      	strh	r2, [r0, #0]
 800d300:	8042      	strh	r2, [r0, #2]
 800d302:	8082      	strh	r2, [r0, #4]
 800d304:	80c2      	strh	r2, [r0, #6]
 800d306:	4770      	bx	lr

0800d308 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800d308:	b570      	push	{r4, r5, r6, lr}
 800d30a:	6803      	ldr	r3, [r0, #0]
 800d30c:	4604      	mov	r4, r0
 800d30e:	4615      	mov	r5, r2
 800d310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d312:	4798      	blx	r3
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	4629      	mov	r1, r5
 800d318:	4620      	mov	r0, r4
 800d31a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d31c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d320:	4718      	bx	r3
	...

0800d324 <_ZNK8touchgfx9TypedText7getTextEv>:
 800d324:	b510      	push	{r4, lr}
 800d326:	4604      	mov	r4, r0
 800d328:	f7fd f90e 	bl	800a548 <_ZNK8touchgfx9TypedText11assertValidEv>
 800d32c:	4b03      	ldr	r3, [pc, #12]	; (800d33c <_ZNK8touchgfx9TypedText7getTextEv+0x18>)
 800d32e:	8821      	ldrh	r1, [r4, #0]
 800d330:	6818      	ldr	r0, [r3, #0]
 800d332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d336:	f7fe baad 	b.w	800b894 <_ZNK8touchgfx5Texts7getTextEt>
 800d33a:	bf00      	nop
 800d33c:	2000117c 	.word	0x2000117c

0800d340 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 800d340:	b570      	push	{r4, r5, r6, lr}
 800d342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d346:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800d348:	4604      	mov	r4, r0
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d00c      	beq.n	800d368 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 800d34e:	f850 3b26 	ldr.w	r3, [r0], #38
 800d352:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 800d354:	f7ff ffe6 	bl	800d324 <_ZNK8touchgfx9TypedText7getTextEv>
 800d358:	2300      	movs	r3, #0
 800d35a:	4601      	mov	r1, r0
 800d35c:	46ac      	mov	ip, r5
 800d35e:	4620      	mov	r0, r4
 800d360:	461a      	mov	r2, r3
 800d362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d366:	4760      	bx	ip
 800d368:	2000      	movs	r0, #0
 800d36a:	bd70      	pop	{r4, r5, r6, pc}

0800d36c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800d36c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d36e:	6803      	ldr	r3, [r0, #0]
 800d370:	4604      	mov	r4, r0
 800d372:	460d      	mov	r5, r1
 800d374:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800d376:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800d378:	a802      	add	r0, sp, #8
 800d37a:	f820 3d04 	strh.w	r3, [r0, #-4]!
 800d37e:	f7fd f8af 	bl	800a4e0 <_ZNK8touchgfx9TypedText7getFontEv>
 800d382:	6803      	ldr	r3, [r0, #0]
 800d384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d386:	4798      	blx	r3
 800d388:	1a29      	subs	r1, r5, r0
 800d38a:	4620      	mov	r0, r4
 800d38c:	b209      	sxth	r1, r1
 800d38e:	47b0      	blx	r6
 800d390:	b002      	add	sp, #8
 800d392:	bd70      	pop	{r4, r5, r6, pc}

0800d394 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800d394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d39a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d016      	beq.n	800d3ce <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 800d3a0:	f100 0426 	add.w	r4, r0, #38	; 0x26
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f7fd f89b 	bl	800a4e0 <_ZNK8touchgfx9TypedText7getFontEv>
 800d3aa:	6803      	ldr	r3, [r0, #0]
 800d3ac:	4605      	mov	r5, r0
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	69de      	ldr	r6, [r3, #28]
 800d3b2:	f7fd f8b1 	bl	800a518 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800d3b6:	4607      	mov	r7, r0
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f7ff ffb3 	bl	800d324 <_ZNK8touchgfx9TypedText7getTextEv>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	4639      	mov	r1, r7
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	4628      	mov	r0, r5
 800d3c8:	47b0      	blx	r6
 800d3ca:	b003      	add	sp, #12
 800d3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	e7fb      	b.n	800d3ca <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0800d3d2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800d3d2:	b40e      	push	{r1, r2, r3}
 800d3d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3dc:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800d3de:	b09b      	sub	sp, #108	; 0x6c
 800d3e0:	4604      	mov	r4, r0
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d03f      	beq.n	800d466 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 800d3e6:	f100 0726 	add.w	r7, r0, #38	; 0x26
 800d3ea:	ab22      	add	r3, sp, #136	; 0x88
 800d3ec:	4638      	mov	r0, r7
 800d3ee:	9303      	str	r3, [sp, #12]
 800d3f0:	f7fd f876 	bl	800a4e0 <_ZNK8touchgfx9TypedText7getFontEv>
 800d3f4:	6803      	ldr	r3, [r0, #0]
 800d3f6:	4680      	mov	r8, r0
 800d3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3fa:	4798      	blx	r3
 800d3fc:	4606      	mov	r6, r0
 800d3fe:	b205      	sxth	r5, r0
 800d400:	a804      	add	r0, sp, #16
 800d402:	f002 fdb3 	bl	800ff6c <_ZN8touchgfx12TextProviderC1Ev>
 800d406:	f8d8 3000 	ldr.w	r3, [r8]
 800d40a:	4640      	mov	r0, r8
 800d40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d40e:	4798      	blx	r3
 800d410:	9a03      	ldr	r2, [sp, #12]
 800d412:	4603      	mov	r3, r0
 800d414:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d416:	a804      	add	r0, sp, #16
 800d418:	f002 fdc5 	bl	800ffa6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800d41c:	4638      	mov	r0, r7
 800d41e:	f7fd f87b 	bl	800a518 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800d422:	4680      	mov	r8, r0
 800d424:	4638      	mov	r0, r7
 800d426:	f7fd f85b 	bl	800a4e0 <_ZNK8touchgfx9TypedText7getFontEv>
 800d42a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800d42e:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 800d432:	4642      	mov	r2, r8
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	4603      	mov	r3, r0
 800d438:	a804      	add	r0, sp, #16
 800d43a:	f000 fcb4 	bl	800dda6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800d43e:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 800d442:	b203      	sxth	r3, r0
 800d444:	18a9      	adds	r1, r5, r2
 800d446:	2900      	cmp	r1, #0
 800d448:	dd0b      	ble.n	800d462 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 800d44a:	3b01      	subs	r3, #1
 800d44c:	fb13 f302 	smulbb	r3, r3, r2
 800d450:	fb16 3300 	smlabb	r3, r6, r0, r3
 800d454:	b21d      	sxth	r5, r3
 800d456:	4628      	mov	r0, r5
 800d458:	b01b      	add	sp, #108	; 0x6c
 800d45a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d45e:	b003      	add	sp, #12
 800d460:	4770      	bx	lr
 800d462:	2b00      	cmp	r3, #0
 800d464:	dcf7      	bgt.n	800d456 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 800d466:	2500      	movs	r5, #0
 800d468:	e7f5      	b.n	800d456 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

0800d46c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800d46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d474:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 800d476:	b08d      	sub	sp, #52	; 0x34
 800d478:	4604      	mov	r4, r0
 800d47a:	429e      	cmp	r6, r3
 800d47c:	4688      	mov	r8, r1
 800d47e:	d04b      	beq.n	800d518 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 800d480:	f100 0526 	add.w	r5, r0, #38	; 0x26
 800d484:	4628      	mov	r0, r5
 800d486:	f7fd f82b 	bl	800a4e0 <_ZNK8touchgfx9TypedText7getFontEv>
 800d48a:	4607      	mov	r7, r0
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d043      	beq.n	800d518 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 800d490:	4628      	mov	r0, r5
 800d492:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 800d496:	f7fd f857 	bl	800a548 <_ZNK8touchgfx9TypedText11assertValidEv>
 800d49a:	4b21      	ldr	r3, [pc, #132]	; (800d520 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 800d49c:	4628      	mov	r0, r5
 800d49e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 800d4a8:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800d4ac:	785e      	ldrb	r6, [r3, #1]
 800d4ae:	f7fd f833 	bl	800a518 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800d4b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d4b4:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800d4b8:	f3c6 0601 	ubfx	r6, r6, #0, #2
 800d4bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d4be:	4b19      	ldr	r3, [pc, #100]	; (800d524 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 800d4c0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 800d4ca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d4ce:	9707      	str	r7, [sp, #28]
 800d4d0:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 800d4d4:	f88d 6020 	strb.w	r6, [sp, #32]
 800d4d8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800d4dc:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 800d4e0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 800d4e4:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800d4e8:	b10a      	cbz	r2, 800d4ee <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 800d4ea:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800d4ec:	b906      	cbnz	r6, 800d4f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 800d4ee:	689e      	ldr	r6, [r3, #8]
 800d4f0:	af05      	add	r7, sp, #20
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	4638      	mov	r0, r7
 800d4f6:	f001 fed6 	bl	800f2a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	f7ff ff12 	bl	800d324 <_ZNK8touchgfx9TypedText7getTextEv>
 800d500:	2300      	movs	r3, #0
 800d502:	9001      	str	r0, [sp, #4]
 800d504:	4630      	mov	r0, r6
 800d506:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d50a:	ab07      	add	r3, sp, #28
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	4643      	mov	r3, r8
 800d510:	e897 0006 	ldmia.w	r7, {r1, r2}
 800d514:	f000 fa14 	bl	800d940 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800d518:	b00d      	add	sp, #52	; 0x34
 800d51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d51e:	bf00      	nop
 800d520:	20001170 	.word	0x20001170
 800d524:	20001100 	.word	0x20001100

0800d528 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800d528:	b570      	push	{r4, r5, r6, lr}
 800d52a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d52e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800d530:	4604      	mov	r4, r0
 800d532:	429a      	cmp	r2, r3
 800d534:	d021      	beq.n	800d57a <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 800d536:	6803      	ldr	r3, [r0, #0]
 800d538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d53a:	4798      	blx	r3
 800d53c:	6823      	ldr	r3, [r4, #0]
 800d53e:	4605      	mov	r5, r0
 800d540:	4620      	mov	r0, r4
 800d542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d544:	4798      	blx	r3
 800d546:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800d54a:	4606      	mov	r6, r0
 800d54c:	b22d      	sxth	r5, r5
 800d54e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800d552:	6823      	ldr	r3, [r4, #0]
 800d554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d556:	d109      	bne.n	800d56c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 800d558:	4629      	mov	r1, r5
 800d55a:	4620      	mov	r0, r4
 800d55c:	4798      	blx	r3
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	4631      	mov	r1, r6
 800d562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d564:	4620      	mov	r0, r4
 800d566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d56a:	4718      	bx	r3
 800d56c:	4601      	mov	r1, r0
 800d56e:	4620      	mov	r0, r4
 800d570:	4798      	blx	r3
 800d572:	6823      	ldr	r3, [r4, #0]
 800d574:	4629      	mov	r1, r5
 800d576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d578:	e7f4      	b.n	800d564 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 800d57a:	bd70      	pop	{r4, r5, r6, pc}

0800d57c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 800d57c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800d580:	84c1      	strh	r1, [r0, #38]	; 0x26
 800d582:	b922      	cbnz	r2, 800d58e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 800d584:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800d588:	b90b      	cbnz	r3, 800d58e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 800d58a:	f7ff bfcd 	b.w	800d528 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800d58e:	4770      	bx	lr

0800d590 <_ZN8touchgfx3LCD4initEv>:
 800d590:	4770      	bx	lr

0800d592 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800d592:	2000      	movs	r0, #0
 800d594:	4770      	bx	lr

0800d596 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800d596:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59a:	b091      	sub	sp, #68	; 0x44
 800d59c:	4699      	mov	r9, r3
 800d59e:	4617      	mov	r7, r2
 800d5a0:	2500      	movs	r5, #0
 800d5a2:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 800d5a6:	4680      	mov	r8, r0
 800d5a8:	a80e      	add	r0, sp, #56	; 0x38
 800d5aa:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800d5ac:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 800d5b0:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 800d5b4:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800d5b8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800d5bc:	910d      	str	r1, [sp, #52]	; 0x34
 800d5be:	950e      	str	r5, [sp, #56]	; 0x38
 800d5c0:	f001 f816 	bl	800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d5c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d5c6:	f8d9 6000 	ldr.w	r6, [r9]
 800d5ca:	6818      	ldr	r0, [r3, #0]
 800d5cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d5ce:	f9b4 b000 	ldrsh.w	fp, [r4]
 800d5d2:	1b80      	subs	r0, r0, r6
 800d5d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d5d8:	eb02 0c06 	add.w	ip, r2, r6
 800d5dc:	ebab 0e0c 	sub.w	lr, fp, ip
 800d5e0:	4570      	cmp	r0, lr
 800d5e2:	f340 80bc 	ble.w	800d75e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 800d5e6:	88a1      	ldrh	r1, [r4, #4]
 800d5e8:	4459      	add	r1, fp
 800d5ea:	b209      	sxth	r1, r1
 800d5ec:	458c      	cmp	ip, r1
 800d5ee:	f300 80b6 	bgt.w	800d75e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 800d5f2:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800d5f6:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 800d5fa:	4283      	cmp	r3, r0
 800d5fc:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 800d600:	edd9 6a07 	vldr	s13, [r9, #28]
 800d604:	bfa8      	it	ge
 800d606:	4603      	movge	r3, r0
 800d608:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 800d60c:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 800d610:	45e3      	cmp	fp, ip
 800d612:	ee07 3a90 	vmov	s15, r3
 800d616:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800d61a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d61e:	ee25 4a04 	vmul.f32	s8, s10, s8
 800d622:	ee65 4a24 	vmul.f32	s9, s10, s9
 800d626:	ee25 5a27 	vmul.f32	s10, s10, s15
 800d62a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d62e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800d632:	ee32 1a05 	vadd.f32	s2, s4, s10
 800d636:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d63a:	ee36 0a84 	vadd.f32	s0, s13, s8
 800d63e:	ee61 1a87 	vmul.f32	s3, s3, s14
 800d642:	ee22 2a07 	vmul.f32	s4, s4, s14
 800d646:	f340 808d 	ble.w	800d764 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 800d64a:	fb9e f5f3 	sdiv	r5, lr, r3
 800d64e:	ee07 5a10 	vmov	s14, r5
 800d652:	2d00      	cmp	r5, #0
 800d654:	fb03 e415 	mls	r4, r3, r5, lr
 800d658:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d65c:	eea7 0a04 	vfma.f32	s0, s14, s8
 800d660:	eee7 0a24 	vfma.f32	s1, s14, s9
 800d664:	eea7 1a05 	vfma.f32	s2, s14, s10
 800d668:	dd12      	ble.n	800d690 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 800d66a:	ee70 6a44 	vsub.f32	s13, s0, s8
 800d66e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800d672:	ee31 2a45 	vsub.f32	s4, s2, s10
 800d676:	eef5 6a40 	vcmp.f32	s13, #0.0
 800d67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d67e:	bf14      	ite	ne
 800d680:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800d684:	eeb0 7a67 	vmoveq.f32	s14, s15
 800d688:	ee61 1a87 	vmul.f32	s3, s3, s14
 800d68c:	ee22 2a07 	vmul.f32	s4, s4, s14
 800d690:	fb05 f703 	mul.w	r7, r5, r3
 800d694:	1bc0      	subs	r0, r0, r7
 800d696:	443e      	add	r6, r7
 800d698:	1997      	adds	r7, r2, r6
 800d69a:	4407      	add	r7, r0
 800d69c:	42b9      	cmp	r1, r7
 800d69e:	bfbc      	itt	lt
 800d6a0:	1a88      	sublt	r0, r1, r2
 800d6a2:	1b80      	sublt	r0, r0, r6
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	dd5a      	ble.n	800d75e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 800d6a8:	fb90 f1f3 	sdiv	r1, r0, r3
 800d6ac:	fb03 0211 	mls	r2, r3, r1, r0
 800d6b0:	b90a      	cbnz	r2, 800d6b6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 800d6b2:	3901      	subs	r1, #1
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800d6ba:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 800d6be:	44a4      	add	ip, r4
 800d6c0:	2900      	cmp	r1, #0
 800d6c2:	bfcc      	ite	gt
 800d6c4:	469e      	movgt	lr, r3
 800d6c6:	4696      	movle	lr, r2
 800d6c8:	fb03 c505 	mla	r5, r3, r5, ip
 800d6cc:	eef0 6a42 	vmov.f32	s13, s4
 800d6d0:	eeb0 7a61 	vmov.f32	s14, s3
 800d6d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800d6d8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800d6dc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800d6e0:	ee21 3a23 	vmul.f32	s6, s2, s7
 800d6e4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800d6e8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800d6ec:	ee17 0a90 	vmov	r0, s15
 800d6f0:	ee73 7a42 	vsub.f32	s15, s6, s4
 800d6f4:	fb90 f6f3 	sdiv	r6, r0, r3
 800d6f8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800d6fc:	ee17 0a90 	vmov	r0, s15
 800d700:	fb90 f7f3 	sdiv	r7, r0, r3
 800d704:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d708:	f8d0 8000 	ldr.w	r8, [r0]
 800d70c:	900c      	str	r0, [sp, #48]	; 0x30
 800d70e:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d710:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d714:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 800d718:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d71c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 800d720:	f8cd a020 	str.w	sl, [sp, #32]
 800d724:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 800d728:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d72a:	f8d9 9014 	ldr.w	r9, [r9, #20]
 800d72e:	9603      	str	r6, [sp, #12]
 800d730:	44ca      	add	sl, r9
 800d732:	9506      	str	r5, [sp, #24]
 800d734:	e9cd 7004 	strd	r7, r0, [sp, #16]
 800d738:	ee16 0a90 	vmov	r0, s13
 800d73c:	f8cd a01c 	str.w	sl, [sp, #28]
 800d740:	fb07 0704 	mla	r7, r7, r4, r0
 800d744:	ee17 0a10 	vmov	r0, s14
 800d748:	fb06 0604 	mla	r6, r6, r4, r0
 800d74c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d74e:	9702      	str	r7, [sp, #8]
 800d750:	e9cd 3600 	strd	r3, r6, [sp]
 800d754:	ebae 0304 	sub.w	r3, lr, r4
 800d758:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d75c:	47a8      	blx	r5
 800d75e:	b011      	add	sp, #68	; 0x44
 800d760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d764:	462c      	mov	r4, r5
 800d766:	e797      	b.n	800d698 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0800d768 <_ZN8touchgfx4Edge4stepEv>:
 800d768:	b510      	push	{r4, lr}
 800d76a:	e9d0 1200 	ldrd	r1, r2, [r0]
 800d76e:	4603      	mov	r3, r0
 800d770:	4411      	add	r1, r2
 800d772:	6942      	ldr	r2, [r0, #20]
 800d774:	3201      	adds	r2, #1
 800d776:	6001      	str	r1, [r0, #0]
 800d778:	6142      	str	r2, [r0, #20]
 800d77a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800d77e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d782:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800d786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d78a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d78e:	691a      	ldr	r2, [r3, #16]
 800d790:	689c      	ldr	r4, [r3, #8]
 800d792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d796:	ed93 6a08 	vldr	s12, [r3, #32]
 800d79a:	edd3 6a07 	vldr	s13, [r3, #28]
 800d79e:	4422      	add	r2, r4
 800d7a0:	6980      	ldr	r0, [r0, #24]
 800d7a2:	68dc      	ldr	r4, [r3, #12]
 800d7a4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d7a8:	3801      	subs	r0, #1
 800d7aa:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
 800d7ae:	42a2      	cmp	r2, r4
 800d7b0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 800d7b4:	6198      	str	r0, [r3, #24]
 800d7b6:	edc3 6a07 	vstr	s13, [r3, #28]
 800d7ba:	611a      	str	r2, [r3, #16]
 800d7bc:	db15      	blt.n	800d7ea <_ZN8touchgfx4Edge4stepEv+0x82>
 800d7be:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 800d7c2:	3101      	adds	r1, #1
 800d7c4:	1b12      	subs	r2, r2, r4
 800d7c6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d7ca:	6019      	str	r1, [r3, #0]
 800d7cc:	611a      	str	r2, [r3, #16]
 800d7ce:	edc3 6a07 	vstr	s13, [r3, #28]
 800d7d2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d7d6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d7da:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
 800d7de:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800d7e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7e6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 800d7ea:	bd10      	pop	{r4, pc}

0800d7ec <_ZN8touchgfx4Edge4stepEi>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	4605      	mov	r5, r0
 800d7f0:	460c      	mov	r4, r1
 800d7f2:	2c00      	cmp	r4, #0
 800d7f4:	dd04      	ble.n	800d800 <_ZN8touchgfx4Edge4stepEi+0x14>
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	3c01      	subs	r4, #1
 800d7fa:	f7ff ffb5 	bl	800d768 <_ZN8touchgfx4Edge4stepEv>
 800d7fe:	e7f8      	b.n	800d7f2 <_ZN8touchgfx4Edge4stepEi+0x6>
 800d800:	69a8      	ldr	r0, [r5, #24]
 800d802:	bd38      	pop	{r3, r4, r5, pc}

0800d804 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800d804:	b570      	push	{r4, r5, r6, lr}
 800d806:	4604      	mov	r4, r0
 800d808:	2500      	movs	r5, #0
 800d80a:	9804      	ldr	r0, [sp, #16]
 800d80c:	7223      	strb	r3, [r4, #8]
 800d80e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d812:	8025      	strh	r5, [r4, #0]
 800d814:	6061      	str	r1, [r4, #4]
 800d816:	7263      	strb	r3, [r4, #9]
 800d818:	60e0      	str	r0, [r4, #12]
 800d81a:	8222      	strh	r2, [r4, #16]
 800d81c:	8265      	strh	r5, [r4, #18]
 800d81e:	82a5      	strh	r5, [r4, #20]
 800d820:	82e5      	strh	r5, [r4, #22]
 800d822:	8325      	strh	r5, [r4, #24]
 800d824:	8365      	strh	r5, [r4, #26]
 800d826:	83a5      	strh	r5, [r4, #28]
 800d828:	77a5      	strb	r5, [r4, #30]
 800d82a:	6803      	ldr	r3, [r0, #0]
 800d82c:	695b      	ldr	r3, [r3, #20]
 800d82e:	4798      	blx	r3
 800d830:	4606      	mov	r6, r0
 800d832:	b1f8      	cbz	r0, 800d874 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800d834:	68e0      	ldr	r0, [r4, #12]
 800d836:	4631      	mov	r1, r6
 800d838:	6803      	ldr	r3, [r0, #0]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	4798      	blx	r3
 800d83e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800d842:	4605      	mov	r5, r0
 800d844:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800d848:	7a83      	ldrb	r3, [r0, #10]
 800d84a:	4313      	orrs	r3, r2
 800d84c:	83a3      	strh	r3, [r4, #28]
 800d84e:	7a63      	ldrb	r3, [r4, #9]
 800d850:	2b04      	cmp	r3, #4
 800d852:	d10f      	bne.n	800d874 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800d854:	68e0      	ldr	r0, [r4, #12]
 800d856:	462a      	mov	r2, r5
 800d858:	4631      	mov	r1, r6
 800d85a:	6803      	ldr	r3, [r0, #0]
 800d85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d85e:	4798      	blx	r3
 800d860:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800d864:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800d868:	7aab      	ldrb	r3, [r5, #10]
 800d86a:	4313      	orrs	r3, r2
 800d86c:	4418      	add	r0, r3
 800d86e:	8ba3      	ldrh	r3, [r4, #28]
 800d870:	4418      	add	r0, r3
 800d872:	83a0      	strh	r0, [r4, #28]
 800d874:	4620      	mov	r0, r4
 800d876:	bd70      	pop	{r4, r5, r6, pc}

0800d878 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	2400      	movs	r4, #0
 800d87e:	b085      	sub	sp, #20
 800d880:	4681      	mov	r9, r0
 800d882:	460f      	mov	r7, r1
 800d884:	4692      	mov	sl, r2
 800d886:	469b      	mov	fp, r3
 800d888:	46a0      	mov	r8, r4
 800d88a:	4626      	mov	r6, r4
 800d88c:	4554      	cmp	r4, sl
 800d88e:	da21      	bge.n	800d8d4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 800d890:	2300      	movs	r3, #0
 800d892:	463a      	mov	r2, r7
 800d894:	4659      	mov	r1, fp
 800d896:	4648      	mov	r0, r9
 800d898:	9303      	str	r3, [sp, #12]
 800d89a:	ab03      	add	r3, sp, #12
 800d89c:	f002 fce8 	bl	8010270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	b1b8      	cbz	r0, 800d8d4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 800d8a4:	280a      	cmp	r0, #10
 800d8a6:	d015      	beq.n	800d8d4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 800d8a8:	9a03      	ldr	r2, [sp, #12]
 800d8aa:	b182      	cbz	r2, 800d8ce <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 800d8ac:	f992 000d 	ldrsb.w	r0, [r2, #13]
 800d8b0:	4641      	mov	r1, r8
 800d8b2:	7a93      	ldrb	r3, [r2, #10]
 800d8b4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800d8b8:	8895      	ldrh	r5, [r2, #4]
 800d8ba:	4303      	orrs	r3, r0
 800d8bc:	4638      	mov	r0, r7
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8c4:	4798      	blx	r3
 800d8c6:	9b01      	ldr	r3, [sp, #4]
 800d8c8:	4418      	add	r0, r3
 800d8ca:	4406      	add	r6, r0
 800d8cc:	b2b6      	uxth	r6, r6
 800d8ce:	3401      	adds	r4, #1
 800d8d0:	46a8      	mov	r8, r5
 800d8d2:	e7db      	b.n	800d88c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	b005      	add	sp, #20
 800d8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8dc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800d8dc:	2a02      	cmp	r2, #2
 800d8de:	b530      	push	{r4, r5, lr}
 800d8e0:	d011      	beq.n	800d906 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800d8e2:	2a03      	cmp	r2, #3
 800d8e4:	d01c      	beq.n	800d920 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800d8e6:	2a01      	cmp	r2, #1
 800d8e8:	d10c      	bne.n	800d904 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800d8ea:	888b      	ldrh	r3, [r1, #4]
 800d8ec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800d8f0:	8801      	ldrh	r1, [r0, #0]
 800d8f2:	1a9b      	subs	r3, r3, r2
 800d8f4:	8844      	ldrh	r4, [r0, #2]
 800d8f6:	1a5b      	subs	r3, r3, r1
 800d8f8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800d8fc:	8004      	strh	r4, [r0, #0]
 800d8fe:	8043      	strh	r3, [r0, #2]
 800d900:	8081      	strh	r1, [r0, #4]
 800d902:	80c2      	strh	r2, [r0, #6]
 800d904:	bd30      	pop	{r4, r5, pc}
 800d906:	88cb      	ldrh	r3, [r1, #6]
 800d908:	88c2      	ldrh	r2, [r0, #6]
 800d90a:	1a9b      	subs	r3, r3, r2
 800d90c:	8842      	ldrh	r2, [r0, #2]
 800d90e:	1a9b      	subs	r3, r3, r2
 800d910:	888a      	ldrh	r2, [r1, #4]
 800d912:	8881      	ldrh	r1, [r0, #4]
 800d914:	8043      	strh	r3, [r0, #2]
 800d916:	1a52      	subs	r2, r2, r1
 800d918:	8801      	ldrh	r1, [r0, #0]
 800d91a:	1a52      	subs	r2, r2, r1
 800d91c:	8002      	strh	r2, [r0, #0]
 800d91e:	e7f1      	b.n	800d904 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800d920:	88cb      	ldrh	r3, [r1, #6]
 800d922:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800d926:	8841      	ldrh	r1, [r0, #2]
 800d928:	1a9b      	subs	r3, r3, r2
 800d92a:	f9b0 5000 	ldrsh.w	r5, [r0]
 800d92e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800d932:	1a5b      	subs	r3, r3, r1
 800d934:	8045      	strh	r5, [r0, #2]
 800d936:	8082      	strh	r2, [r0, #4]
 800d938:	8003      	strh	r3, [r0, #0]
 800d93a:	80c4      	strh	r4, [r0, #6]
 800d93c:	e7e2      	b.n	800d904 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0800d940 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 800d940:	b570      	push	{r4, r5, r6, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	ac02      	add	r4, sp, #8
 800d946:	e884 0006 	stmia.w	r4, {r1, r2}
 800d94a:	461a      	mov	r2, r3
 800d94c:	ab0c      	add	r3, sp, #48	; 0x30
 800d94e:	9305      	str	r3, [sp, #20]
 800d950:	4b0a      	ldr	r3, [pc, #40]	; (800d97c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 800d952:	685d      	ldr	r5, [r3, #4]
 800d954:	1069      	asrs	r1, r5, #1
 800d956:	07ed      	lsls	r5, r5, #31
 800d958:	eb00 0601 	add.w	r6, r0, r1
 800d95c:	bf46      	itte	mi
 800d95e:	681b      	ldrmi	r3, [r3, #0]
 800d960:	5841      	ldrmi	r1, [r0, r1]
 800d962:	681d      	ldrpl	r5, [r3, #0]
 800d964:	4630      	mov	r0, r6
 800d966:	bf48      	it	mi
 800d968:	58cd      	ldrmi	r5, [r1, r3]
 800d96a:	4621      	mov	r1, r4
 800d96c:	9b05      	ldr	r3, [sp, #20]
 800d96e:	9301      	str	r3, [sp, #4]
 800d970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d972:	9300      	str	r3, [sp, #0]
 800d974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d976:	47a8      	blx	r5
 800d978:	b006      	add	sp, #24
 800d97a:	bd70      	pop	{r4, r5, r6, pc}
 800d97c:	2000001c 	.word	0x2000001c

0800d980 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800d980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d984:	b09d      	sub	sp, #116	; 0x74
 800d986:	9114      	str	r1, [sp, #80]	; 0x50
 800d988:	9315      	str	r3, [sp, #84]	; 0x54
 800d98a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800d98c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d98e:	8809      	ldrh	r1, [r1, #0]
 800d990:	889b      	ldrh	r3, [r3, #4]
 800d992:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800d994:	440b      	add	r3, r1
 800d996:	9210      	str	r2, [sp, #64]	; 0x40
 800d998:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800d99c:	b21b      	sxth	r3, r3
 800d99e:	900f      	str	r0, [sp, #60]	; 0x3c
 800d9a0:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 800d9a4:	930e      	str	r3, [sp, #56]	; 0x38
 800d9a6:	6833      	ldr	r3, [r6, #0]
 800d9a8:	7a59      	ldrb	r1, [r3, #9]
 800d9aa:	7a1b      	ldrb	r3, [r3, #8]
 800d9ac:	9113      	str	r1, [sp, #76]	; 0x4c
 800d9ae:	9312      	str	r3, [sp, #72]	; 0x48
 800d9b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d9b2:	f9b3 4000 	ldrsh.w	r4, [r3]
 800d9b6:	2a00      	cmp	r2, #0
 800d9b8:	d059      	beq.n	800da6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 800d9ba:	7c33      	ldrb	r3, [r6, #16]
 800d9bc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800d9be:	2b04      	cmp	r3, #4
 800d9c0:	bf14      	ite	ne
 800d9c2:	2301      	movne	r3, #1
 800d9c4:	2302      	moveq	r3, #2
 800d9c6:	4413      	add	r3, r2
 800d9c8:	f04f 0800 	mov.w	r8, #0
 800d9cc:	930d      	str	r3, [sp, #52]	; 0x34
 800d9ce:	4645      	mov	r5, r8
 800d9d0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800d9d4:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	da75      	bge.n	800dac8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 800d9dc:	2300      	movs	r3, #0
 800d9de:	992b      	ldr	r1, [sp, #172]	; 0xac
 800d9e0:	6832      	ldr	r2, [r6, #0]
 800d9e2:	931a      	str	r3, [sp, #104]	; 0x68
 800d9e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9e6:	428b      	cmp	r3, r1
 800d9e8:	db43      	blt.n	800da72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 800d9ea:	6813      	ldr	r3, [r2, #0]
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	695b      	ldr	r3, [r3, #20]
 800d9f0:	4798      	blx	r3
 800d9f2:	4681      	mov	r9, r0
 800d9f4:	6830      	ldr	r0, [r6, #0]
 800d9f6:	aa1b      	add	r2, sp, #108	; 0x6c
 800d9f8:	4649      	mov	r1, r9
 800d9fa:	6803      	ldr	r3, [r0, #0]
 800d9fc:	689f      	ldr	r7, [r3, #8]
 800d9fe:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800da02:	47b8      	blx	r7
 800da04:	901a      	str	r0, [sp, #104]	; 0x68
 800da06:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 800da0a:	45d1      	cmp	r9, sl
 800da0c:	d045      	beq.n	800da9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800da0e:	f242 070b 	movw	r7, #8203	; 0x200b
 800da12:	45b9      	cmp	r9, r7
 800da14:	d041      	beq.n	800da9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800da16:	f1b9 0f00 	cmp.w	r9, #0
 800da1a:	f000 80ee 	beq.w	800dbfa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 800da1e:	f1b9 0f0a 	cmp.w	r9, #10
 800da22:	d057      	beq.n	800dad4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 800da24:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800da26:	b383      	cbz	r3, 800da8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 800da28:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800da2c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800da2e:	2a00      	cmp	r2, #0
 800da30:	f000 80d2 	beq.w	800dbd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 800da34:	f1bb 0f00 	cmp.w	fp, #0
 800da38:	d100      	bne.n	800da3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 800da3a:	4444      	add	r4, r8
 800da3c:	f992 800d 	ldrsb.w	r8, [r2, #13]
 800da40:	f1bb 0f01 	cmp.w	fp, #1
 800da44:	f408 7380 	and.w	r3, r8, #256	; 0x100
 800da48:	f892 800a 	ldrb.w	r8, [r2, #10]
 800da4c:	ea48 0803 	orr.w	r8, r8, r3
 800da50:	d128      	bne.n	800daa4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 800da52:	eba4 0408 	sub.w	r4, r4, r8
 800da56:	2d00      	cmp	r5, #0
 800da58:	d143      	bne.n	800dae2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 800da5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800da5c:	eb08 0304 	add.w	r3, r8, r4
 800da60:	4413      	add	r3, r2
 800da62:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800da64:	f9b2 2000 	ldrsh.w	r2, [r2]
 800da68:	4293      	cmp	r3, r2
 800da6a:	da44      	bge.n	800daf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800da6c:	e02b      	b.n	800dac6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 800da6e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800da70:	e7aa      	b.n	800d9c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 800da72:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800da76:	4659      	mov	r1, fp
 800da78:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800da7a:	9301      	str	r3, [sp, #4]
 800da7c:	ab1b      	add	r3, sp, #108	; 0x6c
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	ab1a      	add	r3, sp, #104	; 0x68
 800da82:	f002 fc29 	bl	80102d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800da86:	4681      	mov	r9, r0
 800da88:	e7bd      	b.n	800da06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 800da8a:	6830      	ldr	r0, [r6, #0]
 800da8c:	6803      	ldr	r3, [r0, #0]
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	4798      	blx	r3
 800da92:	4550      	cmp	r0, sl
 800da94:	d001      	beq.n	800da9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800da96:	42b8      	cmp	r0, r7
 800da98:	d1c8      	bne.n	800da2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 800da9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da9c:	464d      	mov	r5, r9
 800da9e:	3301      	adds	r3, #1
 800daa0:	930c      	str	r3, [sp, #48]	; 0x30
 800daa2:	e797      	b.n	800d9d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 800daa4:	2d00      	cmp	r5, #0
 800daa6:	f000 80aa 	beq.w	800dbfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 800daaa:	f1bb 0f00 	cmp.w	fp, #0
 800daae:	d118      	bne.n	800dae2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 800dab0:	6830      	ldr	r0, [r6, #0]
 800dab2:	4629      	mov	r1, r5
 800dab4:	6803      	ldr	r3, [r0, #0]
 800dab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dab8:	4798      	blx	r3
 800daba:	4404      	add	r4, r0
 800dabc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dabe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dac0:	1ae3      	subs	r3, r4, r3
 800dac2:	4293      	cmp	r3, r2
 800dac4:	dd17      	ble.n	800daf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800dac6:	464d      	mov	r5, r9
 800dac8:	2d00      	cmp	r5, #0
 800daca:	f000 8096 	beq.w	800dbfa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 800dace:	2d0a      	cmp	r5, #10
 800dad0:	f040 8084 	bne.w	800dbdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 800dad4:	250a      	movs	r5, #10
 800dad6:	fab5 f085 	clz	r0, r5
 800dada:	0940      	lsrs	r0, r0, #5
 800dadc:	b01d      	add	sp, #116	; 0x74
 800dade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae2:	6830      	ldr	r0, [r6, #0]
 800dae4:	4629      	mov	r1, r5
 800dae6:	6803      	ldr	r3, [r0, #0]
 800dae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daea:	4798      	blx	r3
 800daec:	f1bb 0f01 	cmp.w	fp, #1
 800daf0:	eba4 0400 	sub.w	r4, r4, r0
 800daf4:	d0b1      	beq.n	800da5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800daf6:	981a      	ldr	r0, [sp, #104]	; 0x68
 800daf8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800dafa:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800dafe:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db02:	7b43      	ldrb	r3, [r0, #13]
 800db04:	4421      	add	r1, r4
 800db06:	015b      	lsls	r3, r3, #5
 800db08:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800db0c:	7983      	ldrb	r3, [r0, #6]
 800db0e:	4313      	orrs	r3, r2
 800db10:	440b      	add	r3, r1
 800db12:	42ab      	cmp	r3, r5
 800db14:	dbc1      	blt.n	800da9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800db16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db18:	4299      	cmp	r1, r3
 800db1a:	dabe      	bge.n	800da9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800db1c:	6830      	ldr	r0, [r6, #0]
 800db1e:	42a5      	cmp	r5, r4
 800db20:	6803      	ldr	r3, [r0, #0]
 800db22:	bfcc      	ite	gt
 800db24:	1b2d      	subgt	r5, r5, r4
 800db26:	2500      	movle	r5, #0
 800db28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2a:	bfc8      	it	gt
 800db2c:	b2ad      	uxthgt	r5, r5
 800db2e:	4798      	blx	r3
 800db30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800db32:	4935      	ldr	r1, [pc, #212]	; (800dc08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 800db34:	7b5a      	ldrb	r2, [r3, #13]
 800db36:	f893 e008 	ldrb.w	lr, [r3, #8]
 800db3a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800db3e:	bf18      	it	ne
 800db40:	468c      	movne	ip, r1
 800db42:	9915      	ldr	r1, [sp, #84]	; 0x54
 800db44:	bf08      	it	eq
 800db46:	f04f 0c00 	moveq.w	ip, #0
 800db4a:	4408      	add	r0, r1
 800db4c:	00d1      	lsls	r1, r2, #3
 800db4e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800db52:	ea41 070e 	orr.w	r7, r1, lr
 800db56:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800db58:	ea4c 0707 	orr.w	r7, ip, r7
 800db5c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800db60:	1bc7      	subs	r7, r0, r7
 800db62:	b2bf      	uxth	r7, r7
 800db64:	fa0f fa87 	sxth.w	sl, r7
 800db68:	4551      	cmp	r1, sl
 800db6a:	dd33      	ble.n	800dbd4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 800db6c:	0112      	lsls	r2, r2, #4
 800db6e:	79d8      	ldrb	r0, [r3, #7]
 800db70:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800db74:	4302      	orrs	r2, r0
 800db76:	4492      	add	sl, r2
 800db78:	4551      	cmp	r1, sl
 800db7a:	dc8e      	bgt.n	800da9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800db7c:	1bcf      	subs	r7, r1, r7
 800db7e:	468a      	mov	sl, r1
 800db80:	b2bf      	uxth	r7, r7
 800db82:	9317      	str	r3, [sp, #92]	; 0x5c
 800db84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db86:	6830      	ldr	r0, [r6, #0]
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	6801      	ldr	r1, [r0, #0]
 800db8c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800db8e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800db90:	9311      	str	r3, [sp, #68]	; 0x44
 800db92:	9216      	str	r2, [sp, #88]	; 0x58
 800db94:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800db96:	4788      	blx	r1
 800db98:	79b1      	ldrb	r1, [r6, #6]
 800db9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db9c:	910b      	str	r1, [sp, #44]	; 0x2c
 800db9e:	7bb1      	ldrb	r1, [r6, #14]
 800dba0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dba2:	910a      	str	r1, [sp, #40]	; 0x28
 800dba4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 800dba8:	9109      	str	r1, [sp, #36]	; 0x24
 800dbaa:	68b1      	ldr	r1, [r6, #8]
 800dbac:	9305      	str	r3, [sp, #20]
 800dbae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800dbb0:	9206      	str	r2, [sp, #24]
 800dbb2:	e9cd a501 	strd	sl, r5, [sp, #4]
 800dbb6:	4425      	add	r5, r4
 800dbb8:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800dbbc:	b22d      	sxth	r5, r5
 800dbbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbc0:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800dbc4:	9500      	str	r5, [sp, #0]
 800dbc6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800dbd0:	47a8      	blx	r5
 800dbd2:	e762      	b.n	800da9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800dbd4:	2700      	movs	r7, #0
 800dbd6:	e7d4      	b.n	800db82 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 800dbd8:	4690      	mov	r8, r2
 800dbda:	e75e      	b.n	800da9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800dbdc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dbde:	3401      	adds	r4, #1
 800dbe0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800dbe2:	429c      	cmp	r4, r3
 800dbe4:	f6bf af77 	bge.w	800dad6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 800dbe8:	4659      	mov	r1, fp
 800dbea:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800dbec:	f002 fb00 	bl	80101f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800dbf0:	4605      	mov	r5, r0
 800dbf2:	b110      	cbz	r0, 800dbfa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 800dbf4:	280a      	cmp	r0, #10
 800dbf6:	d1f2      	bne.n	800dbde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 800dbf8:	e76c      	b.n	800dad4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 800dbfa:	2500      	movs	r5, #0
 800dbfc:	e76b      	b.n	800dad6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 800dbfe:	f1bb 0f00 	cmp.w	fp, #0
 800dc02:	f43f af5b 	beq.w	800dabc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 800dc06:	e776      	b.n	800daf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800dc08:	fffffe00 	.word	0xfffffe00

0800dc0c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800dc0c:	b530      	push	{r4, r5, lr}
 800dc0e:	8a44      	ldrh	r4, [r0, #18]
 800dc10:	8ac5      	ldrh	r5, [r0, #22]
 800dc12:	82c3      	strh	r3, [r0, #22]
 800dc14:	442c      	add	r4, r5
 800dc16:	1ae4      	subs	r4, r4, r3
 800dc18:	8b03      	ldrh	r3, [r0, #24]
 800dc1a:	8244      	strh	r4, [r0, #18]
 800dc1c:	8a84      	ldrh	r4, [r0, #20]
 800dc1e:	4422      	add	r2, r4
 800dc20:	440c      	add	r4, r1
 800dc22:	1a59      	subs	r1, r3, r1
 800dc24:	8342      	strh	r2, [r0, #26]
 800dc26:	8284      	strh	r4, [r0, #20]
 800dc28:	8301      	strh	r1, [r0, #24]
 800dc2a:	bd30      	pop	{r4, r5, pc}

0800dc2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800dc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc30:	7a45      	ldrb	r5, [r0, #9]
 800dc32:	b085      	sub	sp, #20
 800dc34:	4604      	mov	r4, r0
 800dc36:	4689      	mov	r9, r1
 800dc38:	1eeb      	subs	r3, r5, #3
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	b329      	cbz	r1, 800dc8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d921      	bls.n	800dc86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 800dc42:	1e69      	subs	r1, r5, #1
 800dc44:	f1d1 0b00 	rsbs	fp, r1, #0
 800dc48:	eb4b 0b01 	adc.w	fp, fp, r1
 800dc4c:	1eaa      	subs	r2, r5, #2
 800dc4e:	2500      	movs	r5, #0
 800dc50:	4253      	negs	r3, r2
 800dc52:	9500      	str	r5, [sp, #0]
 800dc54:	4153      	adcs	r3, r2
 800dc56:	9301      	str	r3, [sp, #4]
 800dc58:	2600      	movs	r6, #0
 800dc5a:	f242 080b 	movw	r8, #8203	; 0x200b
 800dc5e:	8266      	strh	r6, [r4, #18]
 800dc60:	82a6      	strh	r6, [r4, #20]
 800dc62:	2300      	movs	r3, #0
 800dc64:	68e2      	ldr	r2, [r4, #12]
 800dc66:	7a21      	ldrb	r1, [r4, #8]
 800dc68:	9303      	str	r3, [sp, #12]
 800dc6a:	ab03      	add	r3, sp, #12
 800dc6c:	6860      	ldr	r0, [r4, #4]
 800dc6e:	8827      	ldrh	r7, [r4, #0]
 800dc70:	f002 fafe 	bl	8010270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dc74:	8020      	strh	r0, [r4, #0]
 800dc76:	b9b0      	cbnz	r0, 800dca6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 800dc78:	8b22      	ldrh	r2, [r4, #24]
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	4611      	mov	r1, r2
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f7ff ffc4 	bl	800dc0c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800dc84:	e062      	b.n	800dd4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 800dc86:	468b      	mov	fp, r1
 800dc88:	e7e0      	b.n	800dc4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	f105 35ff 	add.w	r5, r5, #4294967295
 800dc90:	9101      	str	r1, [sp, #4]
 800dc92:	468b      	mov	fp, r1
 800dc94:	bf8c      	ite	hi
 800dc96:	2300      	movhi	r3, #0
 800dc98:	2301      	movls	r3, #1
 800dc9a:	2d01      	cmp	r5, #1
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	bf8c      	ite	hi
 800dca0:	2500      	movhi	r5, #0
 800dca2:	2501      	movls	r5, #1
 800dca4:	e7d8      	b.n	800dc58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 800dca6:	8ae3      	ldrh	r3, [r4, #22]
 800dca8:	280a      	cmp	r0, #10
 800dcaa:	f103 0301 	add.w	r3, r3, #1
 800dcae:	82e3      	strh	r3, [r4, #22]
 800dcb0:	d0e2      	beq.n	800dc78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 800dcb2:	9a03      	ldr	r2, [sp, #12]
 800dcb4:	b972      	cbnz	r2, 800dcd4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 800dcb6:	4540      	cmp	r0, r8
 800dcb8:	d1d3      	bne.n	800dc62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800dcba:	8823      	ldrh	r3, [r4, #0]
 800dcbc:	8b21      	ldrh	r1, [r4, #24]
 800dcbe:	2b20      	cmp	r3, #32
 800dcc0:	d001      	beq.n	800dcc6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 800dcc2:	4543      	cmp	r3, r8
 800dcc4:	d11d      	bne.n	800dd02 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800dcc6:	2f20      	cmp	r7, #32
 800dcc8:	d002      	beq.n	800dcd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800dcca:	4547      	cmp	r7, r8
 800dccc:	bf18      	it	ne
 800dcce:	460e      	movne	r6, r1
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	e017      	b.n	800dd04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 800dcd4:	4540      	cmp	r0, r8
 800dcd6:	d012      	beq.n	800dcfe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 800dcd8:	8893      	ldrh	r3, [r2, #4]
 800dcda:	4639      	mov	r1, r7
 800dcdc:	8023      	strh	r3, [r4, #0]
 800dcde:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 800dce2:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 800dce6:	f892 a00a 	ldrb.w	sl, [r2, #10]
 800dcea:	ea4a 0a00 	orr.w	sl, sl, r0
 800dcee:	68e0      	ldr	r0, [r4, #12]
 800dcf0:	6803      	ldr	r3, [r0, #0]
 800dcf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcf4:	4798      	blx	r3
 800dcf6:	eb0a 0200 	add.w	r2, sl, r0
 800dcfa:	b292      	uxth	r2, r2
 800dcfc:	e7dd      	b.n	800dcba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 800dcfe:	2200      	movs	r2, #0
 800dd00:	e7db      	b.n	800dcba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 800dd02:	2000      	movs	r0, #0
 800dd04:	440a      	add	r2, r1
 800dd06:	8aa3      	ldrh	r3, [r4, #20]
 800dd08:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800dd0c:	b292      	uxth	r2, r2
 800dd0e:	8322      	strh	r2, [r4, #24]
 800dd10:	4413      	add	r3, r2
 800dd12:	f1b9 0f00 	cmp.w	r9, #0
 800dd16:	d022      	beq.n	800dd5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 800dd18:	f1bb 0f00 	cmp.w	fp, #0
 800dd1c:	d102      	bne.n	800dd24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 800dd1e:	9901      	ldr	r1, [sp, #4]
 800dd20:	b149      	cbz	r1, 800dd36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 800dd22:	b140      	cbz	r0, 800dd36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 800dd24:	8ba1      	ldrh	r1, [r4, #28]
 800dd26:	4419      	add	r1, r3
 800dd28:	458c      	cmp	ip, r1
 800dd2a:	da12      	bge.n	800dd52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 800dd2c:	8a61      	ldrh	r1, [r4, #18]
 800dd2e:	b181      	cbz	r1, 800dd52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 800dd30:	4563      	cmp	r3, ip
 800dd32:	dd96      	ble.n	800dc62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800dd34:	e004      	b.n	800dd40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 800dd36:	4563      	cmp	r3, ip
 800dd38:	dd93      	ble.n	800dc62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800dd3a:	8a63      	ldrh	r3, [r4, #18]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d090      	beq.n	800dc62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800dd40:	2301      	movs	r3, #1
 800dd42:	8ba2      	ldrh	r2, [r4, #28]
 800dd44:	77a3      	strb	r3, [r4, #30]
 800dd46:	8b63      	ldrh	r3, [r4, #26]
 800dd48:	4413      	add	r3, r2
 800dd4a:	8363      	strh	r3, [r4, #26]
 800dd4c:	b005      	add	sp, #20
 800dd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd52:	2300      	movs	r3, #0
 800dd54:	4611      	mov	r1, r2
 800dd56:	4620      	mov	r0, r4
 800dd58:	f7ff ff58 	bl	800dc0c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800dd5c:	e781      	b.n	800dc62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800dd5e:	4563      	cmp	r3, ip
 800dd60:	dd16      	ble.n	800dd90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 800dd62:	9b00      	ldr	r3, [sp, #0]
 800dd64:	b113      	cbz	r3, 800dd6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800dd66:	2301      	movs	r3, #1
 800dd68:	460a      	mov	r2, r1
 800dd6a:	e787      	b.n	800dc7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 800dd6c:	2d00      	cmp	r5, #0
 800dd6e:	f43f af78 	beq.w	800dc62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800dd72:	2800      	cmp	r0, #0
 800dd74:	f47f af75 	bne.w	800dc62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800dd78:	2f20      	cmp	r7, #32
 800dd7a:	d001      	beq.n	800dd80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 800dd7c:	4547      	cmp	r7, r8
 800dd7e:	d102      	bne.n	800dd86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 800dd80:	2301      	movs	r3, #1
 800dd82:	4632      	mov	r2, r6
 800dd84:	e77b      	b.n	800dc7e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 800dd86:	8a63      	ldrh	r3, [r4, #18]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f43f af6a 	beq.w	800dc62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800dd8e:	e7dd      	b.n	800dd4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 800dd90:	2800      	cmp	r0, #0
 800dd92:	f47f af66 	bne.w	800dc62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800dd96:	2f20      	cmp	r7, #32
 800dd98:	d002      	beq.n	800dda0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 800dd9a:	4547      	cmp	r7, r8
 800dd9c:	f47f af61 	bne.w	800dc62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800dda0:	2301      	movs	r3, #1
 800dda2:	4632      	mov	r2, r6
 800dda4:	e7d7      	b.n	800dd56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0800dda6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800dda6:	b570      	push	{r4, r5, r6, lr}
 800dda8:	4606      	mov	r6, r0
 800ddaa:	b08a      	sub	sp, #40	; 0x28
 800ddac:	4615      	mov	r5, r2
 800ddae:	b191      	cbz	r1, 800ddd6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 800ddb0:	2401      	movs	r4, #1
 800ddb2:	e9cd 3100 	strd	r3, r1, [sp]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	4601      	mov	r1, r0
 800ddba:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800ddbe:	a802      	add	r0, sp, #8
 800ddc0:	f7ff fd20 	bl	800d804 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800ddc4:	2100      	movs	r1, #0
 800ddc6:	a802      	add	r0, sp, #8
 800ddc8:	f7ff ff30 	bl	800dc2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800ddcc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800ddd0:	b173      	cbz	r3, 800ddf0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800ddd2:	3401      	adds	r4, #1
 800ddd4:	e7f6      	b.n	800ddc4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 800ddd6:	2401      	movs	r4, #1
 800ddd8:	4611      	mov	r1, r2
 800ddda:	f002 fa09 	bl	80101f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ddde:	280a      	cmp	r0, #10
 800dde0:	4629      	mov	r1, r5
 800dde2:	4630      	mov	r0, r6
 800dde4:	bf08      	it	eq
 800dde6:	3401      	addeq	r4, #1
 800dde8:	f002 fa02 	bl	80101f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ddec:	2800      	cmp	r0, #0
 800ddee:	d1f6      	bne.n	800ddde <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 800ddf0:	b2a0      	uxth	r0, r4
 800ddf2:	b00a      	add	sp, #40	; 0x28
 800ddf4:	bd70      	pop	{r4, r5, r6, pc}

0800ddf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800ddf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddfa:	b0db      	sub	sp, #364	; 0x16c
 800ddfc:	468a      	mov	sl, r1
 800ddfe:	461c      	mov	r4, r3
 800de00:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 800de04:	9009      	str	r0, [sp, #36]	; 0x24
 800de06:	f1bb 0f00 	cmp.w	fp, #0
 800de0a:	f000 80c7 	beq.w	800df9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	f000 80c3 	beq.w	800df9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800de16:	7ba3      	ldrb	r3, [r4, #14]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f000 80bf 	beq.w	800df9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800de1e:	af0c      	add	r7, sp, #48	; 0x30
 800de20:	6810      	ldr	r0, [r2, #0]
 800de22:	6851      	ldr	r1, [r2, #4]
 800de24:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 800de28:	463b      	mov	r3, r7
 800de2a:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800de2e:	c303      	stmia	r3!, {r0, r1}
 800de30:	2100      	movs	r1, #0
 800de32:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800de36:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800de3a:	4638      	mov	r0, r7
 800de3c:	910e      	str	r1, [sp, #56]	; 0x38
 800de3e:	a90e      	add	r1, sp, #56	; 0x38
 800de40:	79a2      	ldrb	r2, [r4, #6]
 800de42:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800de46:	f7ff fd49 	bl	800d8dc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800de4a:	a90e      	add	r1, sp, #56	; 0x38
 800de4c:	79a2      	ldrb	r2, [r4, #6]
 800de4e:	4608      	mov	r0, r1
 800de50:	f7ff fd44 	bl	800d8dc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800de54:	4648      	mov	r0, r9
 800de56:	f002 f889 	bl	800ff6c <_ZN8touchgfx12TextProviderC1Ev>
 800de5a:	6820      	ldr	r0, [r4, #0]
 800de5c:	6803      	ldr	r3, [r0, #0]
 800de5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de60:	4798      	blx	r3
 800de62:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800de64:	4603      	mov	r3, r0
 800de66:	4659      	mov	r1, fp
 800de68:	4648      	mov	r0, r9
 800de6a:	f002 f89c 	bl	800ffa6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800de6e:	a82e      	add	r0, sp, #184	; 0xb8
 800de70:	f002 f87c 	bl	800ff6c <_ZN8touchgfx12TextProviderC1Ev>
 800de74:	f894 8004 	ldrb.w	r8, [r4, #4]
 800de78:	f1b8 0f00 	cmp.w	r8, #0
 800de7c:	d009      	beq.n	800de92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 800de7e:	6820      	ldr	r0, [r4, #0]
 800de80:	6803      	ldr	r3, [r0, #0]
 800de82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de84:	4798      	blx	r3
 800de86:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800de88:	4603      	mov	r3, r0
 800de8a:	4659      	mov	r1, fp
 800de8c:	a82e      	add	r0, sp, #184	; 0xb8
 800de8e:	f002 f88a 	bl	800ffa6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800de92:	6820      	ldr	r0, [r4, #0]
 800de94:	6803      	ldr	r3, [r0, #0]
 800de96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de98:	4798      	blx	r3
 800de9a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de9e:	182e      	adds	r6, r5, r0
 800dea0:	2e00      	cmp	r6, #0
 800dea2:	dd45      	ble.n	800df30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 800dea4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dea8:	4283      	cmp	r3, r0
 800deaa:	db41      	blt.n	800df30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 800deac:	441d      	add	r5, r3
 800deae:	fb95 f5f6 	sdiv	r5, r5, r6
 800deb2:	a844      	add	r0, sp, #272	; 0x110
 800deb4:	f002 f85a 	bl	800ff6c <_ZN8touchgfx12TextProviderC1Ev>
 800deb8:	7c23      	ldrb	r3, [r4, #16]
 800deba:	b14b      	cbz	r3, 800ded0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 800debc:	6820      	ldr	r0, [r4, #0]
 800debe:	6803      	ldr	r3, [r0, #0]
 800dec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dec2:	4798      	blx	r3
 800dec4:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800dec6:	4603      	mov	r3, r0
 800dec8:	4659      	mov	r1, fp
 800deca:	a844      	add	r0, sp, #272	; 0x110
 800decc:	f002 f86b 	bl	800ffa6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800ded0:	7c21      	ldrb	r1, [r4, #16]
 800ded2:	a810      	add	r0, sp, #64	; 0x40
 800ded4:	7963      	ldrb	r3, [r4, #5]
 800ded6:	9101      	str	r1, [sp, #4]
 800ded8:	6821      	ldr	r1, [r4, #0]
 800deda:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800dede:	9100      	str	r1, [sp, #0]
 800dee0:	a944      	add	r1, sp, #272	; 0x110
 800dee2:	f7ff fc8f 	bl	800d804 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800dee6:	7c23      	ldrb	r3, [r4, #16]
 800dee8:	bb23      	cbnz	r3, 800df34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 800deea:	fa1f fb86 	uxth.w	fp, r6
 800deee:	2d00      	cmp	r5, #0
 800def0:	dd57      	ble.n	800dfa2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 800def2:	7961      	ldrb	r1, [r4, #5]
 800def4:	4648      	mov	r0, r9
 800def6:	f002 f97b 	bl	80101f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800defa:	4603      	mov	r3, r0
 800defc:	f1b8 0f00 	cmp.w	r8, #0
 800df00:	d005      	beq.n	800df0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 800df02:	9008      	str	r0, [sp, #32]
 800df04:	a82e      	add	r0, sp, #184	; 0xb8
 800df06:	7961      	ldrb	r1, [r4, #5]
 800df08:	f002 f972 	bl	80101f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800df0c:	9b08      	ldr	r3, [sp, #32]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d044      	beq.n	800df9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800df12:	2b0a      	cmp	r3, #10
 800df14:	d1eb      	bne.n	800deee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 800df16:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800df1a:	3d01      	subs	r5, #1
 800df1c:	445b      	add	r3, fp
 800df1e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800df22:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800df26:	eba3 030b 	sub.w	r3, r3, fp
 800df2a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800df2e:	e7de      	b.n	800deee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 800df30:	2500      	movs	r5, #0
 800df32:	e7be      	b.n	800deb2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 800df34:	0073      	lsls	r3, r6, #1
 800df36:	9308      	str	r3, [sp, #32]
 800df38:	2d00      	cmp	r5, #0
 800df3a:	dd32      	ble.n	800dfa2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 800df3c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 800df40:	a810      	add	r0, sp, #64	; 0x40
 800df42:	9b08      	ldr	r3, [sp, #32]
 800df44:	428b      	cmp	r3, r1
 800df46:	bfd4      	ite	le
 800df48:	2100      	movle	r1, #0
 800df4a:	2101      	movgt	r1, #1
 800df4c:	f7ff fe6e 	bl	800dc2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800df50:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 800df54:	f10b 33ff 	add.w	r3, fp, #4294967295
 800df58:	fa1f fb83 	uxth.w	fp, r3
 800df5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df60:	459b      	cmp	fp, r3
 800df62:	d00b      	beq.n	800df7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800df64:	7961      	ldrb	r1, [r4, #5]
 800df66:	4648      	mov	r0, r9
 800df68:	f002 f942 	bl	80101f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800df6c:	f1b8 0f00 	cmp.w	r8, #0
 800df70:	d0f0      	beq.n	800df54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 800df72:	7961      	ldrb	r1, [r4, #5]
 800df74:	a82e      	add	r0, sp, #184	; 0xb8
 800df76:	f002 f93b 	bl	80101f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800df7a:	e7eb      	b.n	800df54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 800df7c:	b2b3      	uxth	r3, r6
 800df7e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800df82:	3d01      	subs	r5, #1
 800df84:	441a      	add	r2, r3
 800df86:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 800df8a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800df94:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1cd      	bne.n	800df38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 800df9c:	b05b      	add	sp, #364	; 0x16c
 800df9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfa2:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 800dfa6:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 800dfaa:	7c23      	ldrb	r3, [r4, #16]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d05f      	beq.n	800e070 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 800dfb0:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 800dfb4:	a810      	add	r0, sp, #64	; 0x40
 800dfb6:	458b      	cmp	fp, r1
 800dfb8:	bfd4      	ite	le
 800dfba:	2100      	movle	r1, #0
 800dfbc:	2101      	movgt	r1, #1
 800dfbe:	f7ff fe35 	bl	800dc2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800dfc2:	f1b8 0f00 	cmp.w	r8, #0
 800dfc6:	d04c      	beq.n	800e062 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 800dfc8:	7c23      	ldrb	r3, [r4, #16]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d053      	beq.n	800e076 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 800dfce:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 800dfd2:	7922      	ldrb	r2, [r4, #4]
 800dfd4:	2a01      	cmp	r2, #1
 800dfd6:	d13c      	bne.n	800e052 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800dfd8:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 800dfdc:	1ac0      	subs	r0, r0, r3
 800dfde:	2302      	movs	r3, #2
 800dfe0:	fb90 f0f3 	sdiv	r0, r0, r3
 800dfe4:	b200      	sxth	r0, r0
 800dfe6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800dfea:	4418      	add	r0, r3
 800dfec:	7c23      	ldrb	r3, [r4, #16]
 800dfee:	8028      	strh	r0, [r5, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d03a      	beq.n	800e06a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 800dff4:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 800dff8:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 800dffc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800e000:	f8cd 9010 	str.w	r9, [sp, #16]
 800e004:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e006:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800e00a:	2200      	movs	r2, #0
 800e00c:	2100      	movs	r1, #0
 800e00e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800e012:	e9cd 5700 	strd	r5, r7, [sp]
 800e016:	4652      	mov	r2, sl
 800e018:	f7ff fcb2 	bl	800d980 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d1bd      	bne.n	800df9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800e020:	b2b2      	uxth	r2, r6
 800e022:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800e026:	4611      	mov	r1, r2
 800e028:	4413      	add	r3, r2
 800e02a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 800e02e:	b21b      	sxth	r3, r3
 800e030:	1a52      	subs	r2, r2, r1
 800e032:	7c21      	ldrb	r1, [r4, #16]
 800e034:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800e038:	b212      	sxth	r2, r2
 800e03a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 800e03e:	b109      	cbz	r1, 800e044 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 800e040:	42b2      	cmp	r2, r6
 800e042:	dbab      	blt.n	800df9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800e044:	887a      	ldrh	r2, [r7, #2]
 800e046:	88f9      	ldrh	r1, [r7, #6]
 800e048:	440a      	add	r2, r1
 800e04a:	b212      	sxth	r2, r2
 800e04c:	4293      	cmp	r3, r2
 800e04e:	ddac      	ble.n	800dfaa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 800e050:	e7a4      	b.n	800df9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800e052:	2a02      	cmp	r2, #2
 800e054:	d107      	bne.n	800e066 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 800e056:	7be2      	ldrb	r2, [r4, #15]
 800e058:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 800e05c:	1a80      	subs	r0, r0, r2
 800e05e:	1ac0      	subs	r0, r0, r3
 800e060:	e7c0      	b.n	800dfe4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 800e062:	7be0      	ldrb	r0, [r4, #15]
 800e064:	e7bf      	b.n	800dfe6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 800e066:	2000      	movs	r0, #0
 800e068:	e7bd      	b.n	800dfe6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 800e06a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e06e:	e7c3      	b.n	800dff8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 800e070:	f1b8 0f00 	cmp.w	r8, #0
 800e074:	d0f5      	beq.n	800e062 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 800e076:	2300      	movs	r3, #0
 800e078:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e07c:	6821      	ldr	r1, [r4, #0]
 800e07e:	a82e      	add	r0, sp, #184	; 0xb8
 800e080:	f7ff fbfa 	bl	800d878 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800e084:	b203      	sxth	r3, r0
 800e086:	e7a4      	b.n	800dfd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0800e088 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800e088:	2b02      	cmp	r3, #2
 800e08a:	b510      	push	{r4, lr}
 800e08c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800e090:	d00b      	beq.n	800e0aa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800e092:	2b03      	cmp	r3, #3
 800e094:	d00e      	beq.n	800e0b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800e096:	2b01      	cmp	r3, #1
 800e098:	d001      	beq.n	800e09e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800e09a:	1860      	adds	r0, r4, r1
 800e09c:	bd10      	pop	{r4, pc}
 800e09e:	8880      	ldrh	r0, [r0, #4]
 800e0a0:	4420      	add	r0, r4
 800e0a2:	b200      	sxth	r0, r0
 800e0a4:	1a80      	subs	r0, r0, r2
 800e0a6:	3801      	subs	r0, #1
 800e0a8:	e7f8      	b.n	800e09c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800e0aa:	8880      	ldrh	r0, [r0, #4]
 800e0ac:	4420      	add	r0, r4
 800e0ae:	b200      	sxth	r0, r0
 800e0b0:	1a40      	subs	r0, r0, r1
 800e0b2:	e7f8      	b.n	800e0a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800e0b4:	18a0      	adds	r0, r4, r2
 800e0b6:	e7f1      	b.n	800e09c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800e0b8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	b510      	push	{r4, lr}
 800e0bc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800e0c0:	d006      	beq.n	800e0d0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800e0c2:	2b03      	cmp	r3, #3
 800e0c4:	d00a      	beq.n	800e0dc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	bf14      	ite	ne
 800e0ca:	18a0      	addne	r0, r4, r2
 800e0cc:	1860      	addeq	r0, r4, r1
 800e0ce:	bd10      	pop	{r4, pc}
 800e0d0:	88c0      	ldrh	r0, [r0, #6]
 800e0d2:	4420      	add	r0, r4
 800e0d4:	b200      	sxth	r0, r0
 800e0d6:	1a80      	subs	r0, r0, r2
 800e0d8:	3801      	subs	r0, #1
 800e0da:	e7f8      	b.n	800e0ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800e0dc:	88c0      	ldrh	r0, [r0, #6]
 800e0de:	4420      	add	r0, r4
 800e0e0:	b200      	sxth	r0, r0
 800e0e2:	1a40      	subs	r0, r0, r1
 800e0e4:	e7f8      	b.n	800e0d8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0800e0e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800e0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ec:	b0d1      	sub	sp, #324	; 0x144
 800e0ee:	4683      	mov	fp, r0
 800e0f0:	4614      	mov	r4, r2
 800e0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0f4:	f8bd 3170 	ldrh.w	r3, [sp, #368]	; 0x170
 800e0f8:	910c      	str	r1, [sp, #48]	; 0x30
 800e0fa:	930a      	str	r3, [sp, #40]	; 0x28
 800e0fc:	f89d 3174 	ldrb.w	r3, [sp, #372]	; 0x174
 800e100:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e102:	930b      	str	r3, [sp, #44]	; 0x2c
 800e104:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 800e108:	9f5b      	ldr	r7, [sp, #364]	; 0x16c
 800e10a:	930d      	str	r3, [sp, #52]	; 0x34
 800e10c:	6803      	ldr	r3, [r0, #0]
 800e10e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800e110:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e114:	47a8      	blx	r5
 800e116:	f8cb 0004 	str.w	r0, [fp, #4]
 800e11a:	2800      	cmp	r0, #0
 800e11c:	f000 814b 	beq.w	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e120:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800e124:	ed94 7a02 	vldr	s14, [r4, #8]
 800e128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e130:	f240 8141 	bls.w	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e134:	ed94 7a07 	vldr	s14, [r4, #28]
 800e138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e140:	f240 8139 	bls.w	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e144:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800e148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e150:	f240 8131 	bls.w	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e154:	6822      	ldr	r2, [r4, #0]
 800e156:	4b99      	ldr	r3, [pc, #612]	; (800e3bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2d4>)
 800e158:	429a      	cmp	r2, r3
 800e15a:	f2c0 812c 	blt.w	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e15e:	4998      	ldr	r1, [pc, #608]	; (800e3c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2d8>)
 800e160:	6963      	ldr	r3, [r4, #20]
 800e162:	428a      	cmp	r2, r1
 800e164:	f300 8127 	bgt.w	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e168:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800e16c:	4895      	ldr	r0, [pc, #596]	; (800e3c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2dc>)
 800e16e:	33ff      	adds	r3, #255	; 0xff
 800e170:	4283      	cmp	r3, r0
 800e172:	f200 8120 	bhi.w	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e178:	4a93      	ldr	r2, [pc, #588]	; (800e3c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2e0>)
 800e17a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800e17e:	33ff      	adds	r3, #255	; 0xff
 800e180:	4293      	cmp	r3, r2
 800e182:	f200 8118 	bhi.w	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e186:	6862      	ldr	r2, [r4, #4]
 800e188:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800e18c:	33ff      	adds	r3, #255	; 0xff
 800e18e:	4283      	cmp	r3, r0
 800e190:	f200 8111 	bhi.w	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e194:	69a1      	ldr	r1, [r4, #24]
 800e196:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800e19a:	33ff      	adds	r3, #255	; 0xff
 800e19c:	4283      	cmp	r3, r0
 800e19e:	f200 810a 	bhi.w	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e1a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e1a4:	4d88      	ldr	r5, [pc, #544]	; (800e3c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2e0>)
 800e1a6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800e1aa:	30ff      	adds	r0, #255	; 0xff
 800e1ac:	42a8      	cmp	r0, r5
 800e1ae:	f200 8102 	bhi.w	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e1b2:	428a      	cmp	r2, r1
 800e1b4:	f280 8083 	bge.w	800e2be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1d6>
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	f300 808c 	bgt.w	800e2d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ee>
 800e1be:	4299      	cmp	r1, r3
 800e1c0:	f2c0 8090 	blt.w	800e2e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1fc>
 800e1c4:	2501      	movs	r5, #1
 800e1c6:	2602      	movs	r6, #2
 800e1c8:	46a9      	mov	r9, r5
 800e1ca:	46b0      	mov	r8, r6
 800e1cc:	f04f 0a00 	mov.w	sl, #0
 800e1d0:	4621      	mov	r1, r4
 800e1d2:	a83f      	add	r0, sp, #252	; 0xfc
 800e1d4:	f002 f8f4 	bl	80103c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800e1d8:	4622      	mov	r2, r4
 800e1da:	f8cd 9000 	str.w	r9, [sp]
 800e1de:	4653      	mov	r3, sl
 800e1e0:	a93f      	add	r1, sp, #252	; 0xfc
 800e1e2:	a80f      	add	r0, sp, #60	; 0x3c
 800e1e4:	f002 fa1c 	bl	8010620 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800e1e8:	f8cd 8000 	str.w	r8, [sp]
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	4653      	mov	r3, sl
 800e1f0:	a93f      	add	r1, sp, #252	; 0xfc
 800e1f2:	a81f      	add	r0, sp, #124	; 0x7c
 800e1f4:	f002 fa14 	bl	8010620 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800e1f8:	4643      	mov	r3, r8
 800e1fa:	4622      	mov	r2, r4
 800e1fc:	f8cd 9000 	str.w	r9, [sp]
 800e200:	a93f      	add	r1, sp, #252	; 0xfc
 800e202:	a82f      	add	r0, sp, #188	; 0xbc
 800e204:	f002 fa0c 	bl	8010620 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800e208:	42ae      	cmp	r6, r5
 800e20a:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800e20c:	bfac      	ite	ge
 800e20e:	ad1f      	addge	r5, sp, #124	; 0x7c
 800e210:	ad0f      	addlt	r5, sp, #60	; 0x3c
 800e212:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 800e216:	bfa8      	it	ge
 800e218:	f04f 0801 	movge.w	r8, #1
 800e21c:	696b      	ldr	r3, [r5, #20]
 800e21e:	bfa8      	it	ge
 800e220:	ae0f      	addge	r6, sp, #60	; 0x3c
 800e222:	88fa      	ldrh	r2, [r7, #6]
 800e224:	bfb8      	it	lt
 800e226:	f04f 0800 	movlt.w	r8, #0
 800e22a:	444b      	add	r3, r9
 800e22c:	f9b7 9002 	ldrsh.w	r9, [r7, #2]
 800e230:	bfb8      	it	lt
 800e232:	ae1f      	addlt	r6, sp, #124	; 0x7c
 800e234:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800e236:	444a      	add	r2, r9
 800e238:	b212      	sxth	r2, r2
 800e23a:	4293      	cmp	r3, r2
 800e23c:	da5e      	bge.n	800e2fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x214>
 800e23e:	454b      	cmp	r3, r9
 800e240:	da12      	bge.n	800e268 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x180>
 800e242:	2c00      	cmp	r4, #0
 800e244:	dd5e      	ble.n	800e304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21c>
 800e246:	eba9 0903 	sub.w	r9, r9, r3
 800e24a:	454c      	cmp	r4, r9
 800e24c:	db58      	blt.n	800e300 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x218>
 800e24e:	f1b9 0f00 	cmp.w	r9, #0
 800e252:	dd09      	ble.n	800e268 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x180>
 800e254:	4649      	mov	r1, r9
 800e256:	a81f      	add	r0, sp, #124	; 0x7c
 800e258:	eba4 0409 	sub.w	r4, r4, r9
 800e25c:	f7ff fac6 	bl	800d7ec <_ZN8touchgfx4Edge4stepEi>
 800e260:	4649      	mov	r1, r9
 800e262:	a80f      	add	r0, sp, #60	; 0x3c
 800e264:	f7ff fac2 	bl	800d7ec <_ZN8touchgfx4Edge4stepEi>
 800e268:	2c00      	cmp	r4, #0
 800e26a:	dd4b      	ble.n	800e304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21c>
 800e26c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e26e:	4658      	mov	r0, fp
 800e270:	f8db 3000 	ldr.w	r3, [fp]
 800e274:	3c01      	subs	r4, #1
 800e276:	9206      	str	r2, [sp, #24]
 800e278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e27a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e27c:	9205      	str	r2, [sp, #20]
 800e27e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e280:	e9cd 7203 	strd	r7, r2, [sp, #12]
 800e284:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 800e286:	9202      	str	r2, [sp, #8]
 800e288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e28a:	e9cd 6200 	strd	r6, r2, [sp]
 800e28e:	aa3f      	add	r2, sp, #252	; 0xfc
 800e290:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800e294:	462b      	mov	r3, r5
 800e296:	47c8      	blx	r9
 800e298:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800e29a:	88f9      	ldrh	r1, [r7, #6]
 800e29c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e2a0:	696b      	ldr	r3, [r5, #20]
 800e2a2:	441a      	add	r2, r3
 800e2a4:	887b      	ldrh	r3, [r7, #2]
 800e2a6:	440b      	add	r3, r1
 800e2a8:	3201      	adds	r2, #1
 800e2aa:	b21b      	sxth	r3, r3
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	da29      	bge.n	800e304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21c>
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	f7ff fa59 	bl	800d768 <_ZN8touchgfx4Edge4stepEv>
 800e2b6:	4630      	mov	r0, r6
 800e2b8:	f7ff fa56 	bl	800d768 <_ZN8touchgfx4Edge4stepEv>
 800e2bc:	e7d4      	b.n	800e268 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x180>
 800e2be:	4299      	cmp	r1, r3
 800e2c0:	dc13      	bgt.n	800e2ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x202>
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	db14      	blt.n	800e2f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x208>
 800e2c6:	2602      	movs	r6, #2
 800e2c8:	2503      	movs	r5, #3
 800e2ca:	f04f 0900 	mov.w	r9, #0
 800e2ce:	46b0      	mov	r8, r6
 800e2d0:	f04f 0a01 	mov.w	sl, #1
 800e2d4:	e77c      	b.n	800e1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe8>
 800e2d6:	2501      	movs	r5, #1
 800e2d8:	2600      	movs	r6, #0
 800e2da:	46a9      	mov	r9, r5
 800e2dc:	46b0      	mov	r8, r6
 800e2de:	f04f 0a02 	mov.w	sl, #2
 800e2e2:	e775      	b.n	800e1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe8>
 800e2e4:	2502      	movs	r5, #2
 800e2e6:	2601      	movs	r6, #1
 800e2e8:	e76e      	b.n	800e1c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe0>
 800e2ea:	2500      	movs	r5, #0
 800e2ec:	2601      	movs	r6, #1
 800e2ee:	e7f4      	b.n	800e2da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f2>
 800e2f0:	2502      	movs	r5, #2
 800e2f2:	2603      	movs	r6, #3
 800e2f4:	f04f 0800 	mov.w	r8, #0
 800e2f8:	46a9      	mov	r9, r5
 800e2fa:	e7e9      	b.n	800e2d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1e8>
 800e2fc:	46a1      	mov	r9, r4
 800e2fe:	e7a6      	b.n	800e24e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x166>
 800e300:	46a1      	mov	r9, r4
 800e302:	e7a7      	b.n	800e254 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x16c>
 800e304:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 800e306:	f1b8 0f00 	cmp.w	r8, #0
 800e30a:	d14d      	bne.n	800e3a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c0>
 800e30c:	ae2f      	add	r6, sp, #188	; 0xbc
 800e30e:	ad0f      	add	r5, sp, #60	; 0x3c
 800e310:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800e312:	88fa      	ldrh	r2, [r7, #6]
 800e314:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 800e318:	696b      	ldr	r3, [r5, #20]
 800e31a:	4443      	add	r3, r8
 800e31c:	f9b7 8002 	ldrsh.w	r8, [r7, #2]
 800e320:	4442      	add	r2, r8
 800e322:	b212      	sxth	r2, r2
 800e324:	4293      	cmp	r3, r2
 800e326:	da42      	bge.n	800e3ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c6>
 800e328:	4543      	cmp	r3, r8
 800e32a:	da12      	bge.n	800e352 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x26a>
 800e32c:	2c00      	cmp	r4, #0
 800e32e:	dd42      	ble.n	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e330:	eba8 0803 	sub.w	r8, r8, r3
 800e334:	4544      	cmp	r4, r8
 800e336:	db3c      	blt.n	800e3b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ca>
 800e338:	f1b8 0f00 	cmp.w	r8, #0
 800e33c:	dd09      	ble.n	800e352 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x26a>
 800e33e:	4641      	mov	r1, r8
 800e340:	a82f      	add	r0, sp, #188	; 0xbc
 800e342:	eba4 0408 	sub.w	r4, r4, r8
 800e346:	f7ff fa51 	bl	800d7ec <_ZN8touchgfx4Edge4stepEi>
 800e34a:	4641      	mov	r1, r8
 800e34c:	a80f      	add	r0, sp, #60	; 0x3c
 800e34e:	f7ff fa4d 	bl	800d7ec <_ZN8touchgfx4Edge4stepEi>
 800e352:	2c00      	cmp	r4, #0
 800e354:	dd2f      	ble.n	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e356:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e358:	4658      	mov	r0, fp
 800e35a:	f8db 3000 	ldr.w	r3, [fp]
 800e35e:	3c01      	subs	r4, #1
 800e360:	9206      	str	r2, [sp, #24]
 800e362:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e364:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e366:	9205      	str	r2, [sp, #20]
 800e368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e36a:	e9cd 7203 	strd	r7, r2, [sp, #12]
 800e36e:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 800e370:	9202      	str	r2, [sp, #8]
 800e372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e374:	e9cd 6200 	strd	r6, r2, [sp]
 800e378:	aa3f      	add	r2, sp, #252	; 0xfc
 800e37a:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
 800e37e:	462b      	mov	r3, r5
 800e380:	47c0      	blx	r8
 800e382:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800e384:	88f9      	ldrh	r1, [r7, #6]
 800e386:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e38a:	696b      	ldr	r3, [r5, #20]
 800e38c:	441a      	add	r2, r3
 800e38e:	887b      	ldrh	r3, [r7, #2]
 800e390:	440b      	add	r3, r1
 800e392:	3201      	adds	r2, #1
 800e394:	b21b      	sxth	r3, r3
 800e396:	429a      	cmp	r2, r3
 800e398:	da0d      	bge.n	800e3b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 800e39a:	4628      	mov	r0, r5
 800e39c:	f7ff f9e4 	bl	800d768 <_ZN8touchgfx4Edge4stepEv>
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	f7ff f9e1 	bl	800d768 <_ZN8touchgfx4Edge4stepEv>
 800e3a6:	e7d4      	b.n	800e352 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x26a>
 800e3a8:	ae0f      	add	r6, sp, #60	; 0x3c
 800e3aa:	ad2f      	add	r5, sp, #188	; 0xbc
 800e3ac:	e7b0      	b.n	800e310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x228>
 800e3ae:	46a0      	mov	r8, r4
 800e3b0:	e7c2      	b.n	800e338 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x250>
 800e3b2:	46a0      	mov	r8, r4
 800e3b4:	e7c3      	b.n	800e33e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x256>
 800e3b6:	b051      	add	sp, #324	; 0x144
 800e3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3bc:	fffd8f01 	.word	0xfffd8f01
 800e3c0:	00027100 	.word	0x00027100
 800e3c4:	0004e1ff 	.word	0x0004e1ff
 800e3c8:	0004e1fe 	.word	0x0004e1fe

0800e3cc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800e3cc:	4b01      	ldr	r3, [pc, #4]	; (800e3d4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	601a      	str	r2, [r3, #0]
 800e3d2:	4770      	bx	lr
 800e3d4:	20001108 	.word	0x20001108

0800e3d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 800e3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3da:	1e05      	subs	r5, r0, #0
 800e3dc:	f04f 0601 	mov.w	r6, #1
 800e3e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e3e4:	bfba      	itte	lt
 800e3e6:	f04f 37ff 	movlt.w	r7, #4294967295
 800e3ea:	426d      	neglt	r5, r5
 800e3ec:	2701      	movge	r7, #1
 800e3ee:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 800e3f2:	f1be 0f00 	cmp.w	lr, #0
 800e3f6:	bfbc      	itt	lt
 800e3f8:	f1ce 0e00 	rsblt	lr, lr, #0
 800e3fc:	427f      	neglt	r7, r7
 800e3fe:	2c00      	cmp	r4, #0
 800e400:	fa4e f001 	asr.w	r0, lr, r1
 800e404:	fa06 f101 	lsl.w	r1, r6, r1
 800e408:	bfbc      	itt	lt
 800e40a:	4264      	neglt	r4, r4
 800e40c:	427f      	neglt	r7, r7
 800e40e:	3901      	subs	r1, #1
 800e410:	ea01 010e 	and.w	r1, r1, lr
 800e414:	434d      	muls	r5, r1
 800e416:	f8dc 1000 	ldr.w	r1, [ip]
 800e41a:	fb03 1300 	mla	r3, r3, r0, r1
 800e41e:	fb95 f1f4 	sdiv	r1, r5, r4
 800e422:	fb04 5511 	mls	r5, r4, r1, r5
 800e426:	441d      	add	r5, r3
 800e428:	fb95 f3f4 	sdiv	r3, r5, r4
 800e42c:	4419      	add	r1, r3
 800e42e:	fb04 5413 	mls	r4, r4, r3, r5
 800e432:	fb02 1000 	mla	r0, r2, r0, r1
 800e436:	f8cc 4000 	str.w	r4, [ip]
 800e43a:	4378      	muls	r0, r7
 800e43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e440 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800e440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e444:	4c24      	ldr	r4, [pc, #144]	; (800e4d8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 800e446:	b086      	sub	sp, #24
 800e448:	4605      	mov	r5, r0
 800e44a:	6807      	ldr	r7, [r0, #0]
 800e44c:	69a3      	ldr	r3, [r4, #24]
 800e44e:	b92b      	cbnz	r3, 800e45c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 800e450:	6840      	ldr	r0, [r0, #4]
 800e452:	e9c5 7000 	strd	r7, r0, [r5]
 800e456:	b006      	add	sp, #24
 800e458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e45c:	f04f 0802 	mov.w	r8, #2
 800e460:	68a2      	ldr	r2, [r4, #8]
 800e462:	ae06      	add	r6, sp, #24
 800e464:	6820      	ldr	r0, [r4, #0]
 800e466:	fb93 f1f8 	sdiv	r1, r3, r8
 800e46a:	440a      	add	r2, r1
 800e46c:	69e1      	ldr	r1, [r4, #28]
 800e46e:	f846 2d04 	str.w	r2, [r6, #-4]!
 800e472:	9700      	str	r7, [sp, #0]
 800e474:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e476:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800e47a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e47c:	f7ff ffac 	bl	800e3d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800e480:	69a3      	ldr	r3, [r4, #24]
 800e482:	4607      	mov	r7, r0
 800e484:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e486:	9301      	str	r3, [sp, #4]
 800e488:	686b      	ldr	r3, [r5, #4]
 800e48a:	6a21      	ldr	r1, [r4, #32]
 800e48c:	9300      	str	r3, [sp, #0]
 800e48e:	9602      	str	r6, [sp, #8]
 800e490:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e492:	6860      	ldr	r0, [r4, #4]
 800e494:	f7ff ffa0 	bl	800e3d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800e498:	69a2      	ldr	r2, [r4, #24]
 800e49a:	6963      	ldr	r3, [r4, #20]
 800e49c:	4407      	add	r7, r0
 800e49e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e4a0:	68e0      	ldr	r0, [r4, #12]
 800e4a2:	fb92 f8f8 	sdiv	r8, r2, r8
 800e4a6:	4443      	add	r3, r8
 800e4a8:	9305      	str	r3, [sp, #20]
 800e4aa:	682b      	ldr	r3, [r5, #0]
 800e4ac:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800e4b0:	9300      	str	r3, [sp, #0]
 800e4b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e4b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e4b6:	f7ff ff8f 	bl	800e3d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800e4ba:	69a3      	ldr	r3, [r4, #24]
 800e4bc:	4680      	mov	r8, r0
 800e4be:	9602      	str	r6, [sp, #8]
 800e4c0:	9301      	str	r3, [sp, #4]
 800e4c2:	686b      	ldr	r3, [r5, #4]
 800e4c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e4c6:	9300      	str	r3, [sp, #0]
 800e4c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e4ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e4cc:	6920      	ldr	r0, [r4, #16]
 800e4ce:	f7ff ff83 	bl	800e3d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800e4d2:	4440      	add	r0, r8
 800e4d4:	e7bd      	b.n	800e452 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 800e4d6:	bf00      	nop
 800e4d8:	2000110c 	.word	0x2000110c

0800e4dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800e4dc:	4b07      	ldr	r3, [pc, #28]	; (800e4fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800e4de:	b510      	push	{r4, lr}
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d108      	bne.n	800e4f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800e4e6:	4b06      	ldr	r3, [pc, #24]	; (800e500 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800e4e8:	880c      	ldrh	r4, [r1, #0]
 800e4ea:	881b      	ldrh	r3, [r3, #0]
 800e4ec:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	1b1b      	subs	r3, r3, r4
 800e4f4:	8003      	strh	r3, [r0, #0]
 800e4f6:	800a      	strh	r2, [r1, #0]
 800e4f8:	bd10      	pop	{r4, pc}
 800e4fa:	bf00      	nop
 800e4fc:	200010f8 	.word	0x200010f8
 800e500:	200010fc 	.word	0x200010fc

0800e504 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800e504:	4b0a      	ldr	r3, [pc, #40]	; (800e530 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800e506:	b510      	push	{r4, lr}
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d10e      	bne.n	800e52c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800e50e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800e512:	8843      	ldrh	r3, [r0, #2]
 800e514:	f9b0 4000 	ldrsh.w	r4, [r0]
 800e518:	18ca      	adds	r2, r1, r3
 800e51a:	4b06      	ldr	r3, [pc, #24]	; (800e534 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800e51c:	8044      	strh	r4, [r0, #2]
 800e51e:	881b      	ldrh	r3, [r3, #0]
 800e520:	1a9b      	subs	r3, r3, r2
 800e522:	8003      	strh	r3, [r0, #0]
 800e524:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e528:	8081      	strh	r1, [r0, #4]
 800e52a:	80c3      	strh	r3, [r0, #6]
 800e52c:	bd10      	pop	{r4, pc}
 800e52e:	bf00      	nop
 800e530:	200010f8 	.word	0x200010f8
 800e534:	200010f4 	.word	0x200010f4

0800e538 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800e538:	4b07      	ldr	r3, [pc, #28]	; (800e558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800e53a:	b510      	push	{r4, lr}
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d108      	bne.n	800e554 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800e542:	f9b1 3000 	ldrsh.w	r3, [r1]
 800e546:	f9b0 4000 	ldrsh.w	r4, [r0]
 800e54a:	8003      	strh	r3, [r0, #0]
 800e54c:	8893      	ldrh	r3, [r2, #4]
 800e54e:	3b01      	subs	r3, #1
 800e550:	1b1b      	subs	r3, r3, r4
 800e552:	800b      	strh	r3, [r1, #0]
 800e554:	bd10      	pop	{r4, pc}
 800e556:	bf00      	nop
 800e558:	200010f8 	.word	0x200010f8

0800e55c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800e55c:	4b08      	ldr	r3, [pc, #32]	; (800e580 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800e55e:	b513      	push	{r0, r1, r4, lr}
 800e560:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e564:	2400      	movs	r4, #0
 800e566:	4b07      	ldr	r3, [pc, #28]	; (800e584 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 800e568:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e56c:	466a      	mov	r2, sp
 800e56e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e572:	9400      	str	r4, [sp, #0]
 800e574:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e578:	f7ff ffde 	bl	800e538 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800e57c:	b002      	add	sp, #8
 800e57e:	bd10      	pop	{r4, pc}
 800e580:	200010f4 	.word	0x200010f4
 800e584:	200010f6 	.word	0x200010f6

0800e588 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 800e588:	4b0b      	ldr	r3, [pc, #44]	; (800e5b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d111      	bne.n	800e5b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 800e590:	680b      	ldr	r3, [r1, #0]
 800e592:	ed90 7a00 	vldr	s14, [r0]
 800e596:	6003      	str	r3, [r0, #0]
 800e598:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800e59c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800e5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 800e5a0:	ee07 3a90 	vmov	s15, r3
 800e5a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e5ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5b0:	edc1 7a00 	vstr	s15, [r1]
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop
 800e5b8:	200010f8 	.word	0x200010f8
 800e5bc:	38d1b717 	.word	0x38d1b717

0800e5c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800e5c0:	4b0a      	ldr	r3, [pc, #40]	; (800e5ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800e5c2:	460a      	mov	r2, r1
 800e5c4:	b510      	push	{r4, lr}
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d10d      	bne.n	800e5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800e5cc:	8881      	ldrh	r1, [r0, #4]
 800e5ce:	8803      	ldrh	r3, [r0, #0]
 800e5d0:	440b      	add	r3, r1
 800e5d2:	4601      	mov	r1, r0
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	f821 3b02 	strh.w	r3, [r1], #2
 800e5da:	f7ff ffad 	bl	800e538 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800e5de:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e5e2:	88c2      	ldrh	r2, [r0, #6]
 800e5e4:	80c3      	strh	r3, [r0, #6]
 800e5e6:	8082      	strh	r2, [r0, #4]
 800e5e8:	bd10      	pop	{r4, pc}
 800e5ea:	bf00      	nop
 800e5ec:	200010f8 	.word	0x200010f8

0800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800e5f0:	4b09      	ldr	r3, [pc, #36]	; (800e618 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800e5f2:	b507      	push	{r0, r1, r2, lr}
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e5fa:	4b08      	ldr	r3, [pc, #32]	; (800e61c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 800e5fc:	9100      	str	r1, [sp, #0]
 800e5fe:	4669      	mov	r1, sp
 800e600:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e604:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e608:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e60c:	f7ff ffd8 	bl	800e5c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e610:	b003      	add	sp, #12
 800e612:	f85d fb04 	ldr.w	pc, [sp], #4
 800e616:	bf00      	nop
 800e618:	200010f4 	.word	0x200010f4
 800e61c:	200010f6 	.word	0x200010f6

0800e620 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800e620:	4b03      	ldr	r3, [pc, #12]	; (800e630 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800e622:	6818      	ldr	r0, [r3, #0]
 800e624:	b110      	cbz	r0, 800e62c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800e626:	6803      	ldr	r3, [r0, #0]
 800e628:	699b      	ldr	r3, [r3, #24]
 800e62a:	4718      	bx	r3
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	2000115c 	.word	0x2000115c

0800e634 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800e634:	4770      	bx	lr
	...

0800e638 <_ZN8touchgfx11Application4drawEv>:
 800e638:	4b09      	ldr	r3, [pc, #36]	; (800e660 <_ZN8touchgfx11Application4drawEv+0x28>)
 800e63a:	b507      	push	{r0, r1, r2, lr}
 800e63c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e640:	2100      	movs	r1, #0
 800e642:	4b08      	ldr	r3, [pc, #32]	; (800e664 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800e644:	9100      	str	r1, [sp, #0]
 800e646:	4669      	mov	r1, sp
 800e648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e64c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e650:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e654:	6803      	ldr	r3, [r0, #0]
 800e656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e658:	4798      	blx	r3
 800e65a:	b003      	add	sp, #12
 800e65c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e660:	200010f4 	.word	0x200010f4
 800e664:	200010f6 	.word	0x200010f6

0800e668 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800e668:	4b03      	ldr	r3, [pc, #12]	; (800e678 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800e66a:	6818      	ldr	r0, [r3, #0]
 800e66c:	b110      	cbz	r0, 800e674 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800e66e:	6803      	ldr	r3, [r0, #0]
 800e670:	69db      	ldr	r3, [r3, #28]
 800e672:	4718      	bx	r3
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	2000115c 	.word	0x2000115c

0800e67c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800e67c:	4b03      	ldr	r3, [pc, #12]	; (800e68c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800e67e:	6818      	ldr	r0, [r3, #0]
 800e680:	b110      	cbz	r0, 800e688 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800e682:	6803      	ldr	r3, [r0, #0]
 800e684:	6a1b      	ldr	r3, [r3, #32]
 800e686:	4718      	bx	r3
 800e688:	4770      	bx	lr
 800e68a:	bf00      	nop
 800e68c:	2000115c 	.word	0x2000115c

0800e690 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800e690:	4b03      	ldr	r3, [pc, #12]	; (800e6a0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800e692:	6818      	ldr	r0, [r3, #0]
 800e694:	b110      	cbz	r0, 800e69c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800e696:	6803      	ldr	r3, [r0, #0]
 800e698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e69a:	4718      	bx	r3
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop
 800e6a0:	2000115c 	.word	0x2000115c

0800e6a4 <_ZN8touchgfx11Application15handleTickEventEv>:
 800e6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6a8:	4d3a      	ldr	r5, [pc, #232]	; (800e794 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	6828      	ldr	r0, [r5, #0]
 800e6ae:	b140      	cbz	r0, 800e6c2 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 800e6b0:	7a03      	ldrb	r3, [r0, #8]
 800e6b2:	b933      	cbnz	r3, 800e6c2 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 800e6b4:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 800e6b8:	6803      	ldr	r3, [r0, #0]
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c0:	4718      	bx	r3
 800e6c2:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800e6c6:	b97b      	cbnz	r3, 800e6e8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800e6c8:	b170      	cbz	r0, 800e6e8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800e6ca:	7a03      	ldrb	r3, [r0, #8]
 800e6cc:	b163      	cbz	r3, 800e6e8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800e6ce:	4b32      	ldr	r3, [pc, #200]	; (800e798 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 800e6d0:	6818      	ldr	r0, [r3, #0]
 800e6d2:	b110      	cbz	r0, 800e6da <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 800e6d4:	6803      	ldr	r3, [r0, #0]
 800e6d6:	691b      	ldr	r3, [r3, #16]
 800e6d8:	4798      	blx	r3
 800e6da:	6828      	ldr	r0, [r5, #0]
 800e6dc:	6803      	ldr	r3, [r0, #0]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	4798      	blx	r3
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 800e6e8:	2500      	movs	r5, #0
 800e6ea:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800e6ee:	42a8      	cmp	r0, r5
 800e6f0:	dd0c      	ble.n	800e70c <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 800e6f2:	1963      	adds	r3, r4, r5
 800e6f4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800e6f8:	b132      	cbz	r2, 800e708 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 800e6fa:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800e6fe:	4413      	add	r3, r2
 800e700:	6858      	ldr	r0, [r3, #4]
 800e702:	6803      	ldr	r3, [r0, #0]
 800e704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e706:	4798      	blx	r3
 800e708:	3501      	adds	r5, #1
 800e70a:	e7ee      	b.n	800e6ea <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 800e70c:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 800e710:	3801      	subs	r0, #1
 800e712:	f04f 0c00 	mov.w	ip, #0
 800e716:	3678      	adds	r6, #120	; 0x78
 800e718:	1c43      	adds	r3, r0, #1
 800e71a:	d033      	beq.n	800e784 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 800e71c:	1823      	adds	r3, r4, r0
 800e71e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800e722:	bb6a      	cbnz	r2, 800e780 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 800e724:	b281      	uxth	r1, r0
 800e726:	1d25      	adds	r5, r4, #4
 800e728:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800e72c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800e730:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 800e734:	4293      	cmp	r3, r2
 800e736:	dc0a      	bgt.n	800e74e <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 800e738:	f101 0288 	add.w	r2, r1, #136	; 0x88
 800e73c:	4422      	add	r2, r4
 800e73e:	18b1      	adds	r1, r6, r2
 800e740:	b289      	uxth	r1, r1
 800e742:	428b      	cmp	r3, r1
 800e744:	d919      	bls.n	800e77a <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 800e746:	7851      	ldrb	r1, [r2, #1]
 800e748:	f802 1b01 	strb.w	r1, [r2], #1
 800e74c:	e7f7      	b.n	800e73e <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 800e74e:	682f      	ldr	r7, [r5, #0]
 800e750:	f105 0804 	add.w	r8, r5, #4
 800e754:	45b9      	cmp	r9, r7
 800e756:	d10d      	bne.n	800e774 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 800e758:	4696      	mov	lr, r2
 800e75a:	f1be 0f1e 	cmp.w	lr, #30
 800e75e:	dc06      	bgt.n	800e76e <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 800e760:	f10e 0e01 	add.w	lr, lr, #1
 800e764:	686f      	ldr	r7, [r5, #4]
 800e766:	4573      	cmp	r3, lr
 800e768:	f845 7b04 	str.w	r7, [r5], #4
 800e76c:	dcf5      	bgt.n	800e75a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 800e76e:	3b01      	subs	r3, #1
 800e770:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 800e774:	3201      	adds	r2, #1
 800e776:	4645      	mov	r5, r8
 800e778:	e7da      	b.n	800e730 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 800e77a:	4423      	add	r3, r4
 800e77c:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 800e780:	3801      	subs	r0, #1
 800e782:	e7c9      	b.n	800e718 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 800e784:	4b04      	ldr	r3, [pc, #16]	; (800e798 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 800e786:	6818      	ldr	r0, [r3, #0]
 800e788:	b110      	cbz	r0, 800e790 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 800e78a:	6803      	ldr	r3, [r0, #0]
 800e78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78e:	e795      	b.n	800e6bc <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 800e790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e794:	20001160 	.word	0x20001160
 800e798:	2000115c 	.word	0x2000115c

0800e79c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800e79c:	b570      	push	{r4, r5, r6, lr}
 800e79e:	4606      	mov	r6, r0
 800e7a0:	460c      	mov	r4, r1
 800e7a2:	b929      	cbnz	r1, 800e7b0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800e7a4:	4b0c      	ldr	r3, [pc, #48]	; (800e7d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 800e7a6:	2164      	movs	r1, #100	; 0x64
 800e7a8:	4a0c      	ldr	r2, [pc, #48]	; (800e7dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 800e7aa:	480d      	ldr	r0, [pc, #52]	; (800e7e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 800e7ac:	f00a fa18 	bl	8018be0 <__assert_func>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	4d0c      	ldr	r5, [pc, #48]	; (800e7e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 800e7b4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800e7b8:	6828      	ldr	r0, [r5, #0]
 800e7ba:	b110      	cbz	r0, 800e7c2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 800e7bc:	6803      	ldr	r3, [r0, #0]
 800e7be:	695b      	ldr	r3, [r3, #20]
 800e7c0:	4798      	blx	r3
 800e7c2:	602c      	str	r4, [r5, #0]
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	4798      	blx	r3
 800e7cc:	6833      	ldr	r3, [r6, #0]
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7d6:	4718      	bx	r3
 800e7d8:	0801b570 	.word	0x0801b570
 800e7dc:	0801b638 	.word	0x0801b638
 800e7e0:	0801b57a 	.word	0x0801b57a
 800e7e4:	2000115c 	.word	0x2000115c

0800e7e8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800e7e8:	b510      	push	{r4, lr}
 800e7ea:	f9b1 4000 	ldrsh.w	r4, [r1]
 800e7ee:	888a      	ldrh	r2, [r1, #4]
 800e7f0:	f9b0 3000 	ldrsh.w	r3, [r0]
 800e7f4:	4422      	add	r2, r4
 800e7f6:	b212      	sxth	r2, r2
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	da15      	bge.n	800e828 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800e7fc:	8882      	ldrh	r2, [r0, #4]
 800e7fe:	4413      	add	r3, r2
 800e800:	b21b      	sxth	r3, r3
 800e802:	429c      	cmp	r4, r3
 800e804:	da10      	bge.n	800e828 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800e806:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800e80a:	88c9      	ldrh	r1, [r1, #6]
 800e80c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800e810:	4419      	add	r1, r3
 800e812:	b209      	sxth	r1, r1
 800e814:	428a      	cmp	r2, r1
 800e816:	da07      	bge.n	800e828 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800e818:	88c0      	ldrh	r0, [r0, #6]
 800e81a:	4410      	add	r0, r2
 800e81c:	b200      	sxth	r0, r0
 800e81e:	4283      	cmp	r3, r0
 800e820:	bfac      	ite	ge
 800e822:	2000      	movge	r0, #0
 800e824:	2001      	movlt	r0, #1
 800e826:	bd10      	pop	{r4, pc}
 800e828:	2000      	movs	r0, #0
 800e82a:	e7fc      	b.n	800e826 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800e82c <_ZNK8touchgfx4Rect8includesERKS0_>:
 800e82c:	b570      	push	{r4, r5, r6, lr}
 800e82e:	f9b1 4000 	ldrsh.w	r4, [r1]
 800e832:	f9b0 5000 	ldrsh.w	r5, [r0]
 800e836:	42ac      	cmp	r4, r5
 800e838:	db18      	blt.n	800e86c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800e83a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800e83e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800e842:	429a      	cmp	r2, r3
 800e844:	db12      	blt.n	800e86c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800e846:	8886      	ldrh	r6, [r0, #4]
 800e848:	4435      	add	r5, r6
 800e84a:	888e      	ldrh	r6, [r1, #4]
 800e84c:	4434      	add	r4, r6
 800e84e:	b22d      	sxth	r5, r5
 800e850:	b224      	sxth	r4, r4
 800e852:	42a5      	cmp	r5, r4
 800e854:	db0a      	blt.n	800e86c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800e856:	88c0      	ldrh	r0, [r0, #6]
 800e858:	4418      	add	r0, r3
 800e85a:	88cb      	ldrh	r3, [r1, #6]
 800e85c:	441a      	add	r2, r3
 800e85e:	b200      	sxth	r0, r0
 800e860:	b212      	sxth	r2, r2
 800e862:	4290      	cmp	r0, r2
 800e864:	bfb4      	ite	lt
 800e866:	2000      	movlt	r0, #0
 800e868:	2001      	movge	r0, #1
 800e86a:	bd70      	pop	{r4, r5, r6, pc}
 800e86c:	2000      	movs	r0, #0
 800e86e:	e7fc      	b.n	800e86a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0800e870 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800e870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e872:	4604      	mov	r4, r0
 800e874:	4608      	mov	r0, r1
 800e876:	460d      	mov	r5, r1
 800e878:	f7fd fb7e 	bl	800bf78 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e87c:	b978      	cbnz	r0, 800e89e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800e87e:	4620      	mov	r0, r4
 800e880:	f7fd fb7a 	bl	800bf78 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e884:	f9b5 6000 	ldrsh.w	r6, [r5]
 800e888:	b150      	cbz	r0, 800e8a0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800e88a:	8026      	strh	r6, [r4, #0]
 800e88c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800e890:	8063      	strh	r3, [r4, #2]
 800e892:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e896:	80a3      	strh	r3, [r4, #4]
 800e898:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e89c:	80e3      	strh	r3, [r4, #6]
 800e89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8a0:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e8a4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800e8a8:	42b1      	cmp	r1, r6
 800e8aa:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800e8ae:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800e8b2:	460f      	mov	r7, r1
 800e8b4:	88ed      	ldrh	r5, [r5, #6]
 800e8b6:	bfa8      	it	ge
 800e8b8:	4637      	movge	r7, r6
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	4618      	mov	r0, r3
 800e8be:	4466      	add	r6, ip
 800e8c0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800e8c4:	bfa8      	it	ge
 800e8c6:	4610      	movge	r0, r2
 800e8c8:	442a      	add	r2, r5
 800e8ca:	88e5      	ldrh	r5, [r4, #6]
 800e8cc:	4461      	add	r1, ip
 800e8ce:	b236      	sxth	r6, r6
 800e8d0:	8027      	strh	r7, [r4, #0]
 800e8d2:	442b      	add	r3, r5
 800e8d4:	b209      	sxth	r1, r1
 800e8d6:	b212      	sxth	r2, r2
 800e8d8:	8060      	strh	r0, [r4, #2]
 800e8da:	b21b      	sxth	r3, r3
 800e8dc:	428e      	cmp	r6, r1
 800e8de:	bfac      	ite	ge
 800e8e0:	ebc7 0106 	rsbge	r1, r7, r6
 800e8e4:	ebc7 0101 	rsblt	r1, r7, r1
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	bfac      	ite	ge
 800e8ec:	ebc0 0202 	rsbge	r2, r0, r2
 800e8f0:	ebc0 0203 	rsblt	r2, r0, r3
 800e8f4:	80a1      	strh	r1, [r4, #4]
 800e8f6:	80e2      	strh	r2, [r4, #6]
 800e8f8:	e7d1      	b.n	800e89e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800e8fc <_ZN8touchgfx11Application11getInstanceEv>:
 800e8fc:	4b01      	ldr	r3, [pc, #4]	; (800e904 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800e8fe:	6818      	ldr	r0, [r3, #0]
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	2000116c 	.word	0x2000116c

0800e908 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800e908:	2300      	movs	r3, #0
 800e90a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800e90e:	30a8      	adds	r0, #168	; 0xa8
 800e910:	f820 3c24 	strh.w	r3, [r0, #-36]
 800e914:	f802 3b01 	strb.w	r3, [r2], #1
 800e918:	4282      	cmp	r2, r0
 800e91a:	d1fb      	bne.n	800e914 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800e91c:	4770      	bx	lr

0800e91e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800e91e:	4603      	mov	r3, r0
 800e920:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800e924:	2200      	movs	r2, #0
 800e926:	801a      	strh	r2, [r3, #0]
 800e928:	3308      	adds	r3, #8
 800e92a:	f823 2c06 	strh.w	r2, [r3, #-6]
 800e92e:	f823 2c04 	strh.w	r2, [r3, #-4]
 800e932:	f823 2c02 	strh.w	r2, [r3, #-2]
 800e936:	428b      	cmp	r3, r1
 800e938:	d1f5      	bne.n	800e926 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800e93a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800e93e:	4770      	bx	lr

0800e940 <_ZN8touchgfx11ApplicationC1Ev>:
 800e940:	b570      	push	{r4, r5, r6, lr}
 800e942:	4b16      	ldr	r3, [pc, #88]	; (800e99c <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 800e944:	2500      	movs	r5, #0
 800e946:	4604      	mov	r4, r0
 800e948:	30a8      	adds	r0, #168	; 0xa8
 800e94a:	f840 3ca8 	str.w	r3, [r0, #-168]
 800e94e:	f820 5c24 	strh.w	r5, [r0, #-36]
 800e952:	f7ff ffe4 	bl	800e91e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800e956:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800e95a:	f7ff ffe0 	bl	800e91e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800e95e:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 800e962:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 800e966:	490e      	ldr	r1, [pc, #56]	; (800e9a0 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 800e968:	480e      	ldr	r0, [pc, #56]	; (800e9a4 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 800e96a:	f00a f807 	bl	801897c <CRC_Lock>
 800e96e:	4e0e      	ldr	r6, [pc, #56]	; (800e9a8 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 800e970:	4b0e      	ldr	r3, [pc, #56]	; (800e9ac <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800e972:	b158      	cbz	r0, 800e98c <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 800e974:	801d      	strh	r5, [r3, #0]
 800e976:	2300      	movs	r3, #0
 800e978:	4a0d      	ldr	r2, [pc, #52]	; (800e9b0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800e97a:	4620      	mov	r0, r4
 800e97c:	6013      	str	r3, [r2, #0]
 800e97e:	4a0d      	ldr	r2, [pc, #52]	; (800e9b4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800e980:	6033      	str	r3, [r6, #0]
 800e982:	6013      	str	r3, [r2, #0]
 800e984:	f7ff ffc0 	bl	800e908 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800e988:	4620      	mov	r0, r4
 800e98a:	bd70      	pop	{r4, r5, r6, pc}
 800e98c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e990:	2002      	movs	r0, #2
 800e992:	801a      	strh	r2, [r3, #0]
 800e994:	6030      	str	r0, [r6, #0]
 800e996:	f000 ff43 	bl	800f820 <_ZN8touchgfx6Screen4drawEv>
 800e99a:	e7ec      	b.n	800e976 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 800e99c:	0801b604 	.word	0x0801b604
 800e9a0:	b5e8b5cd 	.word	0xb5e8b5cd
 800e9a4:	f407a5c2 	.word	0xf407a5c2
 800e9a8:	2000115c 	.word	0x2000115c
 800e9ac:	20000024 	.word	0x20000024
 800e9b0:	2000116c 	.word	0x2000116c
 800e9b4:	20001160 	.word	0x20001160

0800e9b8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	8003      	strh	r3, [r0, #0]
 800e9bc:	8043      	strh	r3, [r0, #2]
 800e9be:	8083      	strh	r3, [r0, #4]
 800e9c0:	80c3      	strh	r3, [r0, #6]
 800e9c2:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	b530      	push	{r4, r5, lr}
 800e9ca:	d912      	bls.n	800e9f2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 800e9cc:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800e9d0:	3b01      	subs	r3, #1
 800e9d2:	6825      	ldr	r5, [r4, #0]
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	6005      	str	r5, [r0, #0]
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	6865      	ldr	r5, [r4, #4]
 800e9dc:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 800e9e0:	6045      	str	r5, [r0, #4]
 800e9e2:	d906      	bls.n	800e9f2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 800e9e4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e9e8:	681d      	ldr	r5, [r3, #0]
 800e9ea:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 800e9ee:	685d      	ldr	r5, [r3, #4]
 800e9f0:	6065      	str	r5, [r4, #4]
 800e9f2:	bd30      	pop	{r4, r5, pc}

0800e9f4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 800e9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9f6:	466b      	mov	r3, sp
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	e883 0006 	stmia.w	r3, {r1, r2}
 800e9fe:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800ea02:	2a07      	cmp	r2, #7
 800ea04:	d906      	bls.n	800ea14 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 800ea06:	4b09      	ldr	r3, [pc, #36]	; (800ea2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 800ea08:	f44f 7102 	mov.w	r1, #520	; 0x208
 800ea0c:	4a08      	ldr	r2, [pc, #32]	; (800ea30 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 800ea0e:	4809      	ldr	r0, [pc, #36]	; (800ea34 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 800ea10:	f00a f8e6 	bl	8018be0 <__assert_func>
 800ea14:	1c51      	adds	r1, r2, #1
 800ea16:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 800ea1a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800ea1e:	cb03      	ldmia	r3!, {r0, r1}
 800ea20:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 800ea24:	6069      	str	r1, [r5, #4]
 800ea26:	b003      	add	sp, #12
 800ea28:	bd30      	pop	{r4, r5, pc}
 800ea2a:	bf00      	nop
 800ea2c:	0801b5a4 	.word	0x0801b5a4
 800ea30:	0801b67c 	.word	0x0801b67c
 800ea34:	0801b5d3 	.word	0x0801b5d3

0800ea38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800ea38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea3c:	b089      	sub	sp, #36	; 0x24
 800ea3e:	4606      	mov	r6, r0
 800ea40:	466c      	mov	r4, sp
 800ea42:	4620      	mov	r0, r4
 800ea44:	e884 0006 	stmia.w	r4, {r1, r2}
 800ea48:	f7fd fa96 	bl	800bf78 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ea4c:	bbb0      	cbnz	r0, 800eabc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 800ea4e:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 800ea52:	b1fd      	cbz	r5, 800ea94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 800ea54:	3d01      	subs	r5, #1
 800ea56:	af04      	add	r7, sp, #16
 800ea58:	f04f 090a 	mov.w	r9, #10
 800ea5c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 800ea60:	ab02      	add	r3, sp, #8
 800ea62:	fa1f f885 	uxth.w	r8, r5
 800ea66:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800ea6a:	6851      	ldr	r1, [r2, #4]
 800ea6c:	c303      	stmia	r3!, {r0, r1}
 800ea6e:	4621      	mov	r1, r4
 800ea70:	a802      	add	r0, sp, #8
 800ea72:	f7ff fedb 	bl	800e82c <_ZNK8touchgfx4Rect8includesERKS0_>
 800ea76:	bb08      	cbnz	r0, 800eabc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 800ea78:	a902      	add	r1, sp, #8
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f7ff fed6 	bl	800e82c <_ZNK8touchgfx4Rect8includesERKS0_>
 800ea80:	b1f8      	cbz	r0, 800eac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 800ea82:	4642      	mov	r2, r8
 800ea84:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800ea88:	a806      	add	r0, sp, #24
 800ea8a:	f7ff ff95 	bl	800e9b8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ea8e:	f115 35ff 	adds.w	r5, r5, #4294967295
 800ea92:	d2e3      	bcs.n	800ea5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 800ea94:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 800ea98:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 800ea9c:	2b08      	cmp	r3, #8
 800ea9e:	d108      	bne.n	800eab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	a806      	add	r0, sp, #24
 800eaa4:	2207      	movs	r2, #7
 800eaa6:	f7ff ff87 	bl	800e9b8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800eaaa:	a906      	add	r1, sp, #24
 800eaac:	4620      	mov	r0, r4
 800eaae:	f7ff fedf 	bl	800e870 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800eab2:	4628      	mov	r0, r5
 800eab4:	e894 0006 	ldmia.w	r4, {r1, r2}
 800eab8:	f7ff ff9c 	bl	800e9f4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800eabc:	b009      	add	sp, #36	; 0x24
 800eabe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eac2:	4621      	mov	r1, r4
 800eac4:	a802      	add	r0, sp, #8
 800eac6:	f7ff fe8f 	bl	800e7e8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800eaca:	b150      	cbz	r0, 800eae2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 800eacc:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800ead0:	a806      	add	r0, sp, #24
 800ead2:	4642      	mov	r2, r8
 800ead4:	f7ff ff70 	bl	800e9b8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ead8:	a902      	add	r1, sp, #8
 800eada:	4620      	mov	r0, r4
 800eadc:	f7ff fec8 	bl	800e870 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800eae0:	e7d5      	b.n	800ea8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800eae2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800eae6:	e887 0003 	stmia.w	r7, {r0, r1}
 800eaea:	a902      	add	r1, sp, #8
 800eaec:	4638      	mov	r0, r7
 800eaee:	f7ff febf 	bl	800e870 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800eaf2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800eaf6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800eafa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800eafe:	fb13 f302 	smulbb	r3, r3, r2
 800eb02:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800eb06:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800eb0a:	fb11 f102 	smulbb	r1, r1, r2
 800eb0e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800eb12:	fb09 f303 	mul.w	r3, r9, r3
 800eb16:	fb12 1100 	smlabb	r1, r2, r0, r1
 800eb1a:	220b      	movs	r2, #11
 800eb1c:	434a      	muls	r2, r1
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	dab5      	bge.n	800ea8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800eb22:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800eb26:	a806      	add	r0, sp, #24
 800eb28:	4642      	mov	r2, r8
 800eb2a:	f7ff ff45 	bl	800e9b8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800eb2e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800eb32:	e884 0003 	stmia.w	r4, {r0, r1}
 800eb36:	e7aa      	b.n	800ea8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0800eb38 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800eb38:	4b1d      	ldr	r3, [pc, #116]	; (800ebb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 800eb3a:	b530      	push	{r4, r5, lr}
 800eb3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800eb40:	b085      	sub	sp, #20
 800eb42:	4b1c      	ldr	r3, [pc, #112]	; (800ebb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 800eb44:	460c      	mov	r4, r1
 800eb46:	2100      	movs	r1, #0
 800eb48:	4605      	mov	r5, r0
 800eb4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb4e:	6820      	ldr	r0, [r4, #0]
 800eb50:	9100      	str	r1, [sp, #0]
 800eb52:	f8ad 3006 	strh.w	r3, [sp, #6]
 800eb56:	ab02      	add	r3, sp, #8
 800eb58:	6861      	ldr	r1, [r4, #4]
 800eb5a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800eb5e:	c303      	stmia	r3!, {r0, r1}
 800eb60:	4669      	mov	r1, sp
 800eb62:	a802      	add	r0, sp, #8
 800eb64:	f7fd f9c4 	bl	800bef0 <_ZN8touchgfx4RectaNERKS0_>
 800eb68:	ab02      	add	r3, sp, #8
 800eb6a:	cb03      	ldmia	r3!, {r0, r1}
 800eb6c:	4b12      	ldr	r3, [pc, #72]	; (800ebb8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 800eb6e:	6020      	str	r0, [r4, #0]
 800eb70:	6818      	ldr	r0, [r3, #0]
 800eb72:	6061      	str	r1, [r4, #4]
 800eb74:	b138      	cbz	r0, 800eb86 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800eb76:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 800eb7a:	b133      	cbz	r3, 800eb8a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 800eb7c:	6821      	ldr	r1, [r4, #0]
 800eb7e:	4628      	mov	r0, r5
 800eb80:	6862      	ldr	r2, [r4, #4]
 800eb82:	f7ff ff59 	bl	800ea38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800eb86:	b005      	add	sp, #20
 800eb88:	bd30      	pop	{r4, r5, pc}
 800eb8a:	6803      	ldr	r3, [r0, #0]
 800eb8c:	4621      	mov	r1, r4
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	4798      	blx	r3
 800eb92:	4b0a      	ldr	r3, [pc, #40]	; (800ebbc <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 800eb94:	6818      	ldr	r0, [r3, #0]
 800eb96:	b118      	cbz	r0, 800eba0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 800eb98:	6803      	ldr	r3, [r0, #0]
 800eb9a:	4621      	mov	r1, r4
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	4798      	blx	r3
 800eba0:	4b07      	ldr	r3, [pc, #28]	; (800ebc0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 800eba2:	4621      	mov	r1, r4
 800eba4:	6818      	ldr	r0, [r3, #0]
 800eba6:	6803      	ldr	r3, [r0, #0]
 800eba8:	695b      	ldr	r3, [r3, #20]
 800ebaa:	4798      	blx	r3
 800ebac:	e7eb      	b.n	800eb86 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800ebae:	bf00      	nop
 800ebb0:	200010f4 	.word	0x200010f4
 800ebb4:	200010f6 	.word	0x200010f6
 800ebb8:	2000115c 	.word	0x2000115c
 800ebbc:	20001158 	.word	0x20001158
 800ebc0:	20001100 	.word	0x20001100

0800ebc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 800ebc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc8:	4604      	mov	r4, r0
 800ebca:	b09b      	sub	sp, #108	; 0x6c
 800ebcc:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 800ebd0:	b129      	cbz	r1, 800ebde <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800ebd8:	b01b      	add	sp, #108	; 0x6c
 800ebda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebde:	4baf      	ldr	r3, [pc, #700]	; (800ee9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	b33b      	cbz	r3, 800ec34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 800ebe4:	4dae      	ldr	r5, [pc, #696]	; (800eea0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	f7fd f9c6 	bl	800bf78 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ebec:	4606      	mov	r6, r0
 800ebee:	bb08      	cbnz	r0, 800ec34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	f7ff fc87 	bl	800e504 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800ebf6:	6829      	ldr	r1, [r5, #0]
 800ebf8:	686a      	ldr	r2, [r5, #4]
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	f7ff ff1c 	bl	800ea38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800ec00:	802e      	strh	r6, [r5, #0]
 800ec02:	806e      	strh	r6, [r5, #2]
 800ec04:	80ae      	strh	r6, [r5, #4]
 800ec06:	80ee      	strh	r6, [r5, #6]
 800ec08:	4fa6      	ldr	r7, [pc, #664]	; (800eea4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 800ec0a:	a809      	add	r0, sp, #36	; 0x24
 800ec0c:	f7ff fe87 	bl	800e91e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ec10:	883d      	ldrh	r5, [r7, #0]
 800ec12:	462e      	mov	r6, r5
 800ec14:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800ec18:	42b3      	cmp	r3, r6
 800ec1a:	d910      	bls.n	800ec3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 800ec1c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800ec20:	3601      	adds	r6, #1
 800ec22:	a809      	add	r0, sp, #36	; 0x24
 800ec24:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800ec28:	b2b6      	uxth	r6, r6
 800ec2a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800ec2e:	f7ff fee1 	bl	800e9f4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800ec32:	e7ef      	b.n	800ec14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 800ec34:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d1e5      	bne.n	800ec08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 800ec3c:	e7cc      	b.n	800ebd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800ec3e:	462e      	mov	r6, r5
 800ec40:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800ec44:	42b3      	cmp	r3, r6
 800ec46:	d90b      	bls.n	800ec60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 800ec48:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800ec4c:	3601      	adds	r6, #1
 800ec4e:	4620      	mov	r0, r4
 800ec50:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800ec54:	b2b6      	uxth	r6, r6
 800ec56:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800ec5a:	f7ff feed 	bl	800ea38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800ec5e:	e7ef      	b.n	800ec40 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 800ec60:	4e91      	ldr	r6, [pc, #580]	; (800eea8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 800ec62:	6833      	ldr	r3, [r6, #0]
 800ec64:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	f040 8092 	bne.w	800ed92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 800ec6e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800ec72:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 800ec76:	f04f 0900 	mov.w	r9, #0
 800ec7a:	33aa      	adds	r3, #170	; 0xaa
 800ec7c:	42a8      	cmp	r0, r5
 800ec7e:	f103 0308 	add.w	r3, r3, #8
 800ec82:	dd0a      	ble.n	800ec9a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 800ec84:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800ec88:	3501      	adds	r5, #1
 800ec8a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800ec8e:	440a      	add	r2, r1
 800ec90:	b212      	sxth	r2, r2
 800ec92:	4591      	cmp	r9, r2
 800ec94:	bfb8      	it	lt
 800ec96:	4691      	movlt	r9, r2
 800ec98:	e7f0      	b.n	800ec7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 800ec9a:	4b84      	ldr	r3, [pc, #528]	; (800eeac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 800ec9c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800eeb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 800eca0:	881d      	ldrh	r5, [r3, #0]
 800eca2:	2300      	movs	r3, #0
 800eca4:	2d0f      	cmp	r5, #15
 800eca6:	bf8c      	ite	hi
 800eca8:	08ed      	lsrhi	r5, r5, #3
 800ecaa:	2501      	movls	r5, #1
 800ecac:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ecb0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800ecb4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800ecb8:	6830      	ldr	r0, [r6, #0]
 800ecba:	440b      	add	r3, r1
 800ecbc:	6802      	ldr	r2, [r0, #0]
 800ecbe:	b21b      	sxth	r3, r3
 800ecc0:	4599      	cmp	r9, r3
 800ecc2:	dd49      	ble.n	800ed58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 800ecc4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800ecc8:	4798      	blx	r3
 800ecca:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800ecce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	b21b      	sxth	r3, r3
 800ecd6:	195a      	adds	r2, r3, r5
 800ecd8:	4290      	cmp	r0, r2
 800ecda:	da07      	bge.n	800ecec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 800ecdc:	4581      	cmp	r9, r0
 800ecde:	dd05      	ble.n	800ecec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 800ece0:	4298      	cmp	r0, r3
 800ece2:	da33      	bge.n	800ed4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	dd31      	ble.n	800ed4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 800ece8:	4648      	mov	r0, r9
 800ecea:	e004      	b.n	800ecf6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 800ecec:	4298      	cmp	r0, r3
 800ecee:	dbfb      	blt.n	800ece8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 800ecf0:	4548      	cmp	r0, r9
 800ecf2:	bfa8      	it	ge
 800ecf4:	4648      	movge	r0, r9
 800ecf6:	f9b8 2000 	ldrsh.w	r2, [r8]
 800ecfa:	2100      	movs	r1, #0
 800ecfc:	1ac0      	subs	r0, r0, r3
 800ecfe:	f8b7 a000 	ldrh.w	sl, [r7]
 800ed02:	f8ad 1014 	strh.w	r1, [sp, #20]
 800ed06:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ed0a:	f8ad 2018 	strh.w	r2, [sp, #24]
 800ed0e:	f8ad 001a 	strh.w	r0, [sp, #26]
 800ed12:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800ed16:	4553      	cmp	r3, sl
 800ed18:	d9ca      	bls.n	800ecb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 800ed1a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 800ed1e:	ab07      	add	r3, sp, #28
 800ed20:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800ed24:	6851      	ldr	r1, [r2, #4]
 800ed26:	c303      	stmia	r3!, {r0, r1}
 800ed28:	a807      	add	r0, sp, #28
 800ed2a:	a905      	add	r1, sp, #20
 800ed2c:	f7fd f8e0 	bl	800bef0 <_ZN8touchgfx4RectaNERKS0_>
 800ed30:	a807      	add	r0, sp, #28
 800ed32:	f7fd f921 	bl	800bf78 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ed36:	b920      	cbnz	r0, 800ed42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 800ed38:	6823      	ldr	r3, [r4, #0]
 800ed3a:	a907      	add	r1, sp, #28
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed40:	4798      	blx	r3
 800ed42:	f10a 0a01 	add.w	sl, sl, #1
 800ed46:	fa1f fa8a 	uxth.w	sl, sl
 800ed4a:	e7e2      	b.n	800ed12 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 800ed4c:	6830      	ldr	r0, [r6, #0]
 800ed4e:	2101      	movs	r1, #1
 800ed50:	6803      	ldr	r3, [r0, #0]
 800ed52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed54:	4798      	blx	r3
 800ed56:	e7ab      	b.n	800ecb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 800ed58:	69d3      	ldr	r3, [r2, #28]
 800ed5a:	4798      	blx	r3
 800ed5c:	4b54      	ldr	r3, [pc, #336]	; (800eeb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f43f af39 	beq.w	800ebd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800ed66:	2300      	movs	r3, #0
 800ed68:	883d      	ldrh	r5, [r7, #0]
 800ed6a:	34ea      	adds	r4, #234	; 0xea
 800ed6c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 800ed70:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800ed74:	42ab      	cmp	r3, r5
 800ed76:	f67f af2f 	bls.w	800ebd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800ed7a:	ab1a      	add	r3, sp, #104	; 0x68
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ed82:	3501      	adds	r5, #1
 800ed84:	3b44      	subs	r3, #68	; 0x44
 800ed86:	b2ad      	uxth	r5, r5
 800ed88:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ed8c:	f7ff fe32 	bl	800e9f4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800ed90:	e7ee      	b.n	800ed70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 800ed92:	2b02      	cmp	r3, #2
 800ed94:	d16a      	bne.n	800ee6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 800ed96:	f8df a120 	ldr.w	sl, [pc, #288]	; 800eeb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 800ed9a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800ed9e:	42ab      	cmp	r3, r5
 800eda0:	d9dc      	bls.n	800ed5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 800eda2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800eda6:	ab03      	add	r3, sp, #12
 800eda8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800edac:	6851      	ldr	r1, [r2, #4]
 800edae:	c303      	stmia	r3!, {r0, r1}
 800edb0:	f89a 3000 	ldrb.w	r3, [sl]
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d102      	bne.n	800edbe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 800edb8:	a803      	add	r0, sp, #12
 800edba:	f7ff fc19 	bl	800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800edbe:	a803      	add	r0, sp, #12
 800edc0:	f7fd f8da 	bl	800bf78 <_ZNK8touchgfx4Rect7isEmptyEv>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d14a      	bne.n	800ee5e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 800edc8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800edcc:	f10d 0914 	add.w	r9, sp, #20
 800edd0:	f10d 081c 	add.w	r8, sp, #28
 800edd4:	f8ad 001a 	strh.w	r0, [sp, #26]
 800edd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800eddc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ede0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ede4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800ede8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800edec:	f8bd b012 	ldrh.w	fp, [sp, #18]
 800edf0:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 800edf4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800edf8:	44dc      	add	ip, fp
 800edfa:	6830      	ldr	r0, [r6, #0]
 800edfc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800ee00:	ebac 0c02 	sub.w	ip, ip, r2
 800ee04:	f8d0 e000 	ldr.w	lr, [r0]
 800ee08:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ee0c:	fa1f fc8c 	uxth.w	ip, ip
 800ee10:	f8cd c000 	str.w	ip, [sp]
 800ee14:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 800ee18:	47d8      	blx	fp
 800ee1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ee1e:	f8ad 001a 	strh.w	r0, [sp, #26]
 800ee22:	2b01      	cmp	r3, #1
 800ee24:	d11e      	bne.n	800ee64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 800ee26:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ee2a:	e888 0003 	stmia.w	r8, {r0, r1}
 800ee2e:	4640      	mov	r0, r8
 800ee30:	f7ff fb68 	bl	800e504 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800ee34:	6823      	ldr	r3, [r4, #0]
 800ee36:	4641      	mov	r1, r8
 800ee38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	4798      	blx	r3
 800ee3e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800ee42:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800ee46:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800ee50:	440a      	add	r2, r1
 800ee52:	b21b      	sxth	r3, r3
 800ee54:	b212      	sxth	r2, r2
 800ee56:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	dbc6      	blt.n	800edec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 800ee5e:	3501      	adds	r5, #1
 800ee60:	b2ad      	uxth	r5, r5
 800ee62:	e79a      	b.n	800ed9a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 800ee64:	6823      	ldr	r3, [r4, #0]
 800ee66:	4649      	mov	r1, r9
 800ee68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6a:	e7e6      	b.n	800ee3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 800ee6c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800ee70:	42ab      	cmp	r3, r5
 800ee72:	f67f af73 	bls.w	800ed5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 800ee76:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800ee7a:	ab07      	add	r3, sp, #28
 800ee7c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800ee80:	6851      	ldr	r1, [r2, #4]
 800ee82:	c303      	stmia	r3!, {r0, r1}
 800ee84:	a807      	add	r0, sp, #28
 800ee86:	f7fd f877 	bl	800bf78 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ee8a:	b920      	cbnz	r0, 800ee96 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 800ee8c:	6823      	ldr	r3, [r4, #0]
 800ee8e:	a907      	add	r1, sp, #28
 800ee90:	4620      	mov	r0, r4
 800ee92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee94:	4798      	blx	r3
 800ee96:	3501      	adds	r5, #1
 800ee98:	b2ad      	uxth	r5, r5
 800ee9a:	e7e7      	b.n	800ee6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 800ee9c:	20001158 	.word	0x20001158
 800eea0:	20001164 	.word	0x20001164
 800eea4:	20000024 	.word	0x20000024
 800eea8:	20001100 	.word	0x20001100
 800eeac:	200010f6 	.word	0x200010f6
 800eeb0:	200010fe 	.word	0x200010fe
 800eeb4:	200010f4 	.word	0x200010f4
 800eeb8:	200010f8 	.word	0x200010f8

0800eebc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800eebc:	4b03      	ldr	r3, [pc, #12]	; (800eecc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800eebe:	2200      	movs	r2, #0
 800eec0:	801a      	strh	r2, [r3, #0]
 800eec2:	805a      	strh	r2, [r3, #2]
 800eec4:	809a      	strh	r2, [r3, #4]
 800eec6:	80da      	strh	r2, [r3, #6]
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	20001164 	.word	0x20001164

0800eed0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 800eed0:	2000      	movs	r0, #0
 800eed2:	4770      	bx	lr

0800eed4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 800eed4:	2000      	movs	r0, #0
 800eed6:	4770      	bx	lr

0800eed8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800eed8:	b508      	push	{r3, lr}
 800eeda:	6803      	ldr	r3, [r0, #0]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	4798      	blx	r3
 800eee0:	b128      	cbz	r0, 800eeee <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800eee2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800eee6:	7a80      	ldrb	r0, [r0, #10]
 800eee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eeec:	4318      	orrs	r0, r3
 800eeee:	bd08      	pop	{r3, pc}

0800eef0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 800eef0:	b40e      	push	{r1, r2, r3}
 800eef2:	b533      	push	{r0, r1, r4, r5, lr}
 800eef4:	ab05      	add	r3, sp, #20
 800eef6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eefa:	9301      	str	r3, [sp, #4]
 800eefc:	4b0a      	ldr	r3, [pc, #40]	; (800ef28 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 800eefe:	685c      	ldr	r4, [r3, #4]
 800ef00:	1061      	asrs	r1, r4, #1
 800ef02:	07e4      	lsls	r4, r4, #31
 800ef04:	eb00 0501 	add.w	r5, r0, r1
 800ef08:	bf46      	itte	mi
 800ef0a:	681b      	ldrmi	r3, [r3, #0]
 800ef0c:	5841      	ldrmi	r1, [r0, r1]
 800ef0e:	681c      	ldrpl	r4, [r3, #0]
 800ef10:	4628      	mov	r0, r5
 800ef12:	bf48      	it	mi
 800ef14:	58cc      	ldrmi	r4, [r1, r3]
 800ef16:	2100      	movs	r1, #0
 800ef18:	9b01      	ldr	r3, [sp, #4]
 800ef1a:	47a0      	blx	r4
 800ef1c:	b002      	add	sp, #8
 800ef1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef22:	b003      	add	sp, #12
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop
 800ef28:	20000014 	.word	0x20000014

0800ef2c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 800ef2c:	b40c      	push	{r2, r3}
 800ef2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef30:	ab06      	add	r3, sp, #24
 800ef32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef36:	9301      	str	r3, [sp, #4]
 800ef38:	4b09      	ldr	r3, [pc, #36]	; (800ef60 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 800ef3a:	685d      	ldr	r5, [r3, #4]
 800ef3c:	106c      	asrs	r4, r5, #1
 800ef3e:	07ed      	lsls	r5, r5, #31
 800ef40:	eb00 0604 	add.w	r6, r0, r4
 800ef44:	bf45      	ittet	mi
 800ef46:	681b      	ldrmi	r3, [r3, #0]
 800ef48:	5900      	ldrmi	r0, [r0, r4]
 800ef4a:	681c      	ldrpl	r4, [r3, #0]
 800ef4c:	58c4      	ldrmi	r4, [r0, r3]
 800ef4e:	4630      	mov	r0, r6
 800ef50:	9b01      	ldr	r3, [sp, #4]
 800ef52:	47a0      	blx	r4
 800ef54:	b002      	add	sp, #8
 800ef56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef5a:	b002      	add	sp, #8
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	20000014 	.word	0x20000014

0800ef64 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800ef64:	b40e      	push	{r1, r2, r3}
 800ef66:	b530      	push	{r4, r5, lr}
 800ef68:	b098      	sub	sp, #96	; 0x60
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	ab1b      	add	r3, sp, #108	; 0x6c
 800ef6e:	a802      	add	r0, sp, #8
 800ef70:	f853 5b04 	ldr.w	r5, [r3], #4
 800ef74:	9301      	str	r3, [sp, #4]
 800ef76:	f000 fff9 	bl	800ff6c <_ZN8touchgfx12TextProviderC1Ev>
 800ef7a:	6823      	ldr	r3, [r4, #0]
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	2401      	movs	r4, #1
 800ef80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef82:	4798      	blx	r3
 800ef84:	9a01      	ldr	r2, [sp, #4]
 800ef86:	4603      	mov	r3, r0
 800ef88:	4629      	mov	r1, r5
 800ef8a:	a802      	add	r0, sp, #8
 800ef8c:	f001 f80b 	bl	800ffa6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800ef90:	a802      	add	r0, sp, #8
 800ef92:	f001 f841 	bl	8010018 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ef96:	b2a3      	uxth	r3, r4
 800ef98:	b138      	cbz	r0, 800efaa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 800ef9a:	280a      	cmp	r0, #10
 800ef9c:	a802      	add	r0, sp, #8
 800ef9e:	bf04      	itt	eq
 800efa0:	3301      	addeq	r3, #1
 800efa2:	b21c      	sxtheq	r4, r3
 800efa4:	f001 f838 	bl	8010018 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800efa8:	e7f5      	b.n	800ef96 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 800efaa:	4618      	mov	r0, r3
 800efac:	b018      	add	sp, #96	; 0x60
 800efae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efb2:	b003      	add	sp, #12
 800efb4:	4770      	bx	lr
	...

0800efb8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800efb8:	b40e      	push	{r1, r2, r3}
 800efba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efbc:	b098      	sub	sp, #96	; 0x60
 800efbe:	4605      	mov	r5, r0
 800efc0:	4f25      	ldr	r7, [pc, #148]	; (800f058 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 800efc2:	ab1d      	add	r3, sp, #116	; 0x74
 800efc4:	a802      	add	r0, sp, #8
 800efc6:	ae18      	add	r6, sp, #96	; 0x60
 800efc8:	f853 4b04 	ldr.w	r4, [r3], #4
 800efcc:	9300      	str	r3, [sp, #0]
 800efce:	f000 ffcd 	bl	800ff6c <_ZN8touchgfx12TextProviderC1Ev>
 800efd2:	682b      	ldr	r3, [r5, #0]
 800efd4:	4628      	mov	r0, r5
 800efd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efd8:	4798      	blx	r3
 800efda:	4621      	mov	r1, r4
 800efdc:	2400      	movs	r4, #0
 800efde:	4603      	mov	r3, r0
 800efe0:	9a00      	ldr	r2, [sp, #0]
 800efe2:	a802      	add	r0, sp, #8
 800efe4:	f000 ffdf 	bl	800ffa6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800efe8:	f846 4d5c 	str.w	r4, [r6, #-92]!
 800efec:	462a      	mov	r2, r5
 800efee:	4633      	mov	r3, r6
 800eff0:	4621      	mov	r1, r4
 800eff2:	a802      	add	r0, sp, #8
 800eff4:	f001 f93c 	bl	8010270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800eff8:	b340      	cbz	r0, 800f04c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 800effa:	280a      	cmp	r0, #10
 800effc:	d01f      	beq.n	800f03e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800effe:	9901      	ldr	r1, [sp, #4]
 800f000:	b1e9      	cbz	r1, 800f03e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800f002:	7b4b      	ldrb	r3, [r1, #13]
 800f004:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f008:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f00c:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 800f010:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f014:	79c9      	ldrb	r1, [r1, #7]
 800f016:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 800f01a:	bf18      	it	ne
 800f01c:	4638      	movne	r0, r7
 800f01e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f022:	bf08      	it	eq
 800f024:	2000      	moveq	r0, #0
 800f026:	88aa      	ldrh	r2, [r5, #4]
 800f028:	ea41 010e 	orr.w	r1, r1, lr
 800f02c:	ea43 030c 	orr.w	r3, r3, ip
 800f030:	440a      	add	r2, r1
 800f032:	4303      	orrs	r3, r0
 800f034:	1ad3      	subs	r3, r2, r3
 800f036:	b29b      	uxth	r3, r3
 800f038:	42a3      	cmp	r3, r4
 800f03a:	bfc8      	it	gt
 800f03c:	b21c      	sxthgt	r4, r3
 800f03e:	4633      	mov	r3, r6
 800f040:	462a      	mov	r2, r5
 800f042:	2100      	movs	r1, #0
 800f044:	a802      	add	r0, sp, #8
 800f046:	f001 f913 	bl	8010270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f04a:	e7d5      	b.n	800eff8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 800f04c:	b2a0      	uxth	r0, r4
 800f04e:	b018      	add	sp, #96	; 0x60
 800f050:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f054:	b003      	add	sp, #12
 800f056:	4770      	bx	lr
 800f058:	fffffe00 	.word	0xfffffe00

0800f05c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800f05c:	b40e      	push	{r1, r2, r3}
 800f05e:	b570      	push	{r4, r5, r6, lr}
 800f060:	b099      	sub	sp, #100	; 0x64
 800f062:	4604      	mov	r4, r0
 800f064:	26ff      	movs	r6, #255	; 0xff
 800f066:	ab1d      	add	r3, sp, #116	; 0x74
 800f068:	a802      	add	r0, sp, #8
 800f06a:	f853 5b04 	ldr.w	r5, [r3], #4
 800f06e:	9300      	str	r3, [sp, #0]
 800f070:	f000 ff7c 	bl	800ff6c <_ZN8touchgfx12TextProviderC1Ev>
 800f074:	6823      	ldr	r3, [r4, #0]
 800f076:	4620      	mov	r0, r4
 800f078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f07a:	4798      	blx	r3
 800f07c:	4629      	mov	r1, r5
 800f07e:	4603      	mov	r3, r0
 800f080:	9a00      	ldr	r2, [sp, #0]
 800f082:	a802      	add	r0, sp, #8
 800f084:	ad18      	add	r5, sp, #96	; 0x60
 800f086:	f000 ff8e 	bl	800ffa6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800f08a:	2100      	movs	r1, #0
 800f08c:	4622      	mov	r2, r4
 800f08e:	a802      	add	r0, sp, #8
 800f090:	f845 1d5c 	str.w	r1, [r5, #-92]!
 800f094:	462b      	mov	r3, r5
 800f096:	f001 f8eb 	bl	8010270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f09a:	b190      	cbz	r0, 800f0c2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 800f09c:	280a      	cmp	r0, #10
 800f09e:	d009      	beq.n	800f0b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 800f0a0:	9a01      	ldr	r2, [sp, #4]
 800f0a2:	b13a      	cbz	r2, 800f0b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 800f0a4:	7923      	ldrb	r3, [r4, #4]
 800f0a6:	7a12      	ldrb	r2, [r2, #8]
 800f0a8:	1a9b      	subs	r3, r3, r2
 800f0aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800f0ae:	429e      	cmp	r6, r3
 800f0b0:	bf28      	it	cs
 800f0b2:	461e      	movcs	r6, r3
 800f0b4:	462b      	mov	r3, r5
 800f0b6:	4622      	mov	r2, r4
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	a802      	add	r0, sp, #8
 800f0bc:	f001 f8d8 	bl	8010270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f0c0:	e7eb      	b.n	800f09a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 800f0c2:	4630      	mov	r0, r6
 800f0c4:	b019      	add	sp, #100	; 0x64
 800f0c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f0ca:	b003      	add	sp, #12
 800f0cc:	4770      	bx	lr

0800f0ce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800f0ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d2:	b099      	sub	sp, #100	; 0x64
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	4614      	mov	r4, r2
 800f0d8:	4688      	mov	r8, r1
 800f0da:	a802      	add	r0, sp, #8
 800f0dc:	461d      	mov	r5, r3
 800f0de:	f04f 0b00 	mov.w	fp, #0
 800f0e2:	f000 ff43 	bl	800ff6c <_ZN8touchgfx12TextProviderC1Ev>
 800f0e6:	6833      	ldr	r3, [r6, #0]
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	465f      	mov	r7, fp
 800f0ec:	46da      	mov	sl, fp
 800f0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0f0:	46d9      	mov	r9, fp
 800f0f2:	4798      	blx	r3
 800f0f4:	462a      	mov	r2, r5
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	4621      	mov	r1, r4
 800f0fa:	a802      	add	r0, sp, #8
 800f0fc:	f000 ff53 	bl	800ffa6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800f100:	ab01      	add	r3, sp, #4
 800f102:	4632      	mov	r2, r6
 800f104:	4641      	mov	r1, r8
 800f106:	a802      	add	r0, sp, #8
 800f108:	f8cd 9004 	str.w	r9, [sp, #4]
 800f10c:	f001 f8b0 	bl	8010270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f110:	4605      	mov	r5, r0
 800f112:	b108      	cbz	r0, 800f118 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 800f114:	280a      	cmp	r0, #10
 800f116:	d10b      	bne.n	800f130 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 800f118:	4557      	cmp	r7, sl
 800f11a:	bf38      	it	cc
 800f11c:	4657      	movcc	r7, sl
 800f11e:	f04f 0a00 	mov.w	sl, #0
 800f122:	b91d      	cbnz	r5, 800f12c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 800f124:	4638      	mov	r0, r7
 800f126:	b019      	add	sp, #100	; 0x64
 800f128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f12c:	46ab      	mov	fp, r5
 800f12e:	e7e7      	b.n	800f100 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 800f130:	9a01      	ldr	r2, [sp, #4]
 800f132:	2a00      	cmp	r2, #0
 800f134:	d0fa      	beq.n	800f12c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 800f136:	f992 400d 	ldrsb.w	r4, [r2, #13]
 800f13a:	4659      	mov	r1, fp
 800f13c:	6833      	ldr	r3, [r6, #0]
 800f13e:	f404 7080 	and.w	r0, r4, #256	; 0x100
 800f142:	7a94      	ldrb	r4, [r2, #10]
 800f144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f146:	4304      	orrs	r4, r0
 800f148:	4630      	mov	r0, r6
 800f14a:	8895      	ldrh	r5, [r2, #4]
 800f14c:	4798      	blx	r3
 800f14e:	4420      	add	r0, r4
 800f150:	4450      	add	r0, sl
 800f152:	fa1f fa80 	uxth.w	sl, r0
 800f156:	e7e4      	b.n	800f122 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0800f158 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800f158:	b513      	push	{r0, r1, r4, lr}
 800f15a:	1d01      	adds	r1, r0, #4
 800f15c:	4603      	mov	r3, r0
 800f15e:	466a      	mov	r2, sp
 800f160:	c903      	ldmia	r1, {r0, r1}
 800f162:	e882 0003 	stmia.w	r2, {r0, r1}
 800f166:	2100      	movs	r1, #0
 800f168:	4618      	mov	r0, r3
 800f16a:	9100      	str	r1, [sp, #0]
 800f16c:	6819      	ldr	r1, [r3, #0]
 800f16e:	690c      	ldr	r4, [r1, #16]
 800f170:	4611      	mov	r1, r2
 800f172:	47a0      	blx	r4
 800f174:	b002      	add	sp, #8
 800f176:	bd10      	pop	{r4, pc}

0800f178 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	680b      	ldr	r3, [r1, #0]
 800f17c:	460c      	mov	r4, r1
 800f17e:	4605      	mov	r5, r0
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	4798      	blx	r3
 800f184:	6823      	ldr	r3, [r4, #0]
 800f186:	4620      	mov	r0, r4
 800f188:	4629      	mov	r1, r5
 800f18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f18c:	4798      	blx	r3
 800f18e:	4628      	mov	r0, r5
 800f190:	bd38      	pop	{r3, r4, r5, pc}

0800f192 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800f192:	b410      	push	{r4}
 800f194:	880a      	ldrh	r2, [r1, #0]
 800f196:	8884      	ldrh	r4, [r0, #4]
 800f198:	4422      	add	r2, r4
 800f19a:	800a      	strh	r2, [r1, #0]
 800f19c:	884a      	ldrh	r2, [r1, #2]
 800f19e:	88c4      	ldrh	r4, [r0, #6]
 800f1a0:	4422      	add	r2, r4
 800f1a2:	804a      	strh	r2, [r1, #2]
 800f1a4:	6940      	ldr	r0, [r0, #20]
 800f1a6:	b120      	cbz	r0, 800f1b2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800f1a8:	6803      	ldr	r3, [r0, #0]
 800f1aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b0:	4718      	bx	r3
 800f1b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1b6:	4770      	bx	lr

0800f1b8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800f1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1ba:	460b      	mov	r3, r1
 800f1bc:	b085      	sub	sp, #20
 800f1be:	4604      	mov	r4, r0
 800f1c0:	b901      	cbnz	r1, 800f1c4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800f1c2:	b1fa      	cbz	r2, 800f204 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 800f1c4:	1d27      	adds	r7, r4, #4
 800f1c6:	466e      	mov	r6, sp
 800f1c8:	ad02      	add	r5, sp, #8
 800f1ca:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f1ce:	e886 0003 	stmia.w	r6, {r0, r1}
 800f1d2:	88e1      	ldrh	r1, [r4, #6]
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	440a      	add	r2, r1
 800f1d8:	88a1      	ldrh	r1, [r4, #4]
 800f1da:	4419      	add	r1, r3
 800f1dc:	6823      	ldr	r3, [r4, #0]
 800f1de:	b212      	sxth	r2, r2
 800f1e0:	b209      	sxth	r1, r1
 800f1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1e4:	4798      	blx	r3
 800f1e6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f1ea:	e885 0003 	stmia.w	r5, {r0, r1}
 800f1ee:	6960      	ldr	r0, [r4, #20]
 800f1f0:	b150      	cbz	r0, 800f208 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 800f1f2:	6803      	ldr	r3, [r0, #0]
 800f1f4:	4631      	mov	r1, r6
 800f1f6:	691b      	ldr	r3, [r3, #16]
 800f1f8:	4798      	blx	r3
 800f1fa:	6960      	ldr	r0, [r4, #20]
 800f1fc:	6803      	ldr	r3, [r0, #0]
 800f1fe:	691b      	ldr	r3, [r3, #16]
 800f200:	4629      	mov	r1, r5
 800f202:	4798      	blx	r3
 800f204:	b005      	add	sp, #20
 800f206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f208:	f7ff fb78 	bl	800e8fc <_ZN8touchgfx11Application11getInstanceEv>
 800f20c:	6803      	ldr	r3, [r0, #0]
 800f20e:	4631      	mov	r1, r6
 800f210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f212:	4798      	blx	r3
 800f214:	f7ff fb72 	bl	800e8fc <_ZN8touchgfx11Application11getInstanceEv>
 800f218:	6803      	ldr	r3, [r0, #0]
 800f21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f21c:	e7f0      	b.n	800f200 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0800f21e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800f21e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f220:	8882      	ldrh	r2, [r0, #4]
 800f222:	4605      	mov	r5, r0
 800f224:	880b      	ldrh	r3, [r1, #0]
 800f226:	460c      	mov	r4, r1
 800f228:	4413      	add	r3, r2
 800f22a:	800b      	strh	r3, [r1, #0]
 800f22c:	884b      	ldrh	r3, [r1, #2]
 800f22e:	88c2      	ldrh	r2, [r0, #6]
 800f230:	4413      	add	r3, r2
 800f232:	4602      	mov	r2, r0
 800f234:	804b      	strh	r3, [r1, #2]
 800f236:	466b      	mov	r3, sp
 800f238:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f23c:	6851      	ldr	r1, [r2, #4]
 800f23e:	c303      	stmia	r3!, {r0, r1}
 800f240:	4621      	mov	r1, r4
 800f242:	4668      	mov	r0, sp
 800f244:	f7fc fe54 	bl	800bef0 <_ZN8touchgfx4RectaNERKS0_>
 800f248:	466b      	mov	r3, sp
 800f24a:	cb03      	ldmia	r3!, {r0, r1}
 800f24c:	6020      	str	r0, [r4, #0]
 800f24e:	6061      	str	r1, [r4, #4]
 800f250:	6968      	ldr	r0, [r5, #20]
 800f252:	b128      	cbz	r0, 800f260 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 800f254:	6803      	ldr	r3, [r0, #0]
 800f256:	691b      	ldr	r3, [r3, #16]
 800f258:	4621      	mov	r1, r4
 800f25a:	4798      	blx	r3
 800f25c:	b003      	add	sp, #12
 800f25e:	bd30      	pop	{r4, r5, pc}
 800f260:	f7ff fb4c 	bl	800e8fc <_ZN8touchgfx11Application11getInstanceEv>
 800f264:	6803      	ldr	r3, [r0, #0]
 800f266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f268:	e7f6      	b.n	800f258 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0800f26a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800f26a:	b570      	push	{r4, r5, r6, lr}
 800f26c:	8882      	ldrh	r2, [r0, #4]
 800f26e:	460c      	mov	r4, r1
 800f270:	880b      	ldrh	r3, [r1, #0]
 800f272:	4605      	mov	r5, r0
 800f274:	4413      	add	r3, r2
 800f276:	800b      	strh	r3, [r1, #0]
 800f278:	884b      	ldrh	r3, [r1, #2]
 800f27a:	88c2      	ldrh	r2, [r0, #6]
 800f27c:	4413      	add	r3, r2
 800f27e:	804b      	strh	r3, [r1, #2]
 800f280:	1d01      	adds	r1, r0, #4
 800f282:	4620      	mov	r0, r4
 800f284:	f7fc fe34 	bl	800bef0 <_ZN8touchgfx4RectaNERKS0_>
 800f288:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f28c:	b153      	cbz	r3, 800f2a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 800f28e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800f292:	b13b      	cbz	r3, 800f2a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 800f294:	6968      	ldr	r0, [r5, #20]
 800f296:	b128      	cbz	r0, 800f2a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 800f298:	6803      	ldr	r3, [r0, #0]
 800f29a:	4621      	mov	r1, r4
 800f29c:	6a1b      	ldr	r3, [r3, #32]
 800f29e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2a2:	4718      	bx	r3
 800f2a4:	bd70      	pop	{r4, r5, r6, pc}

0800f2a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800f2a6:	b510      	push	{r4, lr}
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	4608      	mov	r0, r1
 800f2ae:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800f2b2:	8023      	strh	r3, [r4, #0]
 800f2b4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f2b8:	8063      	strh	r3, [r4, #2]
 800f2ba:	6803      	ldr	r3, [r0, #0]
 800f2bc:	80a1      	strh	r1, [r4, #4]
 800f2be:	4621      	mov	r1, r4
 800f2c0:	80e2      	strh	r2, [r4, #6]
 800f2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c4:	4798      	blx	r3
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	bd10      	pop	{r4, pc}
	...

0800f2cc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 800f2cc:	b530      	push	{r4, r5, lr}
 800f2ce:	8083      	strh	r3, [r0, #4]
 800f2d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f2d4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800f2d8:	7183      	strb	r3, [r0, #6]
 800f2da:	79c3      	ldrb	r3, [r0, #7]
 800f2dc:	6101      	str	r1, [r0, #16]
 800f2de:	f365 0306 	bfi	r3, r5, #0, #7
 800f2e2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800f2e6:	8282      	strh	r2, [r0, #20]
 800f2e8:	f365 13c7 	bfi	r3, r5, #7, #1
 800f2ec:	71c3      	strb	r3, [r0, #7]
 800f2ee:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800f2f2:	7203      	strb	r3, [r0, #8]
 800f2f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800f2f8:	7243      	strb	r3, [r0, #9]
 800f2fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f2fe:	8143      	strh	r3, [r0, #10]
 800f300:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800f304:	8183      	strh	r3, [r0, #12]
 800f306:	4b01      	ldr	r3, [pc, #4]	; (800f30c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 800f308:	6003      	str	r3, [r0, #0]
 800f30a:	bd30      	pop	{r4, r5, pc}
 800f30c:	0801b7a4 	.word	0x0801b7a4

0800f310 <_ZNK8touchgfx9ConstFont4findEt>:
 800f310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f312:	8a84      	ldrh	r4, [r0, #20]
 800f314:	2500      	movs	r5, #0
 800f316:	260e      	movs	r6, #14
 800f318:	3c01      	subs	r4, #1
 800f31a:	42a5      	cmp	r5, r4
 800f31c:	dc0c      	bgt.n	800f338 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 800f31e:	192a      	adds	r2, r5, r4
 800f320:	6903      	ldr	r3, [r0, #16]
 800f322:	1052      	asrs	r2, r2, #1
 800f324:	fb06 3302 	mla	r3, r6, r2, r3
 800f328:	889f      	ldrh	r7, [r3, #4]
 800f32a:	428f      	cmp	r7, r1
 800f32c:	d901      	bls.n	800f332 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 800f32e:	1e54      	subs	r4, r2, #1
 800f330:	e7f3      	b.n	800f31a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 800f332:	d202      	bcs.n	800f33a <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 800f334:	1c55      	adds	r5, r2, #1
 800f336:	e7f0      	b.n	800f31a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 800f338:	2300      	movs	r3, #0
 800f33a:	4618      	mov	r0, r3
 800f33c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f33e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800f33e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f340:	4605      	mov	r5, r0
 800f342:	4617      	mov	r7, r2
 800f344:	461e      	mov	r6, r3
 800f346:	f7ff ffe3 	bl	800f310 <_ZNK8touchgfx9ConstFont4findEt>
 800f34a:	b9e0      	cbnz	r0, 800f386 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 800f34c:	b911      	cbnz	r1, 800f354 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 800f34e:	2400      	movs	r4, #0
 800f350:	4620      	mov	r0, r4
 800f352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f354:	290a      	cmp	r1, #10
 800f356:	d0fa      	beq.n	800f34e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800f358:	682b      	ldr	r3, [r5, #0]
 800f35a:	4628      	mov	r0, r5
 800f35c:	691b      	ldr	r3, [r3, #16]
 800f35e:	4798      	blx	r3
 800f360:	4601      	mov	r1, r0
 800f362:	4628      	mov	r0, r5
 800f364:	f7ff ffd4 	bl	800f310 <_ZNK8touchgfx9ConstFont4findEt>
 800f368:	4604      	mov	r4, r0
 800f36a:	2800      	cmp	r0, #0
 800f36c:	d0ef      	beq.n	800f34e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800f36e:	682b      	ldr	r3, [r5, #0]
 800f370:	4621      	mov	r1, r4
 800f372:	4628      	mov	r0, r5
 800f374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f376:	4798      	blx	r3
 800f378:	6038      	str	r0, [r7, #0]
 800f37a:	682b      	ldr	r3, [r5, #0]
 800f37c:	4628      	mov	r0, r5
 800f37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f380:	4798      	blx	r3
 800f382:	7030      	strb	r0, [r6, #0]
 800f384:	e7e4      	b.n	800f350 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 800f386:	4604      	mov	r4, r0
 800f388:	e7f1      	b.n	800f36e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0800f38a <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 800f38a:	b538      	push	{r3, r4, r5, lr}
 800f38c:	4605      	mov	r5, r0
 800f38e:	f001 fc49 	bl	8010c24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f392:	4604      	mov	r4, r0
 800f394:	4628      	mov	r0, r5
 800f396:	f001 fb87 	bl	8010aa8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800f39a:	2800      	cmp	r0, #0
 800f39c:	bf14      	ite	ne
 800f39e:	2002      	movne	r0, #2
 800f3a0:	2000      	moveq	r0, #0
 800f3a2:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 800f3a6:	b280      	uxth	r0, r0
 800f3a8:	bd38      	pop	{r3, r4, r5, pc}

0800f3aa <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 800f3aa:	b538      	push	{r3, r4, r5, lr}
 800f3ac:	4605      	mov	r5, r0
 800f3ae:	f001 fc39 	bl	8010c24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	f001 fb77 	bl	8010aa8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800f3ba:	2800      	cmp	r0, #0
 800f3bc:	bf14      	ite	ne
 800f3be:	2002      	movne	r0, #2
 800f3c0:	2000      	moveq	r0, #0
 800f3c2:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 800f3c6:	f040 0001 	orr.w	r0, r0, #1
 800f3ca:	b280      	uxth	r0, r0
 800f3cc:	bd38      	pop	{r3, r4, r5, pc}

0800f3ce <_ZN8touchgfx10ClickEventD1Ev>:
 800f3ce:	4770      	bx	lr

0800f3d0 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	4770      	bx	lr

0800f3d4 <_ZN8touchgfx9DragEventD1Ev>:
 800f3d4:	4770      	bx	lr

0800f3d6 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 800f3d6:	2001      	movs	r0, #1
 800f3d8:	4770      	bx	lr

0800f3da <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 800f3da:	2002      	movs	r0, #2
 800f3dc:	4770      	bx	lr

0800f3de <_ZN8touchgfx12GestureEventD1Ev>:
 800f3de:	4770      	bx	lr

0800f3e0 <_ZN8touchgfx10ClickEventD0Ev>:
 800f3e0:	b510      	push	{r4, lr}
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	210c      	movs	r1, #12
 800f3e6:	f009 fbcf 	bl	8018b88 <_ZdlPvj>
 800f3ea:	4620      	mov	r0, r4
 800f3ec:	bd10      	pop	{r4, pc}

0800f3ee <_ZN8touchgfx9DragEventD0Ev>:
 800f3ee:	b510      	push	{r4, lr}
 800f3f0:	4604      	mov	r4, r0
 800f3f2:	2110      	movs	r1, #16
 800f3f4:	f009 fbc8 	bl	8018b88 <_ZdlPvj>
 800f3f8:	4620      	mov	r0, r4
 800f3fa:	bd10      	pop	{r4, pc}

0800f3fc <_ZN8touchgfx12GestureEventD0Ev>:
 800f3fc:	b510      	push	{r4, lr}
 800f3fe:	4604      	mov	r4, r0
 800f400:	210c      	movs	r1, #12
 800f402:	f009 fbc1 	bl	8018b88 <_ZdlPvj>
 800f406:	4620      	mov	r0, r4
 800f408:	bd10      	pop	{r4, pc}
	...

0800f40c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800f40c:	b530      	push	{r4, r5, lr}
 800f40e:	460d      	mov	r5, r1
 800f410:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800f412:	b087      	sub	sp, #28
 800f414:	4604      	mov	r4, r0
 800f416:	b301      	cbz	r1, 800f45a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800f418:	a801      	add	r0, sp, #4
 800f41a:	f7ff ff44 	bl	800f2a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f41e:	892a      	ldrh	r2, [r5, #8]
 800f420:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f424:	7928      	ldrb	r0, [r5, #4]
 800f426:	1ad2      	subs	r2, r2, r3
 800f428:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f42a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800f42e:	441a      	add	r2, r3
 800f430:	896b      	ldrh	r3, [r5, #10]
 800f432:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800f436:	f88d 0010 	strb.w	r0, [sp, #16]
 800f43a:	1b5b      	subs	r3, r3, r5
 800f43c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800f43e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f440:	442b      	add	r3, r5
 800f442:	4d07      	ldr	r5, [pc, #28]	; (800f460 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800f444:	f8ad 1012 	strh.w	r1, [sp, #18]
 800f448:	a903      	add	r1, sp, #12
 800f44a:	9503      	str	r5, [sp, #12]
 800f44c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f450:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f454:	6803      	ldr	r3, [r0, #0]
 800f456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f458:	4798      	blx	r3
 800f45a:	b007      	add	sp, #28
 800f45c:	bd30      	pop	{r4, r5, pc}
 800f45e:	bf00      	nop
 800f460:	0801b820 	.word	0x0801b820

0800f464 <_ZNK8touchgfx4Rect9intersectEss>:
 800f464:	b510      	push	{r4, lr}
 800f466:	f9b0 3000 	ldrsh.w	r3, [r0]
 800f46a:	428b      	cmp	r3, r1
 800f46c:	dc10      	bgt.n	800f490 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 800f46e:	8884      	ldrh	r4, [r0, #4]
 800f470:	4423      	add	r3, r4
 800f472:	b21b      	sxth	r3, r3
 800f474:	4299      	cmp	r1, r3
 800f476:	da0b      	bge.n	800f490 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 800f478:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800f47c:	4293      	cmp	r3, r2
 800f47e:	dc07      	bgt.n	800f490 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 800f480:	88c0      	ldrh	r0, [r0, #6]
 800f482:	4418      	add	r0, r3
 800f484:	b200      	sxth	r0, r0
 800f486:	4282      	cmp	r2, r0
 800f488:	bfac      	ite	ge
 800f48a:	2000      	movge	r0, #0
 800f48c:	2001      	movlt	r0, #1
 800f48e:	bd10      	pop	{r4, pc}
 800f490:	2000      	movs	r0, #0
 800f492:	e7fc      	b.n	800f48e <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0800f494 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800f494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f496:	460c      	mov	r4, r1
 800f498:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800f49a:	b089      	sub	sp, #36	; 0x24
 800f49c:	4605      	mov	r5, r0
 800f49e:	2900      	cmp	r1, #0
 800f4a0:	d054      	beq.n	800f54c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 800f4a2:	4668      	mov	r0, sp
 800f4a4:	f7ff feff 	bl	800f2a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f4a8:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 800f4aa:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 800f4ac:	4668      	mov	r0, sp
 800f4ae:	8922      	ldrh	r2, [r4, #8]
 800f4b0:	88e1      	ldrh	r1, [r4, #6]
 800f4b2:	443a      	add	r2, r7
 800f4b4:	4431      	add	r1, r6
 800f4b6:	b212      	sxth	r2, r2
 800f4b8:	b209      	sxth	r1, r1
 800f4ba:	f7ff ffd3 	bl	800f464 <_ZNK8touchgfx4Rect9intersectEss>
 800f4be:	b1d0      	cbz	r0, 800f4f6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 800f4c0:	89a2      	ldrh	r2, [r4, #12]
 800f4c2:	4668      	mov	r0, sp
 800f4c4:	8961      	ldrh	r1, [r4, #10]
 800f4c6:	443a      	add	r2, r7
 800f4c8:	4431      	add	r1, r6
 800f4ca:	b212      	sxth	r2, r2
 800f4cc:	b209      	sxth	r1, r1
 800f4ce:	f7ff ffc9 	bl	800f464 <_ZNK8touchgfx4Rect9intersectEss>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	b978      	cbnz	r0, 800f4f6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 800f4d6:	4a1e      	ldr	r2, [pc, #120]	; (800f550 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 800f4d8:	a904      	add	r1, sp, #16
 800f4da:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f4dc:	9204      	str	r2, [sp, #16]
 800f4de:	2202      	movs	r2, #2
 800f4e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f4e4:	f88d 2014 	strb.w	r2, [sp, #20]
 800f4e8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f4ec:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f4f0:	6803      	ldr	r3, [r0, #0]
 800f4f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4f4:	4798      	blx	r3
 800f4f6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800f4f8:	a802      	add	r0, sp, #8
 800f4fa:	f7ff fed4 	bl	800f2a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f4fe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f502:	88e0      	ldrh	r0, [r4, #6]
 800f504:	8961      	ldrh	r1, [r4, #10]
 800f506:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800f50a:	1a80      	subs	r0, r0, r2
 800f50c:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 800f510:	1a89      	subs	r1, r1, r2
 800f512:	8923      	ldrh	r3, [r4, #8]
 800f514:	4460      	add	r0, ip
 800f516:	89a2      	ldrh	r2, [r4, #12]
 800f518:	4461      	add	r1, ip
 800f51a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800f51c:	eba3 030e 	sub.w	r3, r3, lr
 800f520:	eba2 020e 	sub.w	r2, r2, lr
 800f524:	f8ad 0016 	strh.w	r0, [sp, #22]
 800f528:	7927      	ldrb	r7, [r4, #4]
 800f52a:	4433      	add	r3, r6
 800f52c:	4432      	add	r2, r6
 800f52e:	4c09      	ldr	r4, [pc, #36]	; (800f554 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 800f530:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f532:	f8ad 101a 	strh.w	r1, [sp, #26]
 800f536:	a904      	add	r1, sp, #16
 800f538:	9404      	str	r4, [sp, #16]
 800f53a:	f88d 7014 	strb.w	r7, [sp, #20]
 800f53e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f542:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f546:	6803      	ldr	r3, [r0, #0]
 800f548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f54a:	4798      	blx	r3
 800f54c:	b009      	add	sp, #36	; 0x24
 800f54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f550:	0801b7f8 	.word	0x0801b7f8
 800f554:	0801b80c 	.word	0x0801b80c

0800f558 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800f558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f55c:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 800f560:	b0a1      	sub	sp, #132	; 0x84
 800f562:	4604      	mov	r4, r0
 800f564:	460d      	mov	r5, r1
 800f566:	790b      	ldrb	r3, [r1, #4]
 800f568:	f1b9 0f00 	cmp.w	r9, #0
 800f56c:	d00f      	beq.n	800f58e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 800f56e:	2b00      	cmp	r3, #0
 800f570:	f040 80a2 	bne.w	800f6b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 800f574:	b021      	add	sp, #132	; 0x84
 800f576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f57a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800f57e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 800f582:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800f586:	1d20      	adds	r0, r4, #4
 800f588:	f7fc fc00 	bl	800bd8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f58c:	e094      	b.n	800f6b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1f0      	bne.n	800f574 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 800f592:	4b5f      	ldr	r3, [pc, #380]	; (800f710 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 800f59a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 800f59e:	f1ba 0f03 	cmp.w	sl, #3
 800f5a2:	ddea      	ble.n	800f57a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 800f5a4:	f1ba 0f0c 	cmp.w	sl, #12
 800f5a8:	f04f 0303 	mov.w	r3, #3
 800f5ac:	f04f 0600 	mov.w	r6, #0
 800f5b0:	4958      	ldr	r1, [pc, #352]	; (800f714 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 800f5b2:	bfd8      	it	le
 800f5b4:	f10a 32ff 	addle.w	r2, sl, #4294967295
 800f5b8:	960a      	str	r6, [sp, #40]	; 0x28
 800f5ba:	bfd8      	it	le
 800f5bc:	fb92 f3f3 	sdivle	r3, r2, r3
 800f5c0:	9301      	str	r3, [sp, #4]
 800f5c2:	4b55      	ldr	r3, [pc, #340]	; (800f718 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 800f5c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f5c8:	4b54      	ldr	r3, [pc, #336]	; (800f71c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 800f5ca:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800f5ce:	2248      	movs	r2, #72	; 0x48
 800f5d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f5d4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800f5d8:	ab0e      	add	r3, sp, #56	; 0x38
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f009 fb78 	bl	8018cd0 <memcpy>
 800f5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f5e4:	f8cd a008 	str.w	sl, [sp, #8]
 800f5e8:	e9cd 2006 	strd	r2, r0, [sp, #24]
 800f5ec:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f5f0:	46b3      	mov	fp, r6
 800f5f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	9303      	str	r3, [sp, #12]
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	9a03      	ldr	r2, [sp, #12]
 800f5fe:	88ef      	ldrh	r7, [r5, #6]
 800f600:	a80a      	add	r0, sp, #40	; 0x28
 800f602:	9309      	str	r3, [sp, #36]	; 0x24
 800f604:	9b07      	ldr	r3, [sp, #28]
 800f606:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800f60a:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 800f60e:	fb13 f302 	smulbb	r3, r3, r2
 800f612:	b29b      	uxth	r3, r3
 800f614:	9304      	str	r3, [sp, #16]
 800f616:	9b07      	ldr	r3, [sp, #28]
 800f618:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	fb13 f302 	smulbb	r3, r3, r2
 800f622:	b29b      	uxth	r3, r3
 800f624:	9305      	str	r3, [sp, #20]
 800f626:	9b04      	ldr	r3, [sp, #16]
 800f628:	441f      	add	r7, r3
 800f62a:	9b05      	ldr	r3, [sp, #20]
 800f62c:	4498      	add	r8, r3
 800f62e:	b23f      	sxth	r7, r7
 800f630:	fa0f f888 	sxth.w	r8, r8
 800f634:	4639      	mov	r1, r7
 800f636:	4642      	mov	r2, r8
 800f638:	f7ff ff14 	bl	800f464 <_ZNK8touchgfx4Rect9intersectEss>
 800f63c:	b380      	cbz	r0, 800f6a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 800f63e:	4639      	mov	r1, r7
 800f640:	ab09      	add	r3, sp, #36	; 0x24
 800f642:	4642      	mov	r2, r8
 800f644:	1d20      	adds	r0, r4, #4
 800f646:	f7fc fba1 	bl	800bd8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f64a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f64c:	b341      	cbz	r1, 800f6a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 800f64e:	4549      	cmp	r1, r9
 800f650:	d026      	beq.n	800f6a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 800f652:	a80c      	add	r0, sp, #48	; 0x30
 800f654:	f7ff fe27 	bl	800f2a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f658:	2002      	movs	r0, #2
 800f65a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 800f65e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 800f662:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f666:	fb92 f2f0 	sdiv	r2, r2, r0
 800f66a:	440a      	add	r2, r1
 800f66c:	1a99      	subs	r1, r3, r2
 800f66e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800f672:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 800f676:	fb93 f3f0 	sdiv	r3, r3, r0
 800f67a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 800f67e:	4403      	add	r3, r0
 800f680:	1ad3      	subs	r3, r2, r3
 800f682:	9a06      	ldr	r2, [sp, #24]
 800f684:	435b      	muls	r3, r3
 800f686:	fb01 3301 	mla	r3, r1, r1, r3
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d208      	bcs.n	800f6a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 800f68e:	9a04      	ldr	r2, [sp, #16]
 800f690:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f694:	86a2      	strh	r2, [r4, #52]	; 0x34
 800f696:	9a05      	ldr	r2, [sp, #20]
 800f698:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 800f69c:	86e2      	strh	r2, [r4, #54]	; 0x36
 800f69e:	9306      	str	r3, [sp, #24]
 800f6a0:	f10b 0b02 	add.w	fp, fp, #2
 800f6a4:	f1bb 0f08 	cmp.w	fp, #8
 800f6a8:	dda7      	ble.n	800f5fa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 800f6aa:	9b02      	ldr	r3, [sp, #8]
 800f6ac:	3601      	adds	r6, #1
 800f6ae:	4453      	add	r3, sl
 800f6b0:	9302      	str	r3, [sp, #8]
 800f6b2:	9b01      	ldr	r3, [sp, #4]
 800f6b4:	42b3      	cmp	r3, r6
 800f6b6:	d199      	bne.n	800f5ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 800f6b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f6ba:	2900      	cmp	r1, #0
 800f6bc:	f43f af5a 	beq.w	800f574 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 800f6c0:	a80c      	add	r0, sp, #48	; 0x30
 800f6c2:	2600      	movs	r6, #0
 800f6c4:	f7ff fdef 	bl	800f2a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f6c8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800f6cc:	88ea      	ldrh	r2, [r5, #6]
 800f6ce:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 800f6d2:	1ad2      	subs	r2, r2, r3
 800f6d4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f6d6:	7929      	ldrb	r1, [r5, #4]
 800f6d8:	441a      	add	r2, r3
 800f6da:	892b      	ldrh	r3, [r5, #8]
 800f6dc:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800f6e0:	a90e      	add	r1, sp, #56	; 0x38
 800f6e2:	1a1b      	subs	r3, r3, r0
 800f6e4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 800f6e6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 800f6ea:	4403      	add	r3, r0
 800f6ec:	480c      	ldr	r0, [pc, #48]	; (800f720 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 800f6ee:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 800f6f2:	900e      	str	r0, [sp, #56]	; 0x38
 800f6f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f6f6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800f6fa:	6803      	ldr	r3, [r0, #0]
 800f6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6fe:	4798      	blx	r3
 800f700:	792b      	ldrb	r3, [r5, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	f43f af36 	beq.w	800f574 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 800f708:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800f70c:	e732      	b.n	800f574 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 800f70e:	bf00      	nop
 800f710:	20001100 	.word	0x20001100
 800f714:	0801a07c 	.word	0x0801a07c
 800f718:	200010f4 	.word	0x200010f4
 800f71c:	200010f6 	.word	0x200010f6
 800f720:	0801b7f8 	.word	0x0801b7f8

0800f724 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800f724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f726:	4604      	mov	r4, r0
 800f728:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800f72c:	3201      	adds	r2, #1
 800f72e:	d112      	bne.n	800f756 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800f730:	2500      	movs	r5, #0
 800f732:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800f736:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f73a:	6803      	ldr	r3, [r0, #0]
 800f73c:	9500      	str	r5, [sp, #0]
 800f73e:	466d      	mov	r5, sp
 800f740:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f744:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f748:	4629      	mov	r1, r5
 800f74a:	6a1b      	ldr	r3, [r3, #32]
 800f74c:	4798      	blx	r3
 800f74e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f752:	e884 0003 	stmia.w	r4, {r0, r1}
 800f756:	4620      	mov	r0, r4
 800f758:	b003      	add	sp, #12
 800f75a:	bd30      	pop	{r4, r5, pc}

0800f75c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800f75c:	b513      	push	{r0, r1, r4, lr}
 800f75e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800f762:	4604      	mov	r4, r0
 800f764:	3301      	adds	r3, #1
 800f766:	d109      	bne.n	800f77c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800f768:	4601      	mov	r1, r0
 800f76a:	4668      	mov	r0, sp
 800f76c:	f7ff fd9b 	bl	800f2a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f770:	f8bd 3000 	ldrh.w	r3, [sp]
 800f774:	8423      	strh	r3, [r4, #32]
 800f776:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f77a:	8463      	strh	r3, [r4, #34]	; 0x22
 800f77c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800f780:	b002      	add	sp, #8
 800f782:	bd10      	pop	{r4, pc}

0800f784 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800f784:	b513      	push	{r0, r1, r4, lr}
 800f786:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800f78a:	4604      	mov	r4, r0
 800f78c:	3301      	adds	r3, #1
 800f78e:	d109      	bne.n	800f7a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800f790:	4601      	mov	r1, r0
 800f792:	4668      	mov	r0, sp
 800f794:	f7ff fd87 	bl	800f2a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f798:	f8bd 3000 	ldrh.w	r3, [sp]
 800f79c:	8423      	strh	r3, [r4, #32]
 800f79e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f7a2:	8463      	strh	r3, [r4, #34]	; 0x22
 800f7a4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800f7a8:	b002      	add	sp, #8
 800f7aa:	bd10      	pop	{r4, pc}

0800f7ac <_ZN8touchgfx6ScreenC1Ev>:
 800f7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ae:	4605      	mov	r5, r0
 800f7b0:	4b17      	ldr	r3, [pc, #92]	; (800f810 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	4917      	ldr	r1, [pc, #92]	; (800f814 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800f7b6:	f845 3b04 	str.w	r3, [r5], #4
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	8102      	strh	r2, [r0, #8]
 800f7be:	4604      	mov	r4, r0
 800f7c0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 800f7c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800f7c8:	4b13      	ldr	r3, [pc, #76]	; (800f818 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800f7ca:	8142      	strh	r2, [r0, #10]
 800f7cc:	f9b3 7000 	ldrsh.w	r7, [r3]
 800f7d0:	4b12      	ldr	r3, [pc, #72]	; (800f81c <_ZN8touchgfx6ScreenC1Ev+0x70>)
 800f7d2:	8182      	strh	r2, [r0, #12]
 800f7d4:	81c2      	strh	r2, [r0, #14]
 800f7d6:	8202      	strh	r2, [r0, #16]
 800f7d8:	8242      	strh	r2, [r0, #18]
 800f7da:	8282      	strh	r2, [r0, #20]
 800f7dc:	82c2      	strh	r2, [r0, #22]
 800f7de:	6202      	str	r2, [r0, #32]
 800f7e0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 800f7e4:	6342      	str	r2, [r0, #52]	; 0x34
 800f7e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f7ea:	6041      	str	r1, [r0, #4]
 800f7ec:	4611      	mov	r1, r2
 800f7ee:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f7f2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	f7fb fc77 	bl	800b0ea <_ZN8touchgfx8Drawable5setXYEss>
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	4628      	mov	r0, r5
 800f800:	f7fb fc91 	bl	800b126 <_ZN8touchgfx8Drawable8setWidthEs>
 800f804:	4628      	mov	r0, r5
 800f806:	4631      	mov	r1, r6
 800f808:	f7fb fc9c 	bl	800b144 <_ZN8touchgfx8Drawable9setHeightEs>
 800f80c:	4620      	mov	r0, r4
 800f80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f810:	0801b834 	.word	0x0801b834
 800f814:	0801ac20 	.word	0x0801ac20
 800f818:	200010f4 	.word	0x200010f4
 800f81c:	200010f6 	.word	0x200010f6

0800f820 <_ZN8touchgfx6Screen4drawEv>:
 800f820:	4b09      	ldr	r3, [pc, #36]	; (800f848 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800f822:	b507      	push	{r0, r1, r2, lr}
 800f824:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f828:	2100      	movs	r1, #0
 800f82a:	4b08      	ldr	r3, [pc, #32]	; (800f84c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800f82c:	9100      	str	r1, [sp, #0]
 800f82e:	4669      	mov	r1, sp
 800f830:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f834:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f838:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f83c:	6803      	ldr	r3, [r0, #0]
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	4798      	blx	r3
 800f842:	b003      	add	sp, #12
 800f844:	f85d fb04 	ldr.w	pc, [sp], #4
 800f848:	200010f4 	.word	0x200010f4
 800f84c:	200010f6 	.word	0x200010f6

0800f850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800f850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f854:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800f858:	b089      	sub	sp, #36	; 0x24
 800f85a:	4680      	mov	r8, r0
 800f85c:	460c      	mov	r4, r1
 800f85e:	4615      	mov	r5, r2
 800f860:	b16b      	cbz	r3, 800f87e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 800f862:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800f866:	b153      	cbz	r3, 800f87e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 800f868:	4628      	mov	r0, r5
 800f86a:	f7ff ff5b 	bl	800f724 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f86e:	4621      	mov	r1, r4
 800f870:	f7fe ffba 	bl	800e7e8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f874:	69eb      	ldr	r3, [r5, #28]
 800f876:	b928      	cbnz	r0, 800f884 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 800f878:	461d      	mov	r5, r3
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1f4      	bne.n	800f868 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 800f87e:	b009      	add	sp, #36	; 0x24
 800f880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f884:	ae04      	add	r6, sp, #16
 800f886:	2b00      	cmp	r3, #0
 800f888:	d051      	beq.n	800f92e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 800f88a:	682b      	ldr	r3, [r5, #0]
 800f88c:	4629      	mov	r1, r5
 800f88e:	a802      	add	r0, sp, #8
 800f890:	68db      	ldr	r3, [r3, #12]
 800f892:	4798      	blx	r3
 800f894:	4628      	mov	r0, r5
 800f896:	f7ff ff61 	bl	800f75c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800f89a:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800f89e:	4407      	add	r7, r0
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	f7ff ff6f 	bl	800f784 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800f8a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f8aa:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800f8ae:	b23f      	sxth	r7, r7
 800f8b0:	4418      	add	r0, r3
 800f8b2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f8b6:	4621      	mov	r1, r4
 800f8b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f8bc:	f8ad 0012 	strh.w	r0, [sp, #18]
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f8c6:	f8ad 7010 	strh.w	r7, [sp, #16]
 800f8ca:	f7fc fb11 	bl	800bef0 <_ZN8touchgfx4RectaNERKS0_>
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	f7ff ff28 	bl	800f724 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f8d4:	ab06      	add	r3, sp, #24
 800f8d6:	4602      	mov	r2, r0
 800f8d8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f8dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800f8e0:	4611      	mov	r1, r2
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fc fb04 	bl	800bef0 <_ZN8touchgfx4RectaNERKS0_>
 800f8e8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800f8ec:	f9b4 1000 	ldrsh.w	r1, [r4]
 800f8f0:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800f8f4:	4299      	cmp	r1, r3
 800f8f6:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800f8fa:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800f8fe:	d10b      	bne.n	800f918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 800f900:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f904:	4552      	cmp	r2, sl
 800f906:	d107      	bne.n	800f918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 800f908:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f90c:	455a      	cmp	r2, fp
 800f90e:	d103      	bne.n	800f918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 800f910:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f914:	454a      	cmp	r2, r9
 800f916:	d00a      	beq.n	800f92e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 800f918:	f1bb 0f00 	cmp.w	fp, #0
 800f91c:	d002      	beq.n	800f924 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 800f91e:	f1b9 0f00 	cmp.w	r9, #0
 800f922:	d12e      	bne.n	800f982 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 800f924:	69ea      	ldr	r2, [r5, #28]
 800f926:	4621      	mov	r1, r4
 800f928:	4640      	mov	r0, r8
 800f92a:	f7ff ff91 	bl	800f850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f92e:	4628      	mov	r0, r5
 800f930:	f7ff fef8 	bl	800f724 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f934:	6861      	ldr	r1, [r4, #4]
 800f936:	4602      	mov	r2, r0
 800f938:	4633      	mov	r3, r6
 800f93a:	6820      	ldr	r0, [r4, #0]
 800f93c:	c303      	stmia	r3!, {r0, r1}
 800f93e:	4611      	mov	r1, r2
 800f940:	4630      	mov	r0, r6
 800f942:	f7fc fad5 	bl	800bef0 <_ZN8touchgfx4RectaNERKS0_>
 800f946:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d097      	beq.n	800f87e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 800f94e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d093      	beq.n	800f87e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 800f956:	4628      	mov	r0, r5
 800f958:	f7ff ff00 	bl	800f75c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800f95c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800f960:	1a18      	subs	r0, r3, r0
 800f962:	f8ad 0010 	strh.w	r0, [sp, #16]
 800f966:	4628      	mov	r0, r5
 800f968:	f7ff ff0c 	bl	800f784 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800f96c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f970:	4631      	mov	r1, r6
 800f972:	1a18      	subs	r0, r3, r0
 800f974:	f8ad 0012 	strh.w	r0, [sp, #18]
 800f978:	4628      	mov	r0, r5
 800f97a:	682b      	ldr	r3, [r5, #0]
 800f97c:	689b      	ldr	r3, [r3, #8]
 800f97e:	4798      	blx	r3
 800f980:	e77d      	b.n	800f87e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 800f982:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f986:	fa1f f08a 	uxth.w	r0, sl
 800f98a:	4552      	cmp	r2, sl
 800f98c:	9000      	str	r0, [sp, #0]
 800f98e:	da12      	bge.n	800f9b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 800f990:	9301      	str	r3, [sp, #4]
 800f992:	9b00      	ldr	r3, [sp, #0]
 800f994:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f998:	f8ad 2012 	strh.w	r2, [sp, #18]
 800f99c:	1a9a      	subs	r2, r3, r2
 800f99e:	f8ad 1010 	strh.w	r1, [sp, #16]
 800f9a2:	4631      	mov	r1, r6
 800f9a4:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f9a8:	4640      	mov	r0, r8
 800f9aa:	f8ad 2016 	strh.w	r2, [sp, #22]
 800f9ae:	69ea      	ldr	r2, [r5, #28]
 800f9b0:	f7ff ff4e 	bl	800f850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f9b4:	9b01      	ldr	r3, [sp, #4]
 800f9b6:	f9b4 2000 	ldrsh.w	r2, [r4]
 800f9ba:	b29f      	uxth	r7, r3
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	da0d      	bge.n	800f9dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 800f9c0:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f9c4:	1aba      	subs	r2, r7, r2
 800f9c6:	f8ad a012 	strh.w	sl, [sp, #18]
 800f9ca:	4631      	mov	r1, r6
 800f9cc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f9d0:	4640      	mov	r0, r8
 800f9d2:	f8ad 9016 	strh.w	r9, [sp, #22]
 800f9d6:	69ea      	ldr	r2, [r5, #28]
 800f9d8:	f7ff ff3a 	bl	800f850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f9dc:	8822      	ldrh	r2, [r4, #0]
 800f9de:	445f      	add	r7, fp
 800f9e0:	88a3      	ldrh	r3, [r4, #4]
 800f9e2:	b2bf      	uxth	r7, r7
 800f9e4:	4413      	add	r3, r2
 800f9e6:	b23a      	sxth	r2, r7
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	b219      	sxth	r1, r3
 800f9ec:	4291      	cmp	r1, r2
 800f9ee:	dd0d      	ble.n	800fa0c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 800f9f0:	1bdb      	subs	r3, r3, r7
 800f9f2:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f9f6:	f8ad a012 	strh.w	sl, [sp, #18]
 800f9fa:	4631      	mov	r1, r6
 800f9fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fa00:	4640      	mov	r0, r8
 800fa02:	f8ad 9016 	strh.w	r9, [sp, #22]
 800fa06:	69ea      	ldr	r2, [r5, #28]
 800fa08:	f7ff ff22 	bl	800f850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800fa0c:	88e2      	ldrh	r2, [r4, #6]
 800fa0e:	8863      	ldrh	r3, [r4, #2]
 800fa10:	4413      	add	r3, r2
 800fa12:	9a00      	ldr	r2, [sp, #0]
 800fa14:	444a      	add	r2, r9
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	fa1f f982 	uxth.w	r9, r2
 800fa1c:	b219      	sxth	r1, r3
 800fa1e:	fa0f f289 	sxth.w	r2, r9
 800fa22:	428a      	cmp	r2, r1
 800fa24:	da83      	bge.n	800f92e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 800fa26:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800fa2a:	eba3 0309 	sub.w	r3, r3, r9
 800fa2e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800fa32:	f8ad 1014 	strh.w	r1, [sp, #20]
 800fa36:	4631      	mov	r1, r6
 800fa38:	f8ad 0010 	strh.w	r0, [sp, #16]
 800fa3c:	f8ad 2012 	strh.w	r2, [sp, #18]
 800fa40:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fa44:	69ea      	ldr	r2, [r5, #28]
 800fa46:	e76f      	b.n	800f928 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0800fa48 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800fa48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	aa02      	add	r2, sp, #8
 800fa4e:	4604      	mov	r4, r0
 800fa50:	3004      	adds	r0, #4
 800fa52:	f842 3d04 	str.w	r3, [r2, #-4]!
 800fa56:	460d      	mov	r5, r1
 800fa58:	f7fc fb21 	bl	800c09e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800fa5c:	9a01      	ldr	r2, [sp, #4]
 800fa5e:	b11a      	cbz	r2, 800fa68 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 800fa60:	4629      	mov	r1, r5
 800fa62:	4620      	mov	r0, r4
 800fa64:	f7ff fef4 	bl	800f850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800fa68:	b003      	add	sp, #12
 800fa6a:	bd30      	pop	{r4, r5, pc}

0800fa6c <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800fa6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa6e:	4602      	mov	r2, r0
 800fa70:	4604      	mov	r4, r0
 800fa72:	460d      	mov	r5, r1
 800fa74:	466b      	mov	r3, sp
 800fa76:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800fa7a:	6851      	ldr	r1, [r2, #4]
 800fa7c:	c303      	stmia	r3!, {r0, r1}
 800fa7e:	4629      	mov	r1, r5
 800fa80:	4668      	mov	r0, sp
 800fa82:	f7fc fa35 	bl	800bef0 <_ZN8touchgfx4RectaNERKS0_>
 800fa86:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800fa8a:	4669      	mov	r1, sp
 800fa8c:	b123      	cbz	r3, 800fa98 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 800fa8e:	4620      	mov	r0, r4
 800fa90:	f7ff ffda 	bl	800fa48 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800fa94:	b003      	add	sp, #12
 800fa96:	bd30      	pop	{r4, r5, pc}
 800fa98:	1d20      	adds	r0, r4, #4
 800fa9a:	f7fc fac7 	bl	800c02c <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800fa9e:	e7f9      	b.n	800fa94 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0800faa0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800faa0:	460b      	mov	r3, r1
 800faa2:	680a      	ldr	r2, [r1, #0]
 800faa4:	1d01      	adds	r1, r0, #4
 800faa6:	6952      	ldr	r2, [r2, #20]
 800faa8:	4618      	mov	r0, r3
 800faaa:	4710      	bx	r2

0800faac <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 800faac:	f011 0f40 	tst.w	r1, #64	; 0x40
 800fab0:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 800fab4:	4b03      	ldr	r3, [pc, #12]	; (800fac4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 800fab6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800faba:	bf08      	it	eq
 800fabc:	2300      	moveq	r3, #0
 800fabe:	4308      	orrs	r0, r1
 800fac0:	4318      	orrs	r0, r3
 800fac2:	4770      	bx	lr
 800fac4:	fffffe00 	.word	0xfffffe00

0800fac8 <_ZN8touchgfx9GlyphNode6setTopEs>:
 800fac8:	7b43      	ldrb	r3, [r0, #13]
 800faca:	7201      	strb	r1, [r0, #8]
 800facc:	b289      	uxth	r1, r1
 800face:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 800fad2:	05ca      	lsls	r2, r1, #23
 800fad4:	bf48      	it	mi
 800fad6:	f043 0320 	orrmi.w	r3, r3, #32
 800fada:	7343      	strb	r3, [r0, #13]
 800fadc:	058b      	lsls	r3, r1, #22
 800fade:	bf42      	ittt	mi
 800fae0:	7b43      	ldrbmi	r3, [r0, #13]
 800fae2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800fae6:	7343      	strbmi	r3, [r0, #13]
 800fae8:	4770      	bx	lr

0800faea <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800faea:	b530      	push	{r4, r5, lr}
 800faec:	2500      	movs	r5, #0
 800faee:	2401      	movs	r4, #1
 800faf0:	6843      	ldr	r3, [r0, #4]
 800faf2:	b913      	cbnz	r3, 800fafa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800faf4:	6803      	ldr	r3, [r0, #0]
 800faf6:	b1f3      	cbz	r3, 800fb36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 800faf8:	6043      	str	r3, [r0, #4]
 800fafa:	7c03      	ldrb	r3, [r0, #16]
 800fafc:	b143      	cbz	r3, 800fb10 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800fafe:	68c3      	ldr	r3, [r0, #12]
 800fb00:	b12b      	cbz	r3, 800fb0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800fb02:	881a      	ldrh	r2, [r3, #0]
 800fb04:	b11a      	cbz	r2, 800fb0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800fb06:	1c9a      	adds	r2, r3, #2
 800fb08:	60c2      	str	r2, [r0, #12]
 800fb0a:	8818      	ldrh	r0, [r3, #0]
 800fb0c:	bd30      	pop	{r4, r5, pc}
 800fb0e:	7405      	strb	r5, [r0, #16]
 800fb10:	6843      	ldr	r3, [r0, #4]
 800fb12:	8819      	ldrh	r1, [r3, #0]
 800fb14:	b179      	cbz	r1, 800fb36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 800fb16:	1c9a      	adds	r2, r3, #2
 800fb18:	2902      	cmp	r1, #2
 800fb1a:	6042      	str	r2, [r0, #4]
 800fb1c:	d1f5      	bne.n	800fb0a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800fb1e:	6883      	ldr	r3, [r0, #8]
 800fb20:	1d1a      	adds	r2, r3, #4
 800fb22:	6082      	str	r2, [r0, #8]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	60c3      	str	r3, [r0, #12]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d0e1      	beq.n	800faf0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800fb2c:	881b      	ldrh	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d0de      	beq.n	800faf0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800fb32:	7404      	strb	r4, [r0, #16]
 800fb34:	e7dc      	b.n	800faf0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800fb36:	2000      	movs	r0, #0
 800fb38:	e7e8      	b.n	800fb0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800fb3a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800fb3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb3c:	4605      	mov	r5, r0
 800fb3e:	4608      	mov	r0, r1
 800fb40:	b1f1      	cbz	r1, 800fb80 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800fb42:	f105 0440 	add.w	r4, r5, #64	; 0x40
 800fb46:	460b      	mov	r3, r1
 800fb48:	f101 0708 	add.w	r7, r1, #8
 800fb4c:	4622      	mov	r2, r4
 800fb4e:	6818      	ldr	r0, [r3, #0]
 800fb50:	3308      	adds	r3, #8
 800fb52:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800fb56:	4626      	mov	r6, r4
 800fb58:	42bb      	cmp	r3, r7
 800fb5a:	c603      	stmia	r6!, {r0, r1}
 800fb5c:	4634      	mov	r4, r6
 800fb5e:	d1f6      	bne.n	800fb4e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800fb60:	6818      	ldr	r0, [r3, #0]
 800fb62:	6030      	str	r0, [r6, #0]
 800fb64:	4610      	mov	r0, r2
 800fb66:	889b      	ldrh	r3, [r3, #4]
 800fb68:	80b3      	strh	r3, [r6, #4]
 800fb6a:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 800fb6e:	015b      	lsls	r3, r3, #5
 800fb70:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800fb74:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 800fb78:	430b      	orrs	r3, r1
 800fb7a:	425b      	negs	r3, r3
 800fb7c:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 800fb80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb82 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800fb82:	b538      	push	{r3, r4, r5, lr}
 800fb84:	460c      	mov	r4, r1
 800fb86:	6811      	ldr	r1, [r2, #0]
 800fb88:	4610      	mov	r0, r2
 800fb8a:	68cd      	ldr	r5, [r1, #12]
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	47a8      	blx	r5
 800fb90:	2800      	cmp	r0, #0
 800fb92:	bf08      	it	eq
 800fb94:	4620      	moveq	r0, r4
 800fb96:	bd38      	pop	{r3, r4, r5, pc}

0800fb98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800fb98:	b570      	push	{r4, r5, r6, lr}
 800fb9a:	8810      	ldrh	r0, [r2, #0]
 800fb9c:	4298      	cmp	r0, r3
 800fb9e:	d817      	bhi.n	800fbd0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800fba0:	1e48      	subs	r0, r1, #1
 800fba2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800fba6:	4298      	cmp	r0, r3
 800fba8:	d312      	bcc.n	800fbd0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800fbaa:	2400      	movs	r4, #0
 800fbac:	428c      	cmp	r4, r1
 800fbae:	d20f      	bcs.n	800fbd0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800fbb0:	1860      	adds	r0, r4, r1
 800fbb2:	1040      	asrs	r0, r0, #1
 800fbb4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800fbb8:	0085      	lsls	r5, r0, #2
 800fbba:	42b3      	cmp	r3, r6
 800fbbc:	d902      	bls.n	800fbc4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800fbbe:	3001      	adds	r0, #1
 800fbc0:	b284      	uxth	r4, r0
 800fbc2:	e7f3      	b.n	800fbac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800fbc4:	d102      	bne.n	800fbcc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 800fbc6:	442a      	add	r2, r5
 800fbc8:	8850      	ldrh	r0, [r2, #2]
 800fbca:	bd70      	pop	{r4, r5, r6, pc}
 800fbcc:	b281      	uxth	r1, r0
 800fbce:	e7ed      	b.n	800fbac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800fbd0:	2000      	movs	r0, #0
 800fbd2:	e7fa      	b.n	800fbca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0800fbd4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 800fbd4:	b510      	push	{r4, lr}
 800fbd6:	8ac3      	ldrh	r3, [r0, #22]
 800fbd8:	428b      	cmp	r3, r1
 800fbda:	d805      	bhi.n	800fbe8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 800fbdc:	4b07      	ldr	r3, [pc, #28]	; (800fbfc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 800fbde:	21fd      	movs	r1, #253	; 0xfd
 800fbe0:	4a07      	ldr	r2, [pc, #28]	; (800fc00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 800fbe2:	4808      	ldr	r0, [pc, #32]	; (800fc04 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 800fbe4:	f008 fffc 	bl	8018be0 <__assert_func>
 800fbe8:	8a83      	ldrh	r3, [r0, #20]
 800fbea:	240a      	movs	r4, #10
 800fbec:	4419      	add	r1, r3
 800fbee:	fbb1 f3f4 	udiv	r3, r1, r4
 800fbf2:	fb04 1113 	mls	r1, r4, r3, r1
 800fbf6:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 800fbfa:	bd10      	pop	{r4, pc}
 800fbfc:	0801b881 	.word	0x0801b881
 800fc00:	0801bcb0 	.word	0x0801bcb0
 800fc04:	0801b88f 	.word	0x0801b88f

0800fc08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 800fc08:	b508      	push	{r3, lr}
 800fc0a:	8ac3      	ldrh	r3, [r0, #22]
 800fc0c:	428b      	cmp	r3, r1
 800fc0e:	d805      	bhi.n	800fc1c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 800fc10:	4b07      	ldr	r3, [pc, #28]	; (800fc30 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 800fc12:	21d3      	movs	r1, #211	; 0xd3
 800fc14:	4a07      	ldr	r2, [pc, #28]	; (800fc34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 800fc16:	4808      	ldr	r0, [pc, #32]	; (800fc38 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 800fc18:	f008 ffe2 	bl	8018be0 <__assert_func>
 800fc1c:	8a83      	ldrh	r3, [r0, #20]
 800fc1e:	220a      	movs	r2, #10
 800fc20:	4419      	add	r1, r3
 800fc22:	fbb1 f3f2 	udiv	r3, r1, r2
 800fc26:	fb02 1113 	mls	r1, r2, r3, r1
 800fc2a:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 800fc2e:	bd08      	pop	{r3, pc}
 800fc30:	0801b881 	.word	0x0801b881
 800fc34:	0801ba00 	.word	0x0801ba00
 800fc38:	0801b88f 	.word	0x0801b88f

0800fc3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800fc3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc40:	4604      	mov	r4, r0
 800fc42:	4688      	mov	r8, r1
 800fc44:	4615      	mov	r5, r2
 800fc46:	b94a      	cbnz	r2, 800fc5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 800fc48:	4691      	mov	r9, r2
 800fc4a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 800fc4e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 800fc52:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800fc56:	4648      	mov	r0, r9
 800fc58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc5c:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800fc60:	8892      	ldrh	r2, [r2, #4]
 800fc62:	462b      	mov	r3, r5
 800fc64:	f105 0c08 	add.w	ip, r5, #8
 800fc68:	46b3      	mov	fp, r6
 800fc6a:	6818      	ldr	r0, [r3, #0]
 800fc6c:	3308      	adds	r3, #8
 800fc6e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800fc72:	4637      	mov	r7, r6
 800fc74:	4563      	cmp	r3, ip
 800fc76:	c703      	stmia	r7!, {r0, r1}
 800fc78:	463e      	mov	r6, r7
 800fc7a:	d1f6      	bne.n	800fc6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 800fc7c:	6818      	ldr	r0, [r3, #0]
 800fc7e:	46d9      	mov	r9, fp
 800fc80:	6038      	str	r0, [r7, #0]
 800fc82:	889b      	ldrh	r3, [r3, #4]
 800fc84:	80bb      	strh	r3, [r7, #4]
 800fc86:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 800fc8a:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 800fc8e:	18d3      	adds	r3, r2, r3
 800fc90:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800fc94:	b298      	uxth	r0, r3
 800fc96:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 800fc9a:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 800fc9e:	281d      	cmp	r0, #29
 800fca0:	ea4a 0a01 	orr.w	sl, sl, r1
 800fca4:	fa1f f68a 	uxth.w	r6, sl
 800fca8:	d842      	bhi.n	800fd30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 800fcaa:	2301      	movs	r3, #1
 800fcac:	4950      	ldr	r1, [pc, #320]	; (800fdf0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 800fcae:	ea4f 0aea 	mov.w	sl, sl, asr #3
 800fcb2:	4083      	lsls	r3, r0
 800fcb4:	420b      	tst	r3, r1
 800fcb6:	d114      	bne.n	800fce2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 800fcb8:	f413 7f60 	tst.w	r3, #896	; 0x380
 800fcbc:	d03c      	beq.n	800fd38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 800fcbe:	fa1f fa8a 	uxth.w	sl, sl
 800fcc2:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800fcc6:	4658      	mov	r0, fp
 800fcc8:	eba1 010a 	sub.w	r1, r1, sl
 800fccc:	b209      	sxth	r1, r1
 800fcce:	f7ff fefb 	bl	800fac8 <_ZN8touchgfx9GlyphNode6setTopEs>
 800fcd2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 800fcd6:	1b86      	subs	r6, r0, r6
 800fcd8:	eba6 0a0a 	sub.w	sl, r6, sl
 800fcdc:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 800fce0:	e7b9      	b.n	800fc56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800fce2:	2100      	movs	r1, #0
 800fce4:	f104 001a 	add.w	r0, r4, #26
 800fce8:	f7ff ff8e 	bl	800fc08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 800fcec:	f640 6333 	movw	r3, #3635	; 0xe33
 800fcf0:	4601      	mov	r1, r0
 800fcf2:	4298      	cmp	r0, r3
 800fcf4:	d10a      	bne.n	800fd0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 800fcf6:	f8d8 3000 	ldr.w	r3, [r8]
 800fcfa:	4640      	mov	r0, r8
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	4798      	blx	r3
 800fd00:	7b41      	ldrb	r1, [r0, #13]
 800fd02:	7a00      	ldrb	r0, [r0, #8]
 800fd04:	f7ff fed2 	bl	800faac <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 800fd08:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 800fd0c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800fd10:	4658      	mov	r0, fp
 800fd12:	4431      	add	r1, r6
 800fd14:	4451      	add	r1, sl
 800fd16:	b209      	sxth	r1, r1
 800fd18:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 800fd1c:	f7ff fed4 	bl	800fac8 <_ZN8touchgfx9GlyphNode6setTopEs>
 800fd20:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800fd24:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 800fd28:	1a9b      	subs	r3, r3, r2
 800fd2a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 800fd2e:	e792      	b.n	800fc56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800fd30:	f640 631b 	movw	r3, #3611	; 0xe1b
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d005      	beq.n	800fd44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 800fd38:	f022 0302 	bic.w	r3, r2, #2
 800fd3c:	f640 611d 	movw	r1, #3613	; 0xe1d
 800fd40:	428b      	cmp	r3, r1
 800fd42:	d119      	bne.n	800fd78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 800fd44:	1e53      	subs	r3, r2, #1
 800fd46:	4629      	mov	r1, r5
 800fd48:	4642      	mov	r2, r8
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	f7ff ff18 	bl	800fb82 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800fd52:	7b41      	ldrb	r1, [r0, #13]
 800fd54:	7a00      	ldrb	r0, [r0, #8]
 800fd56:	f7ff fea9 	bl	800faac <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 800fd5a:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 800fd5e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 800fd62:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fd66:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	115a      	asrs	r2, r3, #5
 800fd6e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800fd72:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800fd76:	e02e      	b.n	800fdd6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 800fd78:	4639      	mov	r1, r7
 800fd7a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800fd7e:	f7ff fe95 	bl	800faac <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 800fd82:	f640 6109 	movw	r1, #3593	; 0xe09
 800fd86:	f022 0310 	bic.w	r3, r2, #16
 800fd8a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 800fd8e:	428b      	cmp	r3, r1
 800fd90:	d003      	beq.n	800fd9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 800fd92:	f640 6313 	movw	r3, #3603	; 0xe13
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d127      	bne.n	800fdea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 800fd9a:	b27f      	sxtb	r7, r7
 800fd9c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800fda0:	4629      	mov	r1, r5
 800fda2:	4620      	mov	r0, r4
 800fda4:	f407 7780 	and.w	r7, r7, #256	; 0x100
 800fda8:	431f      	orrs	r7, r3
 800fdaa:	f640 6313 	movw	r3, #3603	; 0xe13
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	bf14      	ite	ne
 800fdb2:	f102 33ff 	addne.w	r3, r2, #4294967295
 800fdb6:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800fdba:	4642      	mov	r2, r8
 800fdbc:	bf18      	it	ne
 800fdbe:	b29b      	uxthne	r3, r3
 800fdc0:	f7ff fedf 	bl	800fb82 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800fdc4:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800fdc8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fdcc:	7a83      	ldrb	r3, [r0, #10]
 800fdce:	4313      	orrs	r3, r2
 800fdd0:	1aff      	subs	r7, r7, r3
 800fdd2:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 800fdd6:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 800fdda:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800fdde:	f7ff fe65 	bl	800faac <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 800fde2:	1b80      	subs	r0, r0, r6
 800fde4:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 800fde8:	e735      	b.n	800fc56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800fdea:	2300      	movs	r3, #0
 800fdec:	e7c1      	b.n	800fd72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 800fdee:	bf00      	nop
 800fdf0:	3fc00079 	.word	0x3fc00079

0800fdf4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800fdf4:	3a01      	subs	r2, #1
 800fdf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdfa:	b292      	uxth	r2, r2
 800fdfc:	460c      	mov	r4, r1
 800fdfe:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800fe02:	42b2      	cmp	r2, r6
 800fe04:	d018      	beq.n	800fe38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 800fe06:	8b01      	ldrh	r1, [r0, #24]
 800fe08:	f834 5b02 	ldrh.w	r5, [r4], #2
 800fe0c:	4291      	cmp	r1, r2
 800fe0e:	d805      	bhi.n	800fe1c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 800fe10:	4b13      	ldr	r3, [pc, #76]	; (800fe60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 800fe12:	21d3      	movs	r1, #211	; 0xd3
 800fe14:	4a13      	ldr	r2, [pc, #76]	; (800fe64 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 800fe16:	4814      	ldr	r0, [pc, #80]	; (800fe68 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 800fe18:	f008 fee2 	bl	8018be0 <__assert_func>
 800fe1c:	8ac1      	ldrh	r1, [r0, #22]
 800fe1e:	4411      	add	r1, r2
 800fe20:	3a01      	subs	r2, #1
 800fe22:	f001 0101 	and.w	r1, r1, #1
 800fe26:	b292      	uxth	r2, r2
 800fe28:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800fe2c:	8a49      	ldrh	r1, [r1, #18]
 800fe2e:	428d      	cmp	r5, r1
 800fe30:	d0e7      	beq.n	800fe02 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 800fe32:	2000      	movs	r0, #0
 800fe34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe38:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800fe3c:	2600      	movs	r6, #0
 800fe3e:	f100 051a 	add.w	r5, r0, #26
 800fe42:	441f      	add	r7, r3
 800fe44:	b2b1      	uxth	r1, r6
 800fe46:	42b9      	cmp	r1, r7
 800fe48:	da08      	bge.n	800fe5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 800fe4a:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 800fe4e:	4628      	mov	r0, r5
 800fe50:	f7ff feda 	bl	800fc08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 800fe54:	3601      	adds	r6, #1
 800fe56:	4540      	cmp	r0, r8
 800fe58:	d0f4      	beq.n	800fe44 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 800fe5a:	e7ea      	b.n	800fe32 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 800fe5c:	2001      	movs	r0, #1
 800fe5e:	e7e9      	b.n	800fe34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 800fe60:	0801b881 	.word	0x0801b881
 800fe64:	0801be10 	.word	0x0801be10
 800fe68:	0801b88f 	.word	0x0801b88f

0800fe6c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 800fe6c:	b538      	push	{r3, r4, r5, lr}
 800fe6e:	8ac3      	ldrh	r3, [r0, #22]
 800fe70:	428b      	cmp	r3, r1
 800fe72:	d205      	bcs.n	800fe80 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 800fe74:	4b08      	ldr	r3, [pc, #32]	; (800fe98 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 800fe76:	21d8      	movs	r1, #216	; 0xd8
 800fe78:	4a08      	ldr	r2, [pc, #32]	; (800fe9c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 800fe7a:	4809      	ldr	r0, [pc, #36]	; (800fea0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 800fe7c:	f008 feb0 	bl	8018be0 <__assert_func>
 800fe80:	8a82      	ldrh	r2, [r0, #20]
 800fe82:	250a      	movs	r5, #10
 800fe84:	1a5b      	subs	r3, r3, r1
 800fe86:	440a      	add	r2, r1
 800fe88:	82c3      	strh	r3, [r0, #22]
 800fe8a:	fbb2 f4f5 	udiv	r4, r2, r5
 800fe8e:	fb05 2214 	mls	r2, r5, r4, r2
 800fe92:	8282      	strh	r2, [r0, #20]
 800fe94:	bd38      	pop	{r3, r4, r5, pc}
 800fe96:	bf00      	nop
 800fe98:	0801b875 	.word	0x0801b875
 800fe9c:	0801bc2c 	.word	0x0801bc2c
 800fea0:	0801b88f 	.word	0x0801b88f

0800fea4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	8ac3      	ldrh	r3, [r0, #22]
 800fea8:	2b09      	cmp	r3, #9
 800feaa:	d905      	bls.n	800feb8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 800feac:	4b08      	ldr	r3, [pc, #32]	; (800fed0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 800feae:	21f7      	movs	r1, #247	; 0xf7
 800feb0:	4a08      	ldr	r2, [pc, #32]	; (800fed4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 800feb2:	4809      	ldr	r0, [pc, #36]	; (800fed8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 800feb4:	f008 fe94 	bl	8018be0 <__assert_func>
 800feb8:	8a82      	ldrh	r2, [r0, #20]
 800feba:	250a      	movs	r5, #10
 800febc:	441a      	add	r2, r3
 800febe:	3301      	adds	r3, #1
 800fec0:	fbb2 f4f5 	udiv	r4, r2, r5
 800fec4:	fb05 2214 	mls	r2, r5, r4, r2
 800fec8:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 800fecc:	82c3      	strh	r3, [r0, #22]
 800fece:	bd38      	pop	{r3, r4, r5, pc}
 800fed0:	0801b869 	.word	0x0801b869
 800fed4:	0801bb7d 	.word	0x0801bb7d
 800fed8:	0801b88f 	.word	0x0801b88f

0800fedc <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800fedc:	b538      	push	{r3, r4, r5, lr}
 800fede:	4604      	mov	r4, r0
 800fee0:	f100 051a 	add.w	r5, r0, #26
 800fee4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800fee6:	2b0a      	cmp	r3, #10
 800fee8:	d01c      	beq.n	800ff24 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 800feea:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800feec:	b962      	cbnz	r2, 800ff08 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 800feee:	f104 051a 	add.w	r5, r4, #26
 800fef2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800fef4:	2b0a      	cmp	r3, #10
 800fef6:	d015      	beq.n	800ff24 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 800fef8:	4620      	mov	r0, r4
 800fefa:	f7ff fdf6 	bl	800faea <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800fefe:	4601      	mov	r1, r0
 800ff00:	4628      	mov	r0, r5
 800ff02:	f7ff ffcf 	bl	800fea4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 800ff06:	e7f4      	b.n	800fef2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 800ff08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800ff0a:	3a01      	subs	r2, #1
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 800ff12:	3301      	adds	r3, #1
 800ff14:	f003 0301 	and.w	r3, r3, #1
 800ff18:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 800ff1a:	8722      	strh	r2, [r4, #56]	; 0x38
 800ff1c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800ff1e:	f7ff ffc1 	bl	800fea4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 800ff22:	e7df      	b.n	800fee4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 800ff24:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ff28 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 800ff28:	2300      	movs	r3, #0
 800ff2a:	b510      	push	{r4, lr}
 800ff2c:	6043      	str	r3, [r0, #4]
 800ff2e:	4604      	mov	r4, r0
 800ff30:	60c3      	str	r3, [r0, #12]
 800ff32:	7403      	strb	r3, [r0, #16]
 800ff34:	8603      	strh	r3, [r0, #48]	; 0x30
 800ff36:	8303      	strh	r3, [r0, #24]
 800ff38:	8703      	strh	r3, [r0, #56]	; 0x38
 800ff3a:	f7ff ffcf 	bl	800fedc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800ff3e:	4a0a      	ldr	r2, [pc, #40]	; (800ff68 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 800ff40:	6813      	ldr	r3, [r2, #0]
 800ff42:	4611      	mov	r1, r2
 800ff44:	b913      	cbnz	r3, 800ff4c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 800ff46:	6852      	ldr	r2, [r2, #4]
 800ff48:	07d0      	lsls	r0, r2, #31
 800ff4a:	d50b      	bpl.n	800ff64 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 800ff4c:	6849      	ldr	r1, [r1, #4]
 800ff4e:	104a      	asrs	r2, r1, #1
 800ff50:	07c9      	lsls	r1, r1, #31
 800ff52:	eb04 0002 	add.w	r0, r4, r2
 800ff56:	bf48      	it	mi
 800ff58:	58a2      	ldrmi	r2, [r4, r2]
 800ff5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff5e:	bf48      	it	mi
 800ff60:	58d3      	ldrmi	r3, [r2, r3]
 800ff62:	4718      	bx	r3
 800ff64:	bd10      	pop	{r4, pc}
 800ff66:	bf00      	nop
 800ff68:	200010c8 	.word	0x200010c8

0800ff6c <_ZN8touchgfx12TextProviderC1Ev>:
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	2201      	movs	r2, #1
 800ff70:	b510      	push	{r4, lr}
 800ff72:	4604      	mov	r4, r0
 800ff74:	60c3      	str	r3, [r0, #12]
 800ff76:	7403      	strb	r3, [r0, #16]
 800ff78:	82c3      	strh	r3, [r0, #22]
 800ff7a:	8303      	strh	r3, [r0, #24]
 800ff7c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800ff7e:	8603      	strh	r3, [r0, #48]	; 0x30
 800ff80:	86c3      	strh	r3, [r0, #54]	; 0x36
 800ff82:	8703      	strh	r3, [r0, #56]	; 0x38
 800ff84:	63c3      	str	r3, [r0, #60]	; 0x3c
 800ff86:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 800ff8a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 800ff8e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 800ff92:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 800ff96:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 800ff9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ff9e:	f7ff ffc3 	bl	800ff28 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	bd10      	pop	{r4, pc}

0800ffa6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 800ffa6:	b410      	push	{r4}
 800ffa8:	6082      	str	r2, [r0, #8]
 800ffaa:	6001      	str	r1, [r0, #0]
 800ffac:	63c3      	str	r3, [r0, #60]	; 0x3c
 800ffae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffb2:	f7ff bfb9 	b.w	800ff28 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0800ffb8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 800ffb8:	b508      	push	{r3, lr}
 800ffba:	88c2      	ldrh	r2, [r0, #6]
 800ffbc:	440a      	add	r2, r1
 800ffbe:	2a02      	cmp	r2, #2
 800ffc0:	dd05      	ble.n	800ffce <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 800ffc2:	4b06      	ldr	r3, [pc, #24]	; (800ffdc <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 800ffc4:	21ec      	movs	r1, #236	; 0xec
 800ffc6:	4a06      	ldr	r2, [pc, #24]	; (800ffe0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 800ffc8:	4806      	ldr	r0, [pc, #24]	; (800ffe4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 800ffca:	f008 fe09 	bl	8018be0 <__assert_func>
 800ffce:	8883      	ldrh	r3, [r0, #4]
 800ffd0:	80c2      	strh	r2, [r0, #6]
 800ffd2:	1a59      	subs	r1, r3, r1
 800ffd4:	f001 0101 	and.w	r1, r1, #1
 800ffd8:	8081      	strh	r1, [r0, #4]
 800ffda:	bd08      	pop	{r3, pc}
 800ffdc:	0801b8bb 	.word	0x0801b8bb
 800ffe0:	0801bd89 	.word	0x0801bd89
 800ffe4:	0801b88f 	.word	0x0801b88f

0800ffe8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 800ffe8:	b508      	push	{r3, lr}
 800ffea:	88c3      	ldrh	r3, [r0, #6]
 800ffec:	428b      	cmp	r3, r1
 800ffee:	d805      	bhi.n	800fffc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 800fff0:	4b06      	ldr	r3, [pc, #24]	; (801000c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 800fff2:	21fd      	movs	r1, #253	; 0xfd
 800fff4:	4a06      	ldr	r2, [pc, #24]	; (8010010 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 800fff6:	4807      	ldr	r0, [pc, #28]	; (8010014 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 800fff8:	f008 fdf2 	bl	8018be0 <__assert_func>
 800fffc:	8883      	ldrh	r3, [r0, #4]
 800fffe:	4419      	add	r1, r3
 8010000:	f001 0101 	and.w	r1, r1, #1
 8010004:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8010008:	bd08      	pop	{r3, pc}
 801000a:	bf00      	nop
 801000c:	0801b881 	.word	0x0801b881
 8010010:	0801bee1 	.word	0x0801bee1
 8010014:	0801b88f 	.word	0x0801b88f

08010018 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8010018:	b570      	push	{r4, r5, r6, lr}
 801001a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801001c:	4604      	mov	r4, r0
 801001e:	b92a      	cbnz	r2, 801002c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8010020:	4b12      	ldr	r3, [pc, #72]	; (801006c <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 8010022:	21de      	movs	r1, #222	; 0xde
 8010024:	4a12      	ldr	r2, [pc, #72]	; (8010070 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8010026:	4813      	ldr	r0, [pc, #76]	; (8010074 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8010028:	f008 fdda 	bl	8018be0 <__assert_func>
 801002c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801002e:	260a      	movs	r6, #10
 8010030:	3a01      	subs	r2, #1
 8010032:	3412      	adds	r4, #18
 8010034:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8010038:	3301      	adds	r3, #1
 801003a:	8b4d      	ldrh	r5, [r1, #26]
 801003c:	8602      	strh	r2, [r0, #48]	; 0x30
 801003e:	fbb3 f1f6 	udiv	r1, r3, r6
 8010042:	fb06 3311 	mls	r3, r6, r1, r3
 8010046:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8010048:	f7ff ff48 	bl	800fedc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801004c:	88e3      	ldrh	r3, [r4, #6]
 801004e:	2101      	movs	r1, #1
 8010050:	2b02      	cmp	r3, #2
 8010052:	bf04      	itt	eq
 8010054:	2301      	moveq	r3, #1
 8010056:	80e3      	strheq	r3, [r4, #6]
 8010058:	4620      	mov	r0, r4
 801005a:	f7ff ffad 	bl	800ffb8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801005e:	4620      	mov	r0, r4
 8010060:	462a      	mov	r2, r5
 8010062:	2100      	movs	r1, #0
 8010064:	f7ff ffc0 	bl	800ffe8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8010068:	4628      	mov	r0, r5
 801006a:	bd70      	pop	{r4, r5, r6, pc}
 801006c:	0801b860 	.word	0x0801b860
 8010070:	0801bad2 	.word	0x0801bad2
 8010074:	0801b88f 	.word	0x0801b88f

08010078 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8010078:	428a      	cmp	r2, r1
 801007a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801007e:	4604      	mov	r4, r0
 8010080:	460e      	mov	r6, r1
 8010082:	4615      	mov	r5, r2
 8010084:	469a      	mov	sl, r3
 8010086:	d92b      	bls.n	80100e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8010088:	1a57      	subs	r7, r2, r1
 801008a:	f04f 0800 	mov.w	r8, #0
 801008e:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8010092:	f04f 0b0a 	mov.w	fp, #10
 8010096:	b2bf      	uxth	r7, r7
 8010098:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801009a:	b92b      	cbnz	r3, 80100a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801009c:	4b24      	ldr	r3, [pc, #144]	; (8010130 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801009e:	21e6      	movs	r1, #230	; 0xe6
 80100a0:	4a24      	ldr	r2, [pc, #144]	; (8010134 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 80100a2:	4825      	ldr	r0, [pc, #148]	; (8010138 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 80100a4:	f008 fd9c 	bl	8018be0 <__assert_func>
 80100a8:	3b01      	subs	r3, #1
 80100aa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80100ac:	2101      	movs	r1, #1
 80100ae:	4648      	mov	r0, r9
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	f108 0801 	add.w	r8, r8, #1
 80100b6:	441a      	add	r2, r3
 80100b8:	8623      	strh	r3, [r4, #48]	; 0x30
 80100ba:	fbb2 f3fb 	udiv	r3, r2, fp
 80100be:	fb0b 2313 	mls	r3, fp, r3, r2
 80100c2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80100c6:	8b5a      	ldrh	r2, [r3, #26]
 80100c8:	9201      	str	r2, [sp, #4]
 80100ca:	f7ff ff75 	bl	800ffb8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 80100ce:	9a01      	ldr	r2, [sp, #4]
 80100d0:	2100      	movs	r1, #0
 80100d2:	4648      	mov	r0, r9
 80100d4:	f7ff ff88 	bl	800ffe8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 80100d8:	fa1f f388 	uxth.w	r3, r8
 80100dc:	429f      	cmp	r7, r3
 80100de:	d8db      	bhi.n	8010098 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 80100e0:	f104 071a 	add.w	r7, r4, #26
 80100e4:	4631      	mov	r1, r6
 80100e6:	260a      	movs	r6, #10
 80100e8:	4638      	mov	r0, r7
 80100ea:	f7ff febf 	bl	800fe6c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 80100ee:	b1c5      	cbz	r5, 8010122 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80100f0:	3d01      	subs	r5, #1
 80100f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80100f4:	b2ad      	uxth	r5, r5
 80100f6:	2b09      	cmp	r3, #9
 80100f8:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 80100fc:	d903      	bls.n	8010106 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 80100fe:	4b0f      	ldr	r3, [pc, #60]	; (801013c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8010100:	21ec      	movs	r1, #236	; 0xec
 8010102:	4a0f      	ldr	r2, [pc, #60]	; (8010140 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 8010104:	e7cd      	b.n	80100a2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8010106:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8010108:	3301      	adds	r3, #1
 801010a:	3109      	adds	r1, #9
 801010c:	8623      	strh	r3, [r4, #48]	; 0x30
 801010e:	fbb1 f0f6 	udiv	r0, r1, r6
 8010112:	fb06 1110 	mls	r1, r6, r0, r1
 8010116:	4638      	mov	r0, r7
 8010118:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801011a:	2100      	movs	r1, #0
 801011c:	f7ff fd5a 	bl	800fbd4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8010120:	e7e5      	b.n	80100ee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 8010122:	4620      	mov	r0, r4
 8010124:	b003      	add	sp, #12
 8010126:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801012a:	f7ff bed7 	b.w	800fedc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801012e:	bf00      	nop
 8010130:	0801b860 	.word	0x0801b860
 8010134:	0801b956 	.word	0x0801b956
 8010138:	0801b88f 	.word	0x0801b88f
 801013c:	0801b8bb 	.word	0x0801b8bb
 8010140:	0801b8ce 	.word	0x0801b8ce

08010144 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8010144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010148:	4605      	mov	r5, r0
 801014a:	4616      	mov	r6, r2
 801014c:	1c8c      	adds	r4, r1, #2
 801014e:	8809      	ldrh	r1, [r1, #0]
 8010150:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8010154:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8010158:	42b3      	cmp	r3, r6
 801015a:	d124      	bne.n	80101a6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801015c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8010160:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8010164:	f001 070f 	and.w	r7, r1, #15
 8010168:	4652      	mov	r2, sl
 801016a:	f8cd 8000 	str.w	r8, [sp]
 801016e:	464b      	mov	r3, r9
 8010170:	4621      	mov	r1, r4
 8010172:	4628      	mov	r0, r5
 8010174:	f7ff fe3e 	bl	800fdf4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8010178:	4683      	mov	fp, r0
 801017a:	b168      	cbz	r0, 8010198 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801017c:	eb0a 0109 	add.w	r1, sl, r9
 8010180:	463a      	mov	r2, r7
 8010182:	4628      	mov	r0, r5
 8010184:	4441      	add	r1, r8
 8010186:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801018a:	4649      	mov	r1, r9
 801018c:	f7ff ff74 	bl	8010078 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8010190:	4658      	mov	r0, fp
 8010192:	b003      	add	sp, #12
 8010194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010198:	eb07 010a 	add.w	r1, r7, sl
 801019c:	4449      	add	r1, r9
 801019e:	4441      	add	r1, r8
 80101a0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80101a4:	e7d2      	b.n	801014c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80101a6:	f04f 0b00 	mov.w	fp, #0
 80101aa:	e7f1      	b.n	8010190 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080101ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80101ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101b0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80101b2:	4604      	mov	r4, r0
 80101b4:	260b      	movs	r6, #11
 80101b6:	f100 091a 	add.w	r9, r0, #26
 80101ba:	886f      	ldrh	r7, [r5, #2]
 80101bc:	087f      	lsrs	r7, r7, #1
 80101be:	3e01      	subs	r6, #1
 80101c0:	d013      	beq.n	80101ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 80101c2:	2100      	movs	r1, #0
 80101c4:	4648      	mov	r0, r9
 80101c6:	f7ff fd1f 	bl	800fc08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80101ca:	462a      	mov	r2, r5
 80101cc:	4680      	mov	r8, r0
 80101ce:	4603      	mov	r3, r0
 80101d0:	4639      	mov	r1, r7
 80101d2:	4620      	mov	r0, r4
 80101d4:	f7ff fce0 	bl	800fb98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80101d8:	b138      	cbz	r0, 80101ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 80101da:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80101de:	4642      	mov	r2, r8
 80101e0:	4620      	mov	r0, r4
 80101e2:	f7ff ffaf 	bl	8010144 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80101e6:	2800      	cmp	r0, #0
 80101e8:	d1e9      	bne.n	80101be <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 80101ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080101f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 80101f0:	4b1e      	ldr	r3, [pc, #120]	; (801026c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80101f2:	b570      	push	{r4, r5, r6, lr}
 80101f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f8:	4604      	mov	r4, r0
 80101fa:	f003 0501 	and.w	r5, r3, #1
 80101fe:	b902      	cbnz	r2, 8010202 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 8010200:	b165      	cbz	r5, 801021c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 8010202:	105b      	asrs	r3, r3, #1
 8010204:	f104 061a 	add.w	r6, r4, #26
 8010208:	18e0      	adds	r0, r4, r3
 801020a:	b10d      	cbz	r5, 8010210 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801020c:	58e3      	ldr	r3, [r4, r3]
 801020e:	589a      	ldr	r2, [r3, r2]
 8010210:	4790      	blx	r2
 8010212:	2100      	movs	r1, #0
 8010214:	4602      	mov	r2, r0
 8010216:	4630      	mov	r0, r6
 8010218:	f7ff fcdc 	bl	800fbd4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801021c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801021e:	b303      	cbz	r3, 8010262 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8010220:	f104 051a 	add.w	r5, r4, #26
 8010224:	2100      	movs	r1, #0
 8010226:	4628      	mov	r0, r5
 8010228:	f7ff fcee 	bl	800fc08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801022c:	b1c8      	cbz	r0, 8010262 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801022e:	4620      	mov	r0, r4
 8010230:	f7ff ffbc 	bl	80101ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8010234:	2101      	movs	r1, #1
 8010236:	4628      	mov	r0, r5
 8010238:	f7ff fce6 	bl	800fc08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801023c:	f640 133f 	movw	r3, #2367	; 0x93f
 8010240:	4606      	mov	r6, r0
 8010242:	4298      	cmp	r0, r3
 8010244:	d10d      	bne.n	8010262 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8010246:	2100      	movs	r1, #0
 8010248:	4628      	mov	r0, r5
 801024a:	f7ff fcdd 	bl	800fc08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801024e:	2101      	movs	r1, #1
 8010250:	4602      	mov	r2, r0
 8010252:	4628      	mov	r0, r5
 8010254:	f7ff fcbe 	bl	800fbd4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8010258:	4632      	mov	r2, r6
 801025a:	2100      	movs	r1, #0
 801025c:	4628      	mov	r0, r5
 801025e:	f7ff fcb9 	bl	800fbd4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8010262:	4620      	mov	r0, r4
 8010264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010268:	f7ff bed6 	b.w	8010018 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801026c:	200010d0 	.word	0x200010d0

08010270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8010270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010272:	4617      	mov	r7, r2
 8010274:	461e      	mov	r6, r3
 8010276:	4605      	mov	r5, r0
 8010278:	f7ff ffba 	bl	80101f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	4604      	mov	r4, r0
 8010280:	4601      	mov	r1, r0
 8010282:	4638      	mov	r0, r7
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	4798      	blx	r3
 8010288:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801028c:	4602      	mov	r2, r0
 801028e:	6030      	str	r0, [r6, #0]
 8010290:	b29b      	uxth	r3, r3
 8010292:	2b7f      	cmp	r3, #127	; 0x7f
 8010294:	d813      	bhi.n	80102be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8010296:	4639      	mov	r1, r7
 8010298:	4628      	mov	r0, r5
 801029a:	f7ff fccf 	bl	800fc3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801029e:	6030      	str	r0, [r6, #0]
 80102a0:	6833      	ldr	r3, [r6, #0]
 80102a2:	b143      	cbz	r3, 80102b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80102a4:	f993 200d 	ldrsb.w	r2, [r3, #13]
 80102a8:	7a9b      	ldrb	r3, [r3, #10]
 80102aa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80102ae:	4313      	orrs	r3, r2
 80102b0:	bf0c      	ite	eq
 80102b2:	2301      	moveq	r3, #1
 80102b4:	2300      	movne	r3, #0
 80102b6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80102ba:	4620      	mov	r0, r4
 80102bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102be:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d0ec      	beq.n	80102a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 80102c6:	f640 1302 	movw	r3, #2306	; 0x902
 80102ca:	429c      	cmp	r4, r3
 80102cc:	d1e8      	bne.n	80102a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 80102ce:	4601      	mov	r1, r0
 80102d0:	4628      	mov	r0, r5
 80102d2:	f7ff fc32 	bl	800fb3a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80102d6:	e7e2      	b.n	801029e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

080102d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80102d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102dc:	4617      	mov	r7, r2
 80102de:	461e      	mov	r6, r3
 80102e0:	4605      	mov	r5, r0
 80102e2:	f7ff ff85 	bl	80101f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	4604      	mov	r4, r0
 80102ea:	4601      	mov	r1, r0
 80102ec:	4638      	mov	r0, r7
 80102ee:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80102f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102f6:	47c0      	blx	r8
 80102f8:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 80102fc:	4602      	mov	r2, r0
 80102fe:	6030      	str	r0, [r6, #0]
 8010300:	b29b      	uxth	r3, r3
 8010302:	2b7f      	cmp	r3, #127	; 0x7f
 8010304:	d814      	bhi.n	8010330 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 8010306:	4639      	mov	r1, r7
 8010308:	4628      	mov	r0, r5
 801030a:	f7ff fc97 	bl	800fc3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801030e:	6030      	str	r0, [r6, #0]
 8010310:	6833      	ldr	r3, [r6, #0]
 8010312:	b143      	cbz	r3, 8010326 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8010314:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8010318:	7a9b      	ldrb	r3, [r3, #10]
 801031a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801031e:	4313      	orrs	r3, r2
 8010320:	bf0c      	ite	eq
 8010322:	2301      	moveq	r3, #1
 8010324:	2300      	movne	r3, #0
 8010326:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801032a:	4620      	mov	r0, r4
 801032c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010330:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8010334:	2b00      	cmp	r3, #0
 8010336:	d0eb      	beq.n	8010310 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8010338:	f640 1302 	movw	r3, #2306	; 0x902
 801033c:	429c      	cmp	r4, r3
 801033e:	d1e7      	bne.n	8010310 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8010340:	4601      	mov	r1, r0
 8010342:	4628      	mov	r0, r5
 8010344:	f7ff fbf9 	bl	800fb3a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8010348:	e7e1      	b.n	801030e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801034a <_ZN8touchgfx8ceil28_4El>:
 801034a:	f110 030f 	adds.w	r3, r0, #15
 801034e:	d401      	bmi.n	8010354 <_ZN8touchgfx8ceil28_4El+0xa>
 8010350:	1118      	asrs	r0, r3, #4
 8010352:	4770      	bx	lr
 8010354:	2210      	movs	r2, #16
 8010356:	f1c0 0001 	rsb	r0, r0, #1
 801035a:	fb93 f3f2 	sdiv	r3, r3, r2
 801035e:	f010 000f 	ands.w	r0, r0, #15
 8010362:	bf18      	it	ne
 8010364:	2001      	movne	r0, #1
 8010366:	1a18      	subs	r0, r3, r0
 8010368:	4770      	bx	lr
	...

0801036c <_ZN8touchgfx11floorDivModEllRlS0_>:
 801036c:	2900      	cmp	r1, #0
 801036e:	b538      	push	{r3, r4, r5, lr}
 8010370:	dc06      	bgt.n	8010380 <_ZN8touchgfx11floorDivModEllRlS0_+0x14>
 8010372:	4b10      	ldr	r3, [pc, #64]	; (80103b4 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8010374:	f240 1111 	movw	r1, #273	; 0x111
 8010378:	4a0f      	ldr	r2, [pc, #60]	; (80103b8 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801037a:	4810      	ldr	r0, [pc, #64]	; (80103bc <_ZN8touchgfx11floorDivModEllRlS0_+0x50>)
 801037c:	f008 fc30 	bl	8018be0 <__assert_func>
 8010380:	2800      	cmp	r0, #0
 8010382:	db06      	blt.n	8010392 <_ZN8touchgfx11floorDivModEllRlS0_+0x26>
 8010384:	fb90 f4f1 	sdiv	r4, r0, r1
 8010388:	fb01 0114 	mls	r1, r1, r4, r0
 801038c:	6014      	str	r4, [r2, #0]
 801038e:	6019      	str	r1, [r3, #0]
 8010390:	bd38      	pop	{r3, r4, r5, pc}
 8010392:	4240      	negs	r0, r0
 8010394:	fb90 f4f1 	sdiv	r4, r0, r1
 8010398:	4265      	negs	r5, r4
 801039a:	fb01 0014 	mls	r0, r1, r4, r0
 801039e:	6015      	str	r5, [r2, #0]
 80103a0:	6018      	str	r0, [r3, #0]
 80103a2:	2800      	cmp	r0, #0
 80103a4:	d0f4      	beq.n	8010390 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 80103a6:	6810      	ldr	r0, [r2, #0]
 80103a8:	3801      	subs	r0, #1
 80103aa:	6010      	str	r0, [r2, #0]
 80103ac:	6818      	ldr	r0, [r3, #0]
 80103ae:	1a09      	subs	r1, r1, r0
 80103b0:	e7ed      	b.n	801038e <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 80103b2:	bf00      	nop
 80103b4:	0801bfb9 	.word	0x0801bfb9
 80103b8:	0801bff8 	.word	0x0801bff8
 80103bc:	0801bfc9 	.word	0x0801bfc9

080103c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80103c0:	b570      	push	{r4, r5, r6, lr}
 80103c2:	694a      	ldr	r2, [r1, #20]
 80103c4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80103c6:	684b      	ldr	r3, [r1, #4]
 80103c8:	1b54      	subs	r4, r2, r5
 80103ca:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80103cc:	f000 8106 	beq.w	80105dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80103d0:	1b9b      	subs	r3, r3, r6
 80103d2:	d003      	beq.n	80103dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80103d4:	4363      	muls	r3, r4
 80103d6:	2210      	movs	r2, #16
 80103d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80103dc:	680c      	ldr	r4, [r1, #0]
 80103de:	698a      	ldr	r2, [r1, #24]
 80103e0:	1b65      	subs	r5, r4, r5
 80103e2:	f000 80fd 	beq.w	80105e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80103e6:	1b92      	subs	r2, r2, r6
 80103e8:	d003      	beq.n	80103f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80103ea:	436a      	muls	r2, r5
 80103ec:	2410      	movs	r4, #16
 80103ee:	fb92 f2f4 	sdiv	r2, r2, r4
 80103f2:	1a9b      	subs	r3, r3, r2
 80103f4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801061c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80103f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80103fc:	460a      	mov	r2, r1
 80103fe:	ee07 3a90 	vmov	s15, r3
 8010402:	f100 040c 	add.w	r4, r0, #12
 8010406:	4603      	mov	r3, r0
 8010408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801040c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010410:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8010414:	eeb1 6a43 	vneg.f32	s12, s6
 8010418:	edd2 7a02 	vldr	s15, [r2, #8]
 801041c:	3214      	adds	r2, #20
 801041e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010422:	ece3 6a01 	vstmia	r3!, {s13}
 8010426:	429c      	cmp	r4, r3
 8010428:	ed52 7a02 	vldr	s15, [r2, #-8]
 801042c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010430:	edc3 7a02 	vstr	s15, [r3, #8]
 8010434:	ed52 7a01 	vldr	s15, [r2, #-4]
 8010438:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801043c:	edc3 7a05 	vstr	s15, [r3, #20]
 8010440:	d1ea      	bne.n	8010418 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8010442:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010444:	698b      	ldr	r3, [r1, #24]
 8010446:	edd0 4a02 	vldr	s9, [r0, #8]
 801044a:	1a9b      	subs	r3, r3, r2
 801044c:	edd0 3a00 	vldr	s7, [r0]
 8010450:	edd0 6a01 	vldr	s13, [r0, #4]
 8010454:	ee07 3a90 	vmov	s15, r3
 8010458:	684b      	ldr	r3, [r1, #4]
 801045a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801045e:	ed90 5a05 	vldr	s10, [r0, #20]
 8010462:	1a9b      	subs	r3, r3, r2
 8010464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010468:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801046c:	ed90 2a03 	vldr	s4, [r0, #12]
 8010470:	ee07 3a10 	vmov	s14, r3
 8010474:	edd0 5a04 	vldr	s11, [r0, #16]
 8010478:	ee67 7a84 	vmul.f32	s15, s15, s8
 801047c:	ed90 1a07 	vldr	s2, [r0, #28]
 8010480:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010484:	edd0 2a06 	vldr	s5, [r0, #24]
 8010488:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801048c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8010490:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010494:	ee32 5a45 	vsub.f32	s10, s4, s10
 8010498:	eee6 7a87 	vfma.f32	s15, s13, s14
 801049c:	ee67 7a83 	vmul.f32	s15, s15, s6
 80104a0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80104a4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80104a6:	694a      	ldr	r2, [r1, #20]
 80104a8:	1b13      	subs	r3, r2, r4
 80104aa:	ee07 3a10 	vmov	s14, r3
 80104ae:	680b      	ldr	r3, [r1, #0]
 80104b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80104b4:	1b1b      	subs	r3, r3, r4
 80104b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80104ba:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80104be:	ee07 3a10 	vmov	s14, r3
 80104c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80104c6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80104ca:	eee6 4a87 	vfma.f32	s9, s13, s14
 80104ce:	ee64 4a86 	vmul.f32	s9, s9, s12
 80104d2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80104d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80104d8:	698b      	ldr	r3, [r1, #24]
 80104da:	1a9b      	subs	r3, r3, r2
 80104dc:	ee06 3a90 	vmov	s13, r3
 80104e0:	684b      	ldr	r3, [r1, #4]
 80104e2:	1a9b      	subs	r3, r3, r2
 80104e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80104e8:	ee07 3a10 	vmov	s14, r3
 80104ec:	ee66 6a84 	vmul.f32	s13, s13, s8
 80104f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80104f4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80104f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80104fc:	eee5 6a87 	vfma.f32	s13, s11, s14
 8010500:	ee66 6a83 	vmul.f32	s13, s13, s6
 8010504:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8010508:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801050a:	694a      	ldr	r2, [r1, #20]
 801050c:	1b13      	subs	r3, r2, r4
 801050e:	ee07 3a10 	vmov	s14, r3
 8010512:	680b      	ldr	r3, [r1, #0]
 8010514:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010518:	1b1b      	subs	r3, r3, r4
 801051a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801051e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8010522:	ee07 3a10 	vmov	s14, r3
 8010526:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801052a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801052e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010532:	edd0 5a08 	vldr	s11, [r0, #32]
 8010536:	ee31 1a65 	vsub.f32	s2, s2, s11
 801053a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801053e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8010542:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8010546:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010548:	698b      	ldr	r3, [r1, #24]
 801054a:	1a9b      	subs	r3, r3, r2
 801054c:	ee07 3a10 	vmov	s14, r3
 8010550:	684b      	ldr	r3, [r1, #4]
 8010552:	1a9b      	subs	r3, r3, r2
 8010554:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010558:	ee01 3a90 	vmov	s3, r3
 801055c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010560:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8010564:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8010568:	ee61 1a84 	vmul.f32	s3, s3, s8
 801056c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8010570:	ee27 7a03 	vmul.f32	s14, s14, s6
 8010574:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8010578:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801057a:	694a      	ldr	r2, [r1, #20]
 801057c:	1b13      	subs	r3, r2, r4
 801057e:	ee03 3a10 	vmov	s6, r3
 8010582:	680b      	ldr	r3, [r1, #0]
 8010584:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8010588:	1b1b      	subs	r3, r3, r4
 801058a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801058e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8010592:	ee03 3a10 	vmov	s6, r3
 8010596:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801059a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801059e:	eee1 5a04 	vfma.f32	s11, s2, s8
 80105a2:	ee25 6a86 	vmul.f32	s12, s11, s12
 80105a6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80105aa:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80105ae:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80105b2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80105b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ba:	dd13      	ble.n	80105e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80105bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80105c0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80105c4:	63c3      	str	r3, [r0, #60]	; 0x3c
 80105c6:	eee3 7a87 	vfma.f32	s15, s7, s14
 80105ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80105ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105d2:	dd15      	ble.n	8010600 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80105d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80105d8:	6403      	str	r3, [r0, #64]	; 0x40
 80105da:	bd70      	pop	{r4, r5, r6, pc}
 80105dc:	4623      	mov	r3, r4
 80105de:	e6fd      	b.n	80103dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80105e0:	462a      	mov	r2, r5
 80105e2:	e706      	b.n	80103f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80105e4:	d502      	bpl.n	80105ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80105e6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80105ea:	e7e9      	b.n	80105c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80105ec:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80105f0:	eea3 2a85 	vfma.f32	s4, s7, s10
 80105f4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80105f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105fc:	dade      	bge.n	80105bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80105fe:	e7f2      	b.n	80105e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8010600:	d502      	bpl.n	8010608 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8010602:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010606:	e7e7      	b.n	80105d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8010608:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801060c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8010610:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8010614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010618:	dadc      	bge.n	80105d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801061a:	e7f2      	b.n	8010602 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801061c:	3d800000 	.word	0x3d800000

08010620 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8010620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010624:	f04f 0814 	mov.w	r8, #20
 8010628:	4604      	mov	r4, r0
 801062a:	4617      	mov	r7, r2
 801062c:	460d      	mov	r5, r1
 801062e:	fb08 f903 	mul.w	r9, r8, r3
 8010632:	461e      	mov	r6, r3
 8010634:	eb02 0a09 	add.w	sl, r2, r9
 8010638:	f8da 0004 	ldr.w	r0, [sl, #4]
 801063c:	f7ff fe85 	bl	801034a <_ZN8touchgfx8ceil28_4El>
 8010640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010642:	6160      	str	r0, [r4, #20]
 8010644:	fb08 f803 	mul.w	r8, r8, r3
 8010648:	9001      	str	r0, [sp, #4]
 801064a:	eb07 0b08 	add.w	fp, r7, r8
 801064e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8010652:	f7ff fe7a 	bl	801034a <_ZN8touchgfx8ceil28_4El>
 8010656:	9a01      	ldr	r2, [sp, #4]
 8010658:	1a80      	subs	r0, r0, r2
 801065a:	61a0      	str	r0, [r4, #24]
 801065c:	2800      	cmp	r0, #0
 801065e:	f000 8088 	beq.w	8010772 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8010662:	f857 3009 	ldr.w	r3, [r7, r9]
 8010666:	f857 c008 	ldr.w	ip, [r7, r8]
 801066a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801066e:	ebac 0c03 	sub.w	ip, ip, r3
 8010672:	f8da 1004 	ldr.w	r1, [sl, #4]
 8010676:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801067a:	1a40      	subs	r0, r0, r1
 801067c:	fb0b f202 	mul.w	r2, fp, r2
 8010680:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8010684:	fb0c 2211 	mls	r2, ip, r1, r2
 8010688:	4641      	mov	r1, r8
 801068a:	fb00 2003 	mla	r0, r0, r3, r2
 801068e:	f104 0310 	add.w	r3, r4, #16
 8010692:	4622      	mov	r2, r4
 8010694:	3801      	subs	r0, #1
 8010696:	4440      	add	r0, r8
 8010698:	f7ff fe68 	bl	801036c <_ZN8touchgfx11floorDivModEllRlS0_>
 801069c:	f104 0308 	add.w	r3, r4, #8
 80106a0:	1d22      	adds	r2, r4, #4
 80106a2:	4641      	mov	r1, r8
 80106a4:	4658      	mov	r0, fp
 80106a6:	f7ff fe61 	bl	801036c <_ZN8touchgfx11floorDivModEllRlS0_>
 80106aa:	f8c4 800c 	str.w	r8, [r4, #12]
 80106ae:	6962      	ldr	r2, [r4, #20]
 80106b0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80106b4:	eddf 6a31 	vldr	s13, [pc, #196]	; 801077c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80106b8:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80106bc:	6822      	ldr	r2, [r4, #0]
 80106be:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 80106c2:	ee07 3a10 	vmov	s14, r3
 80106c6:	f857 3009 	ldr.w	r3, [r7, r9]
 80106ca:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80106ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80106d2:	ee07 3a90 	vmov	s15, r3
 80106d6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 80106da:	ee27 7a26 	vmul.f32	s14, s14, s13
 80106de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80106e6:	edd3 6a00 	vldr	s13, [r3]
 80106ea:	eee6 6a07 	vfma.f32	s13, s12, s14
 80106ee:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80106f2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80106f6:	edc4 6a07 	vstr	s13, [r4, #28]
 80106fa:	edd4 6a01 	vldr	s13, [r4, #4]
 80106fe:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8010702:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010706:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801070a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801070e:	ed84 6a08 	vstr	s12, [r4, #32]
 8010712:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8010714:	6262      	str	r2, [r4, #36]	; 0x24
 8010716:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801071a:	ed93 6a03 	vldr	s12, [r3, #12]
 801071e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010722:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8010726:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801072a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801072e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8010732:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8010736:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801073a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801073e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8010740:	6322      	str	r2, [r4, #48]	; 0x30
 8010742:	ed93 6a06 	vldr	s12, [r3, #24]
 8010746:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801074a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801074e:	eeb0 7a46 	vmov.f32	s14, s12
 8010752:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8010756:	eea6 7a27 	vfma.f32	s14, s12, s15
 801075a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801075e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8010762:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8010766:	eee6 7a87 	vfma.f32	s15, s13, s14
 801076a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801076e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010770:	63e3      	str	r3, [r4, #60]	; 0x3c
 8010772:	4620      	mov	r0, r4
 8010774:	b003      	add	sp, #12
 8010776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801077a:	bf00      	nop
 801077c:	3d800000 	.word	0x3d800000

08010780 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8010780:	4b01      	ldr	r3, [pc, #4]	; (8010788 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8010782:	6018      	str	r0, [r3, #0]
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop
 8010788:	20001180 	.word	0x20001180

0801078c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801078c:	4b07      	ldr	r3, [pc, #28]	; (80107ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801078e:	881a      	ldrh	r2, [r3, #0]
 8010790:	4282      	cmp	r2, r0
 8010792:	d809      	bhi.n	80107a8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8010794:	4b06      	ldr	r3, [pc, #24]	; (80107b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 8010796:	881b      	ldrh	r3, [r3, #0]
 8010798:	4413      	add	r3, r2
 801079a:	4298      	cmp	r0, r3
 801079c:	da04      	bge.n	80107a8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801079e:	4b05      	ldr	r3, [pc, #20]	; (80107b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80107a6:	4770      	bx	lr
 80107a8:	2000      	movs	r0, #0
 80107aa:	4770      	bx	lr
 80107ac:	200011a0 	.word	0x200011a0
 80107b0:	200011a4 	.word	0x200011a4
 80107b4:	20001184 	.word	0x20001184

080107b8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80107b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107bc:	4d26      	ldr	r5, [pc, #152]	; (8010858 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80107be:	682b      	ldr	r3, [r5, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d046      	beq.n	8010852 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 80107c4:	4a25      	ldr	r2, [pc, #148]	; (801085c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80107c6:	4f26      	ldr	r7, [pc, #152]	; (8010860 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80107c8:	8810      	ldrh	r0, [r2, #0]
 80107ca:	883c      	ldrh	r4, [r7, #0]
 80107cc:	4e25      	ldr	r6, [pc, #148]	; (8010864 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80107ce:	4420      	add	r0, r4
 80107d0:	1c42      	adds	r2, r0, #1
 80107d2:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80107d6:	f022 0201 	bic.w	r2, r2, #1
 80107da:	0412      	lsls	r2, r2, #16
 80107dc:	0c12      	lsrs	r2, r2, #16
 80107de:	0051      	lsls	r1, r2, #1
 80107e0:	220e      	movs	r2, #14
 80107e2:	eb08 0e01 	add.w	lr, r8, r1
 80107e6:	fb02 fc04 	mul.w	ip, r2, r4
 80107ea:	eb03 0208 	add.w	r2, r3, r8
 80107ee:	4c1e      	ldr	r4, [pc, #120]	; (8010868 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80107f0:	6022      	str	r2, [r4, #0]
 80107f2:	eb03 020e 	add.w	r2, r3, lr
 80107f6:	44e6      	add	lr, ip
 80107f8:	6032      	str	r2, [r6, #0]
 80107fa:	4473      	add	r3, lr
 80107fc:	4a1b      	ldr	r2, [pc, #108]	; (801086c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80107fe:	6013      	str	r3, [r2, #0]
 8010800:	2300      	movs	r3, #0
 8010802:	4a1b      	ldr	r2, [pc, #108]	; (8010870 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8010804:	8013      	strh	r3, [r2, #0]
 8010806:	4a1b      	ldr	r2, [pc, #108]	; (8010874 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8010808:	6812      	ldr	r2, [r2, #0]
 801080a:	eba2 0208 	sub.w	r2, r2, r8
 801080e:	1a52      	subs	r2, r2, r1
 8010810:	4919      	ldr	r1, [pc, #100]	; (8010878 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8010812:	eba2 020c 	sub.w	r2, r2, ip
 8010816:	469c      	mov	ip, r3
 8010818:	600a      	str	r2, [r1, #0]
 801081a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801081e:	4a17      	ldr	r2, [pc, #92]	; (801087c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8010820:	8013      	strh	r3, [r2, #0]
 8010822:	4283      	cmp	r3, r0
 8010824:	d10d      	bne.n	8010842 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 8010826:	883d      	ldrh	r5, [r7, #0]
 8010828:	2300      	movs	r3, #0
 801082a:	6830      	ldr	r0, [r6, #0]
 801082c:	240e      	movs	r4, #14
 801082e:	429d      	cmp	r5, r3
 8010830:	d90f      	bls.n	8010852 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8010832:	fb04 0203 	mla	r2, r4, r3, r0
 8010836:	3301      	adds	r3, #1
 8010838:	7b11      	ldrb	r1, [r2, #12]
 801083a:	f36f 1145 	bfc	r1, #5, #1
 801083e:	7311      	strb	r1, [r2, #12]
 8010840:	e7f5      	b.n	801082e <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 8010842:	682a      	ldr	r2, [r5, #0]
 8010844:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8010848:	6822      	ldr	r2, [r4, #0]
 801084a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801084e:	3301      	adds	r3, #1
 8010850:	e7e7      	b.n	8010822 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 8010852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010856:	bf00      	nop
 8010858:	20001184 	.word	0x20001184
 801085c:	200011a0 	.word	0x200011a0
 8010860:	200011a4 	.word	0x200011a4
 8010864:	20001188 	.word	0x20001188
 8010868:	20001198 	.word	0x20001198
 801086c:	20001190 	.word	0x20001190
 8010870:	200011a2 	.word	0x200011a2
 8010874:	2000118c 	.word	0x2000118c
 8010878:	2000119c 	.word	0x2000119c
 801087c:	20001194 	.word	0x20001194

08010880 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8010880:	4b10      	ldr	r3, [pc, #64]	; (80108c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8010882:	b510      	push	{r4, lr}
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	b9db      	cbnz	r3, 80108c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8010888:	b1d1      	cbz	r1, 80108c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801088a:	4b0f      	ldr	r3, [pc, #60]	; (80108c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801088c:	240e      	movs	r4, #14
 801088e:	801a      	strh	r2, [r3, #0]
 8010890:	b292      	uxth	r2, r2
 8010892:	4b0e      	ldr	r3, [pc, #56]	; (80108cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8010894:	881b      	ldrh	r3, [r3, #0]
 8010896:	4413      	add	r3, r2
 8010898:	4362      	muls	r2, r4
 801089a:	2406      	movs	r4, #6
 801089c:	fb04 2203 	mla	r2, r4, r3, r2
 80108a0:	428a      	cmp	r2, r1
 80108a2:	d305      	bcc.n	80108b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 80108a4:	4b0a      	ldr	r3, [pc, #40]	; (80108d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 80108a6:	2137      	movs	r1, #55	; 0x37
 80108a8:	4a0a      	ldr	r2, [pc, #40]	; (80108d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 80108aa:	480b      	ldr	r0, [pc, #44]	; (80108d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 80108ac:	f008 f998 	bl	8018be0 <__assert_func>
 80108b0:	4b0a      	ldr	r3, [pc, #40]	; (80108dc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 80108b2:	6019      	str	r1, [r3, #0]
 80108b4:	4b0a      	ldr	r3, [pc, #40]	; (80108e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 80108b6:	6018      	str	r0, [r3, #0]
 80108b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108bc:	f7ff bf7c 	b.w	80107b8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80108c0:	bd10      	pop	{r4, pc}
 80108c2:	bf00      	nop
 80108c4:	20001190 	.word	0x20001190
 80108c8:	200011a4 	.word	0x200011a4
 80108cc:	200011a0 	.word	0x200011a0
 80108d0:	0801c096 	.word	0x0801c096
 80108d4:	0801c12b 	.word	0x0801c12b
 80108d8:	0801c071 	.word	0x0801c071
 80108dc:	2000118c 	.word	0x2000118c
 80108e0:	20001184 	.word	0x20001184

080108e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80108e4:	b470      	push	{r4, r5, r6}
 80108e6:	4c07      	ldr	r4, [pc, #28]	; (8010904 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80108e8:	4605      	mov	r5, r0
 80108ea:	4610      	mov	r0, r2
 80108ec:	9a03      	ldr	r2, [sp, #12]
 80108ee:	6826      	ldr	r6, [r4, #0]
 80108f0:	b936      	cbnz	r6, 8010900 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80108f2:	6025      	str	r5, [r4, #0]
 80108f4:	4c04      	ldr	r4, [pc, #16]	; (8010908 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80108f6:	8021      	strh	r1, [r4, #0]
 80108f8:	4619      	mov	r1, r3
 80108fa:	bc70      	pop	{r4, r5, r6}
 80108fc:	f7ff bfc0 	b.w	8010880 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8010900:	bc70      	pop	{r4, r5, r6}
 8010902:	4770      	bx	lr
 8010904:	200011a8 	.word	0x200011a8
 8010908:	200011a0 	.word	0x200011a0

0801090c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801090c:	b508      	push	{r3, lr}
 801090e:	4b14      	ldr	r3, [pc, #80]	; (8010960 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8010910:	6819      	ldr	r1, [r3, #0]
 8010912:	b931      	cbnz	r1, 8010922 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8010914:	4b13      	ldr	r3, [pc, #76]	; (8010964 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8010916:	f240 21e6 	movw	r1, #742	; 0x2e6
 801091a:	4a13      	ldr	r2, [pc, #76]	; (8010968 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801091c:	4813      	ldr	r0, [pc, #76]	; (801096c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801091e:	f008 f95f 	bl	8018be0 <__assert_func>
 8010922:	4a13      	ldr	r2, [pc, #76]	; (8010970 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8010924:	8803      	ldrh	r3, [r0, #0]
 8010926:	8812      	ldrh	r2, [r2, #0]
 8010928:	4293      	cmp	r3, r2
 801092a:	d204      	bcs.n	8010936 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801092c:	2214      	movs	r2, #20
 801092e:	fb02 1303 	mla	r3, r2, r3, r1
 8010932:	8918      	ldrh	r0, [r3, #8]
 8010934:	bd08      	pop	{r3, pc}
 8010936:	490f      	ldr	r1, [pc, #60]	; (8010974 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8010938:	8809      	ldrh	r1, [r1, #0]
 801093a:	4411      	add	r1, r2
 801093c:	428b      	cmp	r3, r1
 801093e:	da06      	bge.n	801094e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8010940:	1a9b      	subs	r3, r3, r2
 8010942:	4a0d      	ldr	r2, [pc, #52]	; (8010978 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8010944:	210e      	movs	r1, #14
 8010946:	6812      	ldr	r2, [r2, #0]
 8010948:	fb01 2303 	mla	r3, r1, r3, r2
 801094c:	e7f1      	b.n	8010932 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801094e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010952:	4293      	cmp	r3, r2
 8010954:	bf0a      	itet	eq
 8010956:	4b09      	ldreq	r3, [pc, #36]	; (801097c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8010958:	2000      	movne	r0, #0
 801095a:	8818      	ldrheq	r0, [r3, #0]
 801095c:	e7ea      	b.n	8010934 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801095e:	bf00      	nop
 8010960:	200011a8 	.word	0x200011a8
 8010964:	0801c0ef 	.word	0x0801c0ef
 8010968:	0801c1d8 	.word	0x0801c1d8
 801096c:	0801c071 	.word	0x0801c071
 8010970:	200011a0 	.word	0x200011a0
 8010974:	200011a4 	.word	0x200011a4
 8010978:	20001188 	.word	0x20001188
 801097c:	200010f4 	.word	0x200010f4

08010980 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8010980:	b508      	push	{r3, lr}
 8010982:	4b14      	ldr	r3, [pc, #80]	; (80109d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8010984:	6819      	ldr	r1, [r3, #0]
 8010986:	b931      	cbnz	r1, 8010996 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8010988:	4b13      	ldr	r3, [pc, #76]	; (80109d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801098a:	f240 21fa 	movw	r1, #762	; 0x2fa
 801098e:	4a13      	ldr	r2, [pc, #76]	; (80109dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8010990:	4813      	ldr	r0, [pc, #76]	; (80109e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8010992:	f008 f925 	bl	8018be0 <__assert_func>
 8010996:	4a13      	ldr	r2, [pc, #76]	; (80109e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8010998:	8803      	ldrh	r3, [r0, #0]
 801099a:	8812      	ldrh	r2, [r2, #0]
 801099c:	4293      	cmp	r3, r2
 801099e:	d204      	bcs.n	80109aa <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 80109a0:	2214      	movs	r2, #20
 80109a2:	fb02 1303 	mla	r3, r2, r3, r1
 80109a6:	8958      	ldrh	r0, [r3, #10]
 80109a8:	bd08      	pop	{r3, pc}
 80109aa:	490f      	ldr	r1, [pc, #60]	; (80109e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80109ac:	8809      	ldrh	r1, [r1, #0]
 80109ae:	4411      	add	r1, r2
 80109b0:	428b      	cmp	r3, r1
 80109b2:	da06      	bge.n	80109c2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80109b4:	1a9b      	subs	r3, r3, r2
 80109b6:	4a0d      	ldr	r2, [pc, #52]	; (80109ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80109b8:	210e      	movs	r1, #14
 80109ba:	6812      	ldr	r2, [r2, #0]
 80109bc:	fb01 2303 	mla	r3, r1, r3, r2
 80109c0:	e7f1      	b.n	80109a6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80109c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80109c6:	4293      	cmp	r3, r2
 80109c8:	bf0a      	itet	eq
 80109ca:	4b09      	ldreq	r3, [pc, #36]	; (80109f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80109cc:	2000      	movne	r0, #0
 80109ce:	8818      	ldrheq	r0, [r3, #0]
 80109d0:	e7ea      	b.n	80109a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80109d2:	bf00      	nop
 80109d4:	200011a8 	.word	0x200011a8
 80109d8:	0801c0ef 	.word	0x0801c0ef
 80109dc:	0801c204 	.word	0x0801c204
 80109e0:	0801c071 	.word	0x0801c071
 80109e4:	200011a0 	.word	0x200011a0
 80109e8:	200011a4 	.word	0x200011a4
 80109ec:	20001188 	.word	0x20001188
 80109f0:	200010f6 	.word	0x200010f6

080109f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80109f4:	4b23      	ldr	r3, [pc, #140]	; (8010a84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80109f6:	b510      	push	{r4, lr}
 80109f8:	681c      	ldr	r4, [r3, #0]
 80109fa:	b934      	cbnz	r4, 8010a0a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80109fc:	4b22      	ldr	r3, [pc, #136]	; (8010a88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80109fe:	f240 310e 	movw	r1, #782	; 0x30e
 8010a02:	4a22      	ldr	r2, [pc, #136]	; (8010a8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8010a04:	4822      	ldr	r0, [pc, #136]	; (8010a90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8010a06:	f008 f8eb 	bl	8018be0 <__assert_func>
 8010a0a:	4a22      	ldr	r2, [pc, #136]	; (8010a94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8010a0c:	880b      	ldrh	r3, [r1, #0]
 8010a0e:	8812      	ldrh	r2, [r2, #0]
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d211      	bcs.n	8010a38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8010a14:	2214      	movs	r2, #20
 8010a16:	fb02 4303 	mla	r3, r2, r3, r4
 8010a1a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8010a1e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8010a22:	8a1a      	ldrh	r2, [r3, #16]
 8010a24:	8a5b      	ldrh	r3, [r3, #18]
 8010a26:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010a2a:	8004      	strh	r4, [r0, #0]
 8010a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a30:	8041      	strh	r1, [r0, #2]
 8010a32:	8082      	strh	r2, [r0, #4]
 8010a34:	80c3      	strh	r3, [r0, #6]
 8010a36:	e00e      	b.n	8010a56 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8010a38:	4917      	ldr	r1, [pc, #92]	; (8010a98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8010a3a:	8809      	ldrh	r1, [r1, #0]
 8010a3c:	4411      	add	r1, r2
 8010a3e:	428b      	cmp	r3, r1
 8010a40:	da0a      	bge.n	8010a58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8010a42:	1a9b      	subs	r3, r3, r2
 8010a44:	4a15      	ldr	r2, [pc, #84]	; (8010a9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8010a46:	210e      	movs	r1, #14
 8010a48:	6812      	ldr	r2, [r2, #0]
 8010a4a:	fb01 2303 	mla	r3, r1, r3, r2
 8010a4e:	681a      	ldr	r2, [r3, #0]
 8010a50:	6002      	str	r2, [r0, #0]
 8010a52:	685a      	ldr	r2, [r3, #4]
 8010a54:	6042      	str	r2, [r0, #4]
 8010a56:	bd10      	pop	{r4, pc}
 8010a58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d10b      	bne.n	8010a78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8010a60:	4b0f      	ldr	r3, [pc, #60]	; (8010aa0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8010a62:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010a66:	4b0f      	ldr	r3, [pc, #60]	; (8010aa4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8010a68:	8081      	strh	r1, [r0, #4]
 8010a6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010a6e:	2300      	movs	r3, #0
 8010a70:	80c2      	strh	r2, [r0, #6]
 8010a72:	8003      	strh	r3, [r0, #0]
 8010a74:	8043      	strh	r3, [r0, #2]
 8010a76:	e7ee      	b.n	8010a56 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8010a78:	2300      	movs	r3, #0
 8010a7a:	8003      	strh	r3, [r0, #0]
 8010a7c:	8043      	strh	r3, [r0, #2]
 8010a7e:	8083      	strh	r3, [r0, #4]
 8010a80:	e7d8      	b.n	8010a34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8010a82:	bf00      	nop
 8010a84:	200011a8 	.word	0x200011a8
 8010a88:	0801c0ef 	.word	0x0801c0ef
 8010a8c:	0801c171 	.word	0x0801c171
 8010a90:	0801c071 	.word	0x0801c071
 8010a94:	200011a0 	.word	0x200011a0
 8010a98:	200011a4 	.word	0x200011a4
 8010a9c:	20001188 	.word	0x20001188
 8010aa0:	200010f4 	.word	0x200010f4
 8010aa4:	200010f6 	.word	0x200010f6

08010aa8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8010aa8:	4b18      	ldr	r3, [pc, #96]	; (8010b0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	b34b      	cbz	r3, 8010b02 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8010aae:	4a18      	ldr	r2, [pc, #96]	; (8010b10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8010ab0:	8800      	ldrh	r0, [r0, #0]
 8010ab2:	8812      	ldrh	r2, [r2, #0]
 8010ab4:	4290      	cmp	r0, r2
 8010ab6:	d211      	bcs.n	8010adc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8010ab8:	2214      	movs	r2, #20
 8010aba:	fb02 3300 	mla	r3, r2, r0, r3
 8010abe:	8a1a      	ldrh	r2, [r3, #16]
 8010ac0:	8919      	ldrh	r1, [r3, #8]
 8010ac2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010ac6:	428a      	cmp	r2, r1
 8010ac8:	db1d      	blt.n	8010b06 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8010aca:	8a58      	ldrh	r0, [r3, #18]
 8010acc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8010ad0:	895b      	ldrh	r3, [r3, #10]
 8010ad2:	4298      	cmp	r0, r3
 8010ad4:	bfac      	ite	ge
 8010ad6:	2000      	movge	r0, #0
 8010ad8:	2001      	movlt	r0, #1
 8010ada:	4770      	bx	lr
 8010adc:	4b0d      	ldr	r3, [pc, #52]	; (8010b14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8010ade:	881b      	ldrh	r3, [r3, #0]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	4298      	cmp	r0, r3
 8010ae4:	da0d      	bge.n	8010b02 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8010ae6:	4b0c      	ldr	r3, [pc, #48]	; (8010b18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8010ae8:	1a80      	subs	r0, r0, r2
 8010aea:	220e      	movs	r2, #14
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	fb02 3300 	mla	r3, r2, r0, r3
 8010af2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8010af6:	891a      	ldrh	r2, [r3, #8]
 8010af8:	4291      	cmp	r1, r2
 8010afa:	db04      	blt.n	8010b06 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8010afc:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8010b00:	e7e6      	b.n	8010ad0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8010b02:	2000      	movs	r0, #0
 8010b04:	4770      	bx	lr
 8010b06:	2001      	movs	r0, #1
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop
 8010b0c:	200011a8 	.word	0x200011a8
 8010b10:	200011a0 	.word	0x200011a0
 8010b14:	200011a4 	.word	0x200011a4
 8010b18:	20001188 	.word	0x20001188

08010b1c <_ZNK8touchgfx6Bitmap7getDataEv>:
 8010b1c:	b508      	push	{r3, lr}
 8010b1e:	4b12      	ldr	r3, [pc, #72]	; (8010b68 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8010b20:	6819      	ldr	r1, [r3, #0]
 8010b22:	b931      	cbnz	r1, 8010b32 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8010b24:	4b11      	ldr	r3, [pc, #68]	; (8010b6c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8010b26:	f240 3132 	movw	r1, #818	; 0x332
 8010b2a:	4a11      	ldr	r2, [pc, #68]	; (8010b70 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8010b2c:	4811      	ldr	r0, [pc, #68]	; (8010b74 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8010b2e:	f008 f857 	bl	8018be0 <__assert_func>
 8010b32:	8803      	ldrh	r3, [r0, #0]
 8010b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d012      	beq.n	8010b62 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8010b3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d103      	bne.n	8010b4c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8010b44:	4b0c      	ldr	r3, [pc, #48]	; (8010b78 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8010b4a:	bd08      	pop	{r3, pc}
 8010b4c:	4a0b      	ldr	r2, [pc, #44]	; (8010b7c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8010b4e:	6812      	ldr	r2, [r2, #0]
 8010b50:	b11a      	cbz	r2, 8010b5a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8010b52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010b56:	2800      	cmp	r0, #0
 8010b58:	d1f7      	bne.n	8010b4a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8010b5a:	2214      	movs	r2, #20
 8010b5c:	4353      	muls	r3, r2
 8010b5e:	58c8      	ldr	r0, [r1, r3]
 8010b60:	e7f3      	b.n	8010b4a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8010b62:	2000      	movs	r0, #0
 8010b64:	e7f1      	b.n	8010b4a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8010b66:	bf00      	nop
 8010b68:	200011a8 	.word	0x200011a8
 8010b6c:	0801c0ef 	.word	0x0801c0ef
 8010b70:	0801c1a7 	.word	0x0801c1a7
 8010b74:	0801c071 	.word	0x0801c071
 8010b78:	20001100 	.word	0x20001100
 8010b7c:	20001184 	.word	0x20001184

08010b80 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8010b80:	8802      	ldrh	r2, [r0, #0]
 8010b82:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d840      	bhi.n	8010c0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8010b8a:	4b21      	ldr	r3, [pc, #132]	; (8010c10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8010b8c:	881b      	ldrh	r3, [r3, #0]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d220      	bcs.n	8010bd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8010b92:	4b20      	ldr	r3, [pc, #128]	; (8010c14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8010b94:	6819      	ldr	r1, [r3, #0]
 8010b96:	2314      	movs	r3, #20
 8010b98:	fb03 1302 	mla	r3, r3, r2, r1
 8010b9c:	6858      	ldr	r0, [r3, #4]
 8010b9e:	2800      	cmp	r0, #0
 8010ba0:	d035      	beq.n	8010c0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8010ba2:	491d      	ldr	r1, [pc, #116]	; (8010c18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8010ba4:	6809      	ldr	r1, [r1, #0]
 8010ba6:	2900      	cmp	r1, #0
 8010ba8:	d031      	beq.n	8010c0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8010baa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010bae:	b371      	cbz	r1, 8010c0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8010bb0:	895a      	ldrh	r2, [r3, #10]
 8010bb2:	8918      	ldrh	r0, [r3, #8]
 8010bb4:	4350      	muls	r0, r2
 8010bb6:	7c5a      	ldrb	r2, [r3, #17]
 8010bb8:	7cdb      	ldrb	r3, [r3, #19]
 8010bba:	0952      	lsrs	r2, r2, #5
 8010bbc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010bc0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8010bc4:	2b0b      	cmp	r3, #11
 8010bc6:	bf18      	it	ne
 8010bc8:	0040      	lslne	r0, r0, #1
 8010bca:	3003      	adds	r0, #3
 8010bcc:	f020 0003 	bic.w	r0, r0, #3
 8010bd0:	4408      	add	r0, r1
 8010bd2:	4770      	bx	lr
 8010bd4:	4911      	ldr	r1, [pc, #68]	; (8010c1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8010bd6:	8809      	ldrh	r1, [r1, #0]
 8010bd8:	4419      	add	r1, r3
 8010bda:	428a      	cmp	r2, r1
 8010bdc:	da16      	bge.n	8010c0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8010bde:	4910      	ldr	r1, [pc, #64]	; (8010c20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8010be0:	1ad3      	subs	r3, r2, r3
 8010be2:	200e      	movs	r0, #14
 8010be4:	6809      	ldr	r1, [r1, #0]
 8010be6:	fb00 1303 	mla	r3, r0, r3, r1
 8010bea:	7b19      	ldrb	r1, [r3, #12]
 8010bec:	f001 011f 	and.w	r1, r1, #31
 8010bf0:	290b      	cmp	r1, #11
 8010bf2:	d10b      	bne.n	8010c0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8010bf4:	8919      	ldrh	r1, [r3, #8]
 8010bf6:	8958      	ldrh	r0, [r3, #10]
 8010bf8:	4b07      	ldr	r3, [pc, #28]	; (8010c18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8010bfa:	4348      	muls	r0, r1
 8010bfc:	6819      	ldr	r1, [r3, #0]
 8010bfe:	3003      	adds	r0, #3
 8010c00:	f020 0303 	bic.w	r3, r0, #3
 8010c04:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8010c08:	4418      	add	r0, r3
 8010c0a:	4770      	bx	lr
 8010c0c:	2000      	movs	r0, #0
 8010c0e:	4770      	bx	lr
 8010c10:	200011a0 	.word	0x200011a0
 8010c14:	200011a8 	.word	0x200011a8
 8010c18:	20001184 	.word	0x20001184
 8010c1c:	200011a4 	.word	0x200011a4
 8010c20:	20001188 	.word	0x20001188

08010c24 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8010c24:	4b19      	ldr	r3, [pc, #100]	; (8010c8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8010c26:	6819      	ldr	r1, [r3, #0]
 8010c28:	8803      	ldrh	r3, [r0, #0]
 8010c2a:	b1e9      	cbz	r1, 8010c68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8010c2c:	4a18      	ldr	r2, [pc, #96]	; (8010c90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8010c2e:	8812      	ldrh	r2, [r2, #0]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d90a      	bls.n	8010c4a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8010c34:	2214      	movs	r2, #20
 8010c36:	fb02 1303 	mla	r3, r2, r3, r1
 8010c3a:	7c58      	ldrb	r0, [r3, #17]
 8010c3c:	0942      	lsrs	r2, r0, #5
 8010c3e:	7cd8      	ldrb	r0, [r3, #19]
 8010c40:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8010c44:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8010c48:	4770      	bx	lr
 8010c4a:	4912      	ldr	r1, [pc, #72]	; (8010c94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8010c4c:	8809      	ldrh	r1, [r1, #0]
 8010c4e:	4411      	add	r1, r2
 8010c50:	428b      	cmp	r3, r1
 8010c52:	da09      	bge.n	8010c68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8010c54:	1a9b      	subs	r3, r3, r2
 8010c56:	4a10      	ldr	r2, [pc, #64]	; (8010c98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8010c58:	210e      	movs	r1, #14
 8010c5a:	6812      	ldr	r2, [r2, #0]
 8010c5c:	fb01 2303 	mla	r3, r1, r3, r2
 8010c60:	7b18      	ldrb	r0, [r3, #12]
 8010c62:	f000 001f 	and.w	r0, r0, #31
 8010c66:	4770      	bx	lr
 8010c68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	d10a      	bne.n	8010c86 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8010c70:	4b0a      	ldr	r3, [pc, #40]	; (8010c9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8010c78:	b10a      	cbz	r2, 8010c7e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8010c7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010c7c:	b900      	cbnz	r0, 8010c80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8010c7e:	6898      	ldr	r0, [r3, #8]
 8010c80:	6803      	ldr	r3, [r0, #0]
 8010c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c84:	4718      	bx	r3
 8010c86:	2000      	movs	r0, #0
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop
 8010c8c:	200011a8 	.word	0x200011a8
 8010c90:	200011a0 	.word	0x200011a0
 8010c94:	200011a4 	.word	0x200011a4
 8010c98:	20001188 	.word	0x20001188
 8010c9c:	20001100 	.word	0x20001100

08010ca0 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8010ca0:	2018      	movs	r0, #24
 8010ca2:	4770      	bx	lr

08010ca4 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8010ca4:	2001      	movs	r0, #1
 8010ca6:	4770      	bx	lr

08010ca8 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 8010ca8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010cac:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 8010cb0:	4770      	bx	lr

08010cb2 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 8010cb2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8010cb6:	4770      	bx	lr

08010cb8 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 8010cb8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8010cbc:	4770      	bx	lr

08010cbe <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 8010cbe:	b2c8      	uxtb	r0, r1
 8010cc0:	4770      	bx	lr

08010cc2 <_ZN8touchgfx8LCD24bpp4initEv>:
 8010cc2:	4770      	bx	lr

08010cc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8010cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc8:	b085      	sub	sp, #20
 8010cca:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8010ccc:	9203      	str	r2, [sp, #12]
 8010cce:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	9201      	str	r2, [sp, #4]
 8010cd6:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8010cd8:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 8010cdc:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 8010ce0:	fa1f fc84 	uxth.w	ip, r4
 8010ce4:	43e4      	mvns	r4, r4
 8010ce6:	9100      	str	r1, [sp, #0]
 8010ce8:	b2e4      	uxtb	r4, r4
 8010cea:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8010cee:	fb00 2505 	mla	r5, r0, r5, r2
 8010cf2:	683a      	ldr	r2, [r7, #0]
 8010cf4:	6877      	ldr	r7, [r6, #4]
 8010cf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cfa:	3704      	adds	r7, #4
 8010cfc:	4415      	add	r5, r2
 8010cfe:	6832      	ldr	r2, [r6, #0]
 8010d00:	9202      	str	r2, [sp, #8]
 8010d02:	9a00      	ldr	r2, [sp, #0]
 8010d04:	2a00      	cmp	r2, #0
 8010d06:	dc03      	bgt.n	8010d10 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8010d08:	9a03      	ldr	r2, [sp, #12]
 8010d0a:	2a00      	cmp	r2, #0
 8010d0c:	f340 8116 	ble.w	8010f3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8010d10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010d12:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010d16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010d18:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	dd0f      	ble.n	8010d40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8010d20:	1406      	asrs	r6, r0, #16
 8010d22:	d406      	bmi.n	8010d32 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8010d24:	4546      	cmp	r6, r8
 8010d26:	da04      	bge.n	8010d32 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8010d28:	1416      	asrs	r6, r2, #16
 8010d2a:	d402      	bmi.n	8010d32 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8010d2c:	9901      	ldr	r1, [sp, #4]
 8010d2e:	428e      	cmp	r6, r1
 8010d30:	db07      	blt.n	8010d42 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8010d32:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010d34:	3b01      	subs	r3, #1
 8010d36:	3503      	adds	r5, #3
 8010d38:	4408      	add	r0, r1
 8010d3a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010d3c:	440a      	add	r2, r1
 8010d3e:	e7ed      	b.n	8010d1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8010d40:	d011      	beq.n	8010d66 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8010d42:	1e5e      	subs	r6, r3, #1
 8010d44:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010d46:	fb01 0e06 	mla	lr, r1, r6, r0
 8010d4a:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8010d4e:	d548      	bpl.n	8010de2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8010d50:	4699      	mov	r9, r3
 8010d52:	462e      	mov	r6, r5
 8010d54:	f1b9 0f00 	cmp.w	r9, #0
 8010d58:	f300 809e 	bgt.w	8010e98 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8010d5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010d60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010d64:	441d      	add	r5, r3
 8010d66:	9b00      	ldr	r3, [sp, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f340 80e7 	ble.w	8010f3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8010d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010d78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010d7c:	eef0 6a62 	vmov.f32	s13, s5
 8010d80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010d84:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010d88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010d8c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8010d90:	eef0 6a43 	vmov.f32	s13, s6
 8010d94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010d98:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8010d9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010da0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010da4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010da8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010dac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010db0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010db4:	ee12 2a90 	vmov	r2, s5
 8010db8:	eef0 2a47 	vmov.f32	s5, s14
 8010dbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8010dc0:	ee13 2a10 	vmov	r2, s6
 8010dc4:	9311      	str	r3, [sp, #68]	; 0x44
 8010dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dc8:	eeb0 3a67 	vmov.f32	s6, s15
 8010dcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8010dd0:	9312      	str	r3, [sp, #72]	; 0x48
 8010dd2:	9b00      	ldr	r3, [sp, #0]
 8010dd4:	9a03      	ldr	r2, [sp, #12]
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ddc:	bf08      	it	eq
 8010dde:	4613      	moveq	r3, r2
 8010de0:	e78f      	b.n	8010d02 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8010de2:	45c6      	cmp	lr, r8
 8010de4:	dab4      	bge.n	8010d50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8010de6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010de8:	fb01 2606 	mla	r6, r1, r6, r2
 8010dec:	1436      	asrs	r6, r6, #16
 8010dee:	d4af      	bmi.n	8010d50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8010df0:	9901      	ldr	r1, [sp, #4]
 8010df2:	428e      	cmp	r6, r1
 8010df4:	daac      	bge.n	8010d50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8010df6:	1cee      	adds	r6, r5, #3
 8010df8:	4699      	mov	r9, r3
 8010dfa:	f1b9 0f00 	cmp.w	r9, #0
 8010dfe:	f106 0603 	add.w	r6, r6, #3
 8010e02:	ddab      	ble.n	8010d5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8010e04:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010e08:	9902      	ldr	r1, [sp, #8]
 8010e0a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8010e0e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8010e12:	fb08 1e0e 	mla	lr, r8, lr, r1
 8010e16:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010e18:	fb1b fb04 	smulbb	fp, fp, r4
 8010e1c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010e20:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8010e24:	4408      	add	r0, r1
 8010e26:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010e28:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8010e2c:	440a      	add	r2, r1
 8010e2e:	eb07 0a0e 	add.w	sl, r7, lr
 8010e32:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8010e36:	fb0e be0c 	mla	lr, lr, ip, fp
 8010e3a:	fa1f fe8e 	uxth.w	lr, lr
 8010e3e:	f10e 0b01 	add.w	fp, lr, #1
 8010e42:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8010e46:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8010e4a:	fb1b fb04 	smulbb	fp, fp, r4
 8010e4e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8010e52:	f806 ec06 	strb.w	lr, [r6, #-6]
 8010e56:	f89a e001 	ldrb.w	lr, [sl, #1]
 8010e5a:	fb0e be0c 	mla	lr, lr, ip, fp
 8010e5e:	fa1f fe8e 	uxth.w	lr, lr
 8010e62:	f10e 0b01 	add.w	fp, lr, #1
 8010e66:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8010e6a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8010e6e:	f806 ec05 	strb.w	lr, [r6, #-5]
 8010e72:	f89a e002 	ldrb.w	lr, [sl, #2]
 8010e76:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8010e7a:	fb1a fa04 	smulbb	sl, sl, r4
 8010e7e:	fb0e ae0c 	mla	lr, lr, ip, sl
 8010e82:	fa1f fe8e 	uxth.w	lr, lr
 8010e86:	f10e 0a01 	add.w	sl, lr, #1
 8010e8a:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8010e8e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8010e92:	f806 ec04 	strb.w	lr, [r6, #-4]
 8010e96:	e7b0      	b.n	8010dfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8010e98:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8010e9c:	d446      	bmi.n	8010f2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8010e9e:	45c2      	cmp	sl, r8
 8010ea0:	da44      	bge.n	8010f2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8010ea2:	ea5f 4e22 	movs.w	lr, r2, asr #16
 8010ea6:	d441      	bmi.n	8010f2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8010ea8:	9901      	ldr	r1, [sp, #4]
 8010eaa:	458e      	cmp	lr, r1
 8010eac:	da3e      	bge.n	8010f2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8010eae:	9902      	ldr	r1, [sp, #8]
 8010eb0:	f896 b000 	ldrb.w	fp, [r6]
 8010eb4:	fb08 1e0e 	mla	lr, r8, lr, r1
 8010eb8:	fb1b fb04 	smulbb	fp, fp, r4
 8010ebc:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8010ec0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8010ec4:	eb07 0a0e 	add.w	sl, r7, lr
 8010ec8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8010ecc:	fb0e be0c 	mla	lr, lr, ip, fp
 8010ed0:	fa1f fe8e 	uxth.w	lr, lr
 8010ed4:	f10e 0b01 	add.w	fp, lr, #1
 8010ed8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8010edc:	f896 b001 	ldrb.w	fp, [r6, #1]
 8010ee0:	fb1b fb04 	smulbb	fp, fp, r4
 8010ee4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8010ee8:	f886 e000 	strb.w	lr, [r6]
 8010eec:	f89a e001 	ldrb.w	lr, [sl, #1]
 8010ef0:	fb0e be0c 	mla	lr, lr, ip, fp
 8010ef4:	fa1f fe8e 	uxth.w	lr, lr
 8010ef8:	f10e 0b01 	add.w	fp, lr, #1
 8010efc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8010f00:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8010f04:	f886 e001 	strb.w	lr, [r6, #1]
 8010f08:	f89a e002 	ldrb.w	lr, [sl, #2]
 8010f0c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8010f10:	fb1a fa04 	smulbb	sl, sl, r4
 8010f14:	fb0e ae0c 	mla	lr, lr, ip, sl
 8010f18:	fa1f fe8e 	uxth.w	lr, lr
 8010f1c:	f10e 0a01 	add.w	sl, lr, #1
 8010f20:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8010f24:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8010f28:	f886 e002 	strb.w	lr, [r6, #2]
 8010f2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010f2e:	3603      	adds	r6, #3
 8010f30:	f109 39ff 	add.w	r9, r9, #4294967295
 8010f34:	4408      	add	r0, r1
 8010f36:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010f38:	440a      	add	r2, r1
 8010f3a:	e70b      	b.n	8010d54 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8010f3c:	b005      	add	sp, #20
 8010f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f42 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8010f42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f46:	b085      	sub	sp, #20
 8010f48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f4c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8010f4e:	9203      	str	r2, [sp, #12]
 8010f50:	6870      	ldr	r0, [r6, #4]
 8010f52:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8010f54:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8010f58:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8010f5c:	9101      	str	r1, [sp, #4]
 8010f5e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8010f62:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 8010f66:	fb00 2404 	mla	r4, r0, r4, r2
 8010f6a:	6832      	ldr	r2, [r6, #0]
 8010f6c:	686e      	ldr	r6, [r5, #4]
 8010f6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010f72:	3604      	adds	r6, #4
 8010f74:	4414      	add	r4, r2
 8010f76:	682a      	ldr	r2, [r5, #0]
 8010f78:	9202      	str	r2, [sp, #8]
 8010f7a:	9a01      	ldr	r2, [sp, #4]
 8010f7c:	2a00      	cmp	r2, #0
 8010f7e:	dc03      	bgt.n	8010f88 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8010f80:	9a03      	ldr	r2, [sp, #12]
 8010f82:	2a00      	cmp	r2, #0
 8010f84:	f340 80b2 	ble.w	80110ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8010f88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010f8a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010f8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010f90:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	dd0c      	ble.n	8010fb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8010f98:	1405      	asrs	r5, r0, #16
 8010f9a:	d405      	bmi.n	8010fa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8010f9c:	4575      	cmp	r5, lr
 8010f9e:	da03      	bge.n	8010fa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8010fa0:	1415      	asrs	r5, r2, #16
 8010fa2:	d401      	bmi.n	8010fa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8010fa4:	4545      	cmp	r5, r8
 8010fa6:	db05      	blt.n	8010fb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8010fa8:	4460      	add	r0, ip
 8010faa:	443a      	add	r2, r7
 8010fac:	3b01      	subs	r3, #1
 8010fae:	3403      	adds	r4, #3
 8010fb0:	e7f0      	b.n	8010f94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 8010fb2:	d03d      	beq.n	8011030 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8010fb4:	1e5d      	subs	r5, r3, #1
 8010fb6:	fb0c 0905 	mla	r9, ip, r5, r0
 8010fba:	ea5f 4929 	movs.w	r9, r9, asr #16
 8010fbe:	d42c      	bmi.n	801101a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8010fc0:	45f1      	cmp	r9, lr
 8010fc2:	da2a      	bge.n	801101a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8010fc4:	fb07 2505 	mla	r5, r7, r5, r2
 8010fc8:	142d      	asrs	r5, r5, #16
 8010fca:	d426      	bmi.n	801101a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8010fcc:	4545      	cmp	r5, r8
 8010fce:	da24      	bge.n	801101a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8010fd0:	1ce5      	adds	r5, r4, #3
 8010fd2:	469a      	mov	sl, r3
 8010fd4:	f1ba 0f00 	cmp.w	sl, #0
 8010fd8:	f105 0503 	add.w	r5, r5, #3
 8010fdc:	dd23      	ble.n	8011026 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8010fde:	ea4f 4922 	mov.w	r9, r2, asr #16
 8010fe2:	9902      	ldr	r1, [sp, #8]
 8010fe4:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8010fe8:	443a      	add	r2, r7
 8010fea:	fb0e 1909 	mla	r9, lr, r9, r1
 8010fee:	4460      	add	r0, ip
 8010ff0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ff4:	f819 900b 	ldrb.w	r9, [r9, fp]
 8010ff8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8010ffc:	eb06 0b09 	add.w	fp, r6, r9
 8011000:	f816 9009 	ldrb.w	r9, [r6, r9]
 8011004:	f805 9c06 	strb.w	r9, [r5, #-6]
 8011008:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801100c:	f805 9c05 	strb.w	r9, [r5, #-5]
 8011010:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8011014:	f805 9c04 	strb.w	r9, [r5, #-4]
 8011018:	e7dc      	b.n	8010fd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801101a:	2500      	movs	r5, #0
 801101c:	eba3 0905 	sub.w	r9, r3, r5
 8011020:	f1b9 0f00 	cmp.w	r9, #0
 8011024:	dc3c      	bgt.n	80110a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 8011026:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801102a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801102e:	441c      	add	r4, r3
 8011030:	9b01      	ldr	r3, [sp, #4]
 8011032:	2b00      	cmp	r3, #0
 8011034:	dd5a      	ble.n	80110ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8011036:	ee30 0a04 	vadd.f32	s0, s0, s8
 801103a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801103c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011040:	eeb0 6a62 	vmov.f32	s12, s5
 8011044:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011048:	ee31 1a05 	vadd.f32	s2, s2, s10
 801104c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011050:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011054:	eeb0 6a43 	vmov.f32	s12, s6
 8011058:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801105c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8011060:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011064:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011068:	ee77 2a62 	vsub.f32	s5, s14, s5
 801106c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011070:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011074:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011078:	ee12 2a90 	vmov	r2, s5
 801107c:	eef0 2a47 	vmov.f32	s5, s14
 8011080:	fb92 fcf3 	sdiv	ip, r2, r3
 8011084:	ee13 2a10 	vmov	r2, s6
 8011088:	eeb0 3a67 	vmov.f32	s6, s15
 801108c:	fb92 f7f3 	sdiv	r7, r2, r3
 8011090:	9b01      	ldr	r3, [sp, #4]
 8011092:	9a03      	ldr	r2, [sp, #12]
 8011094:	3b01      	subs	r3, #1
 8011096:	9301      	str	r3, [sp, #4]
 8011098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801109a:	bf08      	it	eq
 801109c:	4613      	moveq	r3, r2
 801109e:	e76c      	b.n	8010f7a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 80110a0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80110a4:	d41e      	bmi.n	80110e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80110a6:	45f2      	cmp	sl, lr
 80110a8:	da1c      	bge.n	80110e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80110aa:	ea5f 4922 	movs.w	r9, r2, asr #16
 80110ae:	d419      	bmi.n	80110e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80110b0:	45c1      	cmp	r9, r8
 80110b2:	da17      	bge.n	80110e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80110b4:	9902      	ldr	r1, [sp, #8]
 80110b6:	fb0e 1909 	mla	r9, lr, r9, r1
 80110ba:	f819 900a 	ldrb.w	r9, [r9, sl]
 80110be:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80110c2:	f816 b009 	ldrb.w	fp, [r6, r9]
 80110c6:	eb06 0a09 	add.w	sl, r6, r9
 80110ca:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 80110ce:	f804 b009 	strb.w	fp, [r4, r9]
 80110d2:	44a1      	add	r9, r4
 80110d4:	f89a b001 	ldrb.w	fp, [sl, #1]
 80110d8:	f889 b001 	strb.w	fp, [r9, #1]
 80110dc:	f89a a002 	ldrb.w	sl, [sl, #2]
 80110e0:	f889 a002 	strb.w	sl, [r9, #2]
 80110e4:	4460      	add	r0, ip
 80110e6:	443a      	add	r2, r7
 80110e8:	3501      	adds	r5, #1
 80110ea:	e797      	b.n	801101c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80110ec:	b005      	add	sp, #20
 80110ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80110f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f6:	b087      	sub	sp, #28
 80110f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110fc:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80110fe:	9204      	str	r2, [sp, #16]
 8011100:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8011104:	6870      	ldr	r0, [r6, #4]
 8011106:	9205      	str	r2, [sp, #20]
 8011108:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801110a:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801110e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8011112:	9101      	str	r1, [sp, #4]
 8011114:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8011118:	fb00 2505 	mla	r5, r0, r5, r2
 801111c:	6832      	ldr	r2, [r6, #0]
 801111e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011122:	4415      	add	r5, r2
 8011124:	6822      	ldr	r2, [r4, #0]
 8011126:	9202      	str	r2, [sp, #8]
 8011128:	6862      	ldr	r2, [r4, #4]
 801112a:	3204      	adds	r2, #4
 801112c:	9203      	str	r2, [sp, #12]
 801112e:	9a01      	ldr	r2, [sp, #4]
 8011130:	2a00      	cmp	r2, #0
 8011132:	dc03      	bgt.n	801113c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8011134:	9a04      	ldr	r2, [sp, #16]
 8011136:	2a00      	cmp	r2, #0
 8011138:	f340 8124 	ble.w	8011384 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801113c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801113e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011142:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011144:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011148:	2b00      	cmp	r3, #0
 801114a:	dd0e      	ble.n	801116a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801114c:	1422      	asrs	r2, r4, #16
 801114e:	d405      	bmi.n	801115c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8011150:	4572      	cmp	r2, lr
 8011152:	da03      	bge.n	801115c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8011154:	1402      	asrs	r2, r0, #16
 8011156:	d401      	bmi.n	801115c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8011158:	4542      	cmp	r2, r8
 801115a:	db07      	blt.n	801116c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801115c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801115e:	3b01      	subs	r3, #1
 8011160:	3503      	adds	r5, #3
 8011162:	4414      	add	r4, r2
 8011164:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011166:	4410      	add	r0, r2
 8011168:	e7ee      	b.n	8011148 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801116a:	d010      	beq.n	801118e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801116c:	1e5a      	subs	r2, r3, #1
 801116e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011170:	fb06 4602 	mla	r6, r6, r2, r4
 8011174:	1436      	asrs	r6, r6, #16
 8011176:	d546      	bpl.n	8011206 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8011178:	4699      	mov	r9, r3
 801117a:	462f      	mov	r7, r5
 801117c:	f1b9 0f00 	cmp.w	r9, #0
 8011180:	f300 80a5 	bgt.w	80112ce <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8011184:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011188:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801118c:	441d      	add	r5, r3
 801118e:	9b01      	ldr	r3, [sp, #4]
 8011190:	2b00      	cmp	r3, #0
 8011192:	f340 80f7 	ble.w	8011384 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8011196:	ee30 0a04 	vadd.f32	s0, s0, s8
 801119a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801119c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80111a0:	eeb0 6a62 	vmov.f32	s12, s5
 80111a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80111a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80111ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80111b0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80111b4:	eeb0 6a43 	vmov.f32	s12, s6
 80111b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80111bc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80111c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80111c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80111c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80111cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80111d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80111d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80111d8:	ee12 2a90 	vmov	r2, s5
 80111dc:	eef0 2a47 	vmov.f32	s5, s14
 80111e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80111e4:	ee13 2a10 	vmov	r2, s6
 80111e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80111ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111ec:	eeb0 3a67 	vmov.f32	s6, s15
 80111f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80111f4:	9314      	str	r3, [sp, #80]	; 0x50
 80111f6:	9b01      	ldr	r3, [sp, #4]
 80111f8:	9a04      	ldr	r2, [sp, #16]
 80111fa:	3b01      	subs	r3, #1
 80111fc:	9301      	str	r3, [sp, #4]
 80111fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011200:	bf08      	it	eq
 8011202:	4613      	moveq	r3, r2
 8011204:	e793      	b.n	801112e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8011206:	4576      	cmp	r6, lr
 8011208:	dab6      	bge.n	8011178 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801120a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801120c:	fb06 0202 	mla	r2, r6, r2, r0
 8011210:	1412      	asrs	r2, r2, #16
 8011212:	d4b1      	bmi.n	8011178 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8011214:	4542      	cmp	r2, r8
 8011216:	daaf      	bge.n	8011178 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8011218:	1cef      	adds	r7, r5, #3
 801121a:	4699      	mov	r9, r3
 801121c:	f1b9 0f00 	cmp.w	r9, #0
 8011220:	ddb0      	ble.n	8011184 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8011222:	9902      	ldr	r1, [sp, #8]
 8011224:	1402      	asrs	r2, r0, #16
 8011226:	1426      	asrs	r6, r4, #16
 8011228:	fb0e 1202 	mla	r2, lr, r2, r1
 801122c:	9903      	ldr	r1, [sp, #12]
 801122e:	5d92      	ldrb	r2, [r2, r6]
 8011230:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8011234:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8011238:	d041      	beq.n	80112be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801123a:	9a05      	ldr	r2, [sp, #20]
 801123c:	fa5f fb86 	uxtb.w	fp, r6
 8011240:	fb02 fc0c 	mul.w	ip, r2, ip
 8011244:	f10c 0201 	add.w	r2, ip, #1
 8011248:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801124c:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8011250:	1212      	asrs	r2, r2, #8
 8011252:	fa1f fa82 	uxth.w	sl, r2
 8011256:	43d2      	mvns	r2, r2
 8011258:	fb1b fb0a 	smulbb	fp, fp, sl
 801125c:	b2d2      	uxtb	r2, r2
 801125e:	fb0c bc02 	mla	ip, ip, r2, fp
 8011262:	fa1f fc8c 	uxth.w	ip, ip
 8011266:	f10c 0b01 	add.w	fp, ip, #1
 801126a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801126e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8011272:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8011276:	fb1b fb0a 	smulbb	fp, fp, sl
 801127a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801127e:	fb16 fa0a 	smulbb	sl, r6, sl
 8011282:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8011286:	f807 cc03 	strb.w	ip, [r7, #-3]
 801128a:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801128e:	fb06 aa02 	mla	sl, r6, r2, sl
 8011292:	fb0c bc02 	mla	ip, ip, r2, fp
 8011296:	fa1f fa8a 	uxth.w	sl, sl
 801129a:	fa1f fc8c 	uxth.w	ip, ip
 801129e:	f10a 0601 	add.w	r6, sl, #1
 80112a2:	f10c 0b01 	add.w	fp, ip, #1
 80112a6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80112aa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80112ae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80112b2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80112b6:	f807 ac01 	strb.w	sl, [r7, #-1]
 80112ba:	f807 cc02 	strb.w	ip, [r7, #-2]
 80112be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80112c0:	3703      	adds	r7, #3
 80112c2:	f109 39ff 	add.w	r9, r9, #4294967295
 80112c6:	4414      	add	r4, r2
 80112c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80112ca:	4410      	add	r0, r2
 80112cc:	e7a6      	b.n	801121c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 80112ce:	1426      	asrs	r6, r4, #16
 80112d0:	d450      	bmi.n	8011374 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80112d2:	4576      	cmp	r6, lr
 80112d4:	da4e      	bge.n	8011374 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80112d6:	1402      	asrs	r2, r0, #16
 80112d8:	d44c      	bmi.n	8011374 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80112da:	4542      	cmp	r2, r8
 80112dc:	da4a      	bge.n	8011374 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80112de:	9902      	ldr	r1, [sp, #8]
 80112e0:	fb0e 1202 	mla	r2, lr, r2, r1
 80112e4:	9903      	ldr	r1, [sp, #12]
 80112e6:	5d92      	ldrb	r2, [r2, r6]
 80112e8:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80112ec:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 80112f0:	d040      	beq.n	8011374 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80112f2:	9a05      	ldr	r2, [sp, #20]
 80112f4:	fa5f fb86 	uxtb.w	fp, r6
 80112f8:	fb02 fc0c 	mul.w	ip, r2, ip
 80112fc:	f10c 0201 	add.w	r2, ip, #1
 8011300:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8011304:	f897 c000 	ldrb.w	ip, [r7]
 8011308:	1212      	asrs	r2, r2, #8
 801130a:	fa1f fa82 	uxth.w	sl, r2
 801130e:	43d2      	mvns	r2, r2
 8011310:	fb1b fb0a 	smulbb	fp, fp, sl
 8011314:	b2d2      	uxtb	r2, r2
 8011316:	fb0c bc02 	mla	ip, ip, r2, fp
 801131a:	fa1f fc8c 	uxth.w	ip, ip
 801131e:	f10c 0b01 	add.w	fp, ip, #1
 8011322:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8011326:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801132a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801132e:	fb1b fb0a 	smulbb	fp, fp, sl
 8011332:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8011336:	fb16 fa0a 	smulbb	sl, r6, sl
 801133a:	78be      	ldrb	r6, [r7, #2]
 801133c:	f887 c000 	strb.w	ip, [r7]
 8011340:	f897 c001 	ldrb.w	ip, [r7, #1]
 8011344:	fb06 aa02 	mla	sl, r6, r2, sl
 8011348:	fb0c bc02 	mla	ip, ip, r2, fp
 801134c:	fa1f fa8a 	uxth.w	sl, sl
 8011350:	fa1f fc8c 	uxth.w	ip, ip
 8011354:	f10a 0601 	add.w	r6, sl, #1
 8011358:	f10c 0b01 	add.w	fp, ip, #1
 801135c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8011360:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8011364:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011368:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801136c:	f887 a002 	strb.w	sl, [r7, #2]
 8011370:	f887 c001 	strb.w	ip, [r7, #1]
 8011374:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011376:	3703      	adds	r7, #3
 8011378:	f109 39ff 	add.w	r9, r9, #4294967295
 801137c:	4414      	add	r4, r2
 801137e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011380:	4410      	add	r0, r2
 8011382:	e6fb      	b.n	801117c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8011384:	b007      	add	sp, #28
 8011386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801138a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801138a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801138e:	b085      	sub	sp, #20
 8011390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011394:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011396:	9203      	str	r2, [sp, #12]
 8011398:	6870      	ldr	r0, [r6, #4]
 801139a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801139c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80113a0:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 80113a4:	9100      	str	r1, [sp, #0]
 80113a6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80113aa:	fb00 2404 	mla	r4, r0, r4, r2
 80113ae:	6832      	ldr	r2, [r6, #0]
 80113b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80113b4:	4414      	add	r4, r2
 80113b6:	682a      	ldr	r2, [r5, #0]
 80113b8:	9201      	str	r2, [sp, #4]
 80113ba:	686a      	ldr	r2, [r5, #4]
 80113bc:	3204      	adds	r2, #4
 80113be:	9202      	str	r2, [sp, #8]
 80113c0:	9a00      	ldr	r2, [sp, #0]
 80113c2:	2a00      	cmp	r2, #0
 80113c4:	dc03      	bgt.n	80113ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80113c6:	9a03      	ldr	r2, [sp, #12]
 80113c8:	2a00      	cmp	r2, #0
 80113ca:	f340 8131 	ble.w	8011630 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 80113ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80113d0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80113d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80113d6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80113da:	2b00      	cmp	r3, #0
 80113dc:	dd0e      	ble.n	80113fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80113de:	1405      	asrs	r5, r0, #16
 80113e0:	d405      	bmi.n	80113ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80113e2:	4575      	cmp	r5, lr
 80113e4:	da03      	bge.n	80113ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80113e6:	1415      	asrs	r5, r2, #16
 80113e8:	d401      	bmi.n	80113ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80113ea:	4545      	cmp	r5, r8
 80113ec:	db07      	blt.n	80113fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80113ee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80113f0:	3b01      	subs	r3, #1
 80113f2:	3403      	adds	r4, #3
 80113f4:	4428      	add	r0, r5
 80113f6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80113f8:	442a      	add	r2, r5
 80113fa:	e7ee      	b.n	80113da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 80113fc:	d06f      	beq.n	80114de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 80113fe:	1e5d      	subs	r5, r3, #1
 8011400:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011402:	fb06 0605 	mla	r6, r6, r5, r0
 8011406:	1436      	asrs	r6, r6, #16
 8011408:	d460      	bmi.n	80114cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801140a:	4576      	cmp	r6, lr
 801140c:	da5e      	bge.n	80114cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801140e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011410:	fb06 2505 	mla	r5, r6, r5, r2
 8011414:	142d      	asrs	r5, r5, #16
 8011416:	d459      	bmi.n	80114cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8011418:	4545      	cmp	r5, r8
 801141a:	da57      	bge.n	80114cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801141c:	1ce5      	adds	r5, r4, #3
 801141e:	469a      	mov	sl, r3
 8011420:	f1ba 0f00 	cmp.w	sl, #0
 8011424:	dd56      	ble.n	80114d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 8011426:	9901      	ldr	r1, [sp, #4]
 8011428:	1416      	asrs	r6, r2, #16
 801142a:	1407      	asrs	r7, r0, #16
 801142c:	fb0e 1606 	mla	r6, lr, r6, r1
 8011430:	9902      	ldr	r1, [sp, #8]
 8011432:	5df6      	ldrb	r6, [r6, r7]
 8011434:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8011438:	0e37      	lsrs	r7, r6, #24
 801143a:	2fff      	cmp	r7, #255	; 0xff
 801143c:	f000 80ef 	beq.w	801161e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8011440:	fa5f fc87 	uxtb.w	ip, r7
 8011444:	b3d7      	cbz	r7, 80114bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8011446:	fa1f f78c 	uxth.w	r7, ip
 801144a:	ea6f 0c0c 	mvn.w	ip, ip
 801144e:	fa5f fb86 	uxtb.w	fp, r6
 8011452:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8011456:	fa5f fc8c 	uxtb.w	ip, ip
 801145a:	fb1b fb07 	smulbb	fp, fp, r7
 801145e:	fb09 b90c 	mla	r9, r9, ip, fp
 8011462:	fa1f f989 	uxth.w	r9, r9
 8011466:	f109 0b01 	add.w	fp, r9, #1
 801146a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801146e:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8011472:	fb1b fb0c 	smulbb	fp, fp, ip
 8011476:	ea4f 2929 	mov.w	r9, r9, asr #8
 801147a:	f805 9c03 	strb.w	r9, [r5, #-3]
 801147e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8011482:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8011486:	fb09 b907 	mla	r9, r9, r7, fp
 801148a:	fa1f f989 	uxth.w	r9, r9
 801148e:	f109 0b01 	add.w	fp, r9, #1
 8011492:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011496:	ea4f 2929 	mov.w	r9, r9, asr #8
 801149a:	f805 9c02 	strb.w	r9, [r5, #-2]
 801149e:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80114a2:	fb19 fc0c 	smulbb	ip, r9, ip
 80114a6:	fb06 c607 	mla	r6, r6, r7, ip
 80114aa:	b2b6      	uxth	r6, r6
 80114ac:	f106 0c01 	add.w	ip, r6, #1
 80114b0:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 80114b4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80114b8:	f805 cc01 	strb.w	ip, [r5, #-1]
 80114bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80114be:	3503      	adds	r5, #3
 80114c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80114c4:	4408      	add	r0, r1
 80114c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80114c8:	440a      	add	r2, r1
 80114ca:	e7a9      	b.n	8011420 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80114cc:	2600      	movs	r6, #0
 80114ce:	1b9d      	subs	r5, r3, r6
 80114d0:	2d00      	cmp	r5, #0
 80114d2:	dc40      	bgt.n	8011556 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 80114d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80114d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80114dc:	441c      	add	r4, r3
 80114de:	9b00      	ldr	r3, [sp, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	f340 80a5 	ble.w	8011630 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 80114e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80114ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80114f0:	eeb0 6a62 	vmov.f32	s12, s5
 80114f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80114f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80114fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011500:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011504:	eeb0 6a43 	vmov.f32	s12, s6
 8011508:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801150c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8011510:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011514:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011518:	ee77 2a62 	vsub.f32	s5, s14, s5
 801151c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011520:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011524:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011528:	ee12 2a90 	vmov	r2, s5
 801152c:	eef0 2a47 	vmov.f32	s5, s14
 8011530:	fb92 f3f3 	sdiv	r3, r2, r3
 8011534:	ee13 2a10 	vmov	r2, s6
 8011538:	9311      	str	r3, [sp, #68]	; 0x44
 801153a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801153c:	eeb0 3a67 	vmov.f32	s6, s15
 8011540:	fb92 f3f3 	sdiv	r3, r2, r3
 8011544:	9312      	str	r3, [sp, #72]	; 0x48
 8011546:	9b00      	ldr	r3, [sp, #0]
 8011548:	9a03      	ldr	r2, [sp, #12]
 801154a:	3b01      	subs	r3, #1
 801154c:	9300      	str	r3, [sp, #0]
 801154e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011550:	bf08      	it	eq
 8011552:	4613      	moveq	r3, r2
 8011554:	e734      	b.n	80113c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8011556:	1407      	asrs	r7, r0, #16
 8011558:	d450      	bmi.n	80115fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801155a:	4577      	cmp	r7, lr
 801155c:	da4e      	bge.n	80115fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801155e:	1415      	asrs	r5, r2, #16
 8011560:	d44c      	bmi.n	80115fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8011562:	4545      	cmp	r5, r8
 8011564:	da4a      	bge.n	80115fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8011566:	9901      	ldr	r1, [sp, #4]
 8011568:	fb0e 1505 	mla	r5, lr, r5, r1
 801156c:	9902      	ldr	r1, [sp, #8]
 801156e:	5ded      	ldrb	r5, [r5, r7]
 8011570:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8011574:	0e2f      	lsrs	r7, r5, #24
 8011576:	2fff      	cmp	r7, #255	; 0xff
 8011578:	d046      	beq.n	8011608 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801157a:	fa5f f987 	uxtb.w	r9, r7
 801157e:	b3ef      	cbz	r7, 80115fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8011580:	fa1f fc89 	uxth.w	ip, r9
 8011584:	ea6f 0909 	mvn.w	r9, r9
 8011588:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801158c:	fa5f fb85 	uxtb.w	fp, r5
 8011590:	f814 a007 	ldrb.w	sl, [r4, r7]
 8011594:	fa5f f989 	uxtb.w	r9, r9
 8011598:	fb1b fb0c 	smulbb	fp, fp, ip
 801159c:	fb0a ba09 	mla	sl, sl, r9, fp
 80115a0:	fa1f fa8a 	uxth.w	sl, sl
 80115a4:	f10a 0b01 	add.w	fp, sl, #1
 80115a8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80115ac:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80115b0:	f804 a007 	strb.w	sl, [r4, r7]
 80115b4:	4427      	add	r7, r4
 80115b6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80115ba:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80115be:	f897 b001 	ldrb.w	fp, [r7, #1]
 80115c2:	fb1b fb09 	smulbb	fp, fp, r9
 80115c6:	fb0a ba0c 	mla	sl, sl, ip, fp
 80115ca:	fa1f fa8a 	uxth.w	sl, sl
 80115ce:	f10a 0b01 	add.w	fp, sl, #1
 80115d2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80115d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80115da:	f887 a001 	strb.w	sl, [r7, #1]
 80115de:	f897 a002 	ldrb.w	sl, [r7, #2]
 80115e2:	fb1a f909 	smulbb	r9, sl, r9
 80115e6:	fb05 950c 	mla	r5, r5, ip, r9
 80115ea:	b2ad      	uxth	r5, r5
 80115ec:	f105 0901 	add.w	r9, r5, #1
 80115f0:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80115f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80115f8:	f887 9002 	strb.w	r9, [r7, #2]
 80115fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80115fe:	3601      	adds	r6, #1
 8011600:	4408      	add	r0, r1
 8011602:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011604:	440a      	add	r2, r1
 8011606:	e762      	b.n	80114ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8011608:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801160c:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8011610:	55e5      	strb	r5, [r4, r7]
 8011612:	4427      	add	r7, r4
 8011614:	0c2d      	lsrs	r5, r5, #16
 8011616:	f887 c001 	strb.w	ip, [r7, #1]
 801161a:	70bd      	strb	r5, [r7, #2]
 801161c:	e7ee      	b.n	80115fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801161e:	0a37      	lsrs	r7, r6, #8
 8011620:	f805 6c03 	strb.w	r6, [r5, #-3]
 8011624:	0c36      	lsrs	r6, r6, #16
 8011626:	f805 7c02 	strb.w	r7, [r5, #-2]
 801162a:	f805 6c01 	strb.w	r6, [r5, #-1]
 801162e:	e745      	b.n	80114bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8011630:	b005      	add	sp, #20
 8011632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011636 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8011636:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801163a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801163c:	9201      	str	r2, [sp, #4]
 801163e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8011642:	6870      	ldr	r0, [r6, #4]
 8011644:	9200      	str	r2, [sp, #0]
 8011646:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801164a:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801164e:	fa1f fc85 	uxth.w	ip, r5
 8011652:	43ed      	mvns	r5, r5
 8011654:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8011658:	b2ed      	uxtb	r5, r5
 801165a:	fb00 2404 	mla	r4, r0, r4, r2
 801165e:	6832      	ldr	r2, [r6, #0]
 8011660:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011664:	4414      	add	r4, r2
 8011666:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011668:	f8d2 8000 	ldr.w	r8, [r2]
 801166c:	2900      	cmp	r1, #0
 801166e:	dc03      	bgt.n	8011678 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8011670:	9a01      	ldr	r2, [sp, #4]
 8011672:	2a00      	cmp	r2, #0
 8011674:	f340 8104 	ble.w	8011880 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8011678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801167a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801167e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011680:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011684:	2b00      	cmp	r3, #0
 8011686:	dd0f      	ble.n	80116a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8011688:	1406      	asrs	r6, r0, #16
 801168a:	d406      	bmi.n	801169a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801168c:	4576      	cmp	r6, lr
 801168e:	da04      	bge.n	801169a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8011690:	1416      	asrs	r6, r2, #16
 8011692:	d402      	bmi.n	801169a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8011694:	9f00      	ldr	r7, [sp, #0]
 8011696:	42be      	cmp	r6, r7
 8011698:	db07      	blt.n	80116aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801169a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801169c:	3b01      	subs	r3, #1
 801169e:	3403      	adds	r4, #3
 80116a0:	4430      	add	r0, r6
 80116a2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80116a4:	4432      	add	r2, r6
 80116a6:	e7ed      	b.n	8011684 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 80116a8:	d05f      	beq.n	801176a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 80116aa:	1e5e      	subs	r6, r3, #1
 80116ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80116ae:	fb07 0706 	mla	r7, r7, r6, r0
 80116b2:	143f      	asrs	r7, r7, #16
 80116b4:	d450      	bmi.n	8011758 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 80116b6:	4577      	cmp	r7, lr
 80116b8:	da4e      	bge.n	8011758 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 80116ba:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80116bc:	fb07 2606 	mla	r6, r7, r6, r2
 80116c0:	1436      	asrs	r6, r6, #16
 80116c2:	d449      	bmi.n	8011758 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 80116c4:	9f00      	ldr	r7, [sp, #0]
 80116c6:	42be      	cmp	r6, r7
 80116c8:	da46      	bge.n	8011758 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 80116ca:	1ce6      	adds	r6, r4, #3
 80116cc:	4699      	mov	r9, r3
 80116ce:	f1b9 0f00 	cmp.w	r9, #0
 80116d2:	f106 0603 	add.w	r6, r6, #3
 80116d6:	dd43      	ble.n	8011760 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 80116d8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80116dc:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80116e0:	1417      	asrs	r7, r2, #16
 80116e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80116e6:	fb1b fb05 	smulbb	fp, fp, r5
 80116ea:	fb0e a707 	mla	r7, lr, r7, sl
 80116ee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80116f2:	eb08 0a07 	add.w	sl, r8, r7
 80116f6:	f818 7007 	ldrb.w	r7, [r8, r7]
 80116fa:	fb07 b70c 	mla	r7, r7, ip, fp
 80116fe:	b2bf      	uxth	r7, r7
 8011700:	f107 0b01 	add.w	fp, r7, #1
 8011704:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8011708:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801170c:	fb1b fb05 	smulbb	fp, fp, r5
 8011710:	123f      	asrs	r7, r7, #8
 8011712:	f806 7c06 	strb.w	r7, [r6, #-6]
 8011716:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801171a:	fb07 b70c 	mla	r7, r7, ip, fp
 801171e:	b2bf      	uxth	r7, r7
 8011720:	f107 0b01 	add.w	fp, r7, #1
 8011724:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8011728:	123f      	asrs	r7, r7, #8
 801172a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801172e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8011732:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8011736:	fb1a fa05 	smulbb	sl, sl, r5
 801173a:	fb07 a70c 	mla	r7, r7, ip, sl
 801173e:	b2bf      	uxth	r7, r7
 8011740:	f107 0a01 	add.w	sl, r7, #1
 8011744:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8011748:	123f      	asrs	r7, r7, #8
 801174a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801174e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011750:	4438      	add	r0, r7
 8011752:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8011754:	443a      	add	r2, r7
 8011756:	e7ba      	b.n	80116ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8011758:	2700      	movs	r7, #0
 801175a:	1bde      	subs	r6, r3, r7
 801175c:	2e00      	cmp	r6, #0
 801175e:	dc3f      	bgt.n	80117e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8011760:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011764:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011768:	441c      	add	r4, r3
 801176a:	2900      	cmp	r1, #0
 801176c:	f340 8088 	ble.w	8011880 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8011770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011774:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011776:	ee30 0a04 	vadd.f32	s0, s0, s8
 801177a:	3901      	subs	r1, #1
 801177c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011780:	eef0 6a62 	vmov.f32	s13, s5
 8011784:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011788:	ee31 1a05 	vadd.f32	s2, s2, s10
 801178c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011790:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8011794:	eef0 6a43 	vmov.f32	s13, s6
 8011798:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801179c:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80117a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80117a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80117a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80117ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80117b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80117b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80117b8:	ee12 2a90 	vmov	r2, s5
 80117bc:	eef0 2a47 	vmov.f32	s5, s14
 80117c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80117c4:	ee13 2a10 	vmov	r2, s6
 80117c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80117ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117cc:	eeb0 3a67 	vmov.f32	s6, s15
 80117d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80117d4:	9a01      	ldr	r2, [sp, #4]
 80117d6:	9310      	str	r3, [sp, #64]	; 0x40
 80117d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117da:	bf08      	it	eq
 80117dc:	4613      	moveq	r3, r2
 80117de:	e745      	b.n	801166c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 80117e0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80117e4:	d446      	bmi.n	8011874 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80117e6:	45f2      	cmp	sl, lr
 80117e8:	da44      	bge.n	8011874 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80117ea:	ea5f 4922 	movs.w	r9, r2, asr #16
 80117ee:	d441      	bmi.n	8011874 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80117f0:	9e00      	ldr	r6, [sp, #0]
 80117f2:	45b1      	cmp	r9, r6
 80117f4:	da3e      	bge.n	8011874 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80117f6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80117fa:	fb0e a909 	mla	r9, lr, r9, sl
 80117fe:	f814 b006 	ldrb.w	fp, [r4, r6]
 8011802:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8011806:	fb1b fb05 	smulbb	fp, fp, r5
 801180a:	eb08 0a09 	add.w	sl, r8, r9
 801180e:	f818 9009 	ldrb.w	r9, [r8, r9]
 8011812:	fb09 b90c 	mla	r9, r9, ip, fp
 8011816:	fa1f f989 	uxth.w	r9, r9
 801181a:	f109 0b01 	add.w	fp, r9, #1
 801181e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011822:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011826:	f804 9006 	strb.w	r9, [r4, r6]
 801182a:	4426      	add	r6, r4
 801182c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8011830:	f896 b001 	ldrb.w	fp, [r6, #1]
 8011834:	fb1b fb05 	smulbb	fp, fp, r5
 8011838:	fb09 b90c 	mla	r9, r9, ip, fp
 801183c:	fa1f f989 	uxth.w	r9, r9
 8011840:	f109 0b01 	add.w	fp, r9, #1
 8011844:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011848:	ea4f 2929 	mov.w	r9, r9, asr #8
 801184c:	f886 9001 	strb.w	r9, [r6, #1]
 8011850:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8011854:	f896 a002 	ldrb.w	sl, [r6, #2]
 8011858:	fb1a fa05 	smulbb	sl, sl, r5
 801185c:	fb09 a90c 	mla	r9, r9, ip, sl
 8011860:	fa1f f989 	uxth.w	r9, r9
 8011864:	f109 0a01 	add.w	sl, r9, #1
 8011868:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801186c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011870:	f886 9002 	strb.w	r9, [r6, #2]
 8011874:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011876:	3701      	adds	r7, #1
 8011878:	4430      	add	r0, r6
 801187a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801187c:	4432      	add	r2, r6
 801187e:	e76c      	b.n	801175a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8011880:	b003      	add	sp, #12
 8011882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011886 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8011886:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801188a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801188c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011890:	9201      	str	r2, [sp, #4]
 8011892:	6868      	ldr	r0, [r5, #4]
 8011894:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8011898:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801189c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80118a0:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 80118a4:	fb00 2404 	mla	r4, r0, r4, r2
 80118a8:	682a      	ldr	r2, [r5, #0]
 80118aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80118ae:	4414      	add	r4, r2
 80118b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80118b2:	f8d2 9000 	ldr.w	r9, [r2]
 80118b6:	2900      	cmp	r1, #0
 80118b8:	dc03      	bgt.n	80118c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80118ba:	9a01      	ldr	r2, [sp, #4]
 80118bc:	2a00      	cmp	r2, #0
 80118be:	f340 80a8 	ble.w	8011a12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80118c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80118c4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80118c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118ca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	dd0c      	ble.n	80118ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80118d2:	1405      	asrs	r5, r0, #16
 80118d4:	d405      	bmi.n	80118e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80118d6:	4565      	cmp	r5, ip
 80118d8:	da03      	bge.n	80118e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80118da:	1415      	asrs	r5, r2, #16
 80118dc:	d401      	bmi.n	80118e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80118de:	4575      	cmp	r5, lr
 80118e0:	db05      	blt.n	80118ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80118e2:	4438      	add	r0, r7
 80118e4:	4432      	add	r2, r6
 80118e6:	3b01      	subs	r3, #1
 80118e8:	3403      	adds	r4, #3
 80118ea:	e7f0      	b.n	80118ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 80118ec:	d03a      	beq.n	8011964 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80118ee:	1e5d      	subs	r5, r3, #1
 80118f0:	fb07 0805 	mla	r8, r7, r5, r0
 80118f4:	ea5f 4828 	movs.w	r8, r8, asr #16
 80118f8:	d429      	bmi.n	801194e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 80118fa:	45e0      	cmp	r8, ip
 80118fc:	da27      	bge.n	801194e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 80118fe:	fb06 2505 	mla	r5, r6, r5, r2
 8011902:	142d      	asrs	r5, r5, #16
 8011904:	d423      	bmi.n	801194e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8011906:	4575      	cmp	r5, lr
 8011908:	da21      	bge.n	801194e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801190a:	f104 0803 	add.w	r8, r4, #3
 801190e:	469a      	mov	sl, r3
 8011910:	f1ba 0f00 	cmp.w	sl, #0
 8011914:	f108 0803 	add.w	r8, r8, #3
 8011918:	dd1f      	ble.n	801195a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801191a:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801191e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011922:	1415      	asrs	r5, r2, #16
 8011924:	4438      	add	r0, r7
 8011926:	4432      	add	r2, r6
 8011928:	fb0c b505 	mla	r5, ip, r5, fp
 801192c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011930:	eb09 0b05 	add.w	fp, r9, r5
 8011934:	f819 5005 	ldrb.w	r5, [r9, r5]
 8011938:	f808 5c06 	strb.w	r5, [r8, #-6]
 801193c:	f89b 5001 	ldrb.w	r5, [fp, #1]
 8011940:	f808 5c05 	strb.w	r5, [r8, #-5]
 8011944:	f89b 5002 	ldrb.w	r5, [fp, #2]
 8011948:	f808 5c04 	strb.w	r5, [r8, #-4]
 801194c:	e7e0      	b.n	8011910 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801194e:	2500      	movs	r5, #0
 8011950:	eba3 0805 	sub.w	r8, r3, r5
 8011954:	f1b8 0f00 	cmp.w	r8, #0
 8011958:	dc38      	bgt.n	80119cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801195a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801195e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011962:	441c      	add	r4, r3
 8011964:	2900      	cmp	r1, #0
 8011966:	dd54      	ble.n	8011a12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8011968:	ee30 0a04 	vadd.f32	s0, s0, s8
 801196c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801196e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011972:	3901      	subs	r1, #1
 8011974:	eeb0 6a62 	vmov.f32	s12, s5
 8011978:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801197c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011980:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011984:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8011988:	eeb0 6a43 	vmov.f32	s12, s6
 801198c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011990:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8011994:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011998:	ee61 7a27 	vmul.f32	s15, s2, s15
 801199c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80119a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80119a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80119a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80119ac:	ee12 2a90 	vmov	r2, s5
 80119b0:	eef0 2a47 	vmov.f32	s5, s14
 80119b4:	fb92 f7f3 	sdiv	r7, r2, r3
 80119b8:	ee13 2a10 	vmov	r2, s6
 80119bc:	eeb0 3a67 	vmov.f32	s6, s15
 80119c0:	fb92 f6f3 	sdiv	r6, r2, r3
 80119c4:	9a01      	ldr	r2, [sp, #4]
 80119c6:	bf08      	it	eq
 80119c8:	4613      	moveq	r3, r2
 80119ca:	e774      	b.n	80118b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 80119cc:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80119d0:	d41b      	bmi.n	8011a0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80119d2:	45e2      	cmp	sl, ip
 80119d4:	da19      	bge.n	8011a0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80119d6:	ea5f 4822 	movs.w	r8, r2, asr #16
 80119da:	d416      	bmi.n	8011a0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80119dc:	45f0      	cmp	r8, lr
 80119de:	da14      	bge.n	8011a0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80119e0:	fb0c a808 	mla	r8, ip, r8, sl
 80119e4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80119e8:	f819 b008 	ldrb.w	fp, [r9, r8]
 80119ec:	eb09 0a08 	add.w	sl, r9, r8
 80119f0:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80119f4:	f804 b008 	strb.w	fp, [r4, r8]
 80119f8:	44a0      	add	r8, r4
 80119fa:	f89a b001 	ldrb.w	fp, [sl, #1]
 80119fe:	f888 b001 	strb.w	fp, [r8, #1]
 8011a02:	f89a a002 	ldrb.w	sl, [sl, #2]
 8011a06:	f888 a002 	strb.w	sl, [r8, #2]
 8011a0a:	4438      	add	r0, r7
 8011a0c:	4432      	add	r2, r6
 8011a0e:	3501      	adds	r5, #1
 8011a10:	e79e      	b.n	8011950 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8011a12:	b003      	add	sp, #12
 8011a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a18 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8011a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a1c:	b085      	sub	sp, #20
 8011a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011a24:	9202      	str	r2, [sp, #8]
 8011a26:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011a2a:	6860      	ldr	r0, [r4, #4]
 8011a2c:	9203      	str	r2, [sp, #12]
 8011a2e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8011a32:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8011a36:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8011a3a:	fb00 2505 	mla	r5, r0, r5, r2
 8011a3e:	6822      	ldr	r2, [r4, #0]
 8011a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a44:	4415      	add	r5, r2
 8011a46:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011a48:	6812      	ldr	r2, [r2, #0]
 8011a4a:	9201      	str	r2, [sp, #4]
 8011a4c:	2900      	cmp	r1, #0
 8011a4e:	dc03      	bgt.n	8011a58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8011a50:	9a02      	ldr	r2, [sp, #8]
 8011a52:	2a00      	cmp	r2, #0
 8011a54:	f340 811c 	ble.w	8011c90 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8011a58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a5a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011a5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011a60:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	dd0e      	ble.n	8011a86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8011a68:	1422      	asrs	r2, r4, #16
 8011a6a:	d405      	bmi.n	8011a78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8011a6c:	4572      	cmp	r2, lr
 8011a6e:	da03      	bge.n	8011a78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8011a70:	1402      	asrs	r2, r0, #16
 8011a72:	d401      	bmi.n	8011a78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8011a74:	4542      	cmp	r2, r8
 8011a76:	db07      	blt.n	8011a88 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8011a78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a7a:	3b01      	subs	r3, #1
 8011a7c:	3503      	adds	r5, #3
 8011a7e:	4414      	add	r4, r2
 8011a80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a82:	4410      	add	r0, r2
 8011a84:	e7ee      	b.n	8011a64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8011a86:	d072      	beq.n	8011b6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 8011a88:	1e5a      	subs	r2, r3, #1
 8011a8a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011a8c:	fb06 4602 	mla	r6, r6, r2, r4
 8011a90:	1436      	asrs	r6, r6, #16
 8011a92:	d461      	bmi.n	8011b58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8011a94:	4576      	cmp	r6, lr
 8011a96:	da5f      	bge.n	8011b58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8011a98:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011a9a:	fb06 0202 	mla	r2, r6, r2, r0
 8011a9e:	1412      	asrs	r2, r2, #16
 8011aa0:	d45a      	bmi.n	8011b58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8011aa2:	4542      	cmp	r2, r8
 8011aa4:	da58      	bge.n	8011b58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8011aa6:	1cef      	adds	r7, r5, #3
 8011aa8:	4699      	mov	r9, r3
 8011aaa:	f1b9 0f00 	cmp.w	r9, #0
 8011aae:	dd59      	ble.n	8011b64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 8011ab0:	1426      	asrs	r6, r4, #16
 8011ab2:	1402      	asrs	r2, r0, #16
 8011ab4:	fb0e 6202 	mla	r2, lr, r2, r6
 8011ab8:	9e01      	ldr	r6, [sp, #4]
 8011aba:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8011abe:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8011ac2:	d041      	beq.n	8011b48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 8011ac4:	9a03      	ldr	r2, [sp, #12]
 8011ac6:	fa5f fb86 	uxtb.w	fp, r6
 8011aca:	fb02 fc0c 	mul.w	ip, r2, ip
 8011ace:	f10c 0201 	add.w	r2, ip, #1
 8011ad2:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8011ad6:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8011ada:	1212      	asrs	r2, r2, #8
 8011adc:	fa1f fa82 	uxth.w	sl, r2
 8011ae0:	43d2      	mvns	r2, r2
 8011ae2:	fb1b fb0a 	smulbb	fp, fp, sl
 8011ae6:	b2d2      	uxtb	r2, r2
 8011ae8:	fb0c bc02 	mla	ip, ip, r2, fp
 8011aec:	fa1f fc8c 	uxth.w	ip, ip
 8011af0:	f10c 0b01 	add.w	fp, ip, #1
 8011af4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8011af8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8011afc:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8011b00:	fb1b fb0a 	smulbb	fp, fp, sl
 8011b04:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8011b08:	fb16 fa0a 	smulbb	sl, r6, sl
 8011b0c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8011b10:	f807 cc03 	strb.w	ip, [r7, #-3]
 8011b14:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 8011b18:	fb06 aa02 	mla	sl, r6, r2, sl
 8011b1c:	fb0c bc02 	mla	ip, ip, r2, fp
 8011b20:	fa1f fa8a 	uxth.w	sl, sl
 8011b24:	fa1f fc8c 	uxth.w	ip, ip
 8011b28:	f10a 0601 	add.w	r6, sl, #1
 8011b2c:	f10c 0b01 	add.w	fp, ip, #1
 8011b30:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8011b34:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8011b38:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011b3c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8011b40:	f807 ac01 	strb.w	sl, [r7, #-1]
 8011b44:	f807 cc02 	strb.w	ip, [r7, #-2]
 8011b48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011b4a:	3703      	adds	r7, #3
 8011b4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8011b50:	4414      	add	r4, r2
 8011b52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011b54:	4410      	add	r0, r2
 8011b56:	e7a8      	b.n	8011aaa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8011b58:	f04f 0c00 	mov.w	ip, #0
 8011b5c:	eba3 020c 	sub.w	r2, r3, ip
 8011b60:	2a00      	cmp	r2, #0
 8011b62:	dc3d      	bgt.n	8011be0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 8011b64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011b68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011b6c:	441d      	add	r5, r3
 8011b6e:	2900      	cmp	r1, #0
 8011b70:	f340 808e 	ble.w	8011c90 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8011b74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011b7e:	3901      	subs	r1, #1
 8011b80:	eeb0 6a62 	vmov.f32	s12, s5
 8011b84:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011b88:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011b8c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011b90:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011b94:	eeb0 6a43 	vmov.f32	s12, s6
 8011b98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011b9c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8011ba0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011ba4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011ba8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011bac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011bb0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011bb4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011bb8:	ee12 2a90 	vmov	r2, s5
 8011bbc:	eef0 2a47 	vmov.f32	s5, s14
 8011bc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8011bc4:	ee13 2a10 	vmov	r2, s6
 8011bc8:	9311      	str	r3, [sp, #68]	; 0x44
 8011bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011bcc:	eeb0 3a67 	vmov.f32	s6, s15
 8011bd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8011bd4:	9a02      	ldr	r2, [sp, #8]
 8011bd6:	9312      	str	r3, [sp, #72]	; 0x48
 8011bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011bda:	bf08      	it	eq
 8011bdc:	4613      	moveq	r3, r2
 8011bde:	e735      	b.n	8011a4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 8011be0:	1426      	asrs	r6, r4, #16
 8011be2:	d44e      	bmi.n	8011c82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8011be4:	4576      	cmp	r6, lr
 8011be6:	da4c      	bge.n	8011c82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8011be8:	1402      	asrs	r2, r0, #16
 8011bea:	d44a      	bmi.n	8011c82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8011bec:	4542      	cmp	r2, r8
 8011bee:	da48      	bge.n	8011c82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8011bf0:	fb0e 6202 	mla	r2, lr, r2, r6
 8011bf4:	9e01      	ldr	r6, [sp, #4]
 8011bf6:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8011bfa:	0e3a      	lsrs	r2, r7, #24
 8011bfc:	d041      	beq.n	8011c82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8011bfe:	9e03      	ldr	r6, [sp, #12]
 8011c00:	fa5f fb87 	uxtb.w	fp, r7
 8011c04:	4372      	muls	r2, r6
 8011c06:	1c56      	adds	r6, r2, #1
 8011c08:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8011c0c:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 8011c10:	1212      	asrs	r2, r2, #8
 8011c12:	f815 9006 	ldrb.w	r9, [r5, r6]
 8011c16:	fa1f fa82 	uxth.w	sl, r2
 8011c1a:	43d2      	mvns	r2, r2
 8011c1c:	fb1b fb0a 	smulbb	fp, fp, sl
 8011c20:	b2d2      	uxtb	r2, r2
 8011c22:	fb09 b902 	mla	r9, r9, r2, fp
 8011c26:	fa1f f989 	uxth.w	r9, r9
 8011c2a:	f109 0b01 	add.w	fp, r9, #1
 8011c2e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011c32:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8011c36:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8011c3a:	fb1b fb0a 	smulbb	fp, fp, sl
 8011c3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011c42:	fb17 fa0a 	smulbb	sl, r7, sl
 8011c46:	f805 9006 	strb.w	r9, [r5, r6]
 8011c4a:	442e      	add	r6, r5
 8011c4c:	78b7      	ldrb	r7, [r6, #2]
 8011c4e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8011c52:	fb07 aa02 	mla	sl, r7, r2, sl
 8011c56:	fb09 b902 	mla	r9, r9, r2, fp
 8011c5a:	fa1f fa8a 	uxth.w	sl, sl
 8011c5e:	fa1f f989 	uxth.w	r9, r9
 8011c62:	f10a 0701 	add.w	r7, sl, #1
 8011c66:	f109 0b01 	add.w	fp, r9, #1
 8011c6a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011c6e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011c72:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011c76:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011c7a:	f886 a002 	strb.w	sl, [r6, #2]
 8011c7e:	f886 9001 	strb.w	r9, [r6, #1]
 8011c82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011c84:	f10c 0c01 	add.w	ip, ip, #1
 8011c88:	4414      	add	r4, r2
 8011c8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011c8c:	4410      	add	r0, r2
 8011c8e:	e765      	b.n	8011b5c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8011c90:	b005      	add	sp, #20
 8011c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c96 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8011c96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c9a:	b085      	sub	sp, #20
 8011c9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011ca0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011ca2:	9203      	str	r2, [sp, #12]
 8011ca4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8011ca8:	6860      	ldr	r0, [r4, #4]
 8011caa:	9201      	str	r2, [sp, #4]
 8011cac:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8011cb0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8011cb4:	fb00 2505 	mla	r5, r0, r5, r2
 8011cb8:	6822      	ldr	r2, [r4, #0]
 8011cba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011cbe:	4415      	add	r5, r2
 8011cc0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011cc2:	6812      	ldr	r2, [r2, #0]
 8011cc4:	9202      	str	r2, [sp, #8]
 8011cc6:	2900      	cmp	r1, #0
 8011cc8:	dc03      	bgt.n	8011cd2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8011cca:	9a03      	ldr	r2, [sp, #12]
 8011ccc:	2a00      	cmp	r2, #0
 8011cce:	f340 8122 	ble.w	8011f16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 8011cd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011cd4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011cd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011cda:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	dd0f      	ble.n	8011d02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8011ce2:	1422      	asrs	r2, r4, #16
 8011ce4:	d406      	bmi.n	8011cf4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8011ce6:	4572      	cmp	r2, lr
 8011ce8:	da04      	bge.n	8011cf4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8011cea:	1402      	asrs	r2, r0, #16
 8011cec:	d402      	bmi.n	8011cf4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8011cee:	9e01      	ldr	r6, [sp, #4]
 8011cf0:	42b2      	cmp	r2, r6
 8011cf2:	db07      	blt.n	8011d04 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8011cf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011cf6:	3b01      	subs	r3, #1
 8011cf8:	3503      	adds	r5, #3
 8011cfa:	4414      	add	r4, r2
 8011cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011cfe:	4410      	add	r0, r2
 8011d00:	e7ed      	b.n	8011cde <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8011d02:	d06e      	beq.n	8011de2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 8011d04:	1e5a      	subs	r2, r3, #1
 8011d06:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011d08:	fb06 4602 	mla	r6, r6, r2, r4
 8011d0c:	1436      	asrs	r6, r6, #16
 8011d0e:	d45d      	bmi.n	8011dcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8011d10:	4576      	cmp	r6, lr
 8011d12:	da5b      	bge.n	8011dcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8011d14:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011d16:	fb06 0202 	mla	r2, r6, r2, r0
 8011d1a:	1412      	asrs	r2, r2, #16
 8011d1c:	d456      	bmi.n	8011dcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8011d1e:	9e01      	ldr	r6, [sp, #4]
 8011d20:	42b2      	cmp	r2, r6
 8011d22:	da53      	bge.n	8011dcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8011d24:	1cee      	adds	r6, r5, #3
 8011d26:	469a      	mov	sl, r3
 8011d28:	f1ba 0f00 	cmp.w	sl, #0
 8011d2c:	dd54      	ble.n	8011dd8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8011d2e:	1427      	asrs	r7, r4, #16
 8011d30:	1402      	asrs	r2, r0, #16
 8011d32:	fb0e 7202 	mla	r2, lr, r2, r7
 8011d36:	9f02      	ldr	r7, [sp, #8]
 8011d38:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8011d3c:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 8011d40:	d03c      	beq.n	8011dbc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 8011d42:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8011d46:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8011d4a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8011d4e:	fa5f f28c 	uxtb.w	r2, ip
 8011d52:	b2ff      	uxtb	r7, r7
 8011d54:	f000 80d8 	beq.w	8011f08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8011d58:	fa1f f882 	uxth.w	r8, r2
 8011d5c:	43d2      	mvns	r2, r2
 8011d5e:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 8011d62:	fb17 f708 	smulbb	r7, r7, r8
 8011d66:	b2d2      	uxtb	r2, r2
 8011d68:	fb19 f908 	smulbb	r9, r9, r8
 8011d6c:	fb0c 7702 	mla	r7, ip, r2, r7
 8011d70:	fb1b f808 	smulbb	r8, fp, r8
 8011d74:	b2bf      	uxth	r7, r7
 8011d76:	f107 0c01 	add.w	ip, r7, #1
 8011d7a:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8011d7e:	123f      	asrs	r7, r7, #8
 8011d80:	f806 7c03 	strb.w	r7, [r6, #-3]
 8011d84:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8011d88:	fb07 9902 	mla	r9, r7, r2, r9
 8011d8c:	fa1f f989 	uxth.w	r9, r9
 8011d90:	f109 0701 	add.w	r7, r9, #1
 8011d94:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8011d98:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8011d9c:	fb07 8802 	mla	r8, r7, r2, r8
 8011da0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011da4:	fa1f f888 	uxth.w	r8, r8
 8011da8:	f806 9c02 	strb.w	r9, [r6, #-2]
 8011dac:	f108 0201 	add.w	r2, r8, #1
 8011db0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8011db4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011db8:	f806 8c01 	strb.w	r8, [r6, #-1]
 8011dbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011dbe:	3603      	adds	r6, #3
 8011dc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011dc4:	4414      	add	r4, r2
 8011dc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011dc8:	4410      	add	r0, r2
 8011dca:	e7ad      	b.n	8011d28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8011dcc:	f04f 0c00 	mov.w	ip, #0
 8011dd0:	eba3 020c 	sub.w	r2, r3, ip
 8011dd4:	2a00      	cmp	r2, #0
 8011dd6:	dc3d      	bgt.n	8011e54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8011dd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011ddc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011de0:	441d      	add	r5, r3
 8011de2:	2900      	cmp	r1, #0
 8011de4:	f340 8097 	ble.w	8011f16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 8011de8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011dee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011df2:	3901      	subs	r1, #1
 8011df4:	eeb0 6a62 	vmov.f32	s12, s5
 8011df8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011dfc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011e00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011e04:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011e08:	eeb0 6a43 	vmov.f32	s12, s6
 8011e0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011e10:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8011e14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011e18:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011e1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011e20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011e24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011e28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011e2c:	ee12 2a90 	vmov	r2, s5
 8011e30:	eef0 2a47 	vmov.f32	s5, s14
 8011e34:	fb92 f3f3 	sdiv	r3, r2, r3
 8011e38:	ee13 2a10 	vmov	r2, s6
 8011e3c:	9311      	str	r3, [sp, #68]	; 0x44
 8011e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e40:	eeb0 3a67 	vmov.f32	s6, s15
 8011e44:	fb92 f3f3 	sdiv	r3, r2, r3
 8011e48:	9a03      	ldr	r2, [sp, #12]
 8011e4a:	9312      	str	r3, [sp, #72]	; 0x48
 8011e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e4e:	bf08      	it	eq
 8011e50:	4613      	moveq	r3, r2
 8011e52:	e738      	b.n	8011cc6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8011e54:	1426      	asrs	r6, r4, #16
 8011e56:	d448      	bmi.n	8011eea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8011e58:	4576      	cmp	r6, lr
 8011e5a:	da46      	bge.n	8011eea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8011e5c:	1402      	asrs	r2, r0, #16
 8011e5e:	d444      	bmi.n	8011eea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8011e60:	9f01      	ldr	r7, [sp, #4]
 8011e62:	42ba      	cmp	r2, r7
 8011e64:	da41      	bge.n	8011eea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8011e66:	fb0e 6202 	mla	r2, lr, r2, r6
 8011e6a:	9e02      	ldr	r6, [sp, #8]
 8011e6c:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8011e70:	0e3a      	lsrs	r2, r7, #24
 8011e72:	d03a      	beq.n	8011eea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8011e74:	2aff      	cmp	r2, #255	; 0xff
 8011e76:	b2d6      	uxtb	r6, r2
 8011e78:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8011e7c:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8011e80:	ea4f 024c 	mov.w	r2, ip, lsl #1
 8011e84:	b2ff      	uxtb	r7, r7
 8011e86:	d037      	beq.n	8011ef8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 8011e88:	fa1f f986 	uxth.w	r9, r6
 8011e8c:	4462      	add	r2, ip
 8011e8e:	43f6      	mvns	r6, r6
 8011e90:	f815 8002 	ldrb.w	r8, [r5, r2]
 8011e94:	fb17 f709 	smulbb	r7, r7, r9
 8011e98:	fb1a fa09 	smulbb	sl, sl, r9
 8011e9c:	b2f6      	uxtb	r6, r6
 8011e9e:	fb1b f909 	smulbb	r9, fp, r9
 8011ea2:	fb08 7706 	mla	r7, r8, r6, r7
 8011ea6:	b2bf      	uxth	r7, r7
 8011ea8:	f107 0801 	add.w	r8, r7, #1
 8011eac:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8011eb0:	123f      	asrs	r7, r7, #8
 8011eb2:	54af      	strb	r7, [r5, r2]
 8011eb4:	442a      	add	r2, r5
 8011eb6:	7857      	ldrb	r7, [r2, #1]
 8011eb8:	fb07 aa06 	mla	sl, r7, r6, sl
 8011ebc:	fa1f fa8a 	uxth.w	sl, sl
 8011ec0:	f10a 0701 	add.w	r7, sl, #1
 8011ec4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011ec8:	7897      	ldrb	r7, [r2, #2]
 8011eca:	fb07 9906 	mla	r9, r7, r6, r9
 8011ece:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011ed2:	fa1f f989 	uxth.w	r9, r9
 8011ed6:	f882 a001 	strb.w	sl, [r2, #1]
 8011eda:	f109 0601 	add.w	r6, r9, #1
 8011ede:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8011ee2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011ee6:	f882 9002 	strb.w	r9, [r2, #2]
 8011eea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011eec:	f10c 0c01 	add.w	ip, ip, #1
 8011ef0:	4414      	add	r4, r2
 8011ef2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011ef4:	4410      	add	r0, r2
 8011ef6:	e76b      	b.n	8011dd0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 8011ef8:	4462      	add	r2, ip
 8011efa:	54af      	strb	r7, [r5, r2]
 8011efc:	442a      	add	r2, r5
 8011efe:	f882 a001 	strb.w	sl, [r2, #1]
 8011f02:	f882 b002 	strb.w	fp, [r2, #2]
 8011f06:	e7f0      	b.n	8011eea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8011f08:	f806 7c03 	strb.w	r7, [r6, #-3]
 8011f0c:	f806 9c02 	strb.w	r9, [r6, #-2]
 8011f10:	f806 bc01 	strb.w	fp, [r6, #-1]
 8011f14:	e752      	b.n	8011dbc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 8011f16:	b005      	add	sp, #20
 8011f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8011f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f20:	b087      	sub	sp, #28
 8011f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011f26:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011f28:	9204      	str	r2, [sp, #16]
 8011f2a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8011f2e:	6860      	ldr	r0, [r4, #4]
 8011f30:	9205      	str	r2, [sp, #20]
 8011f32:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8011f36:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8011f3a:	9101      	str	r1, [sp, #4]
 8011f3c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8011f40:	fb00 2505 	mla	r5, r0, r5, r2
 8011f44:	6822      	ldr	r2, [r4, #0]
 8011f46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f4a:	4415      	add	r5, r2
 8011f4c:	f10e 0201 	add.w	r2, lr, #1
 8011f50:	f022 0201 	bic.w	r2, r2, #1
 8011f54:	9202      	str	r2, [sp, #8]
 8011f56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011f58:	6812      	ldr	r2, [r2, #0]
 8011f5a:	9203      	str	r2, [sp, #12]
 8011f5c:	9a01      	ldr	r2, [sp, #4]
 8011f5e:	2a00      	cmp	r2, #0
 8011f60:	dc03      	bgt.n	8011f6a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8011f62:	9a04      	ldr	r2, [sp, #16]
 8011f64:	2a00      	cmp	r2, #0
 8011f66:	f340 8132 	ble.w	80121ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 8011f6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011f6c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011f70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011f72:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	dd0e      	ble.n	8011f98 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8011f7a:	1422      	asrs	r2, r4, #16
 8011f7c:	d405      	bmi.n	8011f8a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8011f7e:	4596      	cmp	lr, r2
 8011f80:	dd03      	ble.n	8011f8a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8011f82:	1402      	asrs	r2, r0, #16
 8011f84:	d401      	bmi.n	8011f8a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8011f86:	4542      	cmp	r2, r8
 8011f88:	db07      	blt.n	8011f9a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8011f8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011f8c:	3b01      	subs	r3, #1
 8011f8e:	3503      	adds	r5, #3
 8011f90:	4414      	add	r4, r2
 8011f92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f94:	4410      	add	r0, r2
 8011f96:	e7ee      	b.n	8011f76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 8011f98:	d010      	beq.n	8011fbc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8011f9a:	1e5a      	subs	r2, r3, #1
 8011f9c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011f9e:	fb06 4602 	mla	r6, r6, r2, r4
 8011fa2:	1436      	asrs	r6, r6, #16
 8011fa4:	d546      	bpl.n	8012034 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8011fa6:	4699      	mov	r9, r3
 8011fa8:	462e      	mov	r6, r5
 8011faa:	f1b9 0f00 	cmp.w	r9, #0
 8011fae:	f300 80ac 	bgt.w	801210a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 8011fb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011fb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011fba:	441d      	add	r5, r3
 8011fbc:	9b01      	ldr	r3, [sp, #4]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	f340 8105 	ble.w	80121ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 8011fc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011fc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011fca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011fce:	eeb0 6a62 	vmov.f32	s12, s5
 8011fd2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011fd6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011fda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011fde:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8011fe2:	eeb0 6a43 	vmov.f32	s12, s6
 8011fe6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011fea:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8011fee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011ff2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011ff6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011ffa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011ffe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012002:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012006:	ee12 2a90 	vmov	r2, s5
 801200a:	eef0 2a47 	vmov.f32	s5, s14
 801200e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012012:	ee13 2a10 	vmov	r2, s6
 8012016:	9313      	str	r3, [sp, #76]	; 0x4c
 8012018:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801201a:	eeb0 3a67 	vmov.f32	s6, s15
 801201e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012022:	9314      	str	r3, [sp, #80]	; 0x50
 8012024:	9b01      	ldr	r3, [sp, #4]
 8012026:	9a04      	ldr	r2, [sp, #16]
 8012028:	3b01      	subs	r3, #1
 801202a:	9301      	str	r3, [sp, #4]
 801202c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801202e:	bf08      	it	eq
 8012030:	4613      	moveq	r3, r2
 8012032:	e793      	b.n	8011f5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8012034:	45b6      	cmp	lr, r6
 8012036:	ddb6      	ble.n	8011fa6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012038:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801203a:	fb06 0202 	mla	r2, r6, r2, r0
 801203e:	1412      	asrs	r2, r2, #16
 8012040:	d4b1      	bmi.n	8011fa6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012042:	4542      	cmp	r2, r8
 8012044:	daaf      	bge.n	8011fa6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012046:	1cee      	adds	r6, r5, #3
 8012048:	4699      	mov	r9, r3
 801204a:	f1b9 0f00 	cmp.w	r9, #0
 801204e:	ddb0      	ble.n	8011fb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8012050:	1422      	asrs	r2, r4, #16
 8012052:	9902      	ldr	r1, [sp, #8]
 8012054:	1407      	asrs	r7, r0, #16
 8012056:	fb01 2707 	mla	r7, r1, r7, r2
 801205a:	9903      	ldr	r1, [sp, #12]
 801205c:	087a      	lsrs	r2, r7, #1
 801205e:	5c8a      	ldrb	r2, [r1, r2]
 8012060:	07f9      	lsls	r1, r7, #31
 8012062:	bf54      	ite	pl
 8012064:	f002 020f 	andpl.w	r2, r2, #15
 8012068:	1112      	asrmi	r2, r2, #4
 801206a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801206e:	b2d2      	uxtb	r2, r2
 8012070:	2a00      	cmp	r2, #0
 8012072:	d042      	beq.n	80120fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 8012074:	4957      	ldr	r1, [pc, #348]	; (80121d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8012076:	680f      	ldr	r7, [r1, #0]
 8012078:	9905      	ldr	r1, [sp, #20]
 801207a:	fa5f fb87 	uxtb.w	fp, r7
 801207e:	434a      	muls	r2, r1
 8012080:	f102 0c01 	add.w	ip, r2, #1
 8012084:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8012088:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801208c:	1212      	asrs	r2, r2, #8
 801208e:	fa1f fa82 	uxth.w	sl, r2
 8012092:	43d2      	mvns	r2, r2
 8012094:	fb1b fb0a 	smulbb	fp, fp, sl
 8012098:	b2d2      	uxtb	r2, r2
 801209a:	fb0c bc02 	mla	ip, ip, r2, fp
 801209e:	fa1f fc8c 	uxth.w	ip, ip
 80120a2:	f10c 0b01 	add.w	fp, ip, #1
 80120a6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80120aa:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80120ae:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80120b2:	fb1b fb0a 	smulbb	fp, fp, sl
 80120b6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80120ba:	fb17 fa0a 	smulbb	sl, r7, sl
 80120be:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80120c2:	f806 cc03 	strb.w	ip, [r6, #-3]
 80120c6:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 80120ca:	fb07 aa02 	mla	sl, r7, r2, sl
 80120ce:	fb0c bc02 	mla	ip, ip, r2, fp
 80120d2:	fa1f fa8a 	uxth.w	sl, sl
 80120d6:	fa1f fc8c 	uxth.w	ip, ip
 80120da:	f10a 0701 	add.w	r7, sl, #1
 80120de:	f10c 0b01 	add.w	fp, ip, #1
 80120e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80120e6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80120ea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80120ee:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80120f2:	f806 ac01 	strb.w	sl, [r6, #-1]
 80120f6:	f806 cc02 	strb.w	ip, [r6, #-2]
 80120fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80120fc:	3603      	adds	r6, #3
 80120fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8012102:	4414      	add	r4, r2
 8012104:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012106:	4410      	add	r0, r2
 8012108:	e79f      	b.n	801204a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801210a:	1422      	asrs	r2, r4, #16
 801210c:	d457      	bmi.n	80121be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801210e:	4596      	cmp	lr, r2
 8012110:	dd55      	ble.n	80121be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8012112:	1407      	asrs	r7, r0, #16
 8012114:	d453      	bmi.n	80121be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8012116:	4547      	cmp	r7, r8
 8012118:	da51      	bge.n	80121be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801211a:	9902      	ldr	r1, [sp, #8]
 801211c:	fb07 2701 	mla	r7, r7, r1, r2
 8012120:	9903      	ldr	r1, [sp, #12]
 8012122:	087a      	lsrs	r2, r7, #1
 8012124:	07ff      	lsls	r7, r7, #31
 8012126:	5c8a      	ldrb	r2, [r1, r2]
 8012128:	bf54      	ite	pl
 801212a:	f002 020f 	andpl.w	r2, r2, #15
 801212e:	1112      	asrmi	r2, r2, #4
 8012130:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8012134:	b2d2      	uxtb	r2, r2
 8012136:	2a00      	cmp	r2, #0
 8012138:	d041      	beq.n	80121be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801213a:	4926      	ldr	r1, [pc, #152]	; (80121d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801213c:	680f      	ldr	r7, [r1, #0]
 801213e:	9905      	ldr	r1, [sp, #20]
 8012140:	fa5f fb87 	uxtb.w	fp, r7
 8012144:	434a      	muls	r2, r1
 8012146:	f102 0c01 	add.w	ip, r2, #1
 801214a:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801214e:	f896 c000 	ldrb.w	ip, [r6]
 8012152:	1212      	asrs	r2, r2, #8
 8012154:	fa1f fa82 	uxth.w	sl, r2
 8012158:	43d2      	mvns	r2, r2
 801215a:	fb1b fb0a 	smulbb	fp, fp, sl
 801215e:	b2d2      	uxtb	r2, r2
 8012160:	fb0c bc02 	mla	ip, ip, r2, fp
 8012164:	fa1f fc8c 	uxth.w	ip, ip
 8012168:	f10c 0b01 	add.w	fp, ip, #1
 801216c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8012170:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8012174:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8012178:	fb1b fb0a 	smulbb	fp, fp, sl
 801217c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8012180:	fb17 fa0a 	smulbb	sl, r7, sl
 8012184:	78b7      	ldrb	r7, [r6, #2]
 8012186:	f886 c000 	strb.w	ip, [r6]
 801218a:	f896 c001 	ldrb.w	ip, [r6, #1]
 801218e:	fb07 aa02 	mla	sl, r7, r2, sl
 8012192:	fb0c bc02 	mla	ip, ip, r2, fp
 8012196:	fa1f fa8a 	uxth.w	sl, sl
 801219a:	fa1f fc8c 	uxth.w	ip, ip
 801219e:	f10a 0701 	add.w	r7, sl, #1
 80121a2:	f10c 0b01 	add.w	fp, ip, #1
 80121a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80121aa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80121ae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80121b2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80121b6:	f886 a002 	strb.w	sl, [r6, #2]
 80121ba:	f886 c001 	strb.w	ip, [r6, #1]
 80121be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80121c0:	3603      	adds	r6, #3
 80121c2:	f109 39ff 	add.w	r9, r9, #4294967295
 80121c6:	4414      	add	r4, r2
 80121c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80121ca:	4410      	add	r0, r2
 80121cc:	e6ed      	b.n	8011faa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80121ce:	b007      	add	sp, #28
 80121d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d4:	20001108 	.word	0x20001108

080121d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80121d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121dc:	b087      	sub	sp, #28
 80121de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80121e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80121e4:	9205      	str	r2, [sp, #20]
 80121e6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80121ea:	6860      	ldr	r0, [r4, #4]
 80121ec:	9202      	str	r2, [sp, #8]
 80121ee:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 80121f2:	9101      	str	r1, [sp, #4]
 80121f4:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 80121f8:	fb00 2606 	mla	r6, r0, r6, r2
 80121fc:	6822      	ldr	r2, [r4, #0]
 80121fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012202:	4416      	add	r6, r2
 8012204:	f108 0201 	add.w	r2, r8, #1
 8012208:	f022 0201 	bic.w	r2, r2, #1
 801220c:	9203      	str	r2, [sp, #12]
 801220e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012210:	6812      	ldr	r2, [r2, #0]
 8012212:	9204      	str	r2, [sp, #16]
 8012214:	9a01      	ldr	r2, [sp, #4]
 8012216:	2a00      	cmp	r2, #0
 8012218:	dc03      	bgt.n	8012222 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801221a:	9a05      	ldr	r2, [sp, #20]
 801221c:	2a00      	cmp	r2, #0
 801221e:	f340 813a 	ble.w	8012496 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8012222:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012224:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8012228:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801222a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801222e:	2b00      	cmp	r3, #0
 8012230:	dd0f      	ble.n	8012252 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8012232:	142a      	asrs	r2, r5, #16
 8012234:	d406      	bmi.n	8012244 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8012236:	4590      	cmp	r8, r2
 8012238:	dd04      	ble.n	8012244 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801223a:	1422      	asrs	r2, r4, #16
 801223c:	d402      	bmi.n	8012244 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801223e:	9802      	ldr	r0, [sp, #8]
 8012240:	4282      	cmp	r2, r0
 8012242:	db07      	blt.n	8012254 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8012244:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012246:	3b01      	subs	r3, #1
 8012248:	3603      	adds	r6, #3
 801224a:	4415      	add	r5, r2
 801224c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801224e:	4414      	add	r4, r2
 8012250:	e7ed      	b.n	801222e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8012252:	d073      	beq.n	801233c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8012254:	1e5a      	subs	r2, r3, #1
 8012256:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012258:	fb00 5002 	mla	r0, r0, r2, r5
 801225c:	1400      	asrs	r0, r0, #16
 801225e:	d464      	bmi.n	801232a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8012260:	4580      	cmp	r8, r0
 8012262:	dd62      	ble.n	801232a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8012264:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012266:	fb00 4202 	mla	r2, r0, r2, r4
 801226a:	1412      	asrs	r2, r2, #16
 801226c:	d45d      	bmi.n	801232a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801226e:	9802      	ldr	r0, [sp, #8]
 8012270:	4282      	cmp	r2, r0
 8012272:	da5a      	bge.n	801232a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8012274:	1cf0      	adds	r0, r6, #3
 8012276:	469a      	mov	sl, r3
 8012278:	f1ba 0f00 	cmp.w	sl, #0
 801227c:	dd59      	ble.n	8012332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801227e:	142a      	asrs	r2, r5, #16
 8012280:	9903      	ldr	r1, [sp, #12]
 8012282:	1427      	asrs	r7, r4, #16
 8012284:	fb01 2707 	mla	r7, r1, r7, r2
 8012288:	9904      	ldr	r1, [sp, #16]
 801228a:	087a      	lsrs	r2, r7, #1
 801228c:	5c8a      	ldrb	r2, [r1, r2]
 801228e:	07f9      	lsls	r1, r7, #31
 8012290:	bf54      	ite	pl
 8012292:	f002 020f 	andpl.w	r2, r2, #15
 8012296:	1112      	asrmi	r2, r2, #4
 8012298:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801229c:	b2d2      	uxtb	r2, r2
 801229e:	2a00      	cmp	r2, #0
 80122a0:	d03b      	beq.n	801231a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80122a2:	497e      	ldr	r1, [pc, #504]	; (801249c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 80122a4:	2aff      	cmp	r2, #255	; 0xff
 80122a6:	680f      	ldr	r7, [r1, #0]
 80122a8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80122ac:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80122b0:	b2ff      	uxtb	r7, r7
 80122b2:	f000 80e9 	beq.w	8012488 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80122b6:	fa1f fe82 	uxth.w	lr, r2
 80122ba:	43d2      	mvns	r2, r2
 80122bc:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80122c0:	fb17 f70e 	smulbb	r7, r7, lr
 80122c4:	b2d2      	uxtb	r2, r2
 80122c6:	fb19 f90e 	smulbb	r9, r9, lr
 80122ca:	fb0c 7702 	mla	r7, ip, r2, r7
 80122ce:	fb1b fe0e 	smulbb	lr, fp, lr
 80122d2:	b2bf      	uxth	r7, r7
 80122d4:	f107 0c01 	add.w	ip, r7, #1
 80122d8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80122dc:	123f      	asrs	r7, r7, #8
 80122de:	f800 7c03 	strb.w	r7, [r0, #-3]
 80122e2:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80122e6:	fb07 9902 	mla	r9, r7, r2, r9
 80122ea:	fa1f f989 	uxth.w	r9, r9
 80122ee:	f109 0701 	add.w	r7, r9, #1
 80122f2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80122f6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80122fa:	fb07 ee02 	mla	lr, r7, r2, lr
 80122fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012302:	fa1f fe8e 	uxth.w	lr, lr
 8012306:	f800 9c02 	strb.w	r9, [r0, #-2]
 801230a:	f10e 0201 	add.w	r2, lr, #1
 801230e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8012312:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8012316:	f800 ec01 	strb.w	lr, [r0, #-1]
 801231a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801231c:	3003      	adds	r0, #3
 801231e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012322:	4415      	add	r5, r2
 8012324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012326:	4414      	add	r4, r2
 8012328:	e7a6      	b.n	8012278 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801232a:	2700      	movs	r7, #0
 801232c:	1bda      	subs	r2, r3, r7
 801232e:	2a00      	cmp	r2, #0
 8012330:	dc40      	bgt.n	80123b4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8012332:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012336:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801233a:	441e      	add	r6, r3
 801233c:	9b01      	ldr	r3, [sp, #4]
 801233e:	2b00      	cmp	r3, #0
 8012340:	f340 80a9 	ble.w	8012496 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8012344:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012348:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801234a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801234e:	eeb0 6a62 	vmov.f32	s12, s5
 8012352:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012356:	ee31 1a05 	vadd.f32	s2, s2, s10
 801235a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801235e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8012362:	eeb0 6a43 	vmov.f32	s12, s6
 8012366:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801236a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801236e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012372:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012376:	ee77 2a62 	vsub.f32	s5, s14, s5
 801237a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801237e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012382:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012386:	ee12 2a90 	vmov	r2, s5
 801238a:	eef0 2a47 	vmov.f32	s5, s14
 801238e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012392:	ee13 2a10 	vmov	r2, s6
 8012396:	9313      	str	r3, [sp, #76]	; 0x4c
 8012398:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801239a:	eeb0 3a67 	vmov.f32	s6, s15
 801239e:	fb92 f3f3 	sdiv	r3, r2, r3
 80123a2:	9314      	str	r3, [sp, #80]	; 0x50
 80123a4:	9b01      	ldr	r3, [sp, #4]
 80123a6:	9a05      	ldr	r2, [sp, #20]
 80123a8:	3b01      	subs	r3, #1
 80123aa:	9301      	str	r3, [sp, #4]
 80123ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80123ae:	bf08      	it	eq
 80123b0:	4613      	moveq	r3, r2
 80123b2:	e72f      	b.n	8012214 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80123b4:	142a      	asrs	r2, r5, #16
 80123b6:	d458      	bmi.n	801246a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80123b8:	4590      	cmp	r8, r2
 80123ba:	dd56      	ble.n	801246a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80123bc:	1420      	asrs	r0, r4, #16
 80123be:	d454      	bmi.n	801246a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80123c0:	9902      	ldr	r1, [sp, #8]
 80123c2:	4288      	cmp	r0, r1
 80123c4:	da51      	bge.n	801246a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80123c6:	9903      	ldr	r1, [sp, #12]
 80123c8:	fb00 2001 	mla	r0, r0, r1, r2
 80123cc:	9904      	ldr	r1, [sp, #16]
 80123ce:	0842      	lsrs	r2, r0, #1
 80123d0:	07c0      	lsls	r0, r0, #31
 80123d2:	5c8a      	ldrb	r2, [r1, r2]
 80123d4:	bf54      	ite	pl
 80123d6:	f002 020f 	andpl.w	r2, r2, #15
 80123da:	1112      	asrmi	r2, r2, #4
 80123dc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80123e0:	b2d2      	uxtb	r2, r2
 80123e2:	2a00      	cmp	r2, #0
 80123e4:	d041      	beq.n	801246a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80123e6:	492d      	ldr	r1, [pc, #180]	; (801249c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 80123e8:	2aff      	cmp	r2, #255	; 0xff
 80123ea:	6808      	ldr	r0, [r1, #0]
 80123ec:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80123f0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80123f4:	fa5f fc80 	uxtb.w	ip, r0
 80123f8:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80123fc:	d03b      	beq.n	8012476 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 80123fe:	fa1f f982 	uxth.w	r9, r2
 8012402:	4438      	add	r0, r7
 8012404:	43d2      	mvns	r2, r2
 8012406:	f816 e000 	ldrb.w	lr, [r6, r0]
 801240a:	fb1c fc09 	smulbb	ip, ip, r9
 801240e:	fb1a fa09 	smulbb	sl, sl, r9
 8012412:	b2d2      	uxtb	r2, r2
 8012414:	fb1b f909 	smulbb	r9, fp, r9
 8012418:	fb0e cc02 	mla	ip, lr, r2, ip
 801241c:	fa1f fc8c 	uxth.w	ip, ip
 8012420:	f10c 0e01 	add.w	lr, ip, #1
 8012424:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8012428:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801242c:	f806 c000 	strb.w	ip, [r6, r0]
 8012430:	4430      	add	r0, r6
 8012432:	f890 c001 	ldrb.w	ip, [r0, #1]
 8012436:	fb0c aa02 	mla	sl, ip, r2, sl
 801243a:	fa1f fa8a 	uxth.w	sl, sl
 801243e:	f10a 0c01 	add.w	ip, sl, #1
 8012442:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8012446:	f890 c002 	ldrb.w	ip, [r0, #2]
 801244a:	fb0c 9902 	mla	r9, ip, r2, r9
 801244e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8012452:	fa1f f989 	uxth.w	r9, r9
 8012456:	f880 a001 	strb.w	sl, [r0, #1]
 801245a:	f109 0201 	add.w	r2, r9, #1
 801245e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8012462:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012466:	f880 9002 	strb.w	r9, [r0, #2]
 801246a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801246c:	3701      	adds	r7, #1
 801246e:	4415      	add	r5, r2
 8012470:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012472:	4414      	add	r4, r2
 8012474:	e75a      	b.n	801232c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 8012476:	4438      	add	r0, r7
 8012478:	f806 c000 	strb.w	ip, [r6, r0]
 801247c:	4430      	add	r0, r6
 801247e:	f880 a001 	strb.w	sl, [r0, #1]
 8012482:	f880 b002 	strb.w	fp, [r0, #2]
 8012486:	e7f0      	b.n	801246a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8012488:	f800 7c03 	strb.w	r7, [r0, #-3]
 801248c:	f800 9c02 	strb.w	r9, [r0, #-2]
 8012490:	f800 bc01 	strb.w	fp, [r0, #-1]
 8012494:	e741      	b.n	801231a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8012496:	b007      	add	sp, #28
 8012498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249c:	20001108 	.word	0x20001108

080124a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80124a0:	4770      	bx	lr

080124a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80124a2:	4770      	bx	lr

080124a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80124a4:	4770      	bx	lr

080124a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80124a6:	4770      	bx	lr

080124a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80124a8:	4770      	bx	lr

080124aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80124aa:	4770      	bx	lr

080124ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80124ac:	4770      	bx	lr

080124ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80124ae:	4770      	bx	lr

080124b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80124b0:	4770      	bx	lr

080124b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80124b2:	4770      	bx	lr

080124b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80124b4:	4770      	bx	lr

080124b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80124b6:	4770      	bx	lr

080124b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80124b8:	4770      	bx	lr

080124ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80124ba:	4770      	bx	lr

080124bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80124bc:	4770      	bx	lr

080124be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80124be:	4770      	bx	lr

080124c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80124c0:	4770      	bx	lr

080124c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80124c2:	4770      	bx	lr

080124c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80124c4:	4770      	bx	lr

080124c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80124c6:	4770      	bx	lr

080124c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80124c8:	2bff      	cmp	r3, #255	; 0xff
 80124ca:	b508      	push	{r3, lr}
 80124cc:	d04f      	beq.n	801256e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80124ce:	2a2c      	cmp	r2, #44	; 0x2c
 80124d0:	d032      	beq.n	8012538 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 80124d2:	d80f      	bhi.n	80124f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 80124d4:	2a08      	cmp	r2, #8
 80124d6:	d046      	beq.n	8012566 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80124d8:	d805      	bhi.n	80124e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 80124da:	2a04      	cmp	r2, #4
 80124dc:	d041      	beq.n	8012562 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80124de:	2a05      	cmp	r2, #5
 80124e0:	d03d      	beq.n	801255e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80124e2:	2000      	movs	r0, #0
 80124e4:	e027      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80124e6:	2a0a      	cmp	r2, #10
 80124e8:	d03d      	beq.n	8012566 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80124ea:	d301      	bcc.n	80124f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80124ec:	2a0b      	cmp	r2, #11
 80124ee:	d1f8      	bne.n	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80124f0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80124f2:	e020      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80124f4:	2a30      	cmp	r2, #48	; 0x30
 80124f6:	d038      	beq.n	801256a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80124f8:	d808      	bhi.n	801250c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 80124fa:	2a2e      	cmp	r2, #46	; 0x2e
 80124fc:	684b      	ldr	r3, [r1, #4]
 80124fe:	d029      	beq.n	8012554 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8012500:	d90b      	bls.n	801251a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8012502:	781b      	ldrb	r3, [r3, #0]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d1ec      	bne.n	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012508:	6a00      	ldr	r0, [r0, #32]
 801250a:	e014      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801250c:	2a32      	cmp	r2, #50	; 0x32
 801250e:	d02c      	beq.n	801256a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8012510:	d301      	bcc.n	8012516 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8012512:	2a33      	cmp	r2, #51	; 0x33
 8012514:	d1e5      	bne.n	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012516:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8012518:	e00d      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801251a:	781b      	ldrb	r3, [r3, #0]
 801251c:	2b01      	cmp	r3, #1
 801251e:	d009      	beq.n	8012534 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8012520:	d3f2      	bcc.n	8012508 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8012522:	2b02      	cmp	r3, #2
 8012524:	d1dd      	bne.n	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012526:	4b39      	ldr	r3, [pc, #228]	; (801260c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8012528:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801252c:	4a38      	ldr	r2, [pc, #224]	; (8012610 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801252e:	4839      	ldr	r0, [pc, #228]	; (8012614 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8012530:	f006 fb56 	bl	8018be0 <__assert_func>
 8012534:	6900      	ldr	r0, [r0, #16]
 8012536:	bd08      	pop	{r3, pc}
 8012538:	684b      	ldr	r3, [r1, #4]
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d007      	beq.n	8012550 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8012540:	d30b      	bcc.n	801255a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8012542:	2b02      	cmp	r3, #2
 8012544:	d1cd      	bne.n	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012546:	4b31      	ldr	r3, [pc, #196]	; (801260c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8012548:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801254c:	4a30      	ldr	r2, [pc, #192]	; (8012610 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801254e:	e7ee      	b.n	801252e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8012550:	6880      	ldr	r0, [r0, #8]
 8012552:	e7f0      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d1c3      	bne.n	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801255a:	6980      	ldr	r0, [r0, #24]
 801255c:	e7eb      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801255e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012560:	e7e9      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012562:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8012564:	e7e7      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012566:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012568:	e7e5      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801256a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801256c:	e7e3      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801256e:	2a2c      	cmp	r2, #44	; 0x2c
 8012570:	d030      	beq.n	80125d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8012572:	d80f      	bhi.n	8012594 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8012574:	2a08      	cmp	r2, #8
 8012576:	d044      	beq.n	8012602 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8012578:	d805      	bhi.n	8012586 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801257a:	2a04      	cmp	r2, #4
 801257c:	d03f      	beq.n	80125fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801257e:	2a05      	cmp	r2, #5
 8012580:	d1af      	bne.n	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012582:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012584:	e7d7      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012586:	2a0a      	cmp	r2, #10
 8012588:	d03b      	beq.n	8012602 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801258a:	d301      	bcc.n	8012590 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801258c:	2a0b      	cmp	r2, #11
 801258e:	d1a8      	bne.n	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012590:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8012592:	e7d0      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012594:	2a30      	cmp	r2, #48	; 0x30
 8012596:	d036      	beq.n	8012606 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8012598:	d808      	bhi.n	80125ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801259a:	2a2e      	cmp	r2, #46	; 0x2e
 801259c:	684b      	ldr	r3, [r1, #4]
 801259e:	d028      	beq.n	80125f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 80125a0:	d90b      	bls.n	80125ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d19c      	bne.n	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80125a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80125aa:	e7c4      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80125ac:	2a32      	cmp	r2, #50	; 0x32
 80125ae:	d02a      	beq.n	8012606 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80125b0:	d301      	bcc.n	80125b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80125b2:	2a33      	cmp	r2, #51	; 0x33
 80125b4:	d195      	bne.n	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80125b6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80125b8:	e7bd      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d007      	beq.n	80125d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 80125c0:	d3f2      	bcc.n	80125a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80125c2:	2b02      	cmp	r3, #2
 80125c4:	d18d      	bne.n	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80125c6:	4b11      	ldr	r3, [pc, #68]	; (801260c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80125c8:	f240 31e1 	movw	r1, #993	; 0x3e1
 80125cc:	4a10      	ldr	r2, [pc, #64]	; (8012610 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80125ce:	e7ae      	b.n	801252e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80125d0:	6940      	ldr	r0, [r0, #20]
 80125d2:	e7b0      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80125d4:	684b      	ldr	r3, [r1, #4]
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	2b01      	cmp	r3, #1
 80125da:	d008      	beq.n	80125ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80125dc:	d30d      	bcc.n	80125fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80125de:	2b02      	cmp	r3, #2
 80125e0:	f47f af7f 	bne.w	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80125e4:	4b09      	ldr	r3, [pc, #36]	; (801260c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80125e6:	f240 31ed 	movw	r1, #1005	; 0x3ed
 80125ea:	4a09      	ldr	r2, [pc, #36]	; (8012610 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80125ec:	e79f      	b.n	801252e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80125ee:	68c0      	ldr	r0, [r0, #12]
 80125f0:	e7a1      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80125f2:	781b      	ldrb	r3, [r3, #0]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	f47f af74 	bne.w	80124e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80125fa:	69c0      	ldr	r0, [r0, #28]
 80125fc:	e79b      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80125fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8012600:	e799      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012602:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8012604:	e797      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012606:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8012608:	e795      	b.n	8012536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801260a:	bf00      	nop
 801260c:	0801c3c0 	.word	0x0801c3c0
 8012610:	0801cb73 	.word	0x0801cb73
 8012614:	0801c40c 	.word	0x0801c40c

08012618 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8012618:	b508      	push	{r3, lr}
 801261a:	4b06      	ldr	r3, [pc, #24]	; (8012634 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801261c:	8818      	ldrh	r0, [r3, #0]
 801261e:	b928      	cbnz	r0, 801262c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8012620:	4b05      	ldr	r3, [pc, #20]	; (8012638 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8012622:	21d7      	movs	r1, #215	; 0xd7
 8012624:	4a05      	ldr	r2, [pc, #20]	; (801263c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 8012626:	4806      	ldr	r0, [pc, #24]	; (8012640 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8012628:	f006 fada 	bl	8018be0 <__assert_func>
 801262c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012630:	b280      	uxth	r0, r0
 8012632:	bd08      	pop	{r3, pc}
 8012634:	200010fa 	.word	0x200010fa
 8012638:	0801c65b 	.word	0x0801c65b
 801263c:	0801cb38 	.word	0x0801cb38
 8012640:	0801c69d 	.word	0x0801c69d

08012644 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8012644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012648:	4616      	mov	r6, r2
 801264a:	b087      	sub	sp, #28
 801264c:	461f      	mov	r7, r3
 801264e:	b33b      	cbz	r3, 80126a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8012650:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012654:	b323      	cbz	r3, 80126a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8012656:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801265a:	b30b      	cbz	r3, 80126a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801265c:	6808      	ldr	r0, [r1, #0]
 801265e:	ab04      	add	r3, sp, #16
 8012660:	6849      	ldr	r1, [r1, #4]
 8012662:	4c5a      	ldr	r4, [pc, #360]	; (80127cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 8012664:	c303      	stmia	r3!, {r0, r1}
 8012666:	a804      	add	r0, sp, #16
 8012668:	f7fb ffc2 	bl	800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801266c:	6820      	ldr	r0, [r4, #0]
 801266e:	6803      	ldr	r3, [r0, #0]
 8012670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012672:	4798      	blx	r3
 8012674:	2fff      	cmp	r7, #255	; 0xff
 8012676:	4623      	mov	r3, r4
 8012678:	d015      	beq.n	80126a6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801267a:	f010 0f08 	tst.w	r0, #8
 801267e:	d015      	beq.n	80126ac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8012680:	6818      	ldr	r0, [r3, #0]
 8012682:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8012686:	6801      	ldr	r1, [r0, #0]
 8012688:	9401      	str	r4, [sp, #4]
 801268a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801268e:	9702      	str	r7, [sp, #8]
 8012690:	9400      	str	r4, [sp, #0]
 8012692:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012696:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8012698:	4631      	mov	r1, r6
 801269a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801269e:	47a0      	blx	r4
 80126a0:	b007      	add	sp, #28
 80126a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126a6:	f010 0f02 	tst.w	r0, #2
 80126aa:	e7e8      	b.n	801267e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 80126ac:	6818      	ldr	r0, [r3, #0]
 80126ae:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80126b2:	6803      	ldr	r3, [r0, #0]
 80126b4:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80126b8:	6a1b      	ldr	r3, [r3, #32]
 80126ba:	4798      	blx	r3
 80126bc:	4944      	ldr	r1, [pc, #272]	; (80127d0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 80126be:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80126c2:	2fff      	cmp	r7, #255	; 0xff
 80126c4:	f8b1 c000 	ldrh.w	ip, [r1]
 80126c8:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80126cc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80126d0:	4688      	mov	r8, r1
 80126d2:	fb0c 2303 	mla	r3, ip, r3, r2
 80126d6:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 80126da:	b2f2      	uxtb	r2, r6
 80126dc:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 80126e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80126e4:	4418      	add	r0, r3
 80126e6:	d112      	bne.n	801270e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 80126e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80126ec:	2100      	movs	r1, #0
 80126ee:	42a9      	cmp	r1, r5
 80126f0:	da66      	bge.n	80127c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 80126f2:	4603      	mov	r3, r0
 80126f4:	2700      	movs	r7, #0
 80126f6:	42a7      	cmp	r7, r4
 80126f8:	f103 0303 	add.w	r3, r3, #3
 80126fc:	da57      	bge.n	80127ae <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 80126fe:	f803 2c03 	strb.w	r2, [r3, #-3]
 8012702:	3701      	adds	r7, #1
 8012704:	f803 ec02 	strb.w	lr, [r3, #-2]
 8012708:	f803 cc01 	strb.w	ip, [r3, #-1]
 801270c:	e7f3      	b.n	80126f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801270e:	b2bb      	uxth	r3, r7
 8012710:	f04f 0800 	mov.w	r8, #0
 8012714:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012718:	fb0c fc03 	mul.w	ip, ip, r3
 801271c:	fb0e fe03 	mul.w	lr, lr, r3
 8012720:	435a      	muls	r2, r3
 8012722:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8012726:	460f      	mov	r7, r1
 8012728:	b29b      	uxth	r3, r3
 801272a:	45a8      	cmp	r8, r5
 801272c:	da48      	bge.n	80127c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801272e:	4601      	mov	r1, r0
 8012730:	f04f 0a00 	mov.w	sl, #0
 8012734:	45a2      	cmp	sl, r4
 8012736:	f101 0103 	add.w	r1, r1, #3
 801273a:	da2f      	bge.n	801279c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801273c:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 8012740:	f10a 0a01 	add.w	sl, sl, #1
 8012744:	fb19 f903 	smulbb	r9, r9, r3
 8012748:	4491      	add	r9, r2
 801274a:	fa1f f989 	uxth.w	r9, r9
 801274e:	f109 0b01 	add.w	fp, r9, #1
 8012752:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012756:	ea4f 2929 	mov.w	r9, r9, asr #8
 801275a:	f801 9c03 	strb.w	r9, [r1, #-3]
 801275e:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 8012762:	fb19 f903 	smulbb	r9, r9, r3
 8012766:	44f1      	add	r9, lr
 8012768:	fa1f f989 	uxth.w	r9, r9
 801276c:	f109 0b01 	add.w	fp, r9, #1
 8012770:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012774:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012778:	f801 9c02 	strb.w	r9, [r1, #-2]
 801277c:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 8012780:	fb19 f903 	smulbb	r9, r9, r3
 8012784:	44e1      	add	r9, ip
 8012786:	fa1f f989 	uxth.w	r9, r9
 801278a:	f109 0b01 	add.w	fp, r9, #1
 801278e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012792:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012796:	f801 9c01 	strb.w	r9, [r1, #-1]
 801279a:	e7cb      	b.n	8012734 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801279c:	8839      	ldrh	r1, [r7, #0]
 801279e:	f108 0801 	add.w	r8, r8, #1
 80127a2:	1b09      	subs	r1, r1, r4
 80127a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80127a8:	4431      	add	r1, r6
 80127aa:	4408      	add	r0, r1
 80127ac:	e7bd      	b.n	801272a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 80127ae:	f8b8 3000 	ldrh.w	r3, [r8]
 80127b2:	3101      	adds	r1, #1
 80127b4:	1b1b      	subs	r3, r3, r4
 80127b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80127ba:	4433      	add	r3, r6
 80127bc:	4418      	add	r0, r3
 80127be:	e796      	b.n	80126ee <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 80127c0:	4b02      	ldr	r3, [pc, #8]	; (80127cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 80127c2:	6818      	ldr	r0, [r3, #0]
 80127c4:	6803      	ldr	r3, [r0, #0]
 80127c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127c8:	4798      	blx	r3
 80127ca:	e769      	b.n	80126a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80127cc:	20001100 	.word	0x20001100
 80127d0:	200010fa 	.word	0x200010fa

080127d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80127d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d8:	b08d      	sub	sp, #52	; 0x34
 80127da:	460c      	mov	r4, r1
 80127dc:	4617      	mov	r7, r2
 80127de:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 80127e2:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 80127e6:	2e00      	cmp	r6, #0
 80127e8:	d04a      	beq.n	8012880 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80127ea:	6810      	ldr	r0, [r2, #0]
 80127ec:	ad08      	add	r5, sp, #32
 80127ee:	6851      	ldr	r1, [r2, #4]
 80127f0:	c503      	stmia	r5!, {r0, r1}
 80127f2:	6818      	ldr	r0, [r3, #0]
 80127f4:	ad0a      	add	r5, sp, #40	; 0x28
 80127f6:	6859      	ldr	r1, [r3, #4]
 80127f8:	c503      	stmia	r5!, {r0, r1}
 80127fa:	a808      	add	r0, sp, #32
 80127fc:	f7fb fef8 	bl	800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012800:	4639      	mov	r1, r7
 8012802:	a80a      	add	r0, sp, #40	; 0x28
 8012804:	4f59      	ldr	r7, [pc, #356]	; (801296c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 8012806:	f7fb fedb 	bl	800e5c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801280a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801280e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8012812:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8012816:	6838      	ldr	r0, [r7, #0]
 8012818:	fb11 2103 	smlabb	r1, r1, r3, r2
 801281c:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8012820:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8012824:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012828:	440c      	add	r4, r1
 801282a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801282e:	440a      	add	r2, r1
 8012830:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8012834:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8012838:	4413      	add	r3, r2
 801283a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801283e:	6803      	ldr	r3, [r0, #0]
 8012840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012842:	4798      	blx	r3
 8012844:	2eff      	cmp	r6, #255	; 0xff
 8012846:	f000 8089 	beq.w	801295c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801284a:	0743      	lsls	r3, r0, #29
 801284c:	d405      	bmi.n	801285a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801284e:	f1b9 0f00 	cmp.w	r9, #0
 8012852:	d018      	beq.n	8012886 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8012854:	f010 0f10 	tst.w	r0, #16
 8012858:	d015      	beq.n	8012886 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801285a:	6838      	ldr	r0, [r7, #0]
 801285c:	b2ad      	uxth	r5, r5
 801285e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8012862:	6801      	ldr	r1, [r0, #0]
 8012864:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012868:	9500      	str	r5, [sp, #0]
 801286a:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801286e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8012872:	9602      	str	r6, [sp, #8]
 8012874:	fa1f f688 	uxth.w	r6, r8
 8012878:	9601      	str	r6, [sp, #4]
 801287a:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801287c:	4621      	mov	r1, r4
 801287e:	47a8      	blx	r5
 8012880:	b00d      	add	sp, #52	; 0x34
 8012882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012886:	6838      	ldr	r0, [r7, #0]
 8012888:	6803      	ldr	r3, [r0, #0]
 801288a:	6a1b      	ldr	r3, [r3, #32]
 801288c:	4798      	blx	r3
 801288e:	4a38      	ldr	r2, [pc, #224]	; (8012970 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 8012890:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8012894:	2eff      	cmp	r6, #255	; 0xff
 8012896:	8813      	ldrh	r3, [r2, #0]
 8012898:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801289c:	fb0c 1303 	mla	r3, ip, r3, r1
 80128a0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80128a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80128a8:	4418      	add	r0, r3
 80128aa:	d032      	beq.n	8012912 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80128ac:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 80128b0:	f04f 0c00 	mov.w	ip, #0
 80128b4:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 80128b8:	9306      	str	r3, [sp, #24]
 80128ba:	45c4      	cmp	ip, r8
 80128bc:	da49      	bge.n	8012952 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 80128be:	4686      	mov	lr, r0
 80128c0:	46a1      	mov	r9, r4
 80128c2:	eba9 0304 	sub.w	r3, r9, r4
 80128c6:	428b      	cmp	r3, r1
 80128c8:	da13      	bge.n	80128f2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 80128ca:	f819 3b01 	ldrb.w	r3, [r9], #1
 80128ce:	f89e b000 	ldrb.w	fp, [lr]
 80128d2:	9307      	str	r3, [sp, #28]
 80128d4:	9b06      	ldr	r3, [sp, #24]
 80128d6:	fb1b fb03 	smulbb	fp, fp, r3
 80128da:	9b07      	ldr	r3, [sp, #28]
 80128dc:	fb03 b306 	mla	r3, r3, r6, fp
 80128e0:	b29b      	uxth	r3, r3
 80128e2:	f103 0b01 	add.w	fp, r3, #1
 80128e6:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 80128ea:	121b      	asrs	r3, r3, #8
 80128ec:	f80e 3b01 	strb.w	r3, [lr], #1
 80128f0:	e7e7      	b.n	80128c2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 80128f2:	8813      	ldrh	r3, [r2, #0]
 80128f4:	f10c 0c01 	add.w	ip, ip, #1
 80128f8:	1b5b      	subs	r3, r3, r5
 80128fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80128fe:	4453      	add	r3, sl
 8012900:	4418      	add	r0, r3
 8012902:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8012906:	1b5b      	subs	r3, r3, r5
 8012908:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801290c:	4453      	add	r3, sl
 801290e:	441c      	add	r4, r3
 8012910:	e7d3      	b.n	80128ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 8012912:	2600      	movs	r6, #0
 8012914:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 8012918:	4546      	cmp	r6, r8
 801291a:	da1a      	bge.n	8012952 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801291c:	f100 3eff 	add.w	lr, r0, #4294967295
 8012920:	4623      	mov	r3, r4
 8012922:	eba3 0904 	sub.w	r9, r3, r4
 8012926:	4589      	cmp	r9, r1
 8012928:	da04      	bge.n	8012934 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801292a:	f813 9b01 	ldrb.w	r9, [r3], #1
 801292e:	f80e 9f01 	strb.w	r9, [lr, #1]!
 8012932:	e7f6      	b.n	8012922 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 8012934:	8813      	ldrh	r3, [r2, #0]
 8012936:	3601      	adds	r6, #1
 8012938:	1b5b      	subs	r3, r3, r5
 801293a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801293e:	4463      	add	r3, ip
 8012940:	4418      	add	r0, r3
 8012942:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8012946:	1b5b      	subs	r3, r3, r5
 8012948:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801294c:	4463      	add	r3, ip
 801294e:	441c      	add	r4, r3
 8012950:	e7e2      	b.n	8012918 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 8012952:	6838      	ldr	r0, [r7, #0]
 8012954:	6803      	ldr	r3, [r0, #0]
 8012956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012958:	4798      	blx	r3
 801295a:	e791      	b.n	8012880 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801295c:	f1b9 0f00 	cmp.w	r9, #0
 8012960:	f47f af78 	bne.w	8012854 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 8012964:	f010 0f01 	tst.w	r0, #1
 8012968:	e776      	b.n	8012858 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801296a:	bf00      	nop
 801296c:	20001100 	.word	0x20001100
 8012970:	200010fa 	.word	0x200010fa

08012974 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8012974:	b510      	push	{r4, lr}
 8012976:	4604      	mov	r4, r0
 8012978:	2104      	movs	r1, #4
 801297a:	f006 f905 	bl	8018b88 <_ZdlPvj>
 801297e:	4620      	mov	r0, r4
 8012980:	bd10      	pop	{r4, pc}

08012982 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8012982:	b510      	push	{r4, lr}
 8012984:	4604      	mov	r4, r0
 8012986:	2104      	movs	r1, #4
 8012988:	f006 f8fe 	bl	8018b88 <_ZdlPvj>
 801298c:	4620      	mov	r0, r4
 801298e:	bd10      	pop	{r4, pc}

08012990 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8012990:	b510      	push	{r4, lr}
 8012992:	4604      	mov	r4, r0
 8012994:	2104      	movs	r1, #4
 8012996:	f006 f8f7 	bl	8018b88 <_ZdlPvj>
 801299a:	4620      	mov	r0, r4
 801299c:	bd10      	pop	{r4, pc}

0801299e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801299e:	b510      	push	{r4, lr}
 80129a0:	4604      	mov	r4, r0
 80129a2:	2104      	movs	r1, #4
 80129a4:	f006 f8f0 	bl	8018b88 <_ZdlPvj>
 80129a8:	4620      	mov	r0, r4
 80129aa:	bd10      	pop	{r4, pc}

080129ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80129ac:	b510      	push	{r4, lr}
 80129ae:	4604      	mov	r4, r0
 80129b0:	2104      	movs	r1, #4
 80129b2:	f006 f8e9 	bl	8018b88 <_ZdlPvj>
 80129b6:	4620      	mov	r0, r4
 80129b8:	bd10      	pop	{r4, pc}

080129ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80129ba:	b510      	push	{r4, lr}
 80129bc:	4604      	mov	r4, r0
 80129be:	2104      	movs	r1, #4
 80129c0:	f006 f8e2 	bl	8018b88 <_ZdlPvj>
 80129c4:	4620      	mov	r0, r4
 80129c6:	bd10      	pop	{r4, pc}

080129c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80129c8:	b510      	push	{r4, lr}
 80129ca:	4604      	mov	r4, r0
 80129cc:	2104      	movs	r1, #4
 80129ce:	f006 f8db 	bl	8018b88 <_ZdlPvj>
 80129d2:	4620      	mov	r0, r4
 80129d4:	bd10      	pop	{r4, pc}

080129d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80129d6:	b510      	push	{r4, lr}
 80129d8:	4604      	mov	r4, r0
 80129da:	2104      	movs	r1, #4
 80129dc:	f006 f8d4 	bl	8018b88 <_ZdlPvj>
 80129e0:	4620      	mov	r0, r4
 80129e2:	bd10      	pop	{r4, pc}

080129e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80129e4:	b510      	push	{r4, lr}
 80129e6:	4604      	mov	r4, r0
 80129e8:	2104      	movs	r1, #4
 80129ea:	f006 f8cd 	bl	8018b88 <_ZdlPvj>
 80129ee:	4620      	mov	r0, r4
 80129f0:	bd10      	pop	{r4, pc}

080129f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80129f2:	b510      	push	{r4, lr}
 80129f4:	4604      	mov	r4, r0
 80129f6:	2104      	movs	r1, #4
 80129f8:	f006 f8c6 	bl	8018b88 <_ZdlPvj>
 80129fc:	4620      	mov	r0, r4
 80129fe:	bd10      	pop	{r4, pc}

08012a00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8012a00:	b510      	push	{r4, lr}
 8012a02:	4604      	mov	r4, r0
 8012a04:	2104      	movs	r1, #4
 8012a06:	f006 f8bf 	bl	8018b88 <_ZdlPvj>
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	bd10      	pop	{r4, pc}

08012a0e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8012a0e:	b510      	push	{r4, lr}
 8012a10:	4604      	mov	r4, r0
 8012a12:	2104      	movs	r1, #4
 8012a14:	f006 f8b8 	bl	8018b88 <_ZdlPvj>
 8012a18:	4620      	mov	r0, r4
 8012a1a:	bd10      	pop	{r4, pc}

08012a1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8012a1c:	b510      	push	{r4, lr}
 8012a1e:	4604      	mov	r4, r0
 8012a20:	2104      	movs	r1, #4
 8012a22:	f006 f8b1 	bl	8018b88 <_ZdlPvj>
 8012a26:	4620      	mov	r0, r4
 8012a28:	bd10      	pop	{r4, pc}

08012a2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8012a2a:	b510      	push	{r4, lr}
 8012a2c:	4604      	mov	r4, r0
 8012a2e:	2104      	movs	r1, #4
 8012a30:	f006 f8aa 	bl	8018b88 <_ZdlPvj>
 8012a34:	4620      	mov	r0, r4
 8012a36:	bd10      	pop	{r4, pc}

08012a38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8012a38:	b510      	push	{r4, lr}
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	2104      	movs	r1, #4
 8012a3e:	f006 f8a3 	bl	8018b88 <_ZdlPvj>
 8012a42:	4620      	mov	r0, r4
 8012a44:	bd10      	pop	{r4, pc}

08012a46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8012a46:	b510      	push	{r4, lr}
 8012a48:	4604      	mov	r4, r0
 8012a4a:	2104      	movs	r1, #4
 8012a4c:	f006 f89c 	bl	8018b88 <_ZdlPvj>
 8012a50:	4620      	mov	r0, r4
 8012a52:	bd10      	pop	{r4, pc}

08012a54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8012a54:	b510      	push	{r4, lr}
 8012a56:	4604      	mov	r4, r0
 8012a58:	2104      	movs	r1, #4
 8012a5a:	f006 f895 	bl	8018b88 <_ZdlPvj>
 8012a5e:	4620      	mov	r0, r4
 8012a60:	bd10      	pop	{r4, pc}

08012a62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8012a62:	b510      	push	{r4, lr}
 8012a64:	4604      	mov	r4, r0
 8012a66:	2104      	movs	r1, #4
 8012a68:	f006 f88e 	bl	8018b88 <_ZdlPvj>
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	bd10      	pop	{r4, pc}

08012a70 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8012a70:	b510      	push	{r4, lr}
 8012a72:	4604      	mov	r4, r0
 8012a74:	2104      	movs	r1, #4
 8012a76:	f006 f887 	bl	8018b88 <_ZdlPvj>
 8012a7a:	4620      	mov	r0, r4
 8012a7c:	bd10      	pop	{r4, pc}

08012a7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8012a7e:	b510      	push	{r4, lr}
 8012a80:	4604      	mov	r4, r0
 8012a82:	2104      	movs	r1, #4
 8012a84:	f006 f880 	bl	8018b88 <_ZdlPvj>
 8012a88:	4620      	mov	r0, r4
 8012a8a:	bd10      	pop	{r4, pc}

08012a8c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8012a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a90:	4d9e      	ldr	r5, [pc, #632]	; (8012d0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8012a92:	4690      	mov	r8, r2
 8012a94:	b08f      	sub	sp, #60	; 0x3c
 8012a96:	4604      	mov	r4, r0
 8012a98:	682a      	ldr	r2, [r5, #0]
 8012a9a:	4689      	mov	r9, r1
 8012a9c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8012aa0:	2a02      	cmp	r2, #2
 8012aa2:	d106      	bne.n	8012ab2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8012aa4:	4b9a      	ldr	r3, [pc, #616]	; (8012d10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8012aa6:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8012aaa:	4a9a      	ldr	r2, [pc, #616]	; (8012d14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8012aac:	489a      	ldr	r0, [pc, #616]	; (8012d18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8012aae:	f006 f897 	bl	8018be0 <__assert_func>
 8012ab2:	ae0e      	add	r6, sp, #56	; 0x38
 8012ab4:	f826 3d24 	strh.w	r3, [r6, #-36]!
 8012ab8:	4630      	mov	r0, r6
 8012aba:	f7fe f8b3 	bl	8010c24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012abe:	6823      	ldr	r3, [r4, #0]
 8012ac0:	4607      	mov	r7, r0
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ac6:	4798      	blx	r3
 8012ac8:	4287      	cmp	r7, r0
 8012aca:	d004      	beq.n	8012ad6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8012acc:	4b93      	ldr	r3, [pc, #588]	; (8012d1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8012ace:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8012ad2:	4a90      	ldr	r2, [pc, #576]	; (8012d14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8012ad4:	e7ea      	b.n	8012aac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8012ad6:	4630      	mov	r0, r6
 8012ad8:	f7fe f820 	bl	8010b1c <_ZNK8touchgfx6Bitmap7getDataEv>
 8012adc:	4607      	mov	r7, r0
 8012ade:	b920      	cbnz	r0, 8012aea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8012ae0:	4b8f      	ldr	r3, [pc, #572]	; (8012d20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 8012ae2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8012ae6:	4a8b      	ldr	r2, [pc, #556]	; (8012d14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8012ae8:	e7e0      	b.n	8012aac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8012aea:	f8d8 0000 	ldr.w	r0, [r8]
 8012aee:	ab06      	add	r3, sp, #24
 8012af0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012af4:	f9b8 a000 	ldrsh.w	sl, [r8]
 8012af8:	c303      	stmia	r3!, {r0, r1}
 8012afa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012afe:	ab08      	add	r3, sp, #32
 8012b00:	f8d9 0000 	ldr.w	r0, [r9]
 8012b04:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8012b08:	c303      	stmia	r3!, {r0, r1}
 8012b0a:	4630      	mov	r0, r6
 8012b0c:	f7fd fefe 	bl	801090c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012b10:	4680      	mov	r8, r0
 8012b12:	4630      	mov	r0, r6
 8012b14:	4e83      	ldr	r6, [pc, #524]	; (8012d24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 8012b16:	f7fd ff33 	bl	8010980 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012b1a:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8012b1e:	f10d 0920 	add.w	r9, sp, #32
 8012b22:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8012b26:	a806      	add	r0, sp, #24
 8012b28:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8012b2c:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8012b30:	f7fb fd5e 	bl	800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012b34:	4648      	mov	r0, r9
 8012b36:	f7fb fd5b 	bl	800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012b3a:	a80a      	add	r0, sp, #40	; 0x28
 8012b3c:	f7fb fd58 	bl	800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012b40:	4b79      	ldr	r3, [pc, #484]	; (8012d28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8012b42:	2100      	movs	r1, #0
 8012b44:	f9b6 2000 	ldrsh.w	r2, [r6]
 8012b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b4c:	4648      	mov	r0, r9
 8012b4e:	910c      	str	r1, [sp, #48]	; 0x30
 8012b50:	a90c      	add	r1, sp, #48	; 0x30
 8012b52:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8012b56:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012b5a:	f7f9 f9c9 	bl	800bef0 <_ZN8touchgfx4RectaNERKS0_>
 8012b5e:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8012b62:	9602      	str	r6, [sp, #8]
 8012b64:	f1bc 0f00 	cmp.w	ip, #0
 8012b68:	f000 80a4 	beq.w	8012cb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8012b6c:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8012b70:	2e00      	cmp	r6, #0
 8012b72:	f000 809f 	beq.w	8012cb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8012b76:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8012b7a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8012b7e:	4288      	cmp	r0, r1
 8012b80:	db36      	blt.n	8012bf0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8012b82:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8012b86:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	db30      	blt.n	8012bf0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8012b8e:	4460      	add	r0, ip
 8012b90:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8012b94:	4461      	add	r1, ip
 8012b96:	b200      	sxth	r0, r0
 8012b98:	b209      	sxth	r1, r1
 8012b9a:	4288      	cmp	r0, r1
 8012b9c:	dc28      	bgt.n	8012bf0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8012b9e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8012ba2:	4432      	add	r2, r6
 8012ba4:	440b      	add	r3, r1
 8012ba6:	b212      	sxth	r2, r2
 8012ba8:	b21b      	sxth	r3, r3
 8012baa:	429a      	cmp	r2, r3
 8012bac:	dc20      	bgt.n	8012bf0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8012bae:	6823      	ldr	r3, [r4, #0]
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bb4:	4798      	blx	r3
 8012bb6:	4682      	mov	sl, r0
 8012bb8:	6828      	ldr	r0, [r5, #0]
 8012bba:	6803      	ldr	r3, [r0, #0]
 8012bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bbe:	4798      	blx	r3
 8012bc0:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8012bc4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8012bc8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8012bcc:	9303      	str	r3, [sp, #12]
 8012bce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012bd2:	1a9b      	subs	r3, r3, r2
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	b21c      	sxth	r4, r3
 8012bd8:	2c00      	cmp	r4, #0
 8012bda:	dc0e      	bgt.n	8012bfa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 8012bdc:	b134      	cbz	r4, 8012bec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 8012bde:	f8ad 2020 	strh.w	r2, [sp, #32]
 8012be2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012be6:	4413      	add	r3, r2
 8012be8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012bec:	463c      	mov	r4, r7
 8012bee:	e00b      	b.n	8012c08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 8012bf0:	4b4e      	ldr	r3, [pc, #312]	; (8012d2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 8012bf2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012bf6:	4a47      	ldr	r2, [pc, #284]	; (8012d14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8012bf8:	e758      	b.n	8012aac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8012bfa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012bfe:	ebab 0303 	sub.w	r3, fp, r3
 8012c02:	443c      	add	r4, r7
 8012c04:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8012c08:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8012c0c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8012c10:	1a9b      	subs	r3, r3, r2
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	b219      	sxth	r1, r3
 8012c16:	2900      	cmp	r1, #0
 8012c18:	dd50      	ble.n	8012cbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 8012c1a:	9a03      	ldr	r2, [sp, #12]
 8012c1c:	fb02 4401 	mla	r4, r2, r1, r4
 8012c20:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8012c24:	1ad3      	subs	r3, r2, r3
 8012c26:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8012c2a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8012c2e:	f1bc 0f00 	cmp.w	ip, #0
 8012c32:	dd3f      	ble.n	8012cb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8012c34:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8012c38:	2e00      	cmp	r6, #0
 8012c3a:	dd3b      	ble.n	8012cb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8012c3c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8012c40:	2203      	movs	r2, #3
 8012c42:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012c46:	fb0a f801 	mul.w	r8, sl, r1
 8012c4a:	fb13 8802 	smlabb	r8, r3, r2, r8
 8012c4e:	9a02      	ldr	r2, [sp, #8]
 8012c50:	4480      	add	r8, r0
 8012c52:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8012c56:	8812      	ldrh	r2, [r2, #0]
 8012c58:	4584      	cmp	ip, r0
 8012c5a:	eba2 0303 	sub.w	r3, r2, r3
 8012c5e:	bfa8      	it	ge
 8012c60:	4684      	movge	ip, r0
 8012c62:	459c      	cmp	ip, r3
 8012c64:	bfa8      	it	ge
 8012c66:	469c      	movge	ip, r3
 8012c68:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8012c6c:	429e      	cmp	r6, r3
 8012c6e:	bfa8      	it	ge
 8012c70:	461e      	movge	r6, r3
 8012c72:	4b2d      	ldr	r3, [pc, #180]	; (8012d28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8012c74:	881b      	ldrh	r3, [r3, #0]
 8012c76:	1a59      	subs	r1, r3, r1
 8012c78:	4633      	mov	r3, r6
 8012c7a:	428e      	cmp	r6, r1
 8012c7c:	bfa8      	it	ge
 8012c7e:	460b      	movge	r3, r1
 8012c80:	4562      	cmp	r2, ip
 8012c82:	9302      	str	r3, [sp, #8]
 8012c84:	d12d      	bne.n	8012ce2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8012c86:	455a      	cmp	r2, fp
 8012c88:	d12b      	bne.n	8012ce2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8012c8a:	6828      	ldr	r0, [r5, #0]
 8012c8c:	6803      	ldr	r3, [r0, #0]
 8012c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c90:	4798      	blx	r3
 8012c92:	07c3      	lsls	r3, r0, #31
 8012c94:	d51b      	bpl.n	8012cce <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 8012c96:	6828      	ldr	r0, [r5, #0]
 8012c98:	9b02      	ldr	r3, [sp, #8]
 8012c9a:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8012c9e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012ca2:	6803      	ldr	r3, [r0, #0]
 8012ca4:	f8cd b000 	str.w	fp, [sp]
 8012ca8:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8012caa:	4623      	mov	r3, r4
 8012cac:	e899 0006 	ldmia.w	r9, {r1, r2}
 8012cb0:	47a8      	blx	r5
 8012cb2:	4607      	mov	r7, r0
 8012cb4:	4638      	mov	r0, r7
 8012cb6:	b00f      	add	sp, #60	; 0x3c
 8012cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cbc:	bf1f      	itttt	ne
 8012cbe:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8012cc2:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8012cc6:	189b      	addne	r3, r3, r2
 8012cc8:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8012ccc:	e7ad      	b.n	8012c2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 8012cce:	6828      	ldr	r0, [r5, #0]
 8012cd0:	4642      	mov	r2, r8
 8012cd2:	4621      	mov	r1, r4
 8012cd4:	6803      	ldr	r3, [r0, #0]
 8012cd6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012cd8:	9b02      	ldr	r3, [sp, #8]
 8012cda:	fb03 f30a 	mul.w	r3, r3, sl
 8012cde:	47a8      	blx	r5
 8012ce0:	e7e8      	b.n	8012cb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8012ce2:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 8012ce6:	f04f 0900 	mov.w	r9, #0
 8012cea:	9b02      	ldr	r3, [sp, #8]
 8012cec:	454b      	cmp	r3, r9
 8012cee:	dde1      	ble.n	8012cb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8012cf0:	6828      	ldr	r0, [r5, #0]
 8012cf2:	4642      	mov	r2, r8
 8012cf4:	4621      	mov	r1, r4
 8012cf6:	44d0      	add	r8, sl
 8012cf8:	6803      	ldr	r3, [r0, #0]
 8012cfa:	f109 0901 	add.w	r9, r9, #1
 8012cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d00:	461e      	mov	r6, r3
 8012d02:	465b      	mov	r3, fp
 8012d04:	47b0      	blx	r6
 8012d06:	9b03      	ldr	r3, [sp, #12]
 8012d08:	441c      	add	r4, r3
 8012d0a:	e7ee      	b.n	8012cea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8012d0c:	20001100 	.word	0x20001100
 8012d10:	0801c43e 	.word	0x0801c43e
 8012d14:	0801cc1d 	.word	0x0801cc1d
 8012d18:	0801c40c 	.word	0x0801c40c
 8012d1c:	0801c4f2 	.word	0x0801c4f2
 8012d20:	0801c547 	.word	0x0801c547
 8012d24:	200010fa 	.word	0x200010fa
 8012d28:	200010fc 	.word	0x200010fc
 8012d2c:	0801c585 	.word	0x0801c585

08012d30 <_ZN8touchgfx8LCD24bppC1Ev>:
 8012d30:	4a0b      	ldr	r2, [pc, #44]	; (8012d60 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 8012d32:	6002      	str	r2, [r0, #0]
 8012d34:	2200      	movs	r2, #0
 8012d36:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8012d3a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8012d3e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8012d42:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8012d46:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8012d4a:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8012d4e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8012d52:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8012d56:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8012d5a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8012d5e:	4770      	bx	lr
 8012d60:	0801c868 	.word	0x0801c868

08012d64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8012d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d68:	b093      	sub	sp, #76	; 0x4c
 8012d6a:	880c      	ldrh	r4, [r1, #0]
 8012d6c:	4605      	mov	r5, r0
 8012d6e:	460f      	mov	r7, r1
 8012d70:	4691      	mov	r9, r2
 8012d72:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8012d76:	b12c      	cbz	r4, 8012d84 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8012d78:	4b71      	ldr	r3, [pc, #452]	; (8012f40 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8012d7a:	2167      	movs	r1, #103	; 0x67
 8012d7c:	4a71      	ldr	r2, [pc, #452]	; (8012f44 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8012d7e:	4872      	ldr	r0, [pc, #456]	; (8012f48 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8012d80:	f005 ff2e 	bl	8018be0 <__assert_func>
 8012d84:	6810      	ldr	r0, [r2, #0]
 8012d86:	ae0e      	add	r6, sp, #56	; 0x38
 8012d88:	6851      	ldr	r1, [r2, #4]
 8012d8a:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8012f50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 8012d8e:	c603      	stmia	r6!, {r0, r1}
 8012d90:	6818      	ldr	r0, [r3, #0]
 8012d92:	ae10      	add	r6, sp, #64	; 0x40
 8012d94:	6859      	ldr	r1, [r3, #4]
 8012d96:	c603      	stmia	r6!, {r0, r1}
 8012d98:	a80e      	add	r0, sp, #56	; 0x38
 8012d9a:	f7fb fc29 	bl	800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012d9e:	4649      	mov	r1, r9
 8012da0:	a810      	add	r0, sp, #64	; 0x40
 8012da2:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8012f4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8012da6:	f7fb fc0b 	bl	800e5c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012daa:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8012dae:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8012db2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8012db6:	f8d9 0000 	ldr.w	r0, [r9]
 8012dba:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012dbe:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8012dc2:	440d      	add	r5, r1
 8012dc4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8012dc8:	440a      	add	r2, r1
 8012dca:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8012dce:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012dd2:	4413      	add	r3, r2
 8012dd4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8012dd8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8012ddc:	930b      	str	r3, [sp, #44]	; 0x2c
 8012dde:	6803      	ldr	r3, [r0, #0]
 8012de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012de4:	4798      	blx	r3
 8012de6:	2801      	cmp	r0, #1
 8012de8:	d11e      	bne.n	8012e28 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 8012dea:	220b      	movs	r2, #11
 8012dec:	9008      	str	r0, [sp, #32]
 8012dee:	b2b6      	uxth	r6, r6
 8012df0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012df4:	9207      	str	r2, [sp, #28]
 8012df6:	4629      	mov	r1, r5
 8012df8:	f8ba 2000 	ldrh.w	r2, [sl]
 8012dfc:	f8cd 8010 	str.w	r8, [sp, #16]
 8012e00:	9601      	str	r6, [sp, #4]
 8012e02:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8012e06:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8012e0a:	9203      	str	r2, [sp, #12]
 8012e0c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8012e10:	9202      	str	r2, [sp, #8]
 8012e12:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8012e16:	9200      	str	r2, [sp, #0]
 8012e18:	463a      	mov	r2, r7
 8012e1a:	f8d9 0000 	ldr.w	r0, [r9]
 8012e1e:	f7f9 fcb5 	bl	800c78c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8012e22:	b013      	add	sp, #76	; 0x4c
 8012e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e28:	f8d9 0000 	ldr.w	r0, [r9]
 8012e2c:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 8012e30:	6803      	ldr	r3, [r0, #0]
 8012e32:	6a1b      	ldr	r3, [r3, #32]
 8012e34:	4798      	blx	r3
 8012e36:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012e3a:	f8ba 3000 	ldrh.w	r3, [sl]
 8012e3e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8012e42:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012e46:	fb01 2303 	mla	r3, r1, r3, r2
 8012e4a:	4621      	mov	r1, r4
 8012e4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012e50:	4418      	add	r0, r3
 8012e52:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8012e56:	930c      	str	r3, [sp, #48]	; 0x30
 8012e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e5a:	4299      	cmp	r1, r3
 8012e5c:	da6a      	bge.n	8012f34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8012e5e:	1cc2      	adds	r2, r0, #3
 8012e60:	46aa      	mov	sl, r5
 8012e62:	ebaa 0305 	sub.w	r3, sl, r5
 8012e66:	429e      	cmp	r6, r3
 8012e68:	dd55      	ble.n	8012f16 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 8012e6a:	2404      	movs	r4, #4
 8012e6c:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8012e70:	fb14 4303 	smlabb	r3, r4, r3, r4
 8012e74:	eb07 0e03 	add.w	lr, r7, r3
 8012e78:	f89e 4003 	ldrb.w	r4, [lr, #3]
 8012e7c:	b184      	cbz	r4, 8012ea0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8012e7e:	2cff      	cmp	r4, #255	; 0xff
 8012e80:	f817 b003 	ldrb.w	fp, [r7, r3]
 8012e84:	d10e      	bne.n	8012ea4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8012e86:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8012e8a:	d10b      	bne.n	8012ea4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8012e8c:	f802 bc03 	strb.w	fp, [r2, #-3]
 8012e90:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8012e94:	f802 3c02 	strb.w	r3, [r2, #-2]
 8012e98:	f89e 3002 	ldrb.w	r3, [lr, #2]
 8012e9c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012ea0:	3203      	adds	r2, #3
 8012ea2:	e7de      	b.n	8012e62 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 8012ea4:	fb08 f404 	mul.w	r4, r8, r4
 8012ea8:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8012eac:	1c63      	adds	r3, r4, #1
 8012eae:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8012eb2:	121b      	asrs	r3, r3, #8
 8012eb4:	b29c      	uxth	r4, r3
 8012eb6:	43db      	mvns	r3, r3
 8012eb8:	fb1b fb04 	smulbb	fp, fp, r4
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	fb0c bc03 	mla	ip, ip, r3, fp
 8012ec2:	fa1f fc8c 	uxth.w	ip, ip
 8012ec6:	f10c 0b01 	add.w	fp, ip, #1
 8012eca:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8012ece:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 8012ed2:	fb1b fb03 	smulbb	fp, fp, r3
 8012ed6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8012eda:	f802 cc03 	strb.w	ip, [r2, #-3]
 8012ede:	f89e c001 	ldrb.w	ip, [lr, #1]
 8012ee2:	fb0c bc04 	mla	ip, ip, r4, fp
 8012ee6:	fa1f fc8c 	uxth.w	ip, ip
 8012eea:	f10c 0b01 	add.w	fp, ip, #1
 8012eee:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8012ef2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8012ef6:	f802 cc02 	strb.w	ip, [r2, #-2]
 8012efa:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8012efe:	f89e e002 	ldrb.w	lr, [lr, #2]
 8012f02:	fb1c f303 	smulbb	r3, ip, r3
 8012f06:	fb0e 3304 	mla	r3, lr, r4, r3
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	1c5c      	adds	r4, r3, #1
 8012f0e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8012f12:	121b      	asrs	r3, r3, #8
 8012f14:	e7c2      	b.n	8012e9c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8012f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f18:	3101      	adds	r1, #1
 8012f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f1c:	881b      	ldrh	r3, [r3, #0]
 8012f1e:	1b9b      	subs	r3, r3, r6
 8012f20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012f24:	4413      	add	r3, r2
 8012f26:	4418      	add	r0, r3
 8012f28:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8012f2c:	1b9b      	subs	r3, r3, r6
 8012f2e:	444b      	add	r3, r9
 8012f30:	441d      	add	r5, r3
 8012f32:	e791      	b.n	8012e58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8012f34:	4b05      	ldr	r3, [pc, #20]	; (8012f4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8012f36:	6818      	ldr	r0, [r3, #0]
 8012f38:	6803      	ldr	r3, [r0, #0]
 8012f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f3c:	4798      	blx	r3
 8012f3e:	e770      	b.n	8012e22 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8012f40:	0801c370 	.word	0x0801c370
 8012f44:	0801ca3f 	.word	0x0801ca3f
 8012f48:	0801c40c 	.word	0x0801c40c
 8012f4c:	20001100 	.word	0x20001100
 8012f50:	200010fa 	.word	0x200010fa

08012f54 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8012f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f58:	4614      	mov	r4, r2
 8012f5a:	880a      	ldrh	r2, [r1, #0]
 8012f5c:	b091      	sub	sp, #68	; 0x44
 8012f5e:	4680      	mov	r8, r0
 8012f60:	2a01      	cmp	r2, #1
 8012f62:	460e      	mov	r6, r1
 8012f64:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8012f68:	d005      	beq.n	8012f76 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 8012f6a:	4b6d      	ldr	r3, [pc, #436]	; (8013120 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8012f6c:	21b5      	movs	r1, #181	; 0xb5
 8012f6e:	4a6d      	ldr	r2, [pc, #436]	; (8013124 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8012f70:	486d      	ldr	r0, [pc, #436]	; (8013128 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8012f72:	f005 fe35 	bl	8018be0 <__assert_func>
 8012f76:	6820      	ldr	r0, [r4, #0]
 8012f78:	ad0c      	add	r5, sp, #48	; 0x30
 8012f7a:	6861      	ldr	r1, [r4, #4]
 8012f7c:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801312c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 8012f80:	c503      	stmia	r5!, {r0, r1}
 8012f82:	6818      	ldr	r0, [r3, #0]
 8012f84:	ad0e      	add	r5, sp, #56	; 0x38
 8012f86:	6859      	ldr	r1, [r3, #4]
 8012f88:	c503      	stmia	r5!, {r0, r1}
 8012f8a:	a80c      	add	r0, sp, #48	; 0x30
 8012f8c:	f7fb fb30 	bl	800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012f90:	4621      	mov	r1, r4
 8012f92:	a80e      	add	r0, sp, #56	; 0x38
 8012f94:	f7fb fb14 	bl	800e5c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012f98:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8012f9c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012fa0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8012fa4:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8012fa8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012fac:	eb08 0401 	add.w	r4, r8, r1
 8012fb0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8012fb4:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8013130 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 8012fb8:	440a      	add	r2, r1
 8012fba:	f8d8 0000 	ldr.w	r0, [r8]
 8012fbe:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8012fc2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8012fc6:	4413      	add	r3, r2
 8012fc8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012fcc:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8012fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8012fd2:	6803      	ldr	r3, [r0, #0]
 8012fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012fd8:	4798      	blx	r3
 8012fda:	2801      	cmp	r0, #1
 8012fdc:	d11e      	bne.n	801301c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 8012fde:	220b      	movs	r2, #11
 8012fe0:	9008      	str	r0, [sp, #32]
 8012fe2:	b2ad      	uxth	r5, r5
 8012fe4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012fe8:	9207      	str	r2, [sp, #28]
 8012fea:	4621      	mov	r1, r4
 8012fec:	f8b9 2000 	ldrh.w	r2, [r9]
 8012ff0:	9501      	str	r5, [sp, #4]
 8012ff2:	9206      	str	r2, [sp, #24]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8012ffa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012ffe:	9203      	str	r2, [sp, #12]
 8013000:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013004:	9202      	str	r2, [sp, #8]
 8013006:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801300a:	9200      	str	r2, [sp, #0]
 801300c:	4632      	mov	r2, r6
 801300e:	f8d8 0000 	ldr.w	r0, [r8]
 8013012:	f7f9 fbbb 	bl	800c78c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8013016:	b011      	add	sp, #68	; 0x44
 8013018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801301c:	f8d8 0000 	ldr.w	r0, [r8]
 8013020:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 8013024:	6803      	ldr	r3, [r0, #0]
 8013026:	6a1b      	ldr	r3, [r3, #32]
 8013028:	4798      	blx	r3
 801302a:	f8b9 3000 	ldrh.w	r3, [r9]
 801302e:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8013032:	f04f 0e00 	mov.w	lr, #0
 8013036:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801303a:	fa1f f987 	uxth.w	r9, r7
 801303e:	fb01 2303 	mla	r3, r1, r3, r2
 8013042:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 8013046:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801304a:	b289      	uxth	r1, r1
 801304c:	4418      	add	r0, r3
 801304e:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8013052:	930b      	str	r3, [sp, #44]	; 0x2c
 8013054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013056:	459e      	cmp	lr, r3
 8013058:	da5c      	bge.n	8013114 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801305a:	1cc3      	adds	r3, r0, #3
 801305c:	46a2      	mov	sl, r4
 801305e:	ebaa 0204 	sub.w	r2, sl, r4
 8013062:	4295      	cmp	r5, r2
 8013064:	dd46      	ble.n	80130f4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 8013066:	f04f 0c03 	mov.w	ip, #3
 801306a:	f04f 0b04 	mov.w	fp, #4
 801306e:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8013072:	2fff      	cmp	r7, #255	; 0xff
 8013074:	fb1c b202 	smlabb	r2, ip, r2, fp
 8013078:	eb06 0c02 	add.w	ip, r6, r2
 801307c:	f816 b002 	ldrb.w	fp, [r6, r2]
 8013080:	d02f      	beq.n	80130e2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 8013082:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8013086:	fb12 f201 	smulbb	r2, r2, r1
 801308a:	fb0b 2209 	mla	r2, fp, r9, r2
 801308e:	b292      	uxth	r2, r2
 8013090:	f102 0b01 	add.w	fp, r2, #1
 8013094:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8013098:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801309c:	fb1b fb01 	smulbb	fp, fp, r1
 80130a0:	1212      	asrs	r2, r2, #8
 80130a2:	f803 2c03 	strb.w	r2, [r3, #-3]
 80130a6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80130aa:	fb02 b209 	mla	r2, r2, r9, fp
 80130ae:	b292      	uxth	r2, r2
 80130b0:	f102 0b01 	add.w	fp, r2, #1
 80130b4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80130b8:	1212      	asrs	r2, r2, #8
 80130ba:	f803 2c02 	strb.w	r2, [r3, #-2]
 80130be:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80130c2:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 80130c6:	fb1c fc01 	smulbb	ip, ip, r1
 80130ca:	fb02 c209 	mla	r2, r2, r9, ip
 80130ce:	b292      	uxth	r2, r2
 80130d0:	f102 0c01 	add.w	ip, r2, #1
 80130d4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80130d8:	1212      	asrs	r2, r2, #8
 80130da:	f803 2c01 	strb.w	r2, [r3, #-1]
 80130de:	3303      	adds	r3, #3
 80130e0:	e7bd      	b.n	801305e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 80130e2:	f803 bc03 	strb.w	fp, [r3, #-3]
 80130e6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80130ea:	f803 2c02 	strb.w	r2, [r3, #-2]
 80130ee:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80130f2:	e7f2      	b.n	80130da <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 80130f4:	4b0d      	ldr	r3, [pc, #52]	; (801312c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80130f6:	f10e 0e01 	add.w	lr, lr, #1
 80130fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80130fc:	881b      	ldrh	r3, [r3, #0]
 80130fe:	1b5b      	subs	r3, r3, r5
 8013100:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013104:	4413      	add	r3, r2
 8013106:	4418      	add	r0, r3
 8013108:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801310c:	1b5b      	subs	r3, r3, r5
 801310e:	4443      	add	r3, r8
 8013110:	441c      	add	r4, r3
 8013112:	e79f      	b.n	8013054 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 8013114:	4b06      	ldr	r3, [pc, #24]	; (8013130 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8013116:	6818      	ldr	r0, [r3, #0]
 8013118:	6803      	ldr	r3, [r0, #0]
 801311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801311c:	4798      	blx	r3
 801311e:	e77a      	b.n	8013016 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8013120:	0801c27c 	.word	0x0801c27c
 8013124:	0801c932 	.word	0x0801c932
 8013128:	0801c40c 	.word	0x0801c40c
 801312c:	200010fa 	.word	0x200010fa
 8013130:	20001100 	.word	0x20001100

08013134 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8013134:	b570      	push	{r4, r5, r6, lr}
 8013136:	780d      	ldrb	r5, [r1, #0]
 8013138:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801313c:	2d01      	cmp	r5, #1
 801313e:	d00d      	beq.n	801315c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8013140:	d307      	bcc.n	8013152 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8013142:	2d02      	cmp	r5, #2
 8013144:	d10f      	bne.n	8013166 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8013146:	4b08      	ldr	r3, [pc, #32]	; (8013168 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8013148:	215a      	movs	r1, #90	; 0x5a
 801314a:	4a08      	ldr	r2, [pc, #32]	; (801316c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801314c:	4808      	ldr	r0, [pc, #32]	; (8013170 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801314e:	f005 fd47 	bl	8018be0 <__assert_func>
 8013152:	9404      	str	r4, [sp, #16]
 8013154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013158:	f7ff be04 	b.w	8012d64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801315c:	9404      	str	r4, [sp, #16]
 801315e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013162:	f7ff bef7 	b.w	8012f54 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8013166:	bd70      	pop	{r4, r5, r6, pc}
 8013168:	0801c231 	.word	0x0801c231
 801316c:	0801c8b0 	.word	0x0801c8b0
 8013170:	0801c40c 	.word	0x0801c40c

08013174 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8013174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013178:	b08b      	sub	sp, #44	; 0x2c
 801317a:	460c      	mov	r4, r1
 801317c:	4680      	mov	r8, r0
 801317e:	469a      	mov	sl, r3
 8013180:	6808      	ldr	r0, [r1, #0]
 8013182:	ab06      	add	r3, sp, #24
 8013184:	6849      	ldr	r1, [r1, #4]
 8013186:	c303      	stmia	r3!, {r0, r1}
 8013188:	6810      	ldr	r0, [r2, #0]
 801318a:	ab08      	add	r3, sp, #32
 801318c:	6851      	ldr	r1, [r2, #4]
 801318e:	c303      	stmia	r3!, {r0, r1}
 8013190:	a806      	add	r0, sp, #24
 8013192:	f7fb fa2d 	bl	800e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013196:	4621      	mov	r1, r4
 8013198:	a808      	add	r0, sp, #32
 801319a:	4c61      	ldr	r4, [pc, #388]	; (8013320 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801319c:	f7fb fa10 	bl	800e5c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80131a0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80131a4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80131a8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80131ac:	6820      	ldr	r0, [r4, #0]
 80131ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 80131b2:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 80131b6:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 80131ba:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 80131be:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80131c2:	440a      	add	r2, r1
 80131c4:	f8ad 2020 	strh.w	r2, [sp, #32]
 80131c8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80131cc:	4413      	add	r3, r2
 80131ce:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80131d2:	6803      	ldr	r3, [r0, #0]
 80131d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131d6:	4798      	blx	r3
 80131d8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80131dc:	d118      	bne.n	8013210 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80131de:	f010 0f20 	tst.w	r0, #32
 80131e2:	6820      	ldr	r0, [r4, #0]
 80131e4:	d017      	beq.n	8013216 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80131e6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80131ea:	b2bf      	uxth	r7, r7
 80131ec:	6801      	ldr	r1, [r0, #0]
 80131ee:	9402      	str	r4, [sp, #8]
 80131f0:	fa1f f489 	uxth.w	r4, r9
 80131f4:	f8cd a00c 	str.w	sl, [sp, #12]
 80131f8:	9401      	str	r4, [sp, #4]
 80131fa:	9700      	str	r7, [sp, #0]
 80131fc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8013200:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8013202:	4641      	mov	r1, r8
 8013204:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013208:	47a0      	blx	r4
 801320a:	b00b      	add	sp, #44	; 0x2c
 801320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013210:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013214:	e7e5      	b.n	80131e2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8013216:	6803      	ldr	r3, [r0, #0]
 8013218:	6a1b      	ldr	r3, [r3, #32]
 801321a:	4798      	blx	r3
 801321c:	4b41      	ldr	r3, [pc, #260]	; (8013324 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801321e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8013222:	f04f 0c00 	mov.w	ip, #0
 8013226:	881a      	ldrh	r2, [r3, #0]
 8013228:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801322c:	fb04 1202 	mla	r2, r4, r2, r1
 8013230:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013234:	4410      	add	r0, r2
 8013236:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801323a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801323e:	0092      	lsls	r2, r2, #2
 8013240:	9105      	str	r1, [sp, #20]
 8013242:	9204      	str	r2, [sp, #16]
 8013244:	45cc      	cmp	ip, r9
 8013246:	da65      	bge.n	8013314 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 8013248:	1cc4      	adds	r4, r0, #3
 801324a:	f108 0504 	add.w	r5, r8, #4
 801324e:	f04f 0e00 	mov.w	lr, #0
 8013252:	45be      	cmp	lr, r7
 8013254:	da4d      	bge.n	80132f2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 8013256:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801325a:	b181      	cbz	r1, 801327e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801325c:	29ff      	cmp	r1, #255	; 0xff
 801325e:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 8013262:	d111      	bne.n	8013288 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8013264:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8013268:	d10e      	bne.n	8013288 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801326a:	f804 bc03 	strb.w	fp, [r4, #-3]
 801326e:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8013272:	f804 2c02 	strb.w	r2, [r4, #-2]
 8013276:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801327a:	f804 2c01 	strb.w	r2, [r4, #-1]
 801327e:	f10e 0e01 	add.w	lr, lr, #1
 8013282:	3403      	adds	r4, #3
 8013284:	3504      	adds	r5, #4
 8013286:	e7e4      	b.n	8013252 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8013288:	fb0a f101 	mul.w	r1, sl, r1
 801328c:	1c4a      	adds	r2, r1, #1
 801328e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8013292:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8013296:	1212      	asrs	r2, r2, #8
 8013298:	b296      	uxth	r6, r2
 801329a:	43d2      	mvns	r2, r2
 801329c:	fb1b fb06 	smulbb	fp, fp, r6
 80132a0:	b2d2      	uxtb	r2, r2
 80132a2:	fb01 b102 	mla	r1, r1, r2, fp
 80132a6:	b289      	uxth	r1, r1
 80132a8:	f101 0b01 	add.w	fp, r1, #1
 80132ac:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80132b0:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 80132b4:	fb1b fb02 	smulbb	fp, fp, r2
 80132b8:	1209      	asrs	r1, r1, #8
 80132ba:	f804 1c03 	strb.w	r1, [r4, #-3]
 80132be:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 80132c2:	fb01 b106 	mla	r1, r1, r6, fp
 80132c6:	b289      	uxth	r1, r1
 80132c8:	f101 0b01 	add.w	fp, r1, #1
 80132cc:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80132d0:	1209      	asrs	r1, r1, #8
 80132d2:	f804 1c02 	strb.w	r1, [r4, #-2]
 80132d6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80132da:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80132de:	fb11 f202 	smulbb	r2, r1, r2
 80132e2:	fb0b 2206 	mla	r2, fp, r6, r2
 80132e6:	b292      	uxth	r2, r2
 80132e8:	1c56      	adds	r6, r2, #1
 80132ea:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80132ee:	1212      	asrs	r2, r2, #8
 80132f0:	e7c3      	b.n	801327a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 80132f2:	881a      	ldrh	r2, [r3, #0]
 80132f4:	f10c 0c01 	add.w	ip, ip, #1
 80132f8:	9905      	ldr	r1, [sp, #20]
 80132fa:	1bd2      	subs	r2, r2, r7
 80132fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013300:	440a      	add	r2, r1
 8013302:	9904      	ldr	r1, [sp, #16]
 8013304:	4410      	add	r0, r2
 8013306:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801330a:	1bd2      	subs	r2, r2, r7
 801330c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013310:	4490      	add	r8, r2
 8013312:	e797      	b.n	8013244 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8013314:	4b02      	ldr	r3, [pc, #8]	; (8013320 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 8013316:	6818      	ldr	r0, [r3, #0]
 8013318:	6803      	ldr	r3, [r0, #0]
 801331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801331c:	4798      	blx	r3
 801331e:	e774      	b.n	801320a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8013320:	20001100 	.word	0x20001100
 8013324:	200010fa 	.word	0x200010fa

08013328 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8013328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801332c:	b085      	sub	sp, #20
 801332e:	4606      	mov	r6, r0
 8013330:	460c      	mov	r4, r1
 8013332:	4691      	mov	r9, r2
 8013334:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8013338:	4698      	mov	r8, r3
 801333a:	b385      	cbz	r5, 801339e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801333c:	4608      	mov	r0, r1
 801333e:	f7fd fae5 	bl	801090c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013342:	4607      	mov	r7, r0
 8013344:	4620      	mov	r0, r4
 8013346:	f7fd fb1b 	bl	8010980 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801334a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801334e:	4620      	mov	r0, r4
 8013350:	f8ad 9008 	strh.w	r9, [sp, #8]
 8013354:	f8ad 800a 	strh.w	r8, [sp, #10]
 8013358:	f8ad 700c 	strh.w	r7, [sp, #12]
 801335c:	f7fd fc62 	bl	8010c24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013360:	2801      	cmp	r0, #1
 8013362:	d00f      	beq.n	8013384 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8013364:	4620      	mov	r0, r4
 8013366:	f7fd fc5d 	bl	8010c24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801336a:	2802      	cmp	r0, #2
 801336c:	d00a      	beq.n	8013384 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801336e:	4620      	mov	r0, r4
 8013370:	f7fd fc58 	bl	8010c24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013374:	280b      	cmp	r0, #11
 8013376:	d005      	beq.n	8013384 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8013378:	4b1b      	ldr	r3, [pc, #108]	; (80133e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801337a:	2142      	movs	r1, #66	; 0x42
 801337c:	4a1b      	ldr	r2, [pc, #108]	; (80133ec <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801337e:	481c      	ldr	r0, [pc, #112]	; (80133f0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 8013380:	f005 fc2e 	bl	8018be0 <__assert_func>
 8013384:	4620      	mov	r0, r4
 8013386:	f7fd fc4d 	bl	8010c24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801338a:	2802      	cmp	r0, #2
 801338c:	4620      	mov	r0, r4
 801338e:	d109      	bne.n	80133a4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 8013390:	f7fd fbc4 	bl	8010b1c <_ZNK8touchgfx6Bitmap7getDataEv>
 8013394:	462b      	mov	r3, r5
 8013396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013398:	a902      	add	r1, sp, #8
 801339a:	f7ff feeb 	bl	8013174 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801339e:	b005      	add	sp, #20
 80133a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133a4:	f7fd fc3e 	bl	8010c24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80133a8:	280b      	cmp	r0, #11
 80133aa:	d10e      	bne.n	80133ca <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 80133ac:	4620      	mov	r0, r4
 80133ae:	f7fd fbb5 	bl	8010b1c <_ZNK8touchgfx6Bitmap7getDataEv>
 80133b2:	4606      	mov	r6, r0
 80133b4:	4620      	mov	r0, r4
 80133b6:	f7fd fbe3 	bl	8010b80 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80133ba:	9500      	str	r5, [sp, #0]
 80133bc:	4601      	mov	r1, r0
 80133be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133c0:	aa02      	add	r2, sp, #8
 80133c2:	4630      	mov	r0, r6
 80133c4:	f7ff feb6 	bl	8013134 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80133c8:	e7e9      	b.n	801339e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80133ca:	6833      	ldr	r3, [r6, #0]
 80133cc:	4620      	mov	r0, r4
 80133ce:	691f      	ldr	r7, [r3, #16]
 80133d0:	f7fd fba4 	bl	8010b1c <_ZNK8touchgfx6Bitmap7getDataEv>
 80133d4:	2300      	movs	r3, #0
 80133d6:	4601      	mov	r1, r0
 80133d8:	aa02      	add	r2, sp, #8
 80133da:	4630      	mov	r0, r6
 80133dc:	e9cd 5300 	strd	r5, r3, [sp]
 80133e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133e2:	47b8      	blx	r7
 80133e4:	e7db      	b.n	801339e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80133e6:	bf00      	nop
 80133e8:	0801c2ca 	.word	0x0801c2ca
 80133ec:	0801c9bb 	.word	0x0801c9bb
 80133f0:	0801c40c 	.word	0x0801c40c

080133f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80133f4:	b570      	push	{r4, r5, r6, lr}
 80133f6:	9d04      	ldr	r5, [sp, #16]
 80133f8:	460c      	mov	r4, r1
 80133fa:	4619      	mov	r1, r3
 80133fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013400:	2a0c      	cmp	r2, #12
 8013402:	d826      	bhi.n	8013452 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 8013404:	e8df f002 	tbb	[pc, r2]
 8013408:	200e1407 	.word	0x200e1407
 801340c:	20202020 	.word	0x20202020
 8013410:	20202020 	.word	0x20202020
 8013414:	20          	.byte	0x20
 8013415:	00          	.byte	0x00
 8013416:	4b0f      	ldr	r3, [pc, #60]	; (8013454 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8013418:	f240 117f 	movw	r1, #383	; 0x17f
 801341c:	4a0e      	ldr	r2, [pc, #56]	; (8013458 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801341e:	480f      	ldr	r0, [pc, #60]	; (801345c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8013420:	f005 fbde 	bl	8018be0 <__assert_func>
 8013424:	462a      	mov	r2, r5
 8013426:	4620      	mov	r0, r4
 8013428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801342c:	f7ff bea2 	b.w	8013174 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8013430:	6802      	ldr	r2, [r0, #0]
 8013432:	2600      	movs	r6, #0
 8013434:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8013438:	6916      	ldr	r6, [r2, #16]
 801343a:	462b      	mov	r3, r5
 801343c:	460a      	mov	r2, r1
 801343e:	4621      	mov	r1, r4
 8013440:	46b4      	mov	ip, r6
 8013442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013446:	4760      	bx	ip
 8013448:	4b05      	ldr	r3, [pc, #20]	; (8013460 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801344a:	f240 1191 	movw	r1, #401	; 0x191
 801344e:	4a02      	ldr	r2, [pc, #8]	; (8013458 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8013450:	e7e5      	b.n	801341e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8013452:	bd70      	pop	{r4, r5, r6, pc}
 8013454:	0801c5e5 	.word	0x0801c5e5
 8013458:	0801cca3 	.word	0x0801cca3
 801345c:	0801c40c 	.word	0x0801c40c
 8013460:	0801c626 	.word	0x0801c626

08013464 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8013464:	b158      	cbz	r0, 801347e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8013466:	2902      	cmp	r1, #2
 8013468:	d00f      	beq.n	801348a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801346a:	2903      	cmp	r1, #3
 801346c:	d010      	beq.n	8013490 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801346e:	2901      	cmp	r1, #1
 8013470:	d101      	bne.n	8013476 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8013472:	2001      	movs	r0, #1
 8013474:	4770      	bx	lr
 8013476:	4b08      	ldr	r3, [pc, #32]	; (8013498 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8013478:	8819      	ldrh	r1, [r3, #0]
 801347a:	4248      	negs	r0, r1
 801347c:	4770      	bx	lr
 801347e:	2902      	cmp	r1, #2
 8013480:	d006      	beq.n	8013490 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8013482:	2903      	cmp	r1, #3
 8013484:	d0f7      	beq.n	8013476 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8013486:	2901      	cmp	r1, #1
 8013488:	d1f3      	bne.n	8013472 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801348a:	4b03      	ldr	r3, [pc, #12]	; (8013498 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801348c:	8818      	ldrh	r0, [r3, #0]
 801348e:	4770      	bx	lr
 8013490:	f04f 30ff 	mov.w	r0, #4294967295
 8013494:	4770      	bx	lr
 8013496:	bf00      	nop
 8013498:	200010fa 	.word	0x200010fa

0801349c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801349c:	b170      	cbz	r0, 80134bc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801349e:	2902      	cmp	r1, #2
 80134a0:	d012      	beq.n	80134c8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 80134a2:	2903      	cmp	r1, #3
 80134a4:	d006      	beq.n	80134b4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80134a6:	2901      	cmp	r1, #1
 80134a8:	d001      	beq.n	80134ae <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80134aa:	2001      	movs	r0, #1
 80134ac:	4770      	bx	lr
 80134ae:	4b08      	ldr	r3, [pc, #32]	; (80134d0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80134b0:	8818      	ldrh	r0, [r3, #0]
 80134b2:	4770      	bx	lr
 80134b4:	4b06      	ldr	r3, [pc, #24]	; (80134d0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80134b6:	8818      	ldrh	r0, [r3, #0]
 80134b8:	4240      	negs	r0, r0
 80134ba:	4770      	bx	lr
 80134bc:	2902      	cmp	r1, #2
 80134be:	d0f9      	beq.n	80134b4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80134c0:	2903      	cmp	r1, #3
 80134c2:	d0f2      	beq.n	80134aa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 80134c4:	2901      	cmp	r1, #1
 80134c6:	d1f2      	bne.n	80134ae <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80134c8:	f04f 30ff 	mov.w	r0, #4294967295
 80134cc:	4770      	bx	lr
 80134ce:	bf00      	nop
 80134d0:	200010fa 	.word	0x200010fa

080134d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80134d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d8:	b095      	sub	sp, #84	; 0x54
 80134da:	9109      	str	r1, [sp, #36]	; 0x24
 80134dc:	a910      	add	r1, sp, #64	; 0x40
 80134de:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 80134e2:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 80134e6:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 80134ea:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 80134ee:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 80134f2:	e881 000c 	stmia.w	r1, {r2, r3}
 80134f6:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 80134fa:	9306      	str	r3, [sp, #24]
 80134fc:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8013500:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 8013504:	930e      	str	r3, [sp, #56]	; 0x38
 8013506:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801350a:	798f      	ldrb	r7, [r1, #6]
 801350c:	930a      	str	r3, [sp, #40]	; 0x28
 801350e:	7b4b      	ldrb	r3, [r1, #13]
 8013510:	0158      	lsls	r0, r3, #5
 8013512:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8013516:	4338      	orrs	r0, r7
 8013518:	9008      	str	r0, [sp, #32]
 801351a:	f000 8174 	beq.w	8013806 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801351e:	011b      	lsls	r3, r3, #4
 8013520:	79c8      	ldrb	r0, [r1, #7]
 8013522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013526:	4303      	orrs	r3, r0
 8013528:	9307      	str	r3, [sp, #28]
 801352a:	f000 816c 	beq.w	8013806 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801352e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8013532:	b29b      	uxth	r3, r3
 8013534:	2e00      	cmp	r6, #0
 8013536:	f000 8112 	beq.w	801375e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801353a:	1af6      	subs	r6, r6, r3
 801353c:	b2b6      	uxth	r6, r6
 801353e:	0433      	lsls	r3, r6, #16
 8013540:	d502      	bpl.n	8013548 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8013542:	1bad      	subs	r5, r5, r6
 8013544:	2600      	movs	r6, #0
 8013546:	b22d      	sxth	r5, r5
 8013548:	f9b2 1000 	ldrsh.w	r1, [r2]
 801354c:	a810      	add	r0, sp, #64	; 0x40
 801354e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8013552:	428d      	cmp	r5, r1
 8013554:	b28b      	uxth	r3, r1
 8013556:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801355a:	bfbf      	itttt	lt
 801355c:	18f6      	addlt	r6, r6, r3
 801355e:	1b75      	sublt	r5, r6, r5
 8013560:	b2ae      	uxthlt	r6, r5
 8013562:	460d      	movlt	r5, r1
 8013564:	8891      	ldrh	r1, [r2, #4]
 8013566:	440b      	add	r3, r1
 8013568:	4629      	mov	r1, r5
 801356a:	b21b      	sxth	r3, r3
 801356c:	930d      	str	r3, [sp, #52]	; 0x34
 801356e:	88d3      	ldrh	r3, [r2, #6]
 8013570:	9a06      	ldr	r2, [sp, #24]
 8013572:	449a      	add	sl, r3
 8013574:	fa0f f38a 	sxth.w	r3, sl
 8013578:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801357c:	930c      	str	r3, [sp, #48]	; 0x30
 801357e:	4bb8      	ldr	r3, [pc, #736]	; (8013860 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8013580:	f893 b000 	ldrb.w	fp, [r3]
 8013584:	f10b 3cff 	add.w	ip, fp, #4294967295
 8013588:	f1dc 0300 	rsbs	r3, ip, #0
 801358c:	eb43 030c 	adc.w	r3, r3, ip
 8013590:	930b      	str	r3, [sp, #44]	; 0x2c
 8013592:	464b      	mov	r3, r9
 8013594:	f7fa fd78 	bl	800e088 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8013598:	4629      	mov	r1, r5
 801359a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801359e:	464b      	mov	r3, r9
 80135a0:	9a06      	ldr	r2, [sp, #24]
 80135a2:	a810      	add	r0, sp, #64	; 0x40
 80135a4:	f7fa fd88 	bl	800e0b8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80135a8:	a914      	add	r1, sp, #80	; 0x50
 80135aa:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80135ae:	a813      	add	r0, sp, #76	; 0x4c
 80135b0:	f7fa ffd4 	bl	800e55c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80135b4:	f1b9 0f00 	cmp.w	r9, #0
 80135b8:	f040 80d4 	bne.w	8013764 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 80135bc:	f1bb 0f01 	cmp.w	fp, #1
 80135c0:	f040 80d8 	bne.w	8013774 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 80135c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	f040 8122 	bne.w	8013810 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 80135cc:	4ba5      	ldr	r3, [pc, #660]	; (8013864 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 80135ce:	6818      	ldr	r0, [r3, #0]
 80135d0:	6803      	ldr	r3, [r0, #0]
 80135d2:	6a1b      	ldr	r3, [r3, #32]
 80135d4:	4798      	blx	r3
 80135d6:	4aa4      	ldr	r2, [pc, #656]	; (8013868 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 80135d8:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80135dc:	8811      	ldrh	r1, [r2, #0]
 80135de:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 80135e2:	fb01 2303 	mla	r3, r1, r3, r2
 80135e6:	2201      	movs	r2, #1
 80135e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80135ec:	4590      	cmp	r8, r2
 80135ee:	4403      	add	r3, r0
 80135f0:	9307      	str	r3, [sp, #28]
 80135f2:	fa02 f308 	lsl.w	r3, r2, r8
 80135f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80135fa:	b2db      	uxtb	r3, r3
 80135fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80135fe:	f000 8109 	beq.w	8013814 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 8013602:	f1b8 0f02 	cmp.w	r8, #2
 8013606:	f000 813e 	beq.w	8013886 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801360a:	f1b8 0f04 	cmp.w	r8, #4
 801360e:	f000 8132 	beq.w	8013876 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8013612:	b906      	cbnz	r6, 8013616 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 8013614:	b174      	cbz	r4, 8013634 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 8013616:	fb17 6304 	smlabb	r3, r7, r4, r6
 801361a:	9924      	ldr	r1, [sp, #144]	; 0x90
 801361c:	ebaa 0a04 	sub.w	sl, sl, r4
 8013620:	fb13 f308 	smulbb	r3, r3, r8
 8013624:	fa1f fa8a 	uxth.w	sl, sl
 8013628:	b29b      	uxth	r3, r3
 801362a:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801362e:	f003 0407 	and.w	r4, r3, #7
 8013632:	9124      	str	r1, [sp, #144]	; 0x90
 8013634:	4649      	mov	r1, r9
 8013636:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013638:	f7ff ff14 	bl	8013464 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801363c:	4649      	mov	r1, r9
 801363e:	4683      	mov	fp, r0
 8013640:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013642:	f7ff ff2b 	bl	801349c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8013646:	9906      	ldr	r1, [sp, #24]
 8013648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801364a:	1bad      	subs	r5, r5, r6
 801364c:	1a5b      	subs	r3, r3, r1
 801364e:	459a      	cmp	sl, r3
 8013650:	bfa8      	it	ge
 8013652:	469a      	movge	sl, r3
 8013654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013656:	1b5d      	subs	r5, r3, r5
 8013658:	9b08      	ldr	r3, [sp, #32]
 801365a:	429d      	cmp	r5, r3
 801365c:	bfd4      	ite	le
 801365e:	ebc6 0605 	rsble	r6, r6, r5
 8013662:	ebc6 0603 	rsbgt	r6, r6, r3
 8013666:	1bbf      	subs	r7, r7, r6
 8013668:	fb0b 0016 	mls	r0, fp, r6, r0
 801366c:	fb08 f307 	mul.w	r3, r8, r7
 8013670:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013674:	9308      	str	r3, [sp, #32]
 8013676:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013678:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801367c:	930b      	str	r3, [sp, #44]	; 0x2c
 801367e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013680:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8013684:	930c      	str	r3, [sp, #48]	; 0x30
 8013686:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013688:	b2db      	uxtb	r3, r3
 801368a:	930d      	str	r3, [sp, #52]	; 0x34
 801368c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801368e:	7819      	ldrb	r1, [r3, #0]
 8013690:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8013694:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 8013698:	4121      	asrs	r1, r4
 801369a:	9306      	str	r3, [sp, #24]
 801369c:	fb03 0b0b 	mla	fp, r3, fp, r0
 80136a0:	b2c9      	uxtb	r1, r1
 80136a2:	f1ba 0f00 	cmp.w	sl, #0
 80136a6:	f340 80d1 	ble.w	801384c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80136aa:	46b6      	mov	lr, r6
 80136ac:	9807      	ldr	r0, [sp, #28]
 80136ae:	f1be 0f00 	cmp.w	lr, #0
 80136b2:	f340 80b8 	ble.w	8013826 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 80136b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136b8:	400b      	ands	r3, r1
 80136ba:	d03e      	beq.n	801373a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 80136bc:	fb13 f302 	smulbb	r3, r3, r2
 80136c0:	2bfe      	cmp	r3, #254	; 0xfe
 80136c2:	dd03      	ble.n	80136cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 80136c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80136c6:	2dff      	cmp	r5, #255	; 0xff
 80136c8:	f000 80a6 	beq.w	8013818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80136cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80136ce:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80136d0:	fb15 f303 	smulbb	r3, r5, r3
 80136d4:	b29b      	uxth	r3, r3
 80136d6:	1c5d      	adds	r5, r3, #1
 80136d8:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80136dc:	7805      	ldrb	r5, [r0, #0]
 80136de:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80136e2:	fa1f fc83 	uxth.w	ip, r3
 80136e6:	43db      	mvns	r3, r3
 80136e8:	fb17 f90c 	smulbb	r9, r7, ip
 80136ec:	b2db      	uxtb	r3, r3
 80136ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80136f0:	fb05 9503 	mla	r5, r5, r3, r9
 80136f4:	b2ad      	uxth	r5, r5
 80136f6:	f105 0901 	add.w	r9, r5, #1
 80136fa:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80136fe:	fb17 f90c 	smulbb	r9, r7, ip
 8013702:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013704:	122d      	asrs	r5, r5, #8
 8013706:	fb17 fc0c 	smulbb	ip, r7, ip
 801370a:	7005      	strb	r5, [r0, #0]
 801370c:	7845      	ldrb	r5, [r0, #1]
 801370e:	fb05 9503 	mla	r5, r5, r3, r9
 8013712:	b2ad      	uxth	r5, r5
 8013714:	f105 0901 	add.w	r9, r5, #1
 8013718:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801371c:	122d      	asrs	r5, r5, #8
 801371e:	7045      	strb	r5, [r0, #1]
 8013720:	7885      	ldrb	r5, [r0, #2]
 8013722:	fb05 cc03 	mla	ip, r5, r3, ip
 8013726:	fa1f fc8c 	uxth.w	ip, ip
 801372a:	f10c 0301 	add.w	r3, ip, #1
 801372e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8013732:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8013736:	f880 c002 	strb.w	ip, [r0, #2]
 801373a:	4444      	add	r4, r8
 801373c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013740:	b2a4      	uxth	r4, r4
 8013742:	2c07      	cmp	r4, #7
 8013744:	bf89      	itett	hi
 8013746:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 8013748:	fa41 f108 	asrls.w	r1, r1, r8
 801374c:	2400      	movhi	r4, #0
 801374e:	7859      	ldrbhi	r1, [r3, #1]
 8013750:	bf8a      	itet	hi
 8013752:	3301      	addhi	r3, #1
 8013754:	b2c9      	uxtbls	r1, r1
 8013756:	9324      	strhi	r3, [sp, #144]	; 0x90
 8013758:	9b06      	ldr	r3, [sp, #24]
 801375a:	4418      	add	r0, r3
 801375c:	e7a7      	b.n	80136ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801375e:	441d      	add	r5, r3
 8013760:	b22d      	sxth	r5, r5
 8013762:	e6f1      	b.n	8013548 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8013764:	f1b9 0f01 	cmp.w	r9, #1
 8013768:	f47f af2c 	bne.w	80135c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801376c:	f1bb 0f01 	cmp.w	fp, #1
 8013770:	f47f af28 	bne.w	80135c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8013774:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8013864 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8013778:	f8db 0000 	ldr.w	r0, [fp]
 801377c:	6803      	ldr	r3, [r0, #0]
 801377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013780:	4798      	blx	r3
 8013782:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8013786:	465a      	mov	r2, fp
 8013788:	d006      	beq.n	8013798 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801378a:	f1b8 0f04 	cmp.w	r8, #4
 801378e:	d13d      	bne.n	801380c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 8013790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013792:	3300      	adds	r3, #0
 8013794:	bf18      	it	ne
 8013796:	2301      	movne	r3, #1
 8013798:	05c0      	lsls	r0, r0, #23
 801379a:	d567      	bpl.n	801386c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801379c:	f1b8 0f08 	cmp.w	r8, #8
 80137a0:	d164      	bne.n	801386c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	bf0c      	ite	eq
 80137a6:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80137aa:	2180      	movne	r1, #128	; 0x80
 80137ac:	2e00      	cmp	r6, #0
 80137ae:	f47f af09 	bne.w	80135c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80137b2:	2c00      	cmp	r4, #0
 80137b4:	f47f af06 	bne.w	80135c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80137b8:	9b08      	ldr	r3, [sp, #32]
 80137ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80137bc:	442b      	add	r3, r5
 80137be:	4283      	cmp	r3, r0
 80137c0:	f73f af00 	bgt.w	80135c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80137c4:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 80137c8:	4403      	add	r3, r0
 80137ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 80137cc:	4283      	cmp	r3, r0
 80137ce:	f73f aef9 	bgt.w	80135c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80137d2:	f1b8 0f08 	cmp.w	r8, #8
 80137d6:	6810      	ldr	r0, [r2, #0]
 80137d8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80137dc:	bf18      	it	ne
 80137de:	3701      	addne	r7, #1
 80137e0:	6804      	ldr	r4, [r0, #0]
 80137e2:	9105      	str	r1, [sp, #20]
 80137e4:	bf18      	it	ne
 80137e6:	f027 0701 	bicne.w	r7, r7, #1
 80137ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80137ec:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 80137f0:	bf18      	it	ne
 80137f2:	b2bf      	uxthne	r7, r7
 80137f4:	9104      	str	r1, [sp, #16]
 80137f6:	9926      	ldr	r1, [sp, #152]	; 0x98
 80137f8:	e9cd 7a00 	strd	r7, sl, [sp]
 80137fc:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8013800:	9924      	ldr	r1, [sp, #144]	; 0x90
 8013802:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8013804:	47a0      	blx	r4
 8013806:	b015      	add	sp, #84	; 0x54
 8013808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801380c:	2300      	movs	r3, #0
 801380e:	e7c3      	b.n	8013798 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8013810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013812:	e6e0      	b.n	80135d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8013814:	22ff      	movs	r2, #255	; 0xff
 8013816:	e6fc      	b.n	8013612 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8013818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801381a:	7003      	strb	r3, [r0, #0]
 801381c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801381e:	7043      	strb	r3, [r0, #1]
 8013820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013822:	7083      	strb	r3, [r0, #2]
 8013824:	e789      	b.n	801373a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8013826:	9b08      	ldr	r3, [sp, #32]
 8013828:	b153      	cbz	r3, 8013840 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801382a:	441c      	add	r4, r3
 801382c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801382e:	b2a4      	uxth	r4, r4
 8013830:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8013834:	f004 0407 	and.w	r4, r4, #7
 8013838:	7819      	ldrb	r1, [r3, #0]
 801383a:	9324      	str	r3, [sp, #144]	; 0x90
 801383c:	4121      	asrs	r1, r4
 801383e:	b2c9      	uxtb	r1, r1
 8013840:	9b07      	ldr	r3, [sp, #28]
 8013842:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013846:	445b      	add	r3, fp
 8013848:	9307      	str	r3, [sp, #28]
 801384a:	e72a      	b.n	80136a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801384c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801384e:	2b00      	cmp	r3, #0
 8013850:	d1d9      	bne.n	8013806 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8013852:	4b04      	ldr	r3, [pc, #16]	; (8013864 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8013854:	6818      	ldr	r0, [r3, #0]
 8013856:	6803      	ldr	r3, [r0, #0]
 8013858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801385a:	4798      	blx	r3
 801385c:	e7d3      	b.n	8013806 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801385e:	bf00      	nop
 8013860:	200010f8 	.word	0x200010f8
 8013864:	20001100 	.word	0x20001100
 8013868:	200010fa 	.word	0x200010fa
 801386c:	2b00      	cmp	r3, #0
 801386e:	f43f aea9 	beq.w	80135c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8013872:	2180      	movs	r1, #128	; 0x80
 8013874:	e79a      	b.n	80137ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 8013876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013878:	b11b      	cbz	r3, 8013882 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801387a:	07fb      	lsls	r3, r7, #31
 801387c:	d501      	bpl.n	8013882 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801387e:	3701      	adds	r7, #1
 8013880:	b2bf      	uxth	r7, r7
 8013882:	2211      	movs	r2, #17
 8013884:	e6c5      	b.n	8013612 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8013886:	2255      	movs	r2, #85	; 0x55
 8013888:	e6c3      	b.n	8013612 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801388a:	bf00      	nop

0801388c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801388c:	b538      	push	{r3, r4, r5, lr}
 801388e:	4c15      	ldr	r4, [pc, #84]	; (80138e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8013890:	4605      	mov	r5, r0
 8013892:	7823      	ldrb	r3, [r4, #0]
 8013894:	f3bf 8f5b 	dmb	ish
 8013898:	07da      	lsls	r2, r3, #31
 801389a:	d40b      	bmi.n	80138b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801389c:	4620      	mov	r0, r4
 801389e:	f005 f975 	bl	8018b8c <__cxa_guard_acquire>
 80138a2:	b138      	cbz	r0, 80138b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80138a4:	4620      	mov	r0, r4
 80138a6:	f005 f97d 	bl	8018ba4 <__cxa_guard_release>
 80138aa:	4a0f      	ldr	r2, [pc, #60]	; (80138e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80138ac:	490f      	ldr	r1, [pc, #60]	; (80138ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80138ae:	4810      	ldr	r0, [pc, #64]	; (80138f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80138b0:	f005 f962 	bl	8018b78 <__aeabi_atexit>
 80138b4:	4c0f      	ldr	r4, [pc, #60]	; (80138f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80138b6:	7823      	ldrb	r3, [r4, #0]
 80138b8:	f3bf 8f5b 	dmb	ish
 80138bc:	07db      	lsls	r3, r3, #31
 80138be:	d40b      	bmi.n	80138d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80138c0:	4620      	mov	r0, r4
 80138c2:	f005 f963 	bl	8018b8c <__cxa_guard_acquire>
 80138c6:	b138      	cbz	r0, 80138d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80138c8:	4620      	mov	r0, r4
 80138ca:	f005 f96b 	bl	8018ba4 <__cxa_guard_release>
 80138ce:	4a06      	ldr	r2, [pc, #24]	; (80138e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80138d0:	4909      	ldr	r1, [pc, #36]	; (80138f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80138d2:	480a      	ldr	r0, [pc, #40]	; (80138fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80138d4:	f005 f950 	bl	8018b78 <__aeabi_atexit>
 80138d8:	4b05      	ldr	r3, [pc, #20]	; (80138f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80138da:	612b      	str	r3, [r5, #16]
 80138dc:	4b07      	ldr	r3, [pc, #28]	; (80138fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80138de:	616b      	str	r3, [r5, #20]
 80138e0:	bd38      	pop	{r3, r4, r5, pc}
 80138e2:	bf00      	nop
 80138e4:	200011ec 	.word	0x200011ec
 80138e8:	20000000 	.word	0x20000000
 80138ec:	080124c3 	.word	0x080124c3
 80138f0:	20000068 	.word	0x20000068
 80138f4:	200011f0 	.word	0x200011f0
 80138f8:	080124c1 	.word	0x080124c1
 80138fc:	2000006c 	.word	0x2000006c

08013900 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8013900:	b538      	push	{r3, r4, r5, lr}
 8013902:	4c15      	ldr	r4, [pc, #84]	; (8013958 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8013904:	4605      	mov	r5, r0
 8013906:	7823      	ldrb	r3, [r4, #0]
 8013908:	f3bf 8f5b 	dmb	ish
 801390c:	07da      	lsls	r2, r3, #31
 801390e:	d40b      	bmi.n	8013928 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8013910:	4620      	mov	r0, r4
 8013912:	f005 f93b 	bl	8018b8c <__cxa_guard_acquire>
 8013916:	b138      	cbz	r0, 8013928 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8013918:	4620      	mov	r0, r4
 801391a:	f005 f943 	bl	8018ba4 <__cxa_guard_release>
 801391e:	4a0f      	ldr	r2, [pc, #60]	; (801395c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8013920:	490f      	ldr	r1, [pc, #60]	; (8013960 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8013922:	4810      	ldr	r0, [pc, #64]	; (8013964 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8013924:	f005 f928 	bl	8018b78 <__aeabi_atexit>
 8013928:	4c0f      	ldr	r4, [pc, #60]	; (8013968 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801392a:	7823      	ldrb	r3, [r4, #0]
 801392c:	f3bf 8f5b 	dmb	ish
 8013930:	07db      	lsls	r3, r3, #31
 8013932:	d40b      	bmi.n	801394c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8013934:	4620      	mov	r0, r4
 8013936:	f005 f929 	bl	8018b8c <__cxa_guard_acquire>
 801393a:	b138      	cbz	r0, 801394c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801393c:	4620      	mov	r0, r4
 801393e:	f005 f931 	bl	8018ba4 <__cxa_guard_release>
 8013942:	4a06      	ldr	r2, [pc, #24]	; (801395c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8013944:	4909      	ldr	r1, [pc, #36]	; (801396c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8013946:	480a      	ldr	r0, [pc, #40]	; (8013970 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8013948:	f005 f916 	bl	8018b78 <__aeabi_atexit>
 801394c:	4b05      	ldr	r3, [pc, #20]	; (8013964 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801394e:	60ab      	str	r3, [r5, #8]
 8013950:	4b07      	ldr	r3, [pc, #28]	; (8013970 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8013952:	60eb      	str	r3, [r5, #12]
 8013954:	bd38      	pop	{r3, r4, r5, pc}
 8013956:	bf00      	nop
 8013958:	200011cc 	.word	0x200011cc
 801395c:	20000000 	.word	0x20000000
 8013960:	080124c7 	.word	0x080124c7
 8013964:	20000048 	.word	0x20000048
 8013968:	200011d0 	.word	0x200011d0
 801396c:	080124c5 	.word	0x080124c5
 8013970:	2000004c 	.word	0x2000004c

08013974 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8013974:	b510      	push	{r4, lr}
 8013976:	4604      	mov	r4, r0
 8013978:	f7ff ff88 	bl	801388c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801397c:	4620      	mov	r0, r4
 801397e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013982:	f7ff bfbd 	b.w	8013900 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08013988 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8013988:	b538      	push	{r3, r4, r5, lr}
 801398a:	4c15      	ldr	r4, [pc, #84]	; (80139e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801398c:	4605      	mov	r5, r0
 801398e:	7823      	ldrb	r3, [r4, #0]
 8013990:	f3bf 8f5b 	dmb	ish
 8013994:	07da      	lsls	r2, r3, #31
 8013996:	d40b      	bmi.n	80139b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8013998:	4620      	mov	r0, r4
 801399a:	f005 f8f7 	bl	8018b8c <__cxa_guard_acquire>
 801399e:	b138      	cbz	r0, 80139b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80139a0:	4620      	mov	r0, r4
 80139a2:	f005 f8ff 	bl	8018ba4 <__cxa_guard_release>
 80139a6:	4a0f      	ldr	r2, [pc, #60]	; (80139e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80139a8:	490f      	ldr	r1, [pc, #60]	; (80139e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80139aa:	4810      	ldr	r0, [pc, #64]	; (80139ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80139ac:	f005 f8e4 	bl	8018b78 <__aeabi_atexit>
 80139b0:	4c0f      	ldr	r4, [pc, #60]	; (80139f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80139b2:	7823      	ldrb	r3, [r4, #0]
 80139b4:	f3bf 8f5b 	dmb	ish
 80139b8:	07db      	lsls	r3, r3, #31
 80139ba:	d40b      	bmi.n	80139d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80139bc:	4620      	mov	r0, r4
 80139be:	f005 f8e5 	bl	8018b8c <__cxa_guard_acquire>
 80139c2:	b138      	cbz	r0, 80139d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80139c4:	4620      	mov	r0, r4
 80139c6:	f005 f8ed 	bl	8018ba4 <__cxa_guard_release>
 80139ca:	4a06      	ldr	r2, [pc, #24]	; (80139e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80139cc:	4909      	ldr	r1, [pc, #36]	; (80139f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80139ce:	480a      	ldr	r0, [pc, #40]	; (80139f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80139d0:	f005 f8d2 	bl	8018b78 <__aeabi_atexit>
 80139d4:	4b05      	ldr	r3, [pc, #20]	; (80139ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80139d6:	622b      	str	r3, [r5, #32]
 80139d8:	4b07      	ldr	r3, [pc, #28]	; (80139f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80139da:	626b      	str	r3, [r5, #36]	; 0x24
 80139dc:	bd38      	pop	{r3, r4, r5, pc}
 80139de:	bf00      	nop
 80139e0:	200011f4 	.word	0x200011f4
 80139e4:	20000000 	.word	0x20000000
 80139e8:	080124bb 	.word	0x080124bb
 80139ec:	20000070 	.word	0x20000070
 80139f0:	200011f8 	.word	0x200011f8
 80139f4:	080124b9 	.word	0x080124b9
 80139f8:	20000074 	.word	0x20000074

080139fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80139fc:	b538      	push	{r3, r4, r5, lr}
 80139fe:	4c15      	ldr	r4, [pc, #84]	; (8013a54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8013a00:	4605      	mov	r5, r0
 8013a02:	7823      	ldrb	r3, [r4, #0]
 8013a04:	f3bf 8f5b 	dmb	ish
 8013a08:	07da      	lsls	r2, r3, #31
 8013a0a:	d40b      	bmi.n	8013a24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	f005 f8bd 	bl	8018b8c <__cxa_guard_acquire>
 8013a12:	b138      	cbz	r0, 8013a24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8013a14:	4620      	mov	r0, r4
 8013a16:	f005 f8c5 	bl	8018ba4 <__cxa_guard_release>
 8013a1a:	4a0f      	ldr	r2, [pc, #60]	; (8013a58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8013a1c:	490f      	ldr	r1, [pc, #60]	; (8013a5c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8013a1e:	4810      	ldr	r0, [pc, #64]	; (8013a60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8013a20:	f005 f8aa 	bl	8018b78 <__aeabi_atexit>
 8013a24:	4c0f      	ldr	r4, [pc, #60]	; (8013a64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8013a26:	7823      	ldrb	r3, [r4, #0]
 8013a28:	f3bf 8f5b 	dmb	ish
 8013a2c:	07db      	lsls	r3, r3, #31
 8013a2e:	d40b      	bmi.n	8013a48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8013a30:	4620      	mov	r0, r4
 8013a32:	f005 f8ab 	bl	8018b8c <__cxa_guard_acquire>
 8013a36:	b138      	cbz	r0, 8013a48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8013a38:	4620      	mov	r0, r4
 8013a3a:	f005 f8b3 	bl	8018ba4 <__cxa_guard_release>
 8013a3e:	4a06      	ldr	r2, [pc, #24]	; (8013a58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8013a40:	4909      	ldr	r1, [pc, #36]	; (8013a68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8013a42:	480a      	ldr	r0, [pc, #40]	; (8013a6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8013a44:	f005 f898 	bl	8018b78 <__aeabi_atexit>
 8013a48:	4b05      	ldr	r3, [pc, #20]	; (8013a60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8013a4a:	61ab      	str	r3, [r5, #24]
 8013a4c:	4b07      	ldr	r3, [pc, #28]	; (8013a6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8013a4e:	61eb      	str	r3, [r5, #28]
 8013a50:	bd38      	pop	{r3, r4, r5, pc}
 8013a52:	bf00      	nop
 8013a54:	200011d4 	.word	0x200011d4
 8013a58:	20000000 	.word	0x20000000
 8013a5c:	080124bf 	.word	0x080124bf
 8013a60:	20000050 	.word	0x20000050
 8013a64:	200011d8 	.word	0x200011d8
 8013a68:	080124bd 	.word	0x080124bd
 8013a6c:	20000054 	.word	0x20000054

08013a70 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8013a70:	b510      	push	{r4, lr}
 8013a72:	4604      	mov	r4, r0
 8013a74:	f7ff ff88 	bl	8013988 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8013a78:	4620      	mov	r0, r4
 8013a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a7e:	f7ff bfbd 	b.w	80139fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08013a84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8013a84:	b538      	push	{r3, r4, r5, lr}
 8013a86:	4c15      	ldr	r4, [pc, #84]	; (8013adc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8013a88:	4605      	mov	r5, r0
 8013a8a:	7823      	ldrb	r3, [r4, #0]
 8013a8c:	f3bf 8f5b 	dmb	ish
 8013a90:	07da      	lsls	r2, r3, #31
 8013a92:	d40b      	bmi.n	8013aac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8013a94:	4620      	mov	r0, r4
 8013a96:	f005 f879 	bl	8018b8c <__cxa_guard_acquire>
 8013a9a:	b138      	cbz	r0, 8013aac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	f005 f881 	bl	8018ba4 <__cxa_guard_release>
 8013aa2:	4a0f      	ldr	r2, [pc, #60]	; (8013ae0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8013aa4:	490f      	ldr	r1, [pc, #60]	; (8013ae4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8013aa6:	4810      	ldr	r0, [pc, #64]	; (8013ae8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8013aa8:	f005 f866 	bl	8018b78 <__aeabi_atexit>
 8013aac:	4c0f      	ldr	r4, [pc, #60]	; (8013aec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8013aae:	7823      	ldrb	r3, [r4, #0]
 8013ab0:	f3bf 8f5b 	dmb	ish
 8013ab4:	07db      	lsls	r3, r3, #31
 8013ab6:	d40b      	bmi.n	8013ad0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f005 f867 	bl	8018b8c <__cxa_guard_acquire>
 8013abe:	b138      	cbz	r0, 8013ad0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	f005 f86f 	bl	8018ba4 <__cxa_guard_release>
 8013ac6:	4a06      	ldr	r2, [pc, #24]	; (8013ae0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8013ac8:	4909      	ldr	r1, [pc, #36]	; (8013af0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8013aca:	480a      	ldr	r0, [pc, #40]	; (8013af4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8013acc:	f005 f854 	bl	8018b78 <__aeabi_atexit>
 8013ad0:	4b05      	ldr	r3, [pc, #20]	; (8013ae8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8013ad2:	632b      	str	r3, [r5, #48]	; 0x30
 8013ad4:	4b07      	ldr	r3, [pc, #28]	; (8013af4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8013ad6:	636b      	str	r3, [r5, #52]	; 0x34
 8013ad8:	bd38      	pop	{r3, r4, r5, pc}
 8013ada:	bf00      	nop
 8013adc:	200011dc 	.word	0x200011dc
 8013ae0:	20000000 	.word	0x20000000
 8013ae4:	080124b3 	.word	0x080124b3
 8013ae8:	20000058 	.word	0x20000058
 8013aec:	200011e0 	.word	0x200011e0
 8013af0:	080124b1 	.word	0x080124b1
 8013af4:	2000005c 	.word	0x2000005c

08013af8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8013af8:	b538      	push	{r3, r4, r5, lr}
 8013afa:	4c15      	ldr	r4, [pc, #84]	; (8013b50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8013afc:	4605      	mov	r5, r0
 8013afe:	7823      	ldrb	r3, [r4, #0]
 8013b00:	f3bf 8f5b 	dmb	ish
 8013b04:	07da      	lsls	r2, r3, #31
 8013b06:	d40b      	bmi.n	8013b20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8013b08:	4620      	mov	r0, r4
 8013b0a:	f005 f83f 	bl	8018b8c <__cxa_guard_acquire>
 8013b0e:	b138      	cbz	r0, 8013b20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8013b10:	4620      	mov	r0, r4
 8013b12:	f005 f847 	bl	8018ba4 <__cxa_guard_release>
 8013b16:	4a0f      	ldr	r2, [pc, #60]	; (8013b54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8013b18:	490f      	ldr	r1, [pc, #60]	; (8013b58 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8013b1a:	4810      	ldr	r0, [pc, #64]	; (8013b5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8013b1c:	f005 f82c 	bl	8018b78 <__aeabi_atexit>
 8013b20:	4c0f      	ldr	r4, [pc, #60]	; (8013b60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8013b22:	7823      	ldrb	r3, [r4, #0]
 8013b24:	f3bf 8f5b 	dmb	ish
 8013b28:	07db      	lsls	r3, r3, #31
 8013b2a:	d40b      	bmi.n	8013b44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	f005 f82d 	bl	8018b8c <__cxa_guard_acquire>
 8013b32:	b138      	cbz	r0, 8013b44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8013b34:	4620      	mov	r0, r4
 8013b36:	f005 f835 	bl	8018ba4 <__cxa_guard_release>
 8013b3a:	4a06      	ldr	r2, [pc, #24]	; (8013b54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8013b3c:	4909      	ldr	r1, [pc, #36]	; (8013b64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8013b3e:	480a      	ldr	r0, [pc, #40]	; (8013b68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8013b40:	f005 f81a 	bl	8018b78 <__aeabi_atexit>
 8013b44:	4b05      	ldr	r3, [pc, #20]	; (8013b5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8013b46:	62ab      	str	r3, [r5, #40]	; 0x28
 8013b48:	4b07      	ldr	r3, [pc, #28]	; (8013b68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8013b4a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8013b4c:	bd38      	pop	{r3, r4, r5, pc}
 8013b4e:	bf00      	nop
 8013b50:	200011b4 	.word	0x200011b4
 8013b54:	20000000 	.word	0x20000000
 8013b58:	080124b7 	.word	0x080124b7
 8013b5c:	20000030 	.word	0x20000030
 8013b60:	200011b8 	.word	0x200011b8
 8013b64:	080124b5 	.word	0x080124b5
 8013b68:	20000034 	.word	0x20000034

08013b6c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8013b6c:	b510      	push	{r4, lr}
 8013b6e:	4604      	mov	r4, r0
 8013b70:	f7ff ff88 	bl	8013a84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8013b74:	4620      	mov	r0, r4
 8013b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b7a:	f7ff bfbd 	b.w	8013af8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08013b80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8013b80:	b538      	push	{r3, r4, r5, lr}
 8013b82:	4c15      	ldr	r4, [pc, #84]	; (8013bd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8013b84:	4605      	mov	r5, r0
 8013b86:	7823      	ldrb	r3, [r4, #0]
 8013b88:	f3bf 8f5b 	dmb	ish
 8013b8c:	07da      	lsls	r2, r3, #31
 8013b8e:	d40b      	bmi.n	8013ba8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8013b90:	4620      	mov	r0, r4
 8013b92:	f004 fffb 	bl	8018b8c <__cxa_guard_acquire>
 8013b96:	b138      	cbz	r0, 8013ba8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8013b98:	4620      	mov	r0, r4
 8013b9a:	f005 f803 	bl	8018ba4 <__cxa_guard_release>
 8013b9e:	4a0f      	ldr	r2, [pc, #60]	; (8013bdc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8013ba0:	490f      	ldr	r1, [pc, #60]	; (8013be0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8013ba2:	4810      	ldr	r0, [pc, #64]	; (8013be4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8013ba4:	f004 ffe8 	bl	8018b78 <__aeabi_atexit>
 8013ba8:	4c0f      	ldr	r4, [pc, #60]	; (8013be8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8013baa:	7823      	ldrb	r3, [r4, #0]
 8013bac:	f3bf 8f5b 	dmb	ish
 8013bb0:	07db      	lsls	r3, r3, #31
 8013bb2:	d40b      	bmi.n	8013bcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8013bb4:	4620      	mov	r0, r4
 8013bb6:	f004 ffe9 	bl	8018b8c <__cxa_guard_acquire>
 8013bba:	b138      	cbz	r0, 8013bcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	f004 fff1 	bl	8018ba4 <__cxa_guard_release>
 8013bc2:	4a06      	ldr	r2, [pc, #24]	; (8013bdc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8013bc4:	4909      	ldr	r1, [pc, #36]	; (8013bec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8013bc6:	480a      	ldr	r0, [pc, #40]	; (8013bf0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8013bc8:	f004 ffd6 	bl	8018b78 <__aeabi_atexit>
 8013bcc:	4b05      	ldr	r3, [pc, #20]	; (8013be4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8013bce:	642b      	str	r3, [r5, #64]	; 0x40
 8013bd0:	4b07      	ldr	r3, [pc, #28]	; (8013bf0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8013bd2:	646b      	str	r3, [r5, #68]	; 0x44
 8013bd4:	bd38      	pop	{r3, r4, r5, pc}
 8013bd6:	bf00      	nop
 8013bd8:	200011e4 	.word	0x200011e4
 8013bdc:	20000000 	.word	0x20000000
 8013be0:	080124ab 	.word	0x080124ab
 8013be4:	20000060 	.word	0x20000060
 8013be8:	200011e8 	.word	0x200011e8
 8013bec:	080124a9 	.word	0x080124a9
 8013bf0:	20000064 	.word	0x20000064

08013bf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8013bf4:	b538      	push	{r3, r4, r5, lr}
 8013bf6:	4c15      	ldr	r4, [pc, #84]	; (8013c4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8013bf8:	4605      	mov	r5, r0
 8013bfa:	7823      	ldrb	r3, [r4, #0]
 8013bfc:	f3bf 8f5b 	dmb	ish
 8013c00:	07da      	lsls	r2, r3, #31
 8013c02:	d40b      	bmi.n	8013c1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8013c04:	4620      	mov	r0, r4
 8013c06:	f004 ffc1 	bl	8018b8c <__cxa_guard_acquire>
 8013c0a:	b138      	cbz	r0, 8013c1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	f004 ffc9 	bl	8018ba4 <__cxa_guard_release>
 8013c12:	4a0f      	ldr	r2, [pc, #60]	; (8013c50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8013c14:	490f      	ldr	r1, [pc, #60]	; (8013c54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8013c16:	4810      	ldr	r0, [pc, #64]	; (8013c58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8013c18:	f004 ffae 	bl	8018b78 <__aeabi_atexit>
 8013c1c:	4c0f      	ldr	r4, [pc, #60]	; (8013c5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8013c1e:	7823      	ldrb	r3, [r4, #0]
 8013c20:	f3bf 8f5b 	dmb	ish
 8013c24:	07db      	lsls	r3, r3, #31
 8013c26:	d40b      	bmi.n	8013c40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8013c28:	4620      	mov	r0, r4
 8013c2a:	f004 ffaf 	bl	8018b8c <__cxa_guard_acquire>
 8013c2e:	b138      	cbz	r0, 8013c40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8013c30:	4620      	mov	r0, r4
 8013c32:	f004 ffb7 	bl	8018ba4 <__cxa_guard_release>
 8013c36:	4a06      	ldr	r2, [pc, #24]	; (8013c50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8013c38:	4909      	ldr	r1, [pc, #36]	; (8013c60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8013c3a:	480a      	ldr	r0, [pc, #40]	; (8013c64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8013c3c:	f004 ff9c 	bl	8018b78 <__aeabi_atexit>
 8013c40:	4b05      	ldr	r3, [pc, #20]	; (8013c58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8013c42:	63ab      	str	r3, [r5, #56]	; 0x38
 8013c44:	4b07      	ldr	r3, [pc, #28]	; (8013c64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8013c46:	63eb      	str	r3, [r5, #60]	; 0x3c
 8013c48:	bd38      	pop	{r3, r4, r5, pc}
 8013c4a:	bf00      	nop
 8013c4c:	200011c4 	.word	0x200011c4
 8013c50:	20000000 	.word	0x20000000
 8013c54:	080124af 	.word	0x080124af
 8013c58:	20000040 	.word	0x20000040
 8013c5c:	200011c8 	.word	0x200011c8
 8013c60:	080124ad 	.word	0x080124ad
 8013c64:	20000044 	.word	0x20000044

08013c68 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8013c68:	b510      	push	{r4, lr}
 8013c6a:	4604      	mov	r4, r0
 8013c6c:	f7ff ff88 	bl	8013b80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8013c70:	4620      	mov	r0, r4
 8013c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c76:	f7ff bfbd 	b.w	8013bf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08013c7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8013c7c:	b538      	push	{r3, r4, r5, lr}
 8013c7e:	4c15      	ldr	r4, [pc, #84]	; (8013cd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8013c80:	4605      	mov	r5, r0
 8013c82:	7823      	ldrb	r3, [r4, #0]
 8013c84:	f3bf 8f5b 	dmb	ish
 8013c88:	07da      	lsls	r2, r3, #31
 8013c8a:	d40b      	bmi.n	8013ca4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	f004 ff7d 	bl	8018b8c <__cxa_guard_acquire>
 8013c92:	b138      	cbz	r0, 8013ca4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8013c94:	4620      	mov	r0, r4
 8013c96:	f004 ff85 	bl	8018ba4 <__cxa_guard_release>
 8013c9a:	4a0f      	ldr	r2, [pc, #60]	; (8013cd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8013c9c:	490f      	ldr	r1, [pc, #60]	; (8013cdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8013c9e:	4810      	ldr	r0, [pc, #64]	; (8013ce0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8013ca0:	f004 ff6a 	bl	8018b78 <__aeabi_atexit>
 8013ca4:	4c0f      	ldr	r4, [pc, #60]	; (8013ce4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8013ca6:	7823      	ldrb	r3, [r4, #0]
 8013ca8:	f3bf 8f5b 	dmb	ish
 8013cac:	07db      	lsls	r3, r3, #31
 8013cae:	d40b      	bmi.n	8013cc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8013cb0:	4620      	mov	r0, r4
 8013cb2:	f004 ff6b 	bl	8018b8c <__cxa_guard_acquire>
 8013cb6:	b138      	cbz	r0, 8013cc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8013cb8:	4620      	mov	r0, r4
 8013cba:	f004 ff73 	bl	8018ba4 <__cxa_guard_release>
 8013cbe:	4a06      	ldr	r2, [pc, #24]	; (8013cd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8013cc0:	4909      	ldr	r1, [pc, #36]	; (8013ce8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8013cc2:	480a      	ldr	r0, [pc, #40]	; (8013cec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8013cc4:	f004 ff58 	bl	8018b78 <__aeabi_atexit>
 8013cc8:	4b05      	ldr	r3, [pc, #20]	; (8013ce0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8013cca:	652b      	str	r3, [r5, #80]	; 0x50
 8013ccc:	4b07      	ldr	r3, [pc, #28]	; (8013cec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8013cce:	656b      	str	r3, [r5, #84]	; 0x54
 8013cd0:	bd38      	pop	{r3, r4, r5, pc}
 8013cd2:	bf00      	nop
 8013cd4:	200011bc 	.word	0x200011bc
 8013cd8:	20000000 	.word	0x20000000
 8013cdc:	080124a3 	.word	0x080124a3
 8013ce0:	20000038 	.word	0x20000038
 8013ce4:	200011c0 	.word	0x200011c0
 8013ce8:	080124a1 	.word	0x080124a1
 8013cec:	2000003c 	.word	0x2000003c

08013cf0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8013cf0:	b538      	push	{r3, r4, r5, lr}
 8013cf2:	4c15      	ldr	r4, [pc, #84]	; (8013d48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8013cf4:	4605      	mov	r5, r0
 8013cf6:	7823      	ldrb	r3, [r4, #0]
 8013cf8:	f3bf 8f5b 	dmb	ish
 8013cfc:	07da      	lsls	r2, r3, #31
 8013cfe:	d40b      	bmi.n	8013d18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8013d00:	4620      	mov	r0, r4
 8013d02:	f004 ff43 	bl	8018b8c <__cxa_guard_acquire>
 8013d06:	b138      	cbz	r0, 8013d18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8013d08:	4620      	mov	r0, r4
 8013d0a:	f004 ff4b 	bl	8018ba4 <__cxa_guard_release>
 8013d0e:	4a0f      	ldr	r2, [pc, #60]	; (8013d4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8013d10:	490f      	ldr	r1, [pc, #60]	; (8013d50 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8013d12:	4810      	ldr	r0, [pc, #64]	; (8013d54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8013d14:	f004 ff30 	bl	8018b78 <__aeabi_atexit>
 8013d18:	4c0f      	ldr	r4, [pc, #60]	; (8013d58 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8013d1a:	7823      	ldrb	r3, [r4, #0]
 8013d1c:	f3bf 8f5b 	dmb	ish
 8013d20:	07db      	lsls	r3, r3, #31
 8013d22:	d40b      	bmi.n	8013d3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8013d24:	4620      	mov	r0, r4
 8013d26:	f004 ff31 	bl	8018b8c <__cxa_guard_acquire>
 8013d2a:	b138      	cbz	r0, 8013d3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	f004 ff39 	bl	8018ba4 <__cxa_guard_release>
 8013d32:	4a06      	ldr	r2, [pc, #24]	; (8013d4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8013d34:	4909      	ldr	r1, [pc, #36]	; (8013d5c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8013d36:	480a      	ldr	r0, [pc, #40]	; (8013d60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8013d38:	f004 ff1e 	bl	8018b78 <__aeabi_atexit>
 8013d3c:	4b05      	ldr	r3, [pc, #20]	; (8013d54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8013d3e:	64ab      	str	r3, [r5, #72]	; 0x48
 8013d40:	4b07      	ldr	r3, [pc, #28]	; (8013d60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8013d42:	64eb      	str	r3, [r5, #76]	; 0x4c
 8013d44:	bd38      	pop	{r3, r4, r5, pc}
 8013d46:	bf00      	nop
 8013d48:	200011ac 	.word	0x200011ac
 8013d4c:	20000000 	.word	0x20000000
 8013d50:	080124a7 	.word	0x080124a7
 8013d54:	20000028 	.word	0x20000028
 8013d58:	200011b0 	.word	0x200011b0
 8013d5c:	080124a5 	.word	0x080124a5
 8013d60:	2000002c 	.word	0x2000002c

08013d64 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8013d64:	b510      	push	{r4, lr}
 8013d66:	4604      	mov	r4, r0
 8013d68:	f7ff ff88 	bl	8013c7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d72:	f7ff bfbd 	b.w	8013cf0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08013d76 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8013d76:	b510      	push	{r4, lr}
 8013d78:	4604      	mov	r4, r0
 8013d7a:	f7ff fff3 	bl	8013d64 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8013d7e:	4620      	mov	r0, r4
 8013d80:	f7ff ff72 	bl	8013c68 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8013d84:	4620      	mov	r0, r4
 8013d86:	f7ff fe73 	bl	8013a70 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	f7ff fdf2 	bl	8013974 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8013d90:	4620      	mov	r0, r4
 8013d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d96:	f7ff bee9 	b.w	8013b6c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08013d9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8013d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013da0:	b087      	sub	sp, #28
 8013da2:	7888      	ldrb	r0, [r1, #2]
 8013da4:	4616      	mov	r6, r2
 8013da6:	9001      	str	r0, [sp, #4]
 8013da8:	7848      	ldrb	r0, [r1, #1]
 8013daa:	9100      	str	r1, [sp, #0]
 8013dac:	9002      	str	r0, [sp, #8]
 8013dae:	7808      	ldrb	r0, [r1, #0]
 8013db0:	9901      	ldr	r1, [sp, #4]
 8013db2:	9003      	str	r0, [sp, #12]
 8013db4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8013db8:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8013dbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8013dc0:	9902      	ldr	r1, [sp, #8]
 8013dc2:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8013dc6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8013dca:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8013dce:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8013dd2:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8013dd6:	9005      	str	r0, [sp, #20]
 8013dd8:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8013ddc:	fb05 ca0e 	mla	sl, r5, lr, ip
 8013de0:	2d00      	cmp	r5, #0
 8013de2:	eb06 080a 	add.w	r8, r6, sl
 8013de6:	db4a      	blt.n	8013e7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8013de8:	45a9      	cmp	r9, r5
 8013dea:	dd48      	ble.n	8013e7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8013dec:	f1bc 0f00 	cmp.w	ip, #0
 8013df0:	db43      	blt.n	8013e7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8013df2:	45e6      	cmp	lr, ip
 8013df4:	dd41      	ble.n	8013e7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8013df6:	f816 600a 	ldrb.w	r6, [r6, sl]
 8013dfa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013dfe:	441e      	add	r6, r3
 8013e00:	f11c 0001 	adds.w	r0, ip, #1
 8013e04:	d43e      	bmi.n	8013e84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8013e06:	4586      	cmp	lr, r0
 8013e08:	dd3c      	ble.n	8013e84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8013e0a:	2a00      	cmp	r2, #0
 8013e0c:	d03a      	beq.n	8013e84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8013e0e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013e12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013e16:	4418      	add	r0, r3
 8013e18:	3501      	adds	r5, #1
 8013e1a:	d437      	bmi.n	8013e8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8013e1c:	45a9      	cmp	r9, r5
 8013e1e:	dd35      	ble.n	8013e8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8013e20:	b3a4      	cbz	r4, 8013e8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8013e22:	f1bc 0f00 	cmp.w	ip, #0
 8013e26:	db2f      	blt.n	8013e88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8013e28:	45e6      	cmp	lr, ip
 8013e2a:	dd2d      	ble.n	8013e88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8013e2c:	f818 500e 	ldrb.w	r5, [r8, lr]
 8013e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e34:	441d      	add	r5, r3
 8013e36:	f11c 0c01 	adds.w	ip, ip, #1
 8013e3a:	d42a      	bmi.n	8013e92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8013e3c:	45e6      	cmp	lr, ip
 8013e3e:	dd28      	ble.n	8013e92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8013e40:	b33a      	cbz	r2, 8013e92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8013e42:	44c6      	add	lr, r8
 8013e44:	f89e c001 	ldrb.w	ip, [lr, #1]
 8013e48:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013e4c:	4463      	add	r3, ip
 8013e4e:	ea6f 0c07 	mvn.w	ip, r7
 8013e52:	2a0f      	cmp	r2, #15
 8013e54:	f896 a000 	ldrb.w	sl, [r6]
 8013e58:	fa5f fc8c 	uxtb.w	ip, ip
 8013e5c:	f890 b000 	ldrb.w	fp, [r0]
 8013e60:	f895 9000 	ldrb.w	r9, [r5]
 8013e64:	7819      	ldrb	r1, [r3, #0]
 8013e66:	d801      	bhi.n	8013e6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 8013e68:	2c0f      	cmp	r4, #15
 8013e6a:	d914      	bls.n	8013e96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 8013e6c:	4b40      	ldr	r3, [pc, #256]	; (8013f70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8013e6e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8013e72:	4a40      	ldr	r2, [pc, #256]	; (8013f74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8013e74:	4840      	ldr	r0, [pc, #256]	; (8013f78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 8013e76:	f004 feb3 	bl	8018be0 <__assert_func>
 8013e7a:	ae05      	add	r6, sp, #20
 8013e7c:	e7c0      	b.n	8013e00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 8013e7e:	a805      	add	r0, sp, #20
 8013e80:	4606      	mov	r6, r0
 8013e82:	e7c9      	b.n	8013e18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8013e84:	a805      	add	r0, sp, #20
 8013e86:	e7c7      	b.n	8013e18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8013e88:	ad05      	add	r5, sp, #20
 8013e8a:	e7d4      	b.n	8013e36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 8013e8c:	ab05      	add	r3, sp, #20
 8013e8e:	461d      	mov	r5, r3
 8013e90:	e7dd      	b.n	8013e4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8013e92:	ab05      	add	r3, sp, #20
 8013e94:	e7db      	b.n	8013e4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8013e96:	b292      	uxth	r2, r2
 8013e98:	b2a4      	uxth	r4, r4
 8013e9a:	fa1f fc8c 	uxth.w	ip, ip
 8013e9e:	fb02 f804 	mul.w	r8, r2, r4
 8013ea2:	0112      	lsls	r2, r2, #4
 8013ea4:	b2bf      	uxth	r7, r7
 8013ea6:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8013eaa:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8013eae:	eba2 0208 	sub.w	r2, r2, r8
 8013eb2:	b2a4      	uxth	r4, r4
 8013eb4:	b292      	uxth	r2, r2
 8013eb6:	ebae 0e04 	sub.w	lr, lr, r4
 8013eba:	fb02 fb0b 	mul.w	fp, r2, fp
 8013ebe:	fa1f fe8e 	uxth.w	lr, lr
 8013ec2:	fb0e ba0a 	mla	sl, lr, sl, fp
 8013ec6:	fb04 aa09 	mla	sl, r4, r9, sl
 8013eca:	fb08 aa01 	mla	sl, r8, r1, sl
 8013ece:	9903      	ldr	r1, [sp, #12]
 8013ed0:	fb11 f90c 	smulbb	r9, r1, ip
 8013ed4:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8013ed8:	9900      	ldr	r1, [sp, #0]
 8013eda:	fb0a 9a07 	mla	sl, sl, r7, r9
 8013ede:	fa1f fa8a 	uxth.w	sl, sl
 8013ee2:	f10a 0901 	add.w	r9, sl, #1
 8013ee6:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8013eea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013eee:	f881 a000 	strb.w	sl, [r1]
 8013ef2:	f890 a001 	ldrb.w	sl, [r0, #1]
 8013ef6:	f896 9001 	ldrb.w	r9, [r6, #1]
 8013efa:	fb02 fa0a 	mul.w	sl, r2, sl
 8013efe:	9902      	ldr	r1, [sp, #8]
 8013f00:	fb0e aa09 	mla	sl, lr, r9, sl
 8013f04:	f895 9001 	ldrb.w	r9, [r5, #1]
 8013f08:	fb04 aa09 	mla	sl, r4, r9, sl
 8013f0c:	f893 9001 	ldrb.w	r9, [r3, #1]
 8013f10:	fb08 a909 	mla	r9, r8, r9, sl
 8013f14:	fb11 fa0c 	smulbb	sl, r1, ip
 8013f18:	9900      	ldr	r1, [sp, #0]
 8013f1a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8013f1e:	fb09 a907 	mla	r9, r9, r7, sl
 8013f22:	fa1f f989 	uxth.w	r9, r9
 8013f26:	f109 0a01 	add.w	sl, r9, #1
 8013f2a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8013f2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013f32:	f881 9001 	strb.w	r9, [r1, #1]
 8013f36:	7880      	ldrb	r0, [r0, #2]
 8013f38:	78b6      	ldrb	r6, [r6, #2]
 8013f3a:	4342      	muls	r2, r0
 8013f3c:	78a8      	ldrb	r0, [r5, #2]
 8013f3e:	789b      	ldrb	r3, [r3, #2]
 8013f40:	fb0e 2206 	mla	r2, lr, r6, r2
 8013f44:	fb04 2400 	mla	r4, r4, r0, r2
 8013f48:	fb08 4803 	mla	r8, r8, r3, r4
 8013f4c:	9b01      	ldr	r3, [sp, #4]
 8013f4e:	fb13 fc0c 	smulbb	ip, r3, ip
 8013f52:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8013f56:	fb08 c707 	mla	r7, r8, r7, ip
 8013f5a:	b2bf      	uxth	r7, r7
 8013f5c:	f107 0c01 	add.w	ip, r7, #1
 8013f60:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8013f64:	123f      	asrs	r7, r7, #8
 8013f66:	708f      	strb	r7, [r1, #2]
 8013f68:	b007      	add	sp, #28
 8013f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f6e:	bf00      	nop
 8013f70:	0801c5d4 	.word	0x0801c5d4
 8013f74:	0801caca 	.word	0x0801caca
 8013f78:	0801c69d 	.word	0x0801c69d

08013f7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8013f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f80:	ed2d 8b08 	vpush	{d8-d11}
 8013f84:	b095      	sub	sp, #84	; 0x54
 8013f86:	eeb0 aa40 	vmov.f32	s20, s0
 8013f8a:	eef0 9a60 	vmov.f32	s19, s1
 8013f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8013f90:	eeb0 9a41 	vmov.f32	s18, s2
 8013f94:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8013f98:	eeb0 8a62 	vmov.f32	s16, s5
 8013f9c:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8013f9e:	eef0 8a43 	vmov.f32	s17, s6
 8013fa2:	930c      	str	r3, [sp, #48]	; 0x30
 8013fa4:	eef0 ba44 	vmov.f32	s23, s8
 8013fa8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8013fac:	eeb0 ba64 	vmov.f32	s22, s9
 8013fb0:	9013      	str	r0, [sp, #76]	; 0x4c
 8013fb2:	eef0 aa45 	vmov.f32	s21, s10
 8013fb6:	9310      	str	r3, [sp, #64]	; 0x40
 8013fb8:	6860      	ldr	r0, [r4, #4]
 8013fba:	910f      	str	r1, [sp, #60]	; 0x3c
 8013fbc:	9212      	str	r2, [sp, #72]	; 0x48
 8013fbe:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8013fc0:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8013fc4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8013fc8:	fb00 1303 	mla	r3, r0, r3, r1
 8013fcc:	6821      	ldr	r1, [r4, #0]
 8013fce:	6854      	ldr	r4, [r2, #4]
 8013fd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013fd4:	18cb      	adds	r3, r1, r3
 8013fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8013fd8:	6813      	ldr	r3, [r2, #0]
 8013fda:	930e      	str	r3, [sp, #56]	; 0x38
 8013fdc:	1d23      	adds	r3, r4, #4
 8013fde:	9309      	str	r3, [sp, #36]	; 0x24
 8013fe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013fe2:	43db      	mvns	r3, r3
 8013fe4:	b2db      	uxtb	r3, r3
 8013fe6:	930d      	str	r3, [sp, #52]	; 0x34
 8013fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	dc03      	bgt.n	8013ff6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8013fee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f340 823c 	ble.w	801446e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8013ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	f340 8115 	ble.w	8014228 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8013ffe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8014000:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014002:	1412      	asrs	r2, r2, #16
 8014004:	ea4f 4323 	mov.w	r3, r3, asr #16
 8014008:	d431      	bmi.n	801406e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801400a:	1c51      	adds	r1, r2, #1
 801400c:	428d      	cmp	r5, r1
 801400e:	dd31      	ble.n	8014074 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8014010:	2b00      	cmp	r3, #0
 8014012:	db2f      	blt.n	8014074 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8014014:	1c59      	adds	r1, r3, #1
 8014016:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014018:	4288      	cmp	r0, r1
 801401a:	dd2b      	ble.n	8014074 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801401c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801401e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014020:	3b01      	subs	r3, #1
 8014022:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8014024:	fb02 1203 	mla	r2, r2, r3, r1
 8014028:	1412      	asrs	r2, r2, #16
 801402a:	d42d      	bmi.n	8014088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801402c:	3201      	adds	r2, #1
 801402e:	4295      	cmp	r5, r2
 8014030:	dd2a      	ble.n	8014088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8014032:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8014034:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8014036:	fb02 1303 	mla	r3, r2, r3, r1
 801403a:	141b      	asrs	r3, r3, #16
 801403c:	d424      	bmi.n	8014088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801403e:	3301      	adds	r3, #1
 8014040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014042:	429a      	cmp	r2, r3
 8014044:	dd20      	ble.n	8014088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8014046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014048:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801404c:	f103 0c03 	add.w	ip, r3, #3
 8014050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014052:	9311      	str	r3, [sp, #68]	; 0x44
 8014054:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014056:	2b00      	cmp	r3, #0
 8014058:	f300 814f 	bgt.w	80142fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801405c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801405e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014060:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014064:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014068:	441a      	add	r2, r3
 801406a:	920b      	str	r2, [sp, #44]	; 0x2c
 801406c:	e0de      	b.n	801422c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801406e:	1c51      	adds	r1, r2, #1
 8014070:	f040 80cb 	bne.w	801420a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8014074:	42aa      	cmp	r2, r5
 8014076:	f280 80c8 	bge.w	801420a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801407a:	1c5f      	adds	r7, r3, #1
 801407c:	f2c0 80c5 	blt.w	801420a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8014080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014082:	4293      	cmp	r3, r2
 8014084:	f280 80c1 	bge.w	801420a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8014088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801408a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801408c:	9311      	str	r3, [sp, #68]	; 0x44
 801408e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014090:	2b00      	cmp	r3, #0
 8014092:	dde3      	ble.n	801405c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8014094:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014096:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8014098:	141a      	asrs	r2, r3, #16
 801409a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801409c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801409e:	1400      	asrs	r0, r0, #16
 80140a0:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80140a4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80140a8:	f100 810e 	bmi.w	80142c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80140ac:	1c46      	adds	r6, r0, #1
 80140ae:	42b5      	cmp	r5, r6
 80140b0:	f340 810c 	ble.w	80142cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80140b4:	2a00      	cmp	r2, #0
 80140b6:	f2c0 8109 	blt.w	80142cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80140ba:	1c56      	adds	r6, r2, #1
 80140bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80140be:	42b4      	cmp	r4, r6
 80140c0:	f340 8104 	ble.w	80142cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80140c4:	fb02 0005 	mla	r0, r2, r5, r0
 80140c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80140ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140cc:	f814 e000 	ldrb.w	lr, [r4, r0]
 80140d0:	4402      	add	r2, r0
 80140d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80140d4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80140d8:	eb00 080e 	add.w	r8, r0, lr
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f000 80e4 	beq.w	80142aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 80140e2:	f892 c001 	ldrb.w	ip, [r2, #1]
 80140e6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80140ea:	4484      	add	ip, r0
 80140ec:	2900      	cmp	r1, #0
 80140ee:	f000 80e5 	beq.w	80142bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 80140f2:	1950      	adds	r0, r2, r5
 80140f4:	5d52      	ldrb	r2, [r2, r5]
 80140f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80140f8:	7840      	ldrb	r0, [r0, #1]
 80140fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80140fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014102:	4422      	add	r2, r4
 8014104:	4420      	add	r0, r4
 8014106:	b29b      	uxth	r3, r3
 8014108:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801410a:	b289      	uxth	r1, r1
 801410c:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8014110:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8014114:	fb03 fa01 	mul.w	sl, r3, r1
 8014118:	011b      	lsls	r3, r3, #4
 801411a:	f89c e000 	ldrb.w	lr, [ip]
 801411e:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8014122:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8014126:	eba3 030a 	sub.w	r3, r3, sl
 801412a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801412c:	b289      	uxth	r1, r1
 801412e:	b29b      	uxth	r3, r3
 8014130:	eba9 0901 	sub.w	r9, r9, r1
 8014134:	fb03 fe0e 	mul.w	lr, r3, lr
 8014138:	fa1f f989 	uxth.w	r9, r9
 801413c:	fb09 ee0b 	mla	lr, r9, fp, lr
 8014140:	f892 b000 	ldrb.w	fp, [r2]
 8014144:	fb01 ee0b 	mla	lr, r1, fp, lr
 8014148:	f890 b000 	ldrb.w	fp, [r0]
 801414c:	fb0a ee0b 	mla	lr, sl, fp, lr
 8014150:	f897 b000 	ldrb.w	fp, [r7]
 8014154:	fb1b fb04 	smulbb	fp, fp, r4
 8014158:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801415c:	fb0e be06 	mla	lr, lr, r6, fp
 8014160:	fa1f fe8e 	uxth.w	lr, lr
 8014164:	f10e 0b01 	add.w	fp, lr, #1
 8014168:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801416c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8014170:	f887 b000 	strb.w	fp, [r7]
 8014174:	f89c e001 	ldrb.w	lr, [ip, #1]
 8014178:	f898 b001 	ldrb.w	fp, [r8, #1]
 801417c:	fb03 fe0e 	mul.w	lr, r3, lr
 8014180:	fb09 ee0b 	mla	lr, r9, fp, lr
 8014184:	f892 b001 	ldrb.w	fp, [r2, #1]
 8014188:	fb01 ee0b 	mla	lr, r1, fp, lr
 801418c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8014190:	fb0a ee0b 	mla	lr, sl, fp, lr
 8014194:	f897 b001 	ldrb.w	fp, [r7, #1]
 8014198:	fb1b fb04 	smulbb	fp, fp, r4
 801419c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80141a0:	fb0e be06 	mla	lr, lr, r6, fp
 80141a4:	fa1f fe8e 	uxth.w	lr, lr
 80141a8:	f10e 0b01 	add.w	fp, lr, #1
 80141ac:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80141b0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80141b4:	f887 e001 	strb.w	lr, [r7, #1]
 80141b8:	f89c c002 	ldrb.w	ip, [ip, #2]
 80141bc:	f898 e002 	ldrb.w	lr, [r8, #2]
 80141c0:	fb03 f30c 	mul.w	r3, r3, ip
 80141c4:	fb09 330e 	mla	r3, r9, lr, r3
 80141c8:	f892 e002 	ldrb.w	lr, [r2, #2]
 80141cc:	7882      	ldrb	r2, [r0, #2]
 80141ce:	fb01 310e 	mla	r1, r1, lr, r3
 80141d2:	fb0a 1a02 	mla	sl, sl, r2, r1
 80141d6:	78b9      	ldrb	r1, [r7, #2]
 80141d8:	fb11 f104 	smulbb	r1, r1, r4
 80141dc:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80141e0:	fb0a 1606 	mla	r6, sl, r6, r1
 80141e4:	b2b6      	uxth	r6, r6
 80141e6:	1c73      	adds	r3, r6, #1
 80141e8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80141ec:	1236      	asrs	r6, r6, #8
 80141ee:	70be      	strb	r6, [r7, #2]
 80141f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80141f2:	3703      	adds	r7, #3
 80141f4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80141f6:	4413      	add	r3, r2
 80141f8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80141fa:	9327      	str	r3, [sp, #156]	; 0x9c
 80141fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80141fe:	4413      	add	r3, r2
 8014200:	9328      	str	r3, [sp, #160]	; 0xa0
 8014202:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014204:	3b01      	subs	r3, #1
 8014206:	9311      	str	r3, [sp, #68]	; 0x44
 8014208:	e741      	b.n	801408e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801420a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801420c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801420e:	4413      	add	r3, r2
 8014210:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8014212:	9327      	str	r3, [sp, #156]	; 0x9c
 8014214:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014216:	4413      	add	r3, r2
 8014218:	9328      	str	r3, [sp, #160]	; 0xa0
 801421a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801421c:	3b01      	subs	r3, #1
 801421e:	930a      	str	r3, [sp, #40]	; 0x28
 8014220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014222:	3303      	adds	r3, #3
 8014224:	930b      	str	r3, [sp, #44]	; 0x2c
 8014226:	e6e6      	b.n	8013ff6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8014228:	f47f aef8 	bne.w	801401c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801422c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801422e:	2b00      	cmp	r3, #0
 8014230:	f340 811d 	ble.w	801446e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8014234:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014238:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801423a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801423e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8014242:	eef0 6a48 	vmov.f32	s13, s16
 8014246:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801424a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801424e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014252:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8014256:	eef0 6a68 	vmov.f32	s13, s17
 801425a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801425e:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8014262:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8014266:	ee69 7a27 	vmul.f32	s15, s18, s15
 801426a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801426e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8014272:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8014276:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801427a:	ee18 2a10 	vmov	r2, s16
 801427e:	eeb0 8a47 	vmov.f32	s16, s14
 8014282:	fb92 f3f3 	sdiv	r3, r2, r3
 8014286:	ee18 2a90 	vmov	r2, s17
 801428a:	9329      	str	r3, [sp, #164]	; 0xa4
 801428c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801428e:	eef0 8a67 	vmov.f32	s17, s15
 8014292:	fb92 f3f3 	sdiv	r3, r2, r3
 8014296:	932a      	str	r3, [sp, #168]	; 0xa8
 8014298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801429a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801429c:	3b01      	subs	r3, #1
 801429e:	930f      	str	r3, [sp, #60]	; 0x3c
 80142a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80142a2:	bf08      	it	eq
 80142a4:	4613      	moveq	r3, r2
 80142a6:	930a      	str	r3, [sp, #40]	; 0x28
 80142a8:	e69e      	b.n	8013fe8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80142aa:	b151      	cbz	r1, 80142c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80142ac:	5d52      	ldrb	r2, [r2, r5]
 80142ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80142b4:	4402      	add	r2, r0
 80142b6:	4640      	mov	r0, r8
 80142b8:	46c4      	mov	ip, r8
 80142ba:	e724      	b.n	8014106 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 80142bc:	4640      	mov	r0, r8
 80142be:	4642      	mov	r2, r8
 80142c0:	e721      	b.n	8014106 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 80142c2:	4640      	mov	r0, r8
 80142c4:	4642      	mov	r2, r8
 80142c6:	e7f7      	b.n	80142b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 80142c8:	1c46      	adds	r6, r0, #1
 80142ca:	d191      	bne.n	80141f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80142cc:	4285      	cmp	r5, r0
 80142ce:	dd8f      	ble.n	80141f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80142d0:	1c54      	adds	r4, r2, #1
 80142d2:	db8d      	blt.n	80141f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80142d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80142d6:	4294      	cmp	r4, r2
 80142d8:	dd8a      	ble.n	80141f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80142da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80142dc:	9002      	str	r0, [sp, #8]
 80142de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80142e0:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80142e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80142e8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80142ec:	e9cd 5300 	strd	r5, r3, [sp]
 80142f0:	4639      	mov	r1, r7
 80142f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142f4:	f7ff fd52 	bl	8013d9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80142f8:	e77a      	b.n	80141f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80142fa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80142fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80142fe:	1410      	asrs	r0, r2, #16
 8014300:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8014304:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8014306:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014308:	1412      	asrs	r2, r2, #16
 801430a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801430e:	fb05 2000 	mla	r0, r5, r0, r2
 8014312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014314:	f814 8000 	ldrb.w	r8, [r4, r0]
 8014318:	4402      	add	r2, r0
 801431a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801431c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8014320:	eb00 0708 	add.w	r7, r0, r8
 8014324:	2b00      	cmp	r3, #0
 8014326:	f000 8093 	beq.w	8014450 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801432a:	7856      	ldrb	r6, [r2, #1]
 801432c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014330:	4406      	add	r6, r0
 8014332:	2900      	cmp	r1, #0
 8014334:	f000 8095 	beq.w	8014462 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8014338:	1950      	adds	r0, r2, r5
 801433a:	5d52      	ldrb	r2, [r2, r5]
 801433c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801433e:	7840      	ldrb	r0, [r0, #1]
 8014340:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014344:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014348:	4422      	add	r2, r4
 801434a:	4420      	add	r0, r4
 801434c:	b29b      	uxth	r3, r3
 801434e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014350:	b289      	uxth	r1, r1
 8014352:	f10c 0c03 	add.w	ip, ip, #3
 8014356:	f814 b008 	ldrb.w	fp, [r4, r8]
 801435a:	fb03 f901 	mul.w	r9, r3, r1
 801435e:	011b      	lsls	r3, r3, #4
 8014360:	f896 8000 	ldrb.w	r8, [r6]
 8014364:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8014368:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801436c:	eba3 0309 	sub.w	r3, r3, r9
 8014370:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014372:	b289      	uxth	r1, r1
 8014374:	b29b      	uxth	r3, r3
 8014376:	ebae 0e01 	sub.w	lr, lr, r1
 801437a:	fb03 f808 	mul.w	r8, r3, r8
 801437e:	fa1f fe8e 	uxth.w	lr, lr
 8014382:	fb0e 880b 	mla	r8, lr, fp, r8
 8014386:	f892 b000 	ldrb.w	fp, [r2]
 801438a:	fb01 880b 	mla	r8, r1, fp, r8
 801438e:	f890 b000 	ldrb.w	fp, [r0]
 8014392:	fb09 880b 	mla	r8, r9, fp, r8
 8014396:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801439a:	fb1b fb04 	smulbb	fp, fp, r4
 801439e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80143a2:	fb08 b80a 	mla	r8, r8, sl, fp
 80143a6:	fa1f f888 	uxth.w	r8, r8
 80143aa:	f108 0b01 	add.w	fp, r8, #1
 80143ae:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80143b2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80143b6:	f80c 8c06 	strb.w	r8, [ip, #-6]
 80143ba:	f896 8001 	ldrb.w	r8, [r6, #1]
 80143be:	f897 b001 	ldrb.w	fp, [r7, #1]
 80143c2:	fb03 f808 	mul.w	r8, r3, r8
 80143c6:	fb0e 880b 	mla	r8, lr, fp, r8
 80143ca:	f892 b001 	ldrb.w	fp, [r2, #1]
 80143ce:	fb01 880b 	mla	r8, r1, fp, r8
 80143d2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80143d6:	fb09 880b 	mla	r8, r9, fp, r8
 80143da:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 80143de:	fb1b fb04 	smulbb	fp, fp, r4
 80143e2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80143e6:	fb08 b80a 	mla	r8, r8, sl, fp
 80143ea:	fa1f f888 	uxth.w	r8, r8
 80143ee:	f108 0b01 	add.w	fp, r8, #1
 80143f2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80143f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80143fa:	f80c 8c05 	strb.w	r8, [ip, #-5]
 80143fe:	78b6      	ldrb	r6, [r6, #2]
 8014400:	78bf      	ldrb	r7, [r7, #2]
 8014402:	4373      	muls	r3, r6
 8014404:	7896      	ldrb	r6, [r2, #2]
 8014406:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014408:	fb0e 3307 	mla	r3, lr, r7, r3
 801440c:	fb01 3306 	mla	r3, r1, r6, r3
 8014410:	7886      	ldrb	r6, [r0, #2]
 8014412:	fb09 3906 	mla	r9, r9, r6, r3
 8014416:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801441a:	fb13 f304 	smulbb	r3, r3, r4
 801441e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8014422:	fb09 390a 	mla	r9, r9, sl, r3
 8014426:	fa1f f989 	uxth.w	r9, r9
 801442a:	f109 0301 	add.w	r3, r9, #1
 801442e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8014432:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014434:	4413      	add	r3, r2
 8014436:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8014438:	ea4f 2929 	mov.w	r9, r9, asr #8
 801443c:	9327      	str	r3, [sp, #156]	; 0x9c
 801443e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014440:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8014444:	4413      	add	r3, r2
 8014446:	9328      	str	r3, [sp, #160]	; 0xa0
 8014448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801444a:	3b01      	subs	r3, #1
 801444c:	9311      	str	r3, [sp, #68]	; 0x44
 801444e:	e601      	b.n	8014054 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8014450:	b151      	cbz	r1, 8014468 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8014452:	5d52      	ldrb	r2, [r2, r5]
 8014454:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014456:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801445a:	4402      	add	r2, r0
 801445c:	4638      	mov	r0, r7
 801445e:	463e      	mov	r6, r7
 8014460:	e774      	b.n	801434c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8014462:	4638      	mov	r0, r7
 8014464:	463a      	mov	r2, r7
 8014466:	e771      	b.n	801434c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8014468:	4638      	mov	r0, r7
 801446a:	463a      	mov	r2, r7
 801446c:	e7f7      	b.n	801445e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801446e:	b015      	add	sp, #84	; 0x54
 8014470:	ecbd 8b08 	vpop	{d8-d11}
 8014474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014478 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8014478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801447c:	780d      	ldrb	r5, [r1, #0]
 801447e:	f891 9002 	ldrb.w	r9, [r1, #2]
 8014482:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8014486:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801448a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801448e:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8014492:	f891 9001 	ldrb.w	r9, [r1, #1]
 8014496:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801449a:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801449e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80144a2:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 80144a6:	9501      	str	r5, [sp, #4]
 80144a8:	fb06 470c 	mla	r7, r6, ip, r4
 80144ac:	2e00      	cmp	r6, #0
 80144ae:	eb02 0e07 	add.w	lr, r2, r7
 80144b2:	db46      	blt.n	8014542 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 80144b4:	45b0      	cmp	r8, r6
 80144b6:	dd44      	ble.n	8014542 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 80144b8:	2c00      	cmp	r4, #0
 80144ba:	db40      	blt.n	801453e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 80144bc:	45a4      	cmp	ip, r4
 80144be:	dd3e      	ble.n	801453e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 80144c0:	5dd7      	ldrb	r7, [r2, r7]
 80144c2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80144c6:	441f      	add	r7, r3
 80144c8:	1c62      	adds	r2, r4, #1
 80144ca:	d43d      	bmi.n	8014548 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80144cc:	4594      	cmp	ip, r2
 80144ce:	dd3b      	ble.n	8014548 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80144d0:	f1ba 0f00 	cmp.w	sl, #0
 80144d4:	d038      	beq.n	8014548 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80144d6:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80144da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80144de:	441d      	add	r5, r3
 80144e0:	3601      	adds	r6, #1
 80144e2:	d435      	bmi.n	8014550 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80144e4:	45b0      	cmp	r8, r6
 80144e6:	dd33      	ble.n	8014550 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80144e8:	b390      	cbz	r0, 8014550 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80144ea:	2c00      	cmp	r4, #0
 80144ec:	db2e      	blt.n	801454c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80144ee:	45a4      	cmp	ip, r4
 80144f0:	dd2c      	ble.n	801454c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80144f2:	f81e 600c 	ldrb.w	r6, [lr, ip]
 80144f6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80144fa:	441e      	add	r6, r3
 80144fc:	1c62      	adds	r2, r4, #1
 80144fe:	d42a      	bmi.n	8014556 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8014500:	4594      	cmp	ip, r2
 8014502:	dd28      	ble.n	8014556 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8014504:	f1ba 0f00 	cmp.w	sl, #0
 8014508:	d025      	beq.n	8014556 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801450a:	44f4      	add	ip, lr
 801450c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8014510:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014514:	4413      	add	r3, r2
 8014516:	f1ba 0f0f 	cmp.w	sl, #15
 801451a:	f897 8000 	ldrb.w	r8, [r7]
 801451e:	f895 9000 	ldrb.w	r9, [r5]
 8014522:	f896 e000 	ldrb.w	lr, [r6]
 8014526:	f893 c000 	ldrb.w	ip, [r3]
 801452a:	d801      	bhi.n	8014530 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801452c:	280f      	cmp	r0, #15
 801452e:	d914      	bls.n	801455a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8014530:	4b29      	ldr	r3, [pc, #164]	; (80145d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8014532:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8014536:	4a29      	ldr	r2, [pc, #164]	; (80145dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8014538:	4829      	ldr	r0, [pc, #164]	; (80145e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801453a:	f004 fb51 	bl	8018be0 <__assert_func>
 801453e:	af01      	add	r7, sp, #4
 8014540:	e7c2      	b.n	80144c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8014542:	ad01      	add	r5, sp, #4
 8014544:	462f      	mov	r7, r5
 8014546:	e7cb      	b.n	80144e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8014548:	ad01      	add	r5, sp, #4
 801454a:	e7c9      	b.n	80144e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801454c:	ae01      	add	r6, sp, #4
 801454e:	e7d5      	b.n	80144fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 8014550:	ab01      	add	r3, sp, #4
 8014552:	461e      	mov	r6, r3
 8014554:	e7df      	b.n	8014516 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8014556:	ab01      	add	r3, sp, #4
 8014558:	e7dd      	b.n	8014516 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801455a:	fa1f f48a 	uxth.w	r4, sl
 801455e:	b280      	uxth	r0, r0
 8014560:	fb04 fa00 	mul.w	sl, r4, r0
 8014564:	0124      	lsls	r4, r4, #4
 8014566:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801456a:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801456e:	b282      	uxth	r2, r0
 8014570:	eba4 000a 	sub.w	r0, r4, sl
 8014574:	ebab 0b02 	sub.w	fp, fp, r2
 8014578:	b280      	uxth	r0, r0
 801457a:	fa1f fb8b 	uxth.w	fp, fp
 801457e:	fb00 f909 	mul.w	r9, r0, r9
 8014582:	fb0b 9808 	mla	r8, fp, r8, r9
 8014586:	fb02 8e0e 	mla	lr, r2, lr, r8
 801458a:	fb0a ec0c 	mla	ip, sl, ip, lr
 801458e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8014592:	f881 c000 	strb.w	ip, [r1]
 8014596:	786c      	ldrb	r4, [r5, #1]
 8014598:	f897 c001 	ldrb.w	ip, [r7, #1]
 801459c:	4344      	muls	r4, r0
 801459e:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80145a2:	7874      	ldrb	r4, [r6, #1]
 80145a4:	fb02 cc04 	mla	ip, r2, r4, ip
 80145a8:	785c      	ldrb	r4, [r3, #1]
 80145aa:	fb0a c404 	mla	r4, sl, r4, ip
 80145ae:	1224      	asrs	r4, r4, #8
 80145b0:	704c      	strb	r4, [r1, #1]
 80145b2:	78ad      	ldrb	r5, [r5, #2]
 80145b4:	78bc      	ldrb	r4, [r7, #2]
 80145b6:	4368      	muls	r0, r5
 80145b8:	fb0b 0b04 	mla	fp, fp, r4, r0
 80145bc:	78b0      	ldrb	r0, [r6, #2]
 80145be:	fb02 b000 	mla	r0, r2, r0, fp
 80145c2:	789a      	ldrb	r2, [r3, #2]
 80145c4:	fb0a 0a02 	mla	sl, sl, r2, r0
 80145c8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80145cc:	f881 a002 	strb.w	sl, [r1, #2]
 80145d0:	b003      	add	sp, #12
 80145d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145d6:	bf00      	nop
 80145d8:	0801c5d4 	.word	0x0801c5d4
 80145dc:	0801caca 	.word	0x0801caca
 80145e0:	0801c69d 	.word	0x0801c69d

080145e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80145e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145e8:	ed2d 8b0a 	vpush	{d8-d12}
 80145ec:	b08f      	sub	sp, #60	; 0x3c
 80145ee:	eeb0 aa40 	vmov.f32	s20, s0
 80145f2:	eef0 9a60 	vmov.f32	s19, s1
 80145f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80145f8:	eeb0 9a41 	vmov.f32	s18, s2
 80145fc:	9307      	str	r3, [sp, #28]
 80145fe:	eeb0 8a62 	vmov.f32	s16, s5
 8014602:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8014606:	eef0 8a43 	vmov.f32	s17, s6
 801460a:	900d      	str	r0, [sp, #52]	; 0x34
 801460c:	eeb0 ca44 	vmov.f32	s24, s8
 8014610:	6860      	ldr	r0, [r4, #4]
 8014612:	eef0 ba64 	vmov.f32	s23, s9
 8014616:	9309      	str	r3, [sp, #36]	; 0x24
 8014618:	eeb0 ba45 	vmov.f32	s22, s10
 801461c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8014620:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 8014624:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8014628:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801462c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801462e:	fb00 1303 	mla	r3, r0, r3, r1
 8014632:	6821      	ldr	r1, [r4, #0]
 8014634:	6854      	ldr	r4, [r2, #4]
 8014636:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801463a:	3404      	adds	r4, #4
 801463c:	18cb      	adds	r3, r1, r3
 801463e:	9308      	str	r3, [sp, #32]
 8014640:	6813      	ldr	r3, [r2, #0]
 8014642:	930a      	str	r3, [sp, #40]	; 0x28
 8014644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014646:	2b00      	cmp	r3, #0
 8014648:	dc03      	bgt.n	8014652 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801464a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801464c:	2b00      	cmp	r3, #0
 801464e:	f340 81d2 	ble.w	80149f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8014652:	9b07      	ldr	r3, [sp, #28]
 8014654:	2b00      	cmp	r3, #0
 8014656:	f340 80e3 	ble.w	8014820 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801465a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801465c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801465e:	1412      	asrs	r2, r2, #16
 8014660:	ea4f 4323 	mov.w	r3, r3, asr #16
 8014664:	d42f      	bmi.n	80146c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8014666:	1c51      	adds	r1, r2, #1
 8014668:	428d      	cmp	r5, r1
 801466a:	dd2f      	ble.n	80146cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801466c:	2b00      	cmp	r3, #0
 801466e:	db2d      	blt.n	80146cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8014670:	1c59      	adds	r1, r3, #1
 8014672:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014674:	4288      	cmp	r0, r1
 8014676:	dd29      	ble.n	80146cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8014678:	9b07      	ldr	r3, [sp, #28]
 801467a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801467c:	3b01      	subs	r3, #1
 801467e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8014680:	fb02 1203 	mla	r2, r2, r3, r1
 8014684:	1412      	asrs	r2, r2, #16
 8014686:	d42b      	bmi.n	80146e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8014688:	3201      	adds	r2, #1
 801468a:	4295      	cmp	r5, r2
 801468c:	dd28      	ble.n	80146e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801468e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014690:	9924      	ldr	r1, [sp, #144]	; 0x90
 8014692:	fb02 1303 	mla	r3, r2, r3, r1
 8014696:	141b      	asrs	r3, r3, #16
 8014698:	d422      	bmi.n	80146e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801469a:	3301      	adds	r3, #1
 801469c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801469e:	429a      	cmp	r2, r3
 80146a0:	dd1e      	ble.n	80146e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80146a2:	9b08      	ldr	r3, [sp, #32]
 80146a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80146a8:	f103 0803 	add.w	r8, r3, #3
 80146ac:	f1ba 0f00 	cmp.w	sl, #0
 80146b0:	f300 8119 	bgt.w	80148e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 80146b4:	9b07      	ldr	r3, [sp, #28]
 80146b6:	9a08      	ldr	r2, [sp, #32]
 80146b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80146bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80146c0:	441a      	add	r2, r3
 80146c2:	9208      	str	r2, [sp, #32]
 80146c4:	e0ae      	b.n	8014824 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 80146c6:	1c51      	adds	r1, r2, #1
 80146c8:	f040 809b 	bne.w	8014802 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80146cc:	42aa      	cmp	r2, r5
 80146ce:	f280 8098 	bge.w	8014802 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80146d2:	1c5a      	adds	r2, r3, #1
 80146d4:	f2c0 8095 	blt.w	8014802 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80146d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146da:	4293      	cmp	r3, r2
 80146dc:	f280 8091 	bge.w	8014802 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80146e0:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 80146e4:	f1bb 0f00 	cmp.w	fp, #0
 80146e8:	dde4      	ble.n	80146b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80146ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80146ec:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80146ee:	141a      	asrs	r2, r3, #16
 80146f0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80146f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80146f4:	1400      	asrs	r0, r0, #16
 80146f6:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80146fa:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80146fe:	f100 80dc 	bmi.w	80148ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 8014702:	1c47      	adds	r7, r0, #1
 8014704:	42bd      	cmp	r5, r7
 8014706:	f340 80da 	ble.w	80148be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801470a:	2a00      	cmp	r2, #0
 801470c:	f2c0 80d7 	blt.w	80148be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8014710:	f102 0c01 	add.w	ip, r2, #1
 8014714:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014716:	4567      	cmp	r7, ip
 8014718:	f340 80d1 	ble.w	80148be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801471c:	fb02 0005 	mla	r0, r2, r5, r0
 8014720:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014724:	f817 8000 	ldrb.w	r8, [r7, r0]
 8014728:	4402      	add	r2, r0
 801472a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801472e:	eb04 0c08 	add.w	ip, r4, r8
 8014732:	2b00      	cmp	r3, #0
 8014734:	f000 80b3 	beq.w	801489e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8014738:	7857      	ldrb	r7, [r2, #1]
 801473a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801473e:	4427      	add	r7, r4
 8014740:	2900      	cmp	r1, #0
 8014742:	f000 80b4 	beq.w	80148ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 8014746:	1950      	adds	r0, r2, r5
 8014748:	5d52      	ldrb	r2, [r2, r5]
 801474a:	7840      	ldrb	r0, [r0, #1]
 801474c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014750:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014754:	4422      	add	r2, r4
 8014756:	4420      	add	r0, r4
 8014758:	b29b      	uxth	r3, r3
 801475a:	f814 a008 	ldrb.w	sl, [r4, r8]
 801475e:	b289      	uxth	r1, r1
 8014760:	f897 8000 	ldrb.w	r8, [r7]
 8014764:	fb03 f901 	mul.w	r9, r3, r1
 8014768:	011b      	lsls	r3, r3, #4
 801476a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801476e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8014772:	eba3 0309 	sub.w	r3, r3, r9
 8014776:	b289      	uxth	r1, r1
 8014778:	b29b      	uxth	r3, r3
 801477a:	ebae 0e01 	sub.w	lr, lr, r1
 801477e:	fb03 f808 	mul.w	r8, r3, r8
 8014782:	fa1f fe8e 	uxth.w	lr, lr
 8014786:	fb0e 880a 	mla	r8, lr, sl, r8
 801478a:	f892 a000 	ldrb.w	sl, [r2]
 801478e:	fb01 880a 	mla	r8, r1, sl, r8
 8014792:	f890 a000 	ldrb.w	sl, [r0]
 8014796:	fb09 880a 	mla	r8, r9, sl, r8
 801479a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801479e:	f886 8000 	strb.w	r8, [r6]
 80147a2:	f897 8001 	ldrb.w	r8, [r7, #1]
 80147a6:	f89c a001 	ldrb.w	sl, [ip, #1]
 80147aa:	fb03 f808 	mul.w	r8, r3, r8
 80147ae:	fb0e 880a 	mla	r8, lr, sl, r8
 80147b2:	f892 a001 	ldrb.w	sl, [r2, #1]
 80147b6:	fb01 880a 	mla	r8, r1, sl, r8
 80147ba:	f890 a001 	ldrb.w	sl, [r0, #1]
 80147be:	fb09 880a 	mla	r8, r9, sl, r8
 80147c2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80147c6:	f886 8001 	strb.w	r8, [r6, #1]
 80147ca:	78bf      	ldrb	r7, [r7, #2]
 80147cc:	f89c c002 	ldrb.w	ip, [ip, #2]
 80147d0:	437b      	muls	r3, r7
 80147d2:	7892      	ldrb	r2, [r2, #2]
 80147d4:	fb0e 330c 	mla	r3, lr, ip, r3
 80147d8:	fb01 3102 	mla	r1, r1, r2, r3
 80147dc:	7882      	ldrb	r2, [r0, #2]
 80147de:	fb09 1902 	mla	r9, r9, r2, r1
 80147e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80147e6:	f886 9002 	strb.w	r9, [r6, #2]
 80147ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80147ec:	3603      	adds	r6, #3
 80147ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80147f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80147f4:	4413      	add	r3, r2
 80147f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80147f8:	9323      	str	r3, [sp, #140]	; 0x8c
 80147fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80147fc:	4413      	add	r3, r2
 80147fe:	9324      	str	r3, [sp, #144]	; 0x90
 8014800:	e770      	b.n	80146e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8014802:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014804:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014806:	4413      	add	r3, r2
 8014808:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801480a:	9323      	str	r3, [sp, #140]	; 0x8c
 801480c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801480e:	4413      	add	r3, r2
 8014810:	9324      	str	r3, [sp, #144]	; 0x90
 8014812:	9b07      	ldr	r3, [sp, #28]
 8014814:	3b01      	subs	r3, #1
 8014816:	9307      	str	r3, [sp, #28]
 8014818:	9b08      	ldr	r3, [sp, #32]
 801481a:	3303      	adds	r3, #3
 801481c:	9308      	str	r3, [sp, #32]
 801481e:	e718      	b.n	8014652 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8014820:	f47f af2a 	bne.w	8014678 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8014824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014826:	2b00      	cmp	r3, #0
 8014828:	f340 80e5 	ble.w	80149f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801482c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8014830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014832:	ee79 9aab 	vadd.f32	s19, s19, s23
 8014836:	eef0 6a48 	vmov.f32	s13, s16
 801483a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801483e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8014842:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014846:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801484a:	eef0 6a68 	vmov.f32	s13, s17
 801484e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014852:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 8014856:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801485a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801485e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8014862:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8014866:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801486a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801486e:	ee18 2a10 	vmov	r2, s16
 8014872:	eeb0 8a47 	vmov.f32	s16, s14
 8014876:	fb92 f3f3 	sdiv	r3, r2, r3
 801487a:	ee18 2a90 	vmov	r2, s17
 801487e:	9325      	str	r3, [sp, #148]	; 0x94
 8014880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014882:	eef0 8a67 	vmov.f32	s17, s15
 8014886:	fb92 f3f3 	sdiv	r3, r2, r3
 801488a:	9326      	str	r3, [sp, #152]	; 0x98
 801488c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801488e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014890:	3b01      	subs	r3, #1
 8014892:	930b      	str	r3, [sp, #44]	; 0x2c
 8014894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014896:	bf08      	it	eq
 8014898:	4613      	moveq	r3, r2
 801489a:	9307      	str	r3, [sp, #28]
 801489c:	e6d2      	b.n	8014644 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801489e:	b149      	cbz	r1, 80148b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80148a0:	5d52      	ldrb	r2, [r2, r5]
 80148a2:	4660      	mov	r0, ip
 80148a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80148a8:	4422      	add	r2, r4
 80148aa:	4667      	mov	r7, ip
 80148ac:	e754      	b.n	8014758 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80148ae:	4660      	mov	r0, ip
 80148b0:	4662      	mov	r2, ip
 80148b2:	e751      	b.n	8014758 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80148b4:	4660      	mov	r0, ip
 80148b6:	4662      	mov	r2, ip
 80148b8:	e7f7      	b.n	80148aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 80148ba:	1c47      	adds	r7, r0, #1
 80148bc:	d195      	bne.n	80147ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80148be:	4285      	cmp	r5, r0
 80148c0:	dd93      	ble.n	80147ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80148c2:	1c57      	adds	r7, r2, #1
 80148c4:	db91      	blt.n	80147ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80148c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80148c8:	4297      	cmp	r7, r2
 80148ca:	dd8e      	ble.n	80147ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80148cc:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80148d0:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80148d4:	e9cd 5700 	strd	r5, r7, [sp]
 80148d8:	4623      	mov	r3, r4
 80148da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148dc:	4631      	mov	r1, r6
 80148de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80148e0:	f7ff fdca 	bl	8014478 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80148e4:	e781      	b.n	80147ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80148e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80148e8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80148ea:	1410      	asrs	r0, r2, #16
 80148ec:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80148f0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80148f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80148f4:	1412      	asrs	r2, r2, #16
 80148f6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80148fa:	fb05 2000 	mla	r0, r5, r0, r2
 80148fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014900:	f816 e000 	ldrb.w	lr, [r6, r0]
 8014904:	4402      	add	r2, r0
 8014906:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801490a:	eb04 070e 	add.w	r7, r4, lr
 801490e:	2b00      	cmp	r3, #0
 8014910:	d063      	beq.n	80149da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8014912:	7856      	ldrb	r6, [r2, #1]
 8014914:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014918:	4426      	add	r6, r4
 801491a:	2900      	cmp	r1, #0
 801491c:	d065      	beq.n	80149ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801491e:	1950      	adds	r0, r2, r5
 8014920:	5d52      	ldrb	r2, [r2, r5]
 8014922:	7840      	ldrb	r0, [r0, #1]
 8014924:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014928:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801492c:	4422      	add	r2, r4
 801492e:	4420      	add	r0, r4
 8014930:	b29b      	uxth	r3, r3
 8014932:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8014936:	b289      	uxth	r1, r1
 8014938:	f896 e000 	ldrb.w	lr, [r6]
 801493c:	f108 0803 	add.w	r8, r8, #3
 8014940:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014944:	fb03 f901 	mul.w	r9, r3, r1
 8014948:	011b      	lsls	r3, r3, #4
 801494a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801494e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8014952:	eba3 0309 	sub.w	r3, r3, r9
 8014956:	b289      	uxth	r1, r1
 8014958:	b29b      	uxth	r3, r3
 801495a:	ebac 0c01 	sub.w	ip, ip, r1
 801495e:	fb03 fe0e 	mul.w	lr, r3, lr
 8014962:	fa1f fc8c 	uxth.w	ip, ip
 8014966:	fb0c ee0b 	mla	lr, ip, fp, lr
 801496a:	f892 b000 	ldrb.w	fp, [r2]
 801496e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8014972:	f890 b000 	ldrb.w	fp, [r0]
 8014976:	fb09 ee0b 	mla	lr, r9, fp, lr
 801497a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801497e:	f808 ec06 	strb.w	lr, [r8, #-6]
 8014982:	f896 e001 	ldrb.w	lr, [r6, #1]
 8014986:	f897 b001 	ldrb.w	fp, [r7, #1]
 801498a:	fb03 fe0e 	mul.w	lr, r3, lr
 801498e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8014992:	f892 b001 	ldrb.w	fp, [r2, #1]
 8014996:	fb01 ee0b 	mla	lr, r1, fp, lr
 801499a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801499e:	fb09 ee0b 	mla	lr, r9, fp, lr
 80149a2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80149a6:	f808 ec05 	strb.w	lr, [r8, #-5]
 80149aa:	78b6      	ldrb	r6, [r6, #2]
 80149ac:	78bf      	ldrb	r7, [r7, #2]
 80149ae:	4373      	muls	r3, r6
 80149b0:	7896      	ldrb	r6, [r2, #2]
 80149b2:	7882      	ldrb	r2, [r0, #2]
 80149b4:	fb0c 3307 	mla	r3, ip, r7, r3
 80149b8:	fb01 3306 	mla	r3, r1, r6, r3
 80149bc:	fb09 3902 	mla	r9, r9, r2, r3
 80149c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80149c2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80149c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80149c8:	4413      	add	r3, r2
 80149ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80149cc:	f808 9c04 	strb.w	r9, [r8, #-4]
 80149d0:	9323      	str	r3, [sp, #140]	; 0x8c
 80149d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80149d4:	4413      	add	r3, r2
 80149d6:	9324      	str	r3, [sp, #144]	; 0x90
 80149d8:	e668      	b.n	80146ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 80149da:	b149      	cbz	r1, 80149f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 80149dc:	5d52      	ldrb	r2, [r2, r5]
 80149de:	4638      	mov	r0, r7
 80149e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80149e4:	4422      	add	r2, r4
 80149e6:	463e      	mov	r6, r7
 80149e8:	e7a2      	b.n	8014930 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80149ea:	4638      	mov	r0, r7
 80149ec:	463a      	mov	r2, r7
 80149ee:	e79f      	b.n	8014930 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80149f0:	4638      	mov	r0, r7
 80149f2:	463a      	mov	r2, r7
 80149f4:	e7f7      	b.n	80149e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 80149f6:	b00f      	add	sp, #60	; 0x3c
 80149f8:	ecbd 8b0a 	vpop	{d8-d12}
 80149fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8014a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a04:	b087      	sub	sp, #28
 8014a06:	7888      	ldrb	r0, [r1, #2]
 8014a08:	9002      	str	r0, [sp, #8]
 8014a0a:	7848      	ldrb	r0, [r1, #1]
 8014a0c:	9e02      	ldr	r6, [sp, #8]
 8014a0e:	9003      	str	r0, [sp, #12]
 8014a10:	7808      	ldrb	r0, [r1, #0]
 8014a12:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8014a16:	9004      	str	r0, [sp, #16]
 8014a18:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8014a1c:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8014a20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8014a24:	9e03      	ldr	r6, [sp, #12]
 8014a26:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8014a2a:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8014a2e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8014a32:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 8014a36:	fb04 7508 	mla	r5, r4, r8, r7
 8014a3a:	2c00      	cmp	r4, #0
 8014a3c:	eb02 0905 	add.w	r9, r2, r5
 8014a40:	db45      	blt.n	8014ace <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8014a42:	45a2      	cmp	sl, r4
 8014a44:	dd43      	ble.n	8014ace <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8014a46:	2f00      	cmp	r7, #0
 8014a48:	db3f      	blt.n	8014aca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8014a4a:	45b8      	cmp	r8, r7
 8014a4c:	dd3d      	ble.n	8014aca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8014a4e:	5d52      	ldrb	r2, [r2, r5]
 8014a50:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014a54:	1c7a      	adds	r2, r7, #1
 8014a56:	d43d      	bmi.n	8014ad4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8014a58:	4590      	cmp	r8, r2
 8014a5a:	dd3b      	ble.n	8014ad4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8014a5c:	f1bc 0f00 	cmp.w	ip, #0
 8014a60:	d038      	beq.n	8014ad4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8014a62:	f899 2001 	ldrb.w	r2, [r9, #1]
 8014a66:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014a6a:	3401      	adds	r4, #1
 8014a6c:	d436      	bmi.n	8014adc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8014a6e:	45a2      	cmp	sl, r4
 8014a70:	dd34      	ble.n	8014adc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8014a72:	f1be 0f00 	cmp.w	lr, #0
 8014a76:	d031      	beq.n	8014adc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8014a78:	2f00      	cmp	r7, #0
 8014a7a:	db2d      	blt.n	8014ad8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8014a7c:	45b8      	cmp	r8, r7
 8014a7e:	dd2b      	ble.n	8014ad8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8014a80:	f819 2008 	ldrb.w	r2, [r9, r8]
 8014a84:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8014a88:	3701      	adds	r7, #1
 8014a8a:	d409      	bmi.n	8014aa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8014a8c:	45b8      	cmp	r8, r7
 8014a8e:	dd07      	ble.n	8014aa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8014a90:	f1bc 0f00 	cmp.w	ip, #0
 8014a94:	d004      	beq.n	8014aa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8014a96:	44c8      	add	r8, r9
 8014a98:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014a9c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014aa0:	f1bc 0f0f 	cmp.w	ip, #15
 8014aa4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8014aa8:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8014aac:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8014ab0:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8014ab4:	d802      	bhi.n	8014abc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8014ab6:	f1be 0f0f 	cmp.w	lr, #15
 8014aba:	d911      	bls.n	8014ae0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8014abc:	4b77      	ldr	r3, [pc, #476]	; (8014c9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8014abe:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8014ac2:	4a77      	ldr	r2, [pc, #476]	; (8014ca0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8014ac4:	4877      	ldr	r0, [pc, #476]	; (8014ca4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 8014ac6:	f004 f88b 	bl	8018be0 <__assert_func>
 8014aca:	4606      	mov	r6, r0
 8014acc:	e7c2      	b.n	8014a54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8014ace:	4605      	mov	r5, r0
 8014ad0:	4606      	mov	r6, r0
 8014ad2:	e7ca      	b.n	8014a6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8014ad4:	4605      	mov	r5, r0
 8014ad6:	e7c8      	b.n	8014a6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8014ad8:	4604      	mov	r4, r0
 8014ada:	e7d5      	b.n	8014a88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8014adc:	4604      	mov	r4, r0
 8014ade:	e7df      	b.n	8014aa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8014ae0:	fa1f fc8c 	uxth.w	ip, ip
 8014ae4:	fa1f f28e 	uxth.w	r2, lr
 8014ae8:	fb02 fe0c 	mul.w	lr, r2, ip
 8014aec:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8014af0:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8014af4:	ebac 070e 	sub.w	r7, ip, lr
 8014af8:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8014afc:	b292      	uxth	r2, r2
 8014afe:	b2bf      	uxth	r7, r7
 8014b00:	1a9b      	subs	r3, r3, r2
 8014b02:	fb07 fc0a 	mul.w	ip, r7, sl
 8014b06:	b29b      	uxth	r3, r3
 8014b08:	fb03 cc0b 	mla	ip, r3, fp, ip
 8014b0c:	9301      	str	r3, [sp, #4]
 8014b0e:	fb02 cc09 	mla	ip, r2, r9, ip
 8014b12:	fb0e cc08 	mla	ip, lr, r8, ip
 8014b16:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8014b1a:	9305      	str	r3, [sp, #20]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	f000 80b9 	beq.w	8014c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 8014b22:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8014b26:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8014b2a:	fb0b fc0c 	mul.w	ip, fp, ip
 8014b2e:	fb0b f606 	mul.w	r6, fp, r6
 8014b32:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8014b36:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8014b3a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8014b3e:	44dc      	add	ip, fp
 8014b40:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8014b44:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8014b48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014b4c:	fb0a fb0b 	mul.w	fp, sl, fp
 8014b50:	fb0a fa05 	mul.w	sl, sl, r5
 8014b54:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8014b58:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8014b5c:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8014b60:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8014b64:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8014b68:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014b6c:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8014b70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014b74:	0a36      	lsrs	r6, r6, #8
 8014b76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014b7a:	44dc      	add	ip, fp
 8014b7c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014b80:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8014b84:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014b88:	fb09 fb0b 	mul.w	fp, r9, fp
 8014b8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014b90:	fb09 f904 	mul.w	r9, r9, r4
 8014b94:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8014b98:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8014b9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014ba0:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8014ba4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014ba8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8014bac:	fb0c fc07 	mul.w	ip, ip, r7
 8014bb0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8014bb4:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8014bb8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8014bbc:	445d      	add	r5, fp
 8014bbe:	fb08 f404 	mul.w	r4, r8, r4
 8014bc2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014bc6:	fb08 f800 	mul.w	r8, r8, r0
 8014bca:	0a2d      	lsrs	r5, r5, #8
 8014bcc:	0a20      	lsrs	r0, r4, #8
 8014bce:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8014bd2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8014bd6:	fb07 f70a 	mul.w	r7, r7, sl
 8014bda:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8014bde:	4404      	add	r4, r0
 8014be0:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8014be4:	0a24      	lsrs	r4, r4, #8
 8014be6:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8014bea:	9801      	ldr	r0, [sp, #4]
 8014bec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8014bf0:	fb03 cc00 	mla	ip, r3, r0, ip
 8014bf4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8014bf8:	fb00 7606 	mla	r6, r0, r6, r7
 8014bfc:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8014c00:	fb04 cc0e 	mla	ip, r4, lr, ip
 8014c04:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8014c08:	b280      	uxth	r0, r0
 8014c0a:	9c04      	ldr	r4, [sp, #16]
 8014c0c:	fb05 cc02 	mla	ip, r5, r2, ip
 8014c10:	fb0e 6e08 	mla	lr, lr, r8, r6
 8014c14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014c18:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8014c1c:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8014c20:	fb02 ec0c 	mla	ip, r2, ip, lr
 8014c24:	9a05      	ldr	r2, [sp, #20]
 8014c26:	4342      	muls	r2, r0
 8014c28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014c2c:	1c53      	adds	r3, r2, #1
 8014c2e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8014c32:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8014c36:	ea45 0c0c 	orr.w	ip, r5, ip
 8014c3a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8014c3e:	fa5f f28c 	uxtb.w	r2, ip
 8014c42:	b2db      	uxtb	r3, r3
 8014c44:	fb14 f403 	smulbb	r4, r4, r3
 8014c48:	fb02 4200 	mla	r2, r2, r0, r4
 8014c4c:	b292      	uxth	r2, r2
 8014c4e:	1c54      	adds	r4, r2, #1
 8014c50:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8014c54:	9c03      	ldr	r4, [sp, #12]
 8014c56:	fb14 f403 	smulbb	r4, r4, r3
 8014c5a:	1212      	asrs	r2, r2, #8
 8014c5c:	700a      	strb	r2, [r1, #0]
 8014c5e:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8014c62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014c66:	fb02 4200 	mla	r2, r2, r0, r4
 8014c6a:	b292      	uxth	r2, r2
 8014c6c:	1c54      	adds	r4, r2, #1
 8014c6e:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8014c72:	1212      	asrs	r2, r2, #8
 8014c74:	704a      	strb	r2, [r1, #1]
 8014c76:	9a02      	ldr	r2, [sp, #8]
 8014c78:	fb12 f303 	smulbb	r3, r2, r3
 8014c7c:	fb0c 3c00 	mla	ip, ip, r0, r3
 8014c80:	fa1f fc8c 	uxth.w	ip, ip
 8014c84:	f10c 0301 	add.w	r3, ip, #1
 8014c88:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8014c8c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8014c90:	f881 c002 	strb.w	ip, [r1, #2]
 8014c94:	b007      	add	sp, #28
 8014c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c9a:	bf00      	nop
 8014c9c:	0801c5d4 	.word	0x0801c5d4
 8014ca0:	0801caca 	.word	0x0801caca
 8014ca4:	0801c69d 	.word	0x0801c69d

08014ca8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8014ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cac:	ed2d 8b08 	vpush	{d8-d11}
 8014cb0:	b09b      	sub	sp, #108	; 0x6c
 8014cb2:	eeb0 aa40 	vmov.f32	s20, s0
 8014cb6:	eef0 9a60 	vmov.f32	s19, s1
 8014cba:	930a      	str	r3, [sp, #40]	; 0x28
 8014cbc:	eeb0 9a41 	vmov.f32	s18, s2
 8014cc0:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8014cc4:	eeb0 8a62 	vmov.f32	s16, s5
 8014cc8:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8014cca:	eef0 8a43 	vmov.f32	s17, s6
 8014cce:	9312      	str	r3, [sp, #72]	; 0x48
 8014cd0:	eef0 ba44 	vmov.f32	s23, s8
 8014cd4:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8014cd8:	eeb0 ba64 	vmov.f32	s22, s9
 8014cdc:	9019      	str	r0, [sp, #100]	; 0x64
 8014cde:	eef0 aa45 	vmov.f32	s21, s10
 8014ce2:	9114      	str	r1, [sp, #80]	; 0x50
 8014ce4:	9317      	str	r3, [sp, #92]	; 0x5c
 8014ce6:	6868      	ldr	r0, [r5, #4]
 8014ce8:	9218      	str	r2, [sp, #96]	; 0x60
 8014cea:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8014cec:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8014cf0:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8014cf4:	fb00 1303 	mla	r3, r0, r3, r1
 8014cf8:	6829      	ldr	r1, [r5, #0]
 8014cfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014cfe:	18cb      	adds	r3, r1, r3
 8014d00:	930d      	str	r3, [sp, #52]	; 0x34
 8014d02:	6813      	ldr	r3, [r2, #0]
 8014d04:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d06:	6853      	ldr	r3, [r2, #4]
 8014d08:	3304      	adds	r3, #4
 8014d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8014d0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	dc03      	bgt.n	8014d1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8014d12:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	f340 8352 	ble.w	80153be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8014d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	f340 81a2 	ble.w	8015066 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 8014d22:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014d24:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014d26:	1412      	asrs	r2, r2, #16
 8014d28:	ea4f 4323 	mov.w	r3, r3, asr #16
 8014d2c:	d431      	bmi.n	8014d92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8014d2e:	1c51      	adds	r1, r2, #1
 8014d30:	428c      	cmp	r4, r1
 8014d32:	dd31      	ble.n	8014d98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	db2f      	blt.n	8014d98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8014d38:	1c59      	adds	r1, r3, #1
 8014d3a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014d3c:	4288      	cmp	r0, r1
 8014d3e:	dd2b      	ble.n	8014d98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8014d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d42:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8014d44:	3b01      	subs	r3, #1
 8014d46:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8014d48:	fb02 1203 	mla	r2, r2, r3, r1
 8014d4c:	1412      	asrs	r2, r2, #16
 8014d4e:	d42d      	bmi.n	8014dac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8014d50:	3201      	adds	r2, #1
 8014d52:	4294      	cmp	r4, r2
 8014d54:	dd2a      	ble.n	8014dac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8014d56:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8014d58:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8014d5a:	fb02 1303 	mla	r3, r2, r3, r1
 8014d5e:	141b      	asrs	r3, r3, #16
 8014d60:	d424      	bmi.n	8014dac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8014d62:	3301      	adds	r3, #1
 8014d64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d66:	429a      	cmp	r2, r3
 8014d68:	dd20      	ble.n	8014dac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8014d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d6c:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8014d70:	f103 0e03 	add.w	lr, r3, #3
 8014d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d76:	9315      	str	r3, [sp, #84]	; 0x54
 8014d78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	f300 81de 	bgt.w	801513c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8014d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014d88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014d8c:	441a      	add	r2, r3
 8014d8e:	920d      	str	r2, [sp, #52]	; 0x34
 8014d90:	e16b      	b.n	801506a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 8014d92:	1c51      	adds	r1, r2, #1
 8014d94:	f040 8158 	bne.w	8015048 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8014d98:	42a2      	cmp	r2, r4
 8014d9a:	f280 8155 	bge.w	8015048 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8014d9e:	1c5a      	adds	r2, r3, #1
 8014da0:	f2c0 8152 	blt.w	8015048 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8014da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014da6:	4293      	cmp	r3, r2
 8014da8:	f280 814e 	bge.w	8015048 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8014dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dae:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8014db0:	9316      	str	r3, [sp, #88]	; 0x58
 8014db2:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8014db6:	9315      	str	r3, [sp, #84]	; 0x54
 8014db8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	dde0      	ble.n	8014d80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8014dbe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014dc0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014dc2:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8014dc6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014dc8:	141b      	asrs	r3, r3, #16
 8014dca:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8014dce:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014dd0:	1412      	asrs	r2, r2, #16
 8014dd2:	f100 819a 	bmi.w	801510a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8014dd6:	1c55      	adds	r5, r2, #1
 8014dd8:	42ac      	cmp	r4, r5
 8014dda:	f340 8198 	ble.w	801510e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	f2c0 8195 	blt.w	801510e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8014de4:	1c5d      	adds	r5, r3, #1
 8014de6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8014de8:	42af      	cmp	r7, r5
 8014dea:	f340 8190 	ble.w	801510e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8014dee:	fb03 2304 	mla	r3, r3, r4, r2
 8014df2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014df4:	18d5      	adds	r5, r2, r3
 8014df6:	5cd3      	ldrb	r3, [r2, r3]
 8014df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014dfe:	0e1f      	lsrs	r7, r3, #24
 8014e00:	2800      	cmp	r0, #0
 8014e02:	f000 8171 	beq.w	80150e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8014e06:	f895 c001 	ldrb.w	ip, [r5, #1]
 8014e0a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014e0e:	920e      	str	r2, [sp, #56]	; 0x38
 8014e10:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8014e14:	2900      	cmp	r1, #0
 8014e16:	f000 8172 	beq.w	80150fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8014e1a:	eb05 0c04 	add.w	ip, r5, r4
 8014e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e20:	5d2d      	ldrb	r5, [r5, r4]
 8014e22:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8014e26:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8014e2a:	950b      	str	r5, [sp, #44]	; 0x2c
 8014e2c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8014e30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014e32:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8014e36:	0e15      	lsrs	r5, r2, #24
 8014e38:	920f      	str	r2, [sp, #60]	; 0x3c
 8014e3a:	b280      	uxth	r0, r0
 8014e3c:	b289      	uxth	r1, r1
 8014e3e:	fb00 fa01 	mul.w	sl, r0, r1
 8014e42:	0100      	lsls	r0, r0, #4
 8014e44:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8014e48:	eba0 080a 	sub.w	r8, r0, sl
 8014e4c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8014e50:	b289      	uxth	r1, r1
 8014e52:	fa1f f888 	uxth.w	r8, r8
 8014e56:	1a52      	subs	r2, r2, r1
 8014e58:	fb08 f00e 	mul.w	r0, r8, lr
 8014e5c:	b292      	uxth	r2, r2
 8014e5e:	fb02 0007 	mla	r0, r2, r7, r0
 8014e62:	fb01 0009 	mla	r0, r1, r9, r0
 8014e66:	fb0a 0005 	mla	r0, sl, r5, r0
 8014e6a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8014e6e:	2800      	cmp	r0, #0
 8014e70:	f000 80dd 	beq.w	801502e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8014e74:	2fff      	cmp	r7, #255	; 0xff
 8014e76:	d01a      	beq.n	8014eae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8014e78:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8014e7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014e80:	fb07 fc0c 	mul.w	ip, r7, ip
 8014e84:	435f      	muls	r7, r3
 8014e86:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8014e8a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8014e8e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8014e92:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014e96:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8014e9a:	4463      	add	r3, ip
 8014e9c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8014ea0:	0a1b      	lsrs	r3, r3, #8
 8014ea2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8014ea6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014eaa:	ea43 030b 	orr.w	r3, r3, fp
 8014eae:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8014eb2:	d01e      	beq.n	8014ef2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8014eb4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8014eb6:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8014eba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8014ebe:	fb0e fb0b 	mul.w	fp, lr, fp
 8014ec2:	fb0e fe07 	mul.w	lr, lr, r7
 8014ec6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8014eca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014ece:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8014ed2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014ed6:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8014eda:	44dc      	add	ip, fp
 8014edc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014ee0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014ee4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8014ee8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014eec:	ea4c 070e 	orr.w	r7, ip, lr
 8014ef0:	970e      	str	r7, [sp, #56]	; 0x38
 8014ef2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014ef6:	d01e      	beq.n	8014f36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8014ef8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014efa:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8014efe:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8014f02:	fb09 fe0e 	mul.w	lr, r9, lr
 8014f06:	fb09 f907 	mul.w	r9, r9, r7
 8014f0a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8014f0e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8014f12:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8014f16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014f1a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8014f1e:	44f4      	add	ip, lr
 8014f20:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014f24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014f28:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8014f2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014f30:	ea4c 0709 	orr.w	r7, ip, r9
 8014f34:	970b      	str	r7, [sp, #44]	; 0x2c
 8014f36:	2dff      	cmp	r5, #255	; 0xff
 8014f38:	d01c      	beq.n	8014f74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8014f3a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014f3c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8014f40:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8014f44:	fb05 fe0e 	mul.w	lr, r5, lr
 8014f48:	437d      	muls	r5, r7
 8014f4a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8014f4e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8014f52:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8014f56:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014f5a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8014f5e:	44f4      	add	ip, lr
 8014f60:	0a2d      	lsrs	r5, r5, #8
 8014f62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014f66:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8014f6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014f6e:	ea4c 0505 	orr.w	r5, ip, r5
 8014f72:	950f      	str	r5, [sp, #60]	; 0x3c
 8014f74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014f76:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8014f7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014f7e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8014f82:	fb08 f505 	mul.w	r5, r8, r5
 8014f86:	fb02 5507 	mla	r5, r2, r7, r5
 8014f8a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014f8c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8014f90:	fb01 5507 	mla	r5, r1, r7, r5
 8014f94:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014f96:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8014f9a:	fb0a 5507 	mla	r5, sl, r7, r5
 8014f9e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8014fa0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8014fa4:	0a2d      	lsrs	r5, r5, #8
 8014fa6:	fb08 f807 	mul.w	r8, r8, r7
 8014faa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8014fae:	fb02 8303 	mla	r3, r2, r3, r8
 8014fb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014fb4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8014fb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014fba:	fb01 330c 	mla	r3, r1, ip, r3
 8014fbe:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8014fc2:	fb0a 3a01 	mla	sl, sl, r1, r3
 8014fc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014fc8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8014fca:	4343      	muls	r3, r0
 8014fcc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014fd0:	1c58      	adds	r0, r3, #1
 8014fd2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014fd6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8014fda:	ea45 050a 	orr.w	r5, r5, sl
 8014fde:	7833      	ldrb	r3, [r6, #0]
 8014fe0:	b2ea      	uxtb	r2, r5
 8014fe2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8014fe6:	fb12 f201 	smulbb	r2, r2, r1
 8014fea:	b2c0      	uxtb	r0, r0
 8014fec:	fb03 2300 	mla	r3, r3, r0, r2
 8014ff0:	b29b      	uxth	r3, r3
 8014ff2:	1c5a      	adds	r2, r3, #1
 8014ff4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8014ff8:	7872      	ldrb	r2, [r6, #1]
 8014ffa:	fb12 f200 	smulbb	r2, r2, r0
 8014ffe:	121b      	asrs	r3, r3, #8
 8015000:	7033      	strb	r3, [r6, #0]
 8015002:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8015006:	0c2d      	lsrs	r5, r5, #16
 8015008:	fb03 2301 	mla	r3, r3, r1, r2
 801500c:	b29b      	uxth	r3, r3
 801500e:	1c5a      	adds	r2, r3, #1
 8015010:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015014:	121b      	asrs	r3, r3, #8
 8015016:	7073      	strb	r3, [r6, #1]
 8015018:	78b3      	ldrb	r3, [r6, #2]
 801501a:	fb13 f000 	smulbb	r0, r3, r0
 801501e:	fb05 0501 	mla	r5, r5, r1, r0
 8015022:	b2ad      	uxth	r5, r5
 8015024:	1c6b      	adds	r3, r5, #1
 8015026:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801502a:	122d      	asrs	r5, r5, #8
 801502c:	70b5      	strb	r5, [r6, #2]
 801502e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015030:	3603      	adds	r6, #3
 8015032:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015034:	4413      	add	r3, r2
 8015036:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8015038:	932d      	str	r3, [sp, #180]	; 0xb4
 801503a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801503c:	4413      	add	r3, r2
 801503e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015040:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015042:	3b01      	subs	r3, #1
 8015044:	9316      	str	r3, [sp, #88]	; 0x58
 8015046:	e6b7      	b.n	8014db8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8015048:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801504a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801504c:	4413      	add	r3, r2
 801504e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8015050:	932d      	str	r3, [sp, #180]	; 0xb4
 8015052:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015054:	4413      	add	r3, r2
 8015056:	932e      	str	r3, [sp, #184]	; 0xb8
 8015058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801505a:	3b01      	subs	r3, #1
 801505c:	930a      	str	r3, [sp, #40]	; 0x28
 801505e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015060:	3303      	adds	r3, #3
 8015062:	930d      	str	r3, [sp, #52]	; 0x34
 8015064:	e659      	b.n	8014d1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8015066:	f47f ae6b 	bne.w	8014d40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801506a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801506c:	2b00      	cmp	r3, #0
 801506e:	f340 81a6 	ble.w	80153be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8015072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015076:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015078:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801507c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8015080:	eef0 6a48 	vmov.f32	s13, s16
 8015084:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8015088:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801508c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015090:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8015094:	eef0 6a68 	vmov.f32	s13, s17
 8015098:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801509c:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80150a0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80150a4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80150a8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80150ac:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80150b0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80150b4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80150b8:	ee18 2a10 	vmov	r2, s16
 80150bc:	eeb0 8a47 	vmov.f32	s16, s14
 80150c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80150c4:	ee18 2a90 	vmov	r2, s17
 80150c8:	932f      	str	r3, [sp, #188]	; 0xbc
 80150ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80150cc:	eef0 8a67 	vmov.f32	s17, s15
 80150d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80150d4:	9330      	str	r3, [sp, #192]	; 0xc0
 80150d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80150d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80150da:	3b01      	subs	r3, #1
 80150dc:	9314      	str	r3, [sp, #80]	; 0x50
 80150de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80150e0:	bf08      	it	eq
 80150e2:	4613      	moveq	r3, r2
 80150e4:	930a      	str	r3, [sp, #40]	; 0x28
 80150e6:	e611      	b.n	8014d0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80150e8:	b161      	cbz	r1, 8015104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 80150ea:	5d2a      	ldrb	r2, [r5, r4]
 80150ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80150ee:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80150f2:	25ff      	movs	r5, #255	; 0xff
 80150f4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80150f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80150fa:	46ae      	mov	lr, r5
 80150fc:	e69d      	b.n	8014e3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80150fe:	25ff      	movs	r5, #255	; 0xff
 8015100:	46a9      	mov	r9, r5
 8015102:	e69a      	b.n	8014e3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8015104:	25ff      	movs	r5, #255	; 0xff
 8015106:	46a9      	mov	r9, r5
 8015108:	e7f7      	b.n	80150fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801510a:	1c57      	adds	r7, r2, #1
 801510c:	d18f      	bne.n	801502e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801510e:	4294      	cmp	r4, r2
 8015110:	dd8d      	ble.n	801502e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8015112:	1c5d      	adds	r5, r3, #1
 8015114:	db8b      	blt.n	801502e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8015116:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015118:	429d      	cmp	r5, r3
 801511a:	dd88      	ble.n	801502e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801511c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801511e:	9202      	str	r2, [sp, #8]
 8015120:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015122:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8015126:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015128:	9819      	ldr	r0, [sp, #100]	; 0x64
 801512a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801512e:	e9cd 4300 	strd	r4, r3, [sp]
 8015132:	4631      	mov	r1, r6
 8015134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015136:	f7ff fc63 	bl	8014a00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801513a:	e778      	b.n	801502e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801513c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801513e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8015140:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8015144:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015146:	1412      	asrs	r2, r2, #16
 8015148:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801514c:	141b      	asrs	r3, r3, #16
 801514e:	fb04 2303 	mla	r3, r4, r3, r2
 8015152:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015154:	18d5      	adds	r5, r2, r3
 8015156:	5cd3      	ldrb	r3, [r2, r3]
 8015158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801515a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801515e:	0e1e      	lsrs	r6, r3, #24
 8015160:	2900      	cmp	r1, #0
 8015162:	f000 811b 	beq.w	801539c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 8015166:	786a      	ldrb	r2, [r5, #1]
 8015168:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801516a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801516e:	9210      	str	r2, [sp, #64]	; 0x40
 8015170:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8015174:	2800      	cmp	r0, #0
 8015176:	f000 811c 	beq.w	80153b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801517a:	192a      	adds	r2, r5, r4
 801517c:	5d2d      	ldrb	r5, [r5, r4]
 801517e:	7852      	ldrb	r2, [r2, #1]
 8015180:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8015184:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8015188:	950c      	str	r5, [sp, #48]	; 0x30
 801518a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801518e:	0e15      	lsrs	r5, r2, #24
 8015190:	9211      	str	r2, [sp, #68]	; 0x44
 8015192:	b289      	uxth	r1, r1
 8015194:	b280      	uxth	r0, r0
 8015196:	fb01 fa00 	mul.w	sl, r1, r0
 801519a:	0109      	lsls	r1, r1, #4
 801519c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80151a0:	eba1 080a 	sub.w	r8, r1, sl
 80151a4:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80151a8:	b280      	uxth	r0, r0
 80151aa:	fa1f f888 	uxth.w	r8, r8
 80151ae:	1a12      	subs	r2, r2, r0
 80151b0:	fb08 f10c 	mul.w	r1, r8, ip
 80151b4:	b292      	uxth	r2, r2
 80151b6:	fb02 1106 	mla	r1, r2, r6, r1
 80151ba:	fb00 1109 	mla	r1, r0, r9, r1
 80151be:	fb0a 1105 	mla	r1, sl, r5, r1
 80151c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80151c6:	2900      	cmp	r1, #0
 80151c8:	f000 80da 	beq.w	8015380 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 80151cc:	2eff      	cmp	r6, #255	; 0xff
 80151ce:	d016      	beq.n	80151fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 80151d0:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80151d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80151d8:	4377      	muls	r7, r6
 80151da:	435e      	muls	r6, r3
 80151dc:	0a3b      	lsrs	r3, r7, #8
 80151de:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80151e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80151e6:	443b      	add	r3, r7
 80151e8:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80151ec:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80151f0:	0a1b      	lsrs	r3, r3, #8
 80151f2:	0a3f      	lsrs	r7, r7, #8
 80151f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80151f8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80151fc:	433b      	orrs	r3, r7
 80151fe:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8015202:	d01d      	beq.n	8015240 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8015204:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015206:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8015208:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801520c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8015210:	fb0c f606 	mul.w	r6, ip, r6
 8015214:	fb0c fc07 	mul.w	ip, ip, r7
 8015218:	0a37      	lsrs	r7, r6, #8
 801521a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801521e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8015222:	4437      	add	r7, r6
 8015224:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8015228:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801522c:	0a3f      	lsrs	r7, r7, #8
 801522e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015232:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8015236:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801523a:	ea47 060c 	orr.w	r6, r7, ip
 801523e:	9610      	str	r6, [sp, #64]	; 0x40
 8015240:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8015244:	d01d      	beq.n	8015282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8015246:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015248:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801524c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015250:	fb09 fc0c 	mul.w	ip, r9, ip
 8015254:	fb09 f906 	mul.w	r9, r9, r6
 8015258:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801525c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8015260:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8015264:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8015268:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801526c:	4467      	add	r7, ip
 801526e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8015272:	0a3f      	lsrs	r7, r7, #8
 8015274:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8015278:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801527c:	ea47 0609 	orr.w	r6, r7, r9
 8015280:	960c      	str	r6, [sp, #48]	; 0x30
 8015282:	2dff      	cmp	r5, #255	; 0xff
 8015284:	d01a      	beq.n	80152bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 8015286:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015288:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801528c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015290:	fb05 fc0c 	mul.w	ip, r5, ip
 8015294:	4375      	muls	r5, r6
 8015296:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801529a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801529e:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80152a2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80152a6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80152aa:	4467      	add	r7, ip
 80152ac:	0a2d      	lsrs	r5, r5, #8
 80152ae:	0a3f      	lsrs	r7, r7, #8
 80152b0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80152b4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80152b8:	433d      	orrs	r5, r7
 80152ba:	9511      	str	r5, [sp, #68]	; 0x44
 80152bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80152be:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80152c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80152c6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80152ca:	fb08 f505 	mul.w	r5, r8, r5
 80152ce:	fb02 5506 	mla	r5, r2, r6, r5
 80152d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80152d4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80152d8:	fb00 5506 	mla	r5, r0, r6, r5
 80152dc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80152de:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80152e2:	fb0a 5506 	mla	r5, sl, r6, r5
 80152e6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80152e8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80152ec:	0a2d      	lsrs	r5, r5, #8
 80152ee:	fb08 f806 	mul.w	r8, r8, r6
 80152f2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80152f6:	fb02 8303 	mla	r3, r2, r3, r8
 80152fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152fc:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8015300:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015302:	fb00 3307 	mla	r3, r0, r7, r3
 8015306:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801530a:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801530e:	fb01 f30b 	mul.w	r3, r1, fp
 8015312:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015316:	1c59      	adds	r1, r3, #1
 8015318:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801531c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8015320:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8015324:	ea45 050c 	orr.w	r5, r5, ip
 8015328:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801532c:	b2ea      	uxtb	r2, r5
 801532e:	b2c9      	uxtb	r1, r1
 8015330:	fb12 f20b 	smulbb	r2, r2, fp
 8015334:	fb03 2301 	mla	r3, r3, r1, r2
 8015338:	b29b      	uxth	r3, r3
 801533a:	1c5a      	adds	r2, r3, #1
 801533c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015340:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8015344:	fb12 f201 	smulbb	r2, r2, r1
 8015348:	121b      	asrs	r3, r3, #8
 801534a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801534e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8015352:	0c2d      	lsrs	r5, r5, #16
 8015354:	fb03 230b 	mla	r3, r3, fp, r2
 8015358:	b29b      	uxth	r3, r3
 801535a:	1c5a      	adds	r2, r3, #1
 801535c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015360:	121b      	asrs	r3, r3, #8
 8015362:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8015366:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801536a:	fb13 f101 	smulbb	r1, r3, r1
 801536e:	fb05 150b 	mla	r5, r5, fp, r1
 8015372:	b2ad      	uxth	r5, r5
 8015374:	1c69      	adds	r1, r5, #1
 8015376:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801537a:	122d      	asrs	r5, r5, #8
 801537c:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015380:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015382:	f10e 0e03 	add.w	lr, lr, #3
 8015386:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015388:	4413      	add	r3, r2
 801538a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801538c:	932d      	str	r3, [sp, #180]	; 0xb4
 801538e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015390:	4413      	add	r3, r2
 8015392:	932e      	str	r3, [sp, #184]	; 0xb8
 8015394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015396:	3b01      	subs	r3, #1
 8015398:	9315      	str	r3, [sp, #84]	; 0x54
 801539a:	e4ed      	b.n	8014d78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801539c:	b160      	cbz	r0, 80153b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801539e:	5d2a      	ldrb	r2, [r5, r4]
 80153a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80153a2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80153a6:	25ff      	movs	r5, #255	; 0xff
 80153a8:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80153ac:	920c      	str	r2, [sp, #48]	; 0x30
 80153ae:	46ac      	mov	ip, r5
 80153b0:	e6ef      	b.n	8015192 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80153b2:	25ff      	movs	r5, #255	; 0xff
 80153b4:	46a9      	mov	r9, r5
 80153b6:	e6ec      	b.n	8015192 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80153b8:	25ff      	movs	r5, #255	; 0xff
 80153ba:	46a9      	mov	r9, r5
 80153bc:	e7f7      	b.n	80153ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 80153be:	b01b      	add	sp, #108	; 0x6c
 80153c0:	ecbd 8b08 	vpop	{d8-d11}
 80153c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080153c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80153c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153cc:	b085      	sub	sp, #20
 80153ce:	7888      	ldrb	r0, [r1, #2]
 80153d0:	4692      	mov	sl, r2
 80153d2:	4698      	mov	r8, r3
 80153d4:	9000      	str	r0, [sp, #0]
 80153d6:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80153da:	7848      	ldrb	r0, [r1, #1]
 80153dc:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80153e0:	9001      	str	r0, [sp, #4]
 80153e2:	7808      	ldrb	r0, [r1, #0]
 80153e4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80153e8:	9002      	str	r0, [sp, #8]
 80153ea:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80153ee:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80153f2:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80153f6:	fb04 560c 	mla	r6, r4, ip, r5
 80153fa:	2c00      	cmp	r4, #0
 80153fc:	eb02 0e06 	add.w	lr, r2, r6
 8015400:	9a00      	ldr	r2, [sp, #0]
 8015402:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8015406:	9a01      	ldr	r2, [sp, #4]
 8015408:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801540c:	db3e      	blt.n	801548c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801540e:	45a1      	cmp	r9, r4
 8015410:	dd3c      	ble.n	801548c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8015412:	2d00      	cmp	r5, #0
 8015414:	db38      	blt.n	8015488 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8015416:	45ac      	cmp	ip, r5
 8015418:	dd36      	ble.n	8015488 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801541a:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801541e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8015422:	1c6e      	adds	r6, r5, #1
 8015424:	d435      	bmi.n	8015492 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8015426:	45b4      	cmp	ip, r6
 8015428:	dd33      	ble.n	8015492 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801542a:	b393      	cbz	r3, 8015492 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801542c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8015430:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8015434:	3401      	adds	r4, #1
 8015436:	d430      	bmi.n	801549a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8015438:	45a1      	cmp	r9, r4
 801543a:	dd2e      	ble.n	801549a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801543c:	b36f      	cbz	r7, 801549a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801543e:	2d00      	cmp	r5, #0
 8015440:	db29      	blt.n	8015496 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8015442:	45ac      	cmp	ip, r5
 8015444:	dd27      	ble.n	8015496 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8015446:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801544a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801544e:	3501      	adds	r5, #1
 8015450:	d407      	bmi.n	8015462 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8015452:	45ac      	cmp	ip, r5
 8015454:	dd05      	ble.n	8015462 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8015456:	b123      	cbz	r3, 8015462 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8015458:	44f4      	add	ip, lr
 801545a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801545e:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8015462:	2b0f      	cmp	r3, #15
 8015464:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8015468:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801546c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8015470:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8015474:	d801      	bhi.n	801547a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8015476:	2f0f      	cmp	r7, #15
 8015478:	d911      	bls.n	801549e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801547a:	4b76      	ldr	r3, [pc, #472]	; (8015654 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801547c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8015480:	4a75      	ldr	r2, [pc, #468]	; (8015658 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8015482:	4876      	ldr	r0, [pc, #472]	; (801565c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8015484:	f003 fbac 	bl	8018be0 <__assert_func>
 8015488:	4602      	mov	r2, r0
 801548a:	e7ca      	b.n	8015422 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801548c:	4606      	mov	r6, r0
 801548e:	4602      	mov	r2, r0
 8015490:	e7d0      	b.n	8015434 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8015492:	4606      	mov	r6, r0
 8015494:	e7ce      	b.n	8015434 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8015496:	4604      	mov	r4, r0
 8015498:	e7d9      	b.n	801544e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801549a:	4604      	mov	r4, r0
 801549c:	e7e1      	b.n	8015462 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801549e:	b29b      	uxth	r3, r3
 80154a0:	b2bf      	uxth	r7, r7
 80154a2:	fb07 fe03 	mul.w	lr, r7, r3
 80154a6:	011b      	lsls	r3, r3, #4
 80154a8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80154ac:	eba3 0c0e 	sub.w	ip, r3, lr
 80154b0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80154b4:	b2bf      	uxth	r7, r7
 80154b6:	fa1f fc8c 	uxth.w	ip, ip
 80154ba:	1bed      	subs	r5, r5, r7
 80154bc:	fb0c f30a 	mul.w	r3, ip, sl
 80154c0:	b2ad      	uxth	r5, r5
 80154c2:	fb05 330b 	mla	r3, r5, fp, r3
 80154c6:	fb07 3309 	mla	r3, r7, r9, r3
 80154ca:	fb0e 3308 	mla	r3, lr, r8, r3
 80154ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80154d2:	9303      	str	r3, [sp, #12]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	f000 80b9 	beq.w	801564c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 80154da:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80154de:	d018      	beq.n	8015512 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 80154e0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80154e4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80154e8:	fb0b f303 	mul.w	r3, fp, r3
 80154ec:	fb0b fb02 	mul.w	fp, fp, r2
 80154f0:	0a1a      	lsrs	r2, r3, #8
 80154f2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80154f6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80154fa:	441a      	add	r2, r3
 80154fc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8015500:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8015504:	0a12      	lsrs	r2, r2, #8
 8015506:	0a1b      	lsrs	r3, r3, #8
 8015508:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801550c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015510:	431a      	orrs	r2, r3
 8015512:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8015516:	d019      	beq.n	801554c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8015518:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801551c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015520:	fb0a fb0b 	mul.w	fp, sl, fp
 8015524:	fb0a fa06 	mul.w	sl, sl, r6
 8015528:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801552c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015530:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8015534:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8015538:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801553c:	445e      	add	r6, fp
 801553e:	0a1b      	lsrs	r3, r3, #8
 8015540:	0a36      	lsrs	r6, r6, #8
 8015542:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015546:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801554a:	431e      	orrs	r6, r3
 801554c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8015550:	d019      	beq.n	8015586 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 8015552:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8015556:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801555a:	fb09 fa0a 	mul.w	sl, r9, sl
 801555e:	fb09 f904 	mul.w	r9, r9, r4
 8015562:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8015566:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801556a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801556e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8015572:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8015576:	4454      	add	r4, sl
 8015578:	0a1b      	lsrs	r3, r3, #8
 801557a:	0a24      	lsrs	r4, r4, #8
 801557c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015580:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8015584:	431c      	orrs	r4, r3
 8015586:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801558a:	d019      	beq.n	80155c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801558c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8015590:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015594:	fb08 f909 	mul.w	r9, r8, r9
 8015598:	fb08 f800 	mul.w	r8, r8, r0
 801559c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80155a0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80155a4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80155a8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80155ac:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80155b0:	4448      	add	r0, r9
 80155b2:	0a1b      	lsrs	r3, r3, #8
 80155b4:	0a00      	lsrs	r0, r0, #8
 80155b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80155ba:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80155be:	4318      	orrs	r0, r3
 80155c0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80155c4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80155c8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80155cc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80155d0:	fb0c f808 	mul.w	r8, ip, r8
 80155d4:	fb0c f606 	mul.w	r6, ip, r6
 80155d8:	fb05 8803 	mla	r8, r5, r3, r8
 80155dc:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80155e0:	fb05 6202 	mla	r2, r5, r2, r6
 80155e4:	fb07 8803 	mla	r8, r7, r3, r8
 80155e8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80155ec:	fb0e 8303 	mla	r3, lr, r3, r8
 80155f0:	0a1b      	lsrs	r3, r3, #8
 80155f2:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80155f6:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80155fa:	9c02      	ldr	r4, [sp, #8]
 80155fc:	fb07 2703 	mla	r7, r7, r3, r2
 8015600:	9a03      	ldr	r2, [sp, #12]
 8015602:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8015606:	43d2      	mvns	r2, r2
 8015608:	fb0e 7303 	mla	r3, lr, r3, r7
 801560c:	b2d2      	uxtb	r2, r2
 801560e:	0a1b      	lsrs	r3, r3, #8
 8015610:	4354      	muls	r4, r2
 8015612:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015616:	1c60      	adds	r0, r4, #1
 8015618:	ea48 0303 	orr.w	r3, r8, r3
 801561c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8015620:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8015624:	7008      	strb	r0, [r1, #0]
 8015626:	9801      	ldr	r0, [sp, #4]
 8015628:	4350      	muls	r0, r2
 801562a:	1c44      	adds	r4, r0, #1
 801562c:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8015630:	0a18      	lsrs	r0, r3, #8
 8015632:	0c1b      	lsrs	r3, r3, #16
 8015634:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8015638:	7048      	strb	r0, [r1, #1]
 801563a:	9800      	ldr	r0, [sp, #0]
 801563c:	4350      	muls	r0, r2
 801563e:	4602      	mov	r2, r0
 8015640:	3001      	adds	r0, #1
 8015642:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8015646:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801564a:	708b      	strb	r3, [r1, #2]
 801564c:	b005      	add	sp, #20
 801564e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015652:	bf00      	nop
 8015654:	0801c5d4 	.word	0x0801c5d4
 8015658:	0801caca 	.word	0x0801caca
 801565c:	0801c69d 	.word	0x0801c69d

08015660 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8015660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015664:	ed2d 8b08 	vpush	{d8-d11}
 8015668:	b097      	sub	sp, #92	; 0x5c
 801566a:	eeb0 aa40 	vmov.f32	s20, s0
 801566e:	eef0 9a60 	vmov.f32	s19, s1
 8015672:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8015674:	eeb0 9a41 	vmov.f32	s18, s2
 8015678:	9308      	str	r3, [sp, #32]
 801567a:	eeb0 8a62 	vmov.f32	s16, s5
 801567e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8015682:	eef0 8a43 	vmov.f32	s17, s6
 8015686:	9015      	str	r0, [sp, #84]	; 0x54
 8015688:	eef0 ba44 	vmov.f32	s23, s8
 801568c:	6868      	ldr	r0, [r5, #4]
 801568e:	eeb0 ba64 	vmov.f32	s22, s9
 8015692:	9112      	str	r1, [sp, #72]	; 0x48
 8015694:	eef0 aa45 	vmov.f32	s21, s10
 8015698:	9310      	str	r3, [sp, #64]	; 0x40
 801569a:	9214      	str	r2, [sp, #80]	; 0x50
 801569c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801569e:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80156a2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80156a6:	fb00 1303 	mla	r3, r0, r3, r1
 80156aa:	6829      	ldr	r1, [r5, #0]
 80156ac:	6855      	ldr	r5, [r2, #4]
 80156ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80156b2:	3504      	adds	r5, #4
 80156b4:	18cb      	adds	r3, r1, r3
 80156b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80156b8:	6813      	ldr	r3, [r2, #0]
 80156ba:	9311      	str	r3, [sp, #68]	; 0x44
 80156bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80156be:	2b00      	cmp	r3, #0
 80156c0:	dc03      	bgt.n	80156ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80156c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	f340 8333 	ble.w	8015d30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 80156ca:	9b08      	ldr	r3, [sp, #32]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	f340 8190 	ble.w	80159f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80156d2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80156d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80156d6:	1412      	asrs	r2, r2, #16
 80156d8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80156dc:	d42f      	bmi.n	801573e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80156de:	1c51      	adds	r1, r2, #1
 80156e0:	428c      	cmp	r4, r1
 80156e2:	dd2f      	ble.n	8015744 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	db2d      	blt.n	8015744 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80156e8:	1c59      	adds	r1, r3, #1
 80156ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80156ec:	4288      	cmp	r0, r1
 80156ee:	dd29      	ble.n	8015744 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80156f0:	9b08      	ldr	r3, [sp, #32]
 80156f2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80156f4:	3b01      	subs	r3, #1
 80156f6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80156f8:	fb02 1203 	mla	r2, r2, r3, r1
 80156fc:	1412      	asrs	r2, r2, #16
 80156fe:	d42b      	bmi.n	8015758 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8015700:	3201      	adds	r2, #1
 8015702:	4294      	cmp	r4, r2
 8015704:	dd28      	ble.n	8015758 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8015706:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8015708:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801570a:	fb02 1303 	mla	r3, r2, r3, r1
 801570e:	141b      	asrs	r3, r3, #16
 8015710:	d422      	bmi.n	8015758 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8015712:	3301      	adds	r3, #1
 8015714:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015716:	429a      	cmp	r2, r3
 8015718:	dd1e      	ble.n	8015758 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801571a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801571c:	f103 0803 	add.w	r8, r3, #3
 8015720:	9b08      	ldr	r3, [sp, #32]
 8015722:	9307      	str	r3, [sp, #28]
 8015724:	9b07      	ldr	r3, [sp, #28]
 8015726:	2b00      	cmp	r3, #0
 8015728:	f300 81ca 	bgt.w	8015ac0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801572c:	9b08      	ldr	r3, [sp, #32]
 801572e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015730:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015734:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015738:	441a      	add	r2, r3
 801573a:	920b      	str	r2, [sp, #44]	; 0x2c
 801573c:	e15b      	b.n	80159f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801573e:	1c51      	adds	r1, r2, #1
 8015740:	f040 8148 	bne.w	80159d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8015744:	42a2      	cmp	r2, r4
 8015746:	f280 8145 	bge.w	80159d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801574a:	1c5a      	adds	r2, r3, #1
 801574c:	f2c0 8142 	blt.w	80159d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8015750:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015752:	4293      	cmp	r3, r2
 8015754:	f280 813e 	bge.w	80159d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8015758:	9b08      	ldr	r3, [sp, #32]
 801575a:	9313      	str	r3, [sp, #76]	; 0x4c
 801575c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801575e:	9307      	str	r3, [sp, #28]
 8015760:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015762:	2b00      	cmp	r3, #0
 8015764:	dde2      	ble.n	801572c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8015766:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8015768:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801576a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801576e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8015770:	141b      	asrs	r3, r3, #16
 8015772:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8015776:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8015778:	1412      	asrs	r2, r2, #16
 801577a:	f100 818b 	bmi.w	8015a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 801577e:	1c56      	adds	r6, r2, #1
 8015780:	42b4      	cmp	r4, r6
 8015782:	f340 8189 	ble.w	8015a98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8015786:	2b00      	cmp	r3, #0
 8015788:	f2c0 8186 	blt.w	8015a98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801578c:	1c5e      	adds	r6, r3, #1
 801578e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8015790:	42b7      	cmp	r7, r6
 8015792:	f340 8181 	ble.w	8015a98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8015796:	fb03 2304 	mla	r3, r3, r4, r2
 801579a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801579c:	18d6      	adds	r6, r2, r3
 801579e:	5cd3      	ldrb	r3, [r2, r3]
 80157a0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80157a4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80157a8:	2900      	cmp	r1, #0
 80157aa:	f000 8163 	beq.w	8015a74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80157ae:	7872      	ldrb	r2, [r6, #1]
 80157b0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80157b4:	920c      	str	r2, [sp, #48]	; 0x30
 80157b6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80157ba:	2800      	cmp	r0, #0
 80157bc:	f000 8164 	beq.w	8015a88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 80157c0:	1932      	adds	r2, r6, r4
 80157c2:	5d36      	ldrb	r6, [r6, r4]
 80157c4:	7852      	ldrb	r2, [r2, #1]
 80157c6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80157ca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80157ce:	9609      	str	r6, [sp, #36]	; 0x24
 80157d0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80157d4:	0e16      	lsrs	r6, r2, #24
 80157d6:	920d      	str	r2, [sp, #52]	; 0x34
 80157d8:	b289      	uxth	r1, r1
 80157da:	b280      	uxth	r0, r0
 80157dc:	fb01 fb00 	mul.w	fp, r1, r0
 80157e0:	0109      	lsls	r1, r1, #4
 80157e2:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80157e6:	eba1 090b 	sub.w	r9, r1, fp
 80157ea:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80157ee:	b280      	uxth	r0, r0
 80157f0:	fa1f f989 	uxth.w	r9, r9
 80157f4:	1a12      	subs	r2, r2, r0
 80157f6:	fb09 f108 	mul.w	r1, r9, r8
 80157fa:	b292      	uxth	r2, r2
 80157fc:	fb02 110c 	mla	r1, r2, ip, r1
 8015800:	fb00 110a 	mla	r1, r0, sl, r1
 8015804:	fb0b 1106 	mla	r1, fp, r6, r1
 8015808:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801580c:	2900      	cmp	r1, #0
 801580e:	f000 80d2 	beq.w	80159b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8015812:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8015816:	d01b      	beq.n	8015850 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8015818:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801581c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015820:	fb0c fe0e 	mul.w	lr, ip, lr
 8015824:	fb0c fc03 	mul.w	ip, ip, r3
 8015828:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801582c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8015830:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015834:	4473      	add	r3, lr
 8015836:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801583a:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801583e:	0a1b      	lsrs	r3, r3, #8
 8015840:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015844:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015848:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801584c:	ea43 030e 	orr.w	r3, r3, lr
 8015850:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8015854:	d01e      	beq.n	8015894 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8015856:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8015858:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801585c:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8015860:	fb08 fc0c 	mul.w	ip, r8, ip
 8015864:	fb08 f80e 	mul.w	r8, r8, lr
 8015868:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801586c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8015870:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015874:	44e6      	add	lr, ip
 8015876:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801587a:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801587e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015882:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8015886:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801588a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801588e:	ea4e 0708 	orr.w	r7, lr, r8
 8015892:	970c      	str	r7, [sp, #48]	; 0x30
 8015894:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8015898:	d01e      	beq.n	80158d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801589a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801589c:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80158a0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80158a4:	fb0a f808 	mul.w	r8, sl, r8
 80158a8:	fb0a fa0c 	mul.w	sl, sl, ip
 80158ac:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80158b0:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80158b4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80158b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80158bc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80158c0:	44c6      	add	lr, r8
 80158c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80158c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80158ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80158ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80158d2:	ea4e 070a 	orr.w	r7, lr, sl
 80158d6:	9709      	str	r7, [sp, #36]	; 0x24
 80158d8:	2eff      	cmp	r6, #255	; 0xff
 80158da:	d01d      	beq.n	8015918 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 80158dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80158de:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80158e2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80158e6:	fb06 f808 	mul.w	r8, r6, r8
 80158ea:	fb06 f60c 	mul.w	r6, r6, ip
 80158ee:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80158f2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80158f6:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80158fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80158fe:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8015902:	44c6      	add	lr, r8
 8015904:	0a36      	lsrs	r6, r6, #8
 8015906:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801590a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801590e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015912:	ea4e 0606 	orr.w	r6, lr, r6
 8015916:	960d      	str	r6, [sp, #52]	; 0x34
 8015918:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801591a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801591e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015920:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015924:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8015928:	43c9      	mvns	r1, r1
 801592a:	fb09 f606 	mul.w	r6, r9, r6
 801592e:	b2c9      	uxtb	r1, r1
 8015930:	fb02 660c 	mla	r6, r2, ip, r6
 8015934:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8015938:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801593a:	fb00 660c 	mla	r6, r0, ip, r6
 801593e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8015942:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8015944:	fb0b 660c 	mla	r6, fp, ip, r6
 8015948:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801594c:	fb09 f90c 	mul.w	r9, r9, ip
 8015950:	0a36      	lsrs	r6, r6, #8
 8015952:	fb02 9303 	mla	r3, r2, r3, r9
 8015956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015958:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801595c:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8015960:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015962:	fb00 330e 	mla	r3, r0, lr, r3
 8015966:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801596a:	fb0b 3b00 	mla	fp, fp, r0, r3
 801596e:	9b07      	ldr	r3, [sp, #28]
 8015970:	781b      	ldrb	r3, [r3, #0]
 8015972:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8015976:	fb03 f201 	mul.w	r2, r3, r1
 801597a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801597e:	1c53      	adds	r3, r2, #1
 8015980:	ea46 060b 	orr.w	r6, r6, fp
 8015984:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015988:	9a07      	ldr	r2, [sp, #28]
 801598a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801598e:	7013      	strb	r3, [r2, #0]
 8015990:	7853      	ldrb	r3, [r2, #1]
 8015992:	434b      	muls	r3, r1
 8015994:	1c5a      	adds	r2, r3, #1
 8015996:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801599a:	0a33      	lsrs	r3, r6, #8
 801599c:	0c36      	lsrs	r6, r6, #16
 801599e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80159a2:	9a07      	ldr	r2, [sp, #28]
 80159a4:	7053      	strb	r3, [r2, #1]
 80159a6:	7893      	ldrb	r3, [r2, #2]
 80159a8:	4359      	muls	r1, r3
 80159aa:	1c4b      	adds	r3, r1, #1
 80159ac:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80159b0:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 80159b4:	7096      	strb	r6, [r2, #2]
 80159b6:	9b07      	ldr	r3, [sp, #28]
 80159b8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80159ba:	3303      	adds	r3, #3
 80159bc:	9307      	str	r3, [sp, #28]
 80159be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80159c0:	4413      	add	r3, r2
 80159c2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80159c4:	9329      	str	r3, [sp, #164]	; 0xa4
 80159c6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80159c8:	4413      	add	r3, r2
 80159ca:	932a      	str	r3, [sp, #168]	; 0xa8
 80159cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80159ce:	3b01      	subs	r3, #1
 80159d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80159d2:	e6c5      	b.n	8015760 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 80159d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80159d6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80159d8:	4413      	add	r3, r2
 80159da:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80159dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80159de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80159e0:	4413      	add	r3, r2
 80159e2:	932a      	str	r3, [sp, #168]	; 0xa8
 80159e4:	9b08      	ldr	r3, [sp, #32]
 80159e6:	3b01      	subs	r3, #1
 80159e8:	9308      	str	r3, [sp, #32]
 80159ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159ec:	3303      	adds	r3, #3
 80159ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80159f0:	e66b      	b.n	80156ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80159f2:	f47f ae7d 	bne.w	80156f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 80159f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	f340 8199 	ble.w	8015d30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 80159fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015a02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015a04:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8015a08:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8015a0c:	eef0 6a48 	vmov.f32	s13, s16
 8015a10:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8015a14:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8015a18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015a1c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8015a20:	eef0 6a68 	vmov.f32	s13, s17
 8015a24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015a28:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8015a2c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8015a30:	ee69 7a27 	vmul.f32	s15, s18, s15
 8015a34:	ee37 8a48 	vsub.f32	s16, s14, s16
 8015a38:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8015a3c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8015a40:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8015a44:	ee18 2a10 	vmov	r2, s16
 8015a48:	eeb0 8a47 	vmov.f32	s16, s14
 8015a4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a50:	ee18 2a90 	vmov	r2, s17
 8015a54:	932b      	str	r3, [sp, #172]	; 0xac
 8015a56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015a58:	eef0 8a67 	vmov.f32	s17, s15
 8015a5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a60:	932c      	str	r3, [sp, #176]	; 0xb0
 8015a62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a66:	3b01      	subs	r3, #1
 8015a68:	9312      	str	r3, [sp, #72]	; 0x48
 8015a6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015a6c:	bf08      	it	eq
 8015a6e:	4613      	moveq	r3, r2
 8015a70:	9308      	str	r3, [sp, #32]
 8015a72:	e623      	b.n	80156bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8015a74:	b158      	cbz	r0, 8015a8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8015a76:	5d32      	ldrb	r2, [r6, r4]
 8015a78:	26ff      	movs	r6, #255	; 0xff
 8015a7a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8015a7e:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8015a82:	9209      	str	r2, [sp, #36]	; 0x24
 8015a84:	46b0      	mov	r8, r6
 8015a86:	e6a7      	b.n	80157d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8015a88:	26ff      	movs	r6, #255	; 0xff
 8015a8a:	46b2      	mov	sl, r6
 8015a8c:	e6a4      	b.n	80157d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8015a8e:	26ff      	movs	r6, #255	; 0xff
 8015a90:	46b2      	mov	sl, r6
 8015a92:	e7f7      	b.n	8015a84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8015a94:	1c57      	adds	r7, r2, #1
 8015a96:	d18e      	bne.n	80159b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8015a98:	4294      	cmp	r4, r2
 8015a9a:	dd8c      	ble.n	80159b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8015a9c:	1c5e      	adds	r6, r3, #1
 8015a9e:	db8a      	blt.n	80159b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8015aa0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015aa2:	429e      	cmp	r6, r3
 8015aa4:	dd87      	ble.n	80159b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8015aa6:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8015aaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015aae:	e9cd 4600 	strd	r4, r6, [sp]
 8015ab2:	462b      	mov	r3, r5
 8015ab4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015ab6:	9907      	ldr	r1, [sp, #28]
 8015ab8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015aba:	f7ff fc85 	bl	80153c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8015abe:	e77a      	b.n	80159b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8015ac0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015ac2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8015ac4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8015ac8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015aca:	1409      	asrs	r1, r1, #16
 8015acc:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8015ad0:	141b      	asrs	r3, r3, #16
 8015ad2:	fb04 1303 	mla	r3, r4, r3, r1
 8015ad6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015ad8:	18ce      	adds	r6, r1, r3
 8015ada:	5ccb      	ldrb	r3, [r1, r3]
 8015adc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8015ae0:	0e1f      	lsrs	r7, r3, #24
 8015ae2:	2a00      	cmp	r2, #0
 8015ae4:	f000 8114 	beq.w	8015d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8015ae8:	7871      	ldrb	r1, [r6, #1]
 8015aea:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8015aee:	910e      	str	r1, [sp, #56]	; 0x38
 8015af0:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8015af4:	2800      	cmp	r0, #0
 8015af6:	f000 8115 	beq.w	8015d24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8015afa:	1931      	adds	r1, r6, r4
 8015afc:	5d36      	ldrb	r6, [r6, r4]
 8015afe:	7849      	ldrb	r1, [r1, #1]
 8015b00:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8015b04:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8015b08:	960a      	str	r6, [sp, #40]	; 0x28
 8015b0a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8015b0e:	0e0e      	lsrs	r6, r1, #24
 8015b10:	910f      	str	r1, [sp, #60]	; 0x3c
 8015b12:	b292      	uxth	r2, r2
 8015b14:	b280      	uxth	r0, r0
 8015b16:	fb02 fb00 	mul.w	fp, r2, r0
 8015b1a:	0112      	lsls	r2, r2, #4
 8015b1c:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8015b20:	eba2 090b 	sub.w	r9, r2, fp
 8015b24:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8015b28:	b280      	uxth	r0, r0
 8015b2a:	fa1f f989 	uxth.w	r9, r9
 8015b2e:	1a09      	subs	r1, r1, r0
 8015b30:	fb09 f20e 	mul.w	r2, r9, lr
 8015b34:	b289      	uxth	r1, r1
 8015b36:	fb01 2207 	mla	r2, r1, r7, r2
 8015b3a:	fb00 220a 	mla	r2, r0, sl, r2
 8015b3e:	fb0b 2206 	mla	r2, fp, r6, r2
 8015b42:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015b46:	9213      	str	r2, [sp, #76]	; 0x4c
 8015b48:	2a00      	cmp	r2, #0
 8015b4a:	f000 80d4 	beq.w	8015cf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8015b4e:	2fff      	cmp	r7, #255	; 0xff
 8015b50:	d01a      	beq.n	8015b88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8015b52:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8015b56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015b5a:	fb07 fc0c 	mul.w	ip, r7, ip
 8015b5e:	435f      	muls	r7, r3
 8015b60:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8015b64:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8015b68:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015b6c:	4463      	add	r3, ip
 8015b6e:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8015b72:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8015b76:	0a1b      	lsrs	r3, r3, #8
 8015b78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015b7c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015b80:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8015b84:	ea43 030c 	orr.w	r3, r3, ip
 8015b88:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8015b8c:	d01f      	beq.n	8015bce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8015b8e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8015b90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b92:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8015b96:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8015b9a:	fb0e f707 	mul.w	r7, lr, r7
 8015b9e:	fb0e fe0c 	mul.w	lr, lr, ip
 8015ba2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015ba6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015baa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015bae:	44bc      	add	ip, r7
 8015bb0:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8015bb4:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8015bb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015bbc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015bc0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015bc4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8015bc8:	ea4c 020e 	orr.w	r2, ip, lr
 8015bcc:	920e      	str	r2, [sp, #56]	; 0x38
 8015bce:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8015bd2:	d01e      	beq.n	8015c12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8015bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015bd6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8015bda:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8015bde:	fb0a fe0e 	mul.w	lr, sl, lr
 8015be2:	fb0a fa07 	mul.w	sl, sl, r7
 8015be6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8015bea:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8015bee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015bf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015bf6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015bfa:	44f4      	add	ip, lr
 8015bfc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015c00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015c04:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015c08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015c0c:	ea4c 020a 	orr.w	r2, ip, sl
 8015c10:	920a      	str	r2, [sp, #40]	; 0x28
 8015c12:	2eff      	cmp	r6, #255	; 0xff
 8015c14:	d01c      	beq.n	8015c50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8015c16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c18:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8015c1c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8015c20:	fb06 fe0e 	mul.w	lr, r6, lr
 8015c24:	437e      	muls	r6, r7
 8015c26:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8015c2a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8015c2e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8015c32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015c36:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8015c3a:	44f4      	add	ip, lr
 8015c3c:	0a36      	lsrs	r6, r6, #8
 8015c3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015c42:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015c46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015c4a:	ea4c 0206 	orr.w	r2, ip, r6
 8015c4e:	920f      	str	r2, [sp, #60]	; 0x3c
 8015c50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c52:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8015c56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015c5a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8015c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c60:	fb09 f606 	mul.w	r6, r9, r6
 8015c64:	fb01 6607 	mla	r6, r1, r7, r6
 8015c68:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8015c6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c6e:	fb00 6607 	mla	r6, r0, r7, r6
 8015c72:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8015c76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c78:	fb0b 6607 	mla	r6, fp, r7, r6
 8015c7c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8015c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c82:	fb09 f907 	mul.w	r9, r9, r7
 8015c86:	0a36      	lsrs	r6, r6, #8
 8015c88:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8015c8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c8e:	fb01 9303 	mla	r3, r1, r3, r9
 8015c92:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8015c96:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8015c9a:	fb00 330c 	mla	r3, r0, ip, r3
 8015c9e:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8015ca2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ca4:	43da      	mvns	r2, r3
 8015ca6:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8015caa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015cae:	b2d2      	uxtb	r2, r2
 8015cb0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8015cb4:	fb03 f102 	mul.w	r1, r3, r2
 8015cb8:	ea46 060e 	orr.w	r6, r6, lr
 8015cbc:	1c4b      	adds	r3, r1, #1
 8015cbe:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8015cc2:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8015cc6:	f808 3c03 	strb.w	r3, [r8, #-3]
 8015cca:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8015cce:	4353      	muls	r3, r2
 8015cd0:	1c59      	adds	r1, r3, #1
 8015cd2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8015cd6:	0a33      	lsrs	r3, r6, #8
 8015cd8:	0c36      	lsrs	r6, r6, #16
 8015cda:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8015cde:	f808 3c02 	strb.w	r3, [r8, #-2]
 8015ce2:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015ce6:	435a      	muls	r2, r3
 8015ce8:	1c53      	adds	r3, r2, #1
 8015cea:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8015cee:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8015cf2:	f808 6c01 	strb.w	r6, [r8, #-1]
 8015cf6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015cf8:	f108 0803 	add.w	r8, r8, #3
 8015cfc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8015cfe:	4413      	add	r3, r2
 8015d00:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8015d02:	9329      	str	r3, [sp, #164]	; 0xa4
 8015d04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015d06:	4413      	add	r3, r2
 8015d08:	932a      	str	r3, [sp, #168]	; 0xa8
 8015d0a:	9b07      	ldr	r3, [sp, #28]
 8015d0c:	3b01      	subs	r3, #1
 8015d0e:	e508      	b.n	8015722 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8015d10:	b158      	cbz	r0, 8015d2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8015d12:	5d31      	ldrb	r1, [r6, r4]
 8015d14:	26ff      	movs	r6, #255	; 0xff
 8015d16:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8015d1a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8015d1e:	910a      	str	r1, [sp, #40]	; 0x28
 8015d20:	46b6      	mov	lr, r6
 8015d22:	e6f6      	b.n	8015b12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8015d24:	26ff      	movs	r6, #255	; 0xff
 8015d26:	46b2      	mov	sl, r6
 8015d28:	e6f3      	b.n	8015b12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8015d2a:	26ff      	movs	r6, #255	; 0xff
 8015d2c:	46b2      	mov	sl, r6
 8015d2e:	e7f7      	b.n	8015d20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8015d30:	b017      	add	sp, #92	; 0x5c
 8015d32:	ecbd 8b08 	vpop	{d8-d11}
 8015d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015d3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8015d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d40:	b08d      	sub	sp, #52	; 0x34
 8015d42:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8015d46:	9103      	str	r1, [sp, #12]
 8015d48:	fb07 5803 	mla	r8, r7, r3, r5
 8015d4c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8015d50:	9803      	ldr	r0, [sp, #12]
 8015d52:	2f00      	cmp	r7, #0
 8015d54:	910b      	str	r1, [sp, #44]	; 0x2c
 8015d56:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015d5a:	9903      	ldr	r1, [sp, #12]
 8015d5c:	9c03      	ldr	r4, [sp, #12]
 8015d5e:	eb02 0608 	add.w	r6, r2, r8
 8015d62:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8015d66:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8015d6a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8015d6e:	7809      	ldrb	r1, [r1, #0]
 8015d70:	7840      	ldrb	r0, [r0, #1]
 8015d72:	78a4      	ldrb	r4, [r4, #2]
 8015d74:	db51      	blt.n	8015e1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8015d76:	45be      	cmp	lr, r7
 8015d78:	dd4f      	ble.n	8015e1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8015d7a:	2d00      	cmp	r5, #0
 8015d7c:	db49      	blt.n	8015e12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8015d7e:	42ab      	cmp	r3, r5
 8015d80:	dd47      	ble.n	8015e12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8015d82:	f812 2008 	ldrb.w	r2, [r2, r8]
 8015d86:	9204      	str	r2, [sp, #16]
 8015d88:	7872      	ldrb	r2, [r6, #1]
 8015d8a:	9205      	str	r2, [sp, #20]
 8015d8c:	78b2      	ldrb	r2, [r6, #2]
 8015d8e:	9206      	str	r2, [sp, #24]
 8015d90:	1c6a      	adds	r2, r5, #1
 8015d92:	d449      	bmi.n	8015e28 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8015d94:	4293      	cmp	r3, r2
 8015d96:	dd47      	ble.n	8015e28 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8015d98:	f1bc 0f00 	cmp.w	ip, #0
 8015d9c:	d044      	beq.n	8015e28 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8015d9e:	7972      	ldrb	r2, [r6, #5]
 8015da0:	f896 b003 	ldrb.w	fp, [r6, #3]
 8015da4:	f896 a004 	ldrb.w	sl, [r6, #4]
 8015da8:	9201      	str	r2, [sp, #4]
 8015daa:	3701      	adds	r7, #1
 8015dac:	d444      	bmi.n	8015e38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8015dae:	45be      	cmp	lr, r7
 8015db0:	dd42      	ble.n	8015e38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8015db2:	f1b9 0f00 	cmp.w	r9, #0
 8015db6:	f000 80c1 	beq.w	8015f3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8015dba:	2d00      	cmp	r5, #0
 8015dbc:	db38      	blt.n	8015e30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8015dbe:	42ab      	cmp	r3, r5
 8015dc0:	dd36      	ble.n	8015e30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8015dc2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015dc6:	f816 8002 	ldrb.w	r8, [r6, r2]
 8015dca:	2203      	movs	r2, #3
 8015dcc:	fb03 6702 	mla	r7, r3, r2, r6
 8015dd0:	fb03 6202 	mla	r2, r3, r2, r6
 8015dd4:	787f      	ldrb	r7, [r7, #1]
 8015dd6:	f892 e002 	ldrb.w	lr, [r2, #2]
 8015dda:	9702      	str	r7, [sp, #8]
 8015ddc:	3501      	adds	r5, #1
 8015dde:	d432      	bmi.n	8015e46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8015de0:	42ab      	cmp	r3, r5
 8015de2:	dd30      	ble.n	8015e46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8015de4:	f1bc 0f00 	cmp.w	ip, #0
 8015de8:	d031      	beq.n	8015e4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8015dea:	2703      	movs	r7, #3
 8015dec:	fb13 7207 	smlabb	r2, r3, r7, r7
 8015df0:	5cb5      	ldrb	r5, [r6, r2]
 8015df2:	fb03 6207 	mla	r2, r3, r7, r6
 8015df6:	fb03 6307 	mla	r3, r3, r7, r6
 8015dfa:	7912      	ldrb	r2, [r2, #4]
 8015dfc:	795e      	ldrb	r6, [r3, #5]
 8015dfe:	f1bc 0f0f 	cmp.w	ip, #15
 8015e02:	d927      	bls.n	8015e54 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8015e04:	4b53      	ldr	r3, [pc, #332]	; (8015f54 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8015e06:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8015e0a:	4a53      	ldr	r2, [pc, #332]	; (8015f58 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8015e0c:	4853      	ldr	r0, [pc, #332]	; (8015f5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8015e0e:	f002 fee7 	bl	8018be0 <__assert_func>
 8015e12:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8015e16:	9104      	str	r1, [sp, #16]
 8015e18:	e7ba      	b.n	8015d90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8015e1a:	9401      	str	r4, [sp, #4]
 8015e1c:	4682      	mov	sl, r0
 8015e1e:	468b      	mov	fp, r1
 8015e20:	9104      	str	r1, [sp, #16]
 8015e22:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8015e26:	e7c0      	b.n	8015daa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8015e28:	9401      	str	r4, [sp, #4]
 8015e2a:	4682      	mov	sl, r0
 8015e2c:	468b      	mov	fp, r1
 8015e2e:	e7bc      	b.n	8015daa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8015e30:	46a6      	mov	lr, r4
 8015e32:	9002      	str	r0, [sp, #8]
 8015e34:	4688      	mov	r8, r1
 8015e36:	e7d1      	b.n	8015ddc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8015e38:	4626      	mov	r6, r4
 8015e3a:	4602      	mov	r2, r0
 8015e3c:	460d      	mov	r5, r1
 8015e3e:	46a6      	mov	lr, r4
 8015e40:	9002      	str	r0, [sp, #8]
 8015e42:	4688      	mov	r8, r1
 8015e44:	e7db      	b.n	8015dfe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8015e46:	4626      	mov	r6, r4
 8015e48:	4602      	mov	r2, r0
 8015e4a:	460d      	mov	r5, r1
 8015e4c:	e7d7      	b.n	8015dfe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8015e4e:	4626      	mov	r6, r4
 8015e50:	4602      	mov	r2, r0
 8015e52:	460d      	mov	r5, r1
 8015e54:	f1b9 0f0f 	cmp.w	r9, #15
 8015e58:	d8d4      	bhi.n	8015e04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8015e5a:	fa1f f38c 	uxth.w	r3, ip
 8015e5e:	fa1f fc89 	uxth.w	ip, r9
 8015e62:	fb03 f70c 	mul.w	r7, r3, ip
 8015e66:	011b      	lsls	r3, r3, #4
 8015e68:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8015e6c:	9707      	str	r7, [sp, #28]
 8015e6e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8015e72:	fa1f fc8c 	uxth.w	ip, ip
 8015e76:	eba7 070c 	sub.w	r7, r7, ip
 8015e7a:	b2bf      	uxth	r7, r7
 8015e7c:	9709      	str	r7, [sp, #36]	; 0x24
 8015e7e:	9f07      	ldr	r7, [sp, #28]
 8015e80:	1bdb      	subs	r3, r3, r7
 8015e82:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8015e86:	b29b      	uxth	r3, r3
 8015e88:	9708      	str	r7, [sp, #32]
 8015e8a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8015e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8015e8e:	ea6f 0907 	mvn.w	r9, r7
 8015e92:	fb03 fb0b 	mul.w	fp, r3, fp
 8015e96:	9f04      	ldr	r7, [sp, #16]
 8015e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e9a:	fa5f f989 	uxtb.w	r9, r9
 8015e9e:	fb03 bb07 	mla	fp, r3, r7, fp
 8015ea2:	9f07      	ldr	r7, [sp, #28]
 8015ea4:	fb11 f109 	smulbb	r1, r1, r9
 8015ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015eaa:	fb0c b808 	mla	r8, ip, r8, fp
 8015eae:	fb10 f009 	smulbb	r0, r0, r9
 8015eb2:	fb14 f409 	smulbb	r4, r4, r9
 8015eb6:	fb07 8805 	mla	r8, r7, r5, r8
 8015eba:	9d08      	ldr	r5, [sp, #32]
 8015ebc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015ebe:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8015ec2:	fb08 1805 	mla	r8, r8, r5, r1
 8015ec6:	9d05      	ldr	r5, [sp, #20]
 8015ec8:	fa1f f888 	uxth.w	r8, r8
 8015ecc:	f108 0101 	add.w	r1, r8, #1
 8015ed0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8015ed4:	9903      	ldr	r1, [sp, #12]
 8015ed6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015eda:	f881 8000 	strb.w	r8, [r1]
 8015ede:	fb03 f10a 	mul.w	r1, r3, sl
 8015ee2:	fb07 1105 	mla	r1, r7, r5, r1
 8015ee6:	9d02      	ldr	r5, [sp, #8]
 8015ee8:	fb0c 1105 	mla	r1, ip, r5, r1
 8015eec:	9d07      	ldr	r5, [sp, #28]
 8015eee:	fb05 1102 	mla	r1, r5, r2, r1
 8015ef2:	9a08      	ldr	r2, [sp, #32]
 8015ef4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015ef8:	fb01 0102 	mla	r1, r1, r2, r0
 8015efc:	9a03      	ldr	r2, [sp, #12]
 8015efe:	b289      	uxth	r1, r1
 8015f00:	1c48      	adds	r0, r1, #1
 8015f02:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8015f06:	1209      	asrs	r1, r1, #8
 8015f08:	7051      	strb	r1, [r2, #1]
 8015f0a:	9a01      	ldr	r2, [sp, #4]
 8015f0c:	4353      	muls	r3, r2
 8015f0e:	9a06      	ldr	r2, [sp, #24]
 8015f10:	fb07 3702 	mla	r7, r7, r2, r3
 8015f14:	9b08      	ldr	r3, [sp, #32]
 8015f16:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8015f1a:	fb05 c606 	mla	r6, r5, r6, ip
 8015f1e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8015f22:	fb06 4603 	mla	r6, r6, r3, r4
 8015f26:	9b03      	ldr	r3, [sp, #12]
 8015f28:	b2b6      	uxth	r6, r6
 8015f2a:	f106 0e01 	add.w	lr, r6, #1
 8015f2e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8015f32:	1236      	asrs	r6, r6, #8
 8015f34:	709e      	strb	r6, [r3, #2]
 8015f36:	b00d      	add	sp, #52	; 0x34
 8015f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f3c:	f1bc 0f0f 	cmp.w	ip, #15
 8015f40:	f63f af60 	bhi.w	8015e04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8015f44:	4626      	mov	r6, r4
 8015f46:	4602      	mov	r2, r0
 8015f48:	460d      	mov	r5, r1
 8015f4a:	46a6      	mov	lr, r4
 8015f4c:	9002      	str	r0, [sp, #8]
 8015f4e:	4688      	mov	r8, r1
 8015f50:	e783      	b.n	8015e5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8015f52:	bf00      	nop
 8015f54:	0801c5d4 	.word	0x0801c5d4
 8015f58:	0801caca 	.word	0x0801caca
 8015f5c:	0801c69d 	.word	0x0801c69d

08015f60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8015f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f64:	ed2d 8b08 	vpush	{d8-d11}
 8015f68:	b0a1      	sub	sp, #132	; 0x84
 8015f6a:	eeb0 aa40 	vmov.f32	s20, s0
 8015f6e:	eef0 9a60 	vmov.f32	s19, s1
 8015f72:	9307      	str	r3, [sp, #28]
 8015f74:	eeb0 9a41 	vmov.f32	s18, s2
 8015f78:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8015f7c:	eeb0 8a62 	vmov.f32	s16, s5
 8015f80:	9210      	str	r2, [sp, #64]	; 0x40
 8015f82:	eef0 8a43 	vmov.f32	s17, s6
 8015f86:	9308      	str	r3, [sp, #32]
 8015f88:	eef0 ba44 	vmov.f32	s23, s8
 8015f8c:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8015f90:	eeb0 ba64 	vmov.f32	s22, s9
 8015f94:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8015f96:	eef0 aa45 	vmov.f32	s21, s10
 8015f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8015f9c:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8015fa0:	901f      	str	r0, [sp, #124]	; 0x7c
 8015fa2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015fa4:	6850      	ldr	r0, [r2, #4]
 8015fa6:	910e      	str	r1, [sp, #56]	; 0x38
 8015fa8:	6812      	ldr	r2, [r2, #0]
 8015faa:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8015fae:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8015fb2:	fb00 1303 	mla	r3, r0, r3, r1
 8015fb6:	9908      	ldr	r1, [sp, #32]
 8015fb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015fbc:	18d3      	adds	r3, r2, r3
 8015fbe:	2203      	movs	r2, #3
 8015fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8015fc2:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8015fc8:	f06f 0304 	mvn.w	r3, #4
 8015fcc:	fb11 3302 	smlabb	r3, r1, r2, r3
 8015fd0:	930d      	str	r3, [sp, #52]	; 0x34
 8015fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fd4:	43db      	mvns	r3, r3
 8015fd6:	b2db      	uxtb	r3, r3
 8015fd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	dc03      	bgt.n	8015fe8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8015fe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	f340 81df 	ble.w	80163a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8015fe8:	9b07      	ldr	r3, [sp, #28]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	f340 80f2 	ble.w	80161d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8015ff0:	ea5f 4228 	movs.w	r2, r8, asr #16
 8015ff4:	ea4f 432b 	mov.w	r3, fp, asr #16
 8015ff8:	d430      	bmi.n	801605c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8015ffa:	1c51      	adds	r1, r2, #1
 8015ffc:	9808      	ldr	r0, [sp, #32]
 8015ffe:	4281      	cmp	r1, r0
 8016000:	da2f      	bge.n	8016062 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8016002:	2b00      	cmp	r3, #0
 8016004:	db2d      	blt.n	8016062 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8016006:	1c59      	adds	r1, r3, #1
 8016008:	980a      	ldr	r0, [sp, #40]	; 0x28
 801600a:	4288      	cmp	r0, r1
 801600c:	dd29      	ble.n	8016062 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801600e:	9b07      	ldr	r3, [sp, #28]
 8016010:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8016012:	3b01      	subs	r3, #1
 8016014:	fb02 8203 	mla	r2, r2, r3, r8
 8016018:	1412      	asrs	r2, r2, #16
 801601a:	d42d      	bmi.n	8016078 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801601c:	3201      	adds	r2, #1
 801601e:	9908      	ldr	r1, [sp, #32]
 8016020:	4291      	cmp	r1, r2
 8016022:	dd29      	ble.n	8016078 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8016024:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8016026:	fb02 b303 	mla	r3, r2, r3, fp
 801602a:	141b      	asrs	r3, r3, #16
 801602c:	d424      	bmi.n	8016078 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801602e:	3301      	adds	r3, #1
 8016030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016032:	429a      	cmp	r2, r3
 8016034:	dd20      	ble.n	8016078 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8016036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016038:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801603c:	1cde      	adds	r6, r3, #3
 801603e:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8016042:	f1bc 0f00 	cmp.w	ip, #0
 8016046:	f300 811f 	bgt.w	8016288 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 801604a:	9b07      	ldr	r3, [sp, #28]
 801604c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8016050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016052:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016056:	4423      	add	r3, r4
 8016058:	9309      	str	r3, [sp, #36]	; 0x24
 801605a:	e0bd      	b.n	80161d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801605c:	1c57      	adds	r7, r2, #1
 801605e:	f040 80ae 	bne.w	80161be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8016062:	9908      	ldr	r1, [sp, #32]
 8016064:	428a      	cmp	r2, r1
 8016066:	f280 80aa 	bge.w	80161be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801606a:	1c5e      	adds	r6, r3, #1
 801606c:	f2c0 80a7 	blt.w	80161be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8016070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016072:	4293      	cmp	r3, r2
 8016074:	f280 80a3 	bge.w	80161be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8016078:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801607c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801607e:	f1ba 0f00 	cmp.w	sl, #0
 8016082:	dde2      	ble.n	801604a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8016084:	ea5f 4028 	movs.w	r0, r8, asr #16
 8016088:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801608c:	ea4f 412b 	mov.w	r1, fp, asr #16
 8016090:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8016094:	f100 80df 	bmi.w	8016256 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8016098:	1c45      	adds	r5, r0, #1
 801609a:	9f08      	ldr	r7, [sp, #32]
 801609c:	42af      	cmp	r7, r5
 801609e:	f340 80dc 	ble.w	801625a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80160a2:	2900      	cmp	r1, #0
 80160a4:	f2c0 80d9 	blt.w	801625a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80160a8:	1c4d      	adds	r5, r1, #1
 80160aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80160ac:	42af      	cmp	r7, r5
 80160ae:	f340 80d4 	ble.w	801625a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80160b2:	9d08      	ldr	r5, [sp, #32]
 80160b4:	fb05 0101 	mla	r1, r5, r1, r0
 80160b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80160ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80160be:	1845      	adds	r5, r0, r1
 80160c0:	5c40      	ldrb	r0, [r0, r1]
 80160c2:	792f      	ldrb	r7, [r5, #4]
 80160c4:	7869      	ldrb	r1, [r5, #1]
 80160c6:	9711      	str	r7, [sp, #68]	; 0x44
 80160c8:	796f      	ldrb	r7, [r5, #5]
 80160ca:	f895 e002 	ldrb.w	lr, [r5, #2]
 80160ce:	f895 9003 	ldrb.w	r9, [r5, #3]
 80160d2:	9712      	str	r7, [sp, #72]	; 0x48
 80160d4:	b17a      	cbz	r2, 80160f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 80160d6:	3505      	adds	r5, #5
 80160d8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80160da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80160dc:	19ef      	adds	r7, r5, r7
 80160de:	5d2d      	ldrb	r5, [r5, r4]
 80160e0:	787c      	ldrb	r4, [r7, #1]
 80160e2:	9513      	str	r5, [sp, #76]	; 0x4c
 80160e4:	9415      	str	r4, [sp, #84]	; 0x54
 80160e6:	78bc      	ldrb	r4, [r7, #2]
 80160e8:	9417      	str	r4, [sp, #92]	; 0x5c
 80160ea:	78fc      	ldrb	r4, [r7, #3]
 80160ec:	9414      	str	r4, [sp, #80]	; 0x50
 80160ee:	793c      	ldrb	r4, [r7, #4]
 80160f0:	9416      	str	r4, [sp, #88]	; 0x58
 80160f2:	797c      	ldrb	r4, [r7, #5]
 80160f4:	9418      	str	r4, [sp, #96]	; 0x60
 80160f6:	b29b      	uxth	r3, r3
 80160f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80160fa:	b292      	uxth	r2, r2
 80160fc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016100:	fb03 f702 	mul.w	r7, r3, r2
 8016104:	011b      	lsls	r3, r3, #4
 8016106:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 801610a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801610e:	1bdb      	subs	r3, r3, r7
 8016110:	b292      	uxth	r2, r2
 8016112:	b29b      	uxth	r3, r3
 8016114:	ebac 0c02 	sub.w	ip, ip, r2
 8016118:	fb03 f909 	mul.w	r9, r3, r9
 801611c:	fa1f fc8c 	uxth.w	ip, ip
 8016120:	fb0c 9000 	mla	r0, ip, r0, r9
 8016124:	f896 9000 	ldrb.w	r9, [r6]
 8016128:	fb02 0004 	mla	r0, r2, r4, r0
 801612c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801612e:	fb07 0004 	mla	r0, r7, r4, r0
 8016132:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016134:	fb19 f904 	smulbb	r9, r9, r4
 8016138:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801613c:	fb00 9005 	mla	r0, r0, r5, r9
 8016140:	b280      	uxth	r0, r0
 8016142:	f100 0901 	add.w	r9, r0, #1
 8016146:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801614a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801614c:	4358      	muls	r0, r3
 801614e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016152:	fb0c 0101 	mla	r1, ip, r1, r0
 8016156:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016158:	f886 9000 	strb.w	r9, [r6]
 801615c:	fb02 1100 	mla	r1, r2, r0, r1
 8016160:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016162:	fb07 1100 	mla	r1, r7, r0, r1
 8016166:	7870      	ldrb	r0, [r6, #1]
 8016168:	fb10 f004 	smulbb	r0, r0, r4
 801616c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8016170:	fb01 0105 	mla	r1, r1, r5, r0
 8016174:	b289      	uxth	r1, r1
 8016176:	1c48      	adds	r0, r1, #1
 8016178:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801617c:	1209      	asrs	r1, r1, #8
 801617e:	7071      	strb	r1, [r6, #1]
 8016180:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016182:	434b      	muls	r3, r1
 8016184:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016186:	fb0c 330e 	mla	r3, ip, lr, r3
 801618a:	fb02 3201 	mla	r2, r2, r1, r3
 801618e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016190:	fb07 2703 	mla	r7, r7, r3, r2
 8016194:	78b2      	ldrb	r2, [r6, #2]
 8016196:	fb12 f204 	smulbb	r2, r2, r4
 801619a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801619e:	fb07 2505 	mla	r5, r7, r5, r2
 80161a2:	b2ad      	uxth	r5, r5
 80161a4:	1c6f      	adds	r7, r5, #1
 80161a6:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80161aa:	122d      	asrs	r5, r5, #8
 80161ac:	70b5      	strb	r5, [r6, #2]
 80161ae:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80161b0:	3603      	adds	r6, #3
 80161b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80161b6:	4498      	add	r8, r3
 80161b8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80161ba:	449b      	add	fp, r3
 80161bc:	e75f      	b.n	801607e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80161be:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80161c0:	4498      	add	r8, r3
 80161c2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80161c4:	449b      	add	fp, r3
 80161c6:	9b07      	ldr	r3, [sp, #28]
 80161c8:	3b01      	subs	r3, #1
 80161ca:	9307      	str	r3, [sp, #28]
 80161cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161ce:	3303      	adds	r3, #3
 80161d0:	9309      	str	r3, [sp, #36]	; 0x24
 80161d2:	e709      	b.n	8015fe8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80161d4:	f47f af1b 	bne.w	801600e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 80161d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161da:	2b00      	cmp	r3, #0
 80161dc:	f340 80e3 	ble.w	80163a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80161e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80161e4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80161e6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80161ea:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80161ee:	eef0 6a48 	vmov.f32	s13, s16
 80161f2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80161f6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80161fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80161fe:	ee16 8a90 	vmov	r8, s13
 8016202:	eef0 6a68 	vmov.f32	s13, s17
 8016206:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801620a:	ee16 ba90 	vmov	fp, s13
 801620e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016212:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016216:	ee37 8a48 	vsub.f32	s16, s14, s16
 801621a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801621e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016222:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016226:	ee18 2a10 	vmov	r2, s16
 801622a:	eeb0 8a47 	vmov.f32	s16, s14
 801622e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016232:	ee18 2a90 	vmov	r2, s17
 8016236:	9335      	str	r3, [sp, #212]	; 0xd4
 8016238:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801623a:	eef0 8a67 	vmov.f32	s17, s15
 801623e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016242:	9336      	str	r3, [sp, #216]	; 0xd8
 8016244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016246:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016248:	3b01      	subs	r3, #1
 801624a:	930e      	str	r3, [sp, #56]	; 0x38
 801624c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801624e:	bf08      	it	eq
 8016250:	4613      	moveq	r3, r2
 8016252:	9307      	str	r3, [sp, #28]
 8016254:	e6c1      	b.n	8015fda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8016256:	1c45      	adds	r5, r0, #1
 8016258:	d1a9      	bne.n	80161ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801625a:	9c08      	ldr	r4, [sp, #32]
 801625c:	42a0      	cmp	r0, r4
 801625e:	daa6      	bge.n	80161ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8016260:	1c4c      	adds	r4, r1, #1
 8016262:	dba4      	blt.n	80161ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8016264:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016266:	428c      	cmp	r4, r1
 8016268:	dda1      	ble.n	80161ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801626a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801626c:	9001      	str	r0, [sp, #4]
 801626e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8016270:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8016274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016276:	4631      	mov	r1, r6
 8016278:	e9cd 2404 	strd	r2, r4, [sp, #16]
 801627c:	9300      	str	r3, [sp, #0]
 801627e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016280:	9b08      	ldr	r3, [sp, #32]
 8016282:	f7ff fd5b 	bl	8015d3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8016286:	e792      	b.n	80161ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8016288:	ea4f 4228 	mov.w	r2, r8, asr #16
 801628c:	9c08      	ldr	r4, [sp, #32]
 801628e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8016292:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8016296:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801629a:	fb04 2000 	mla	r0, r4, r0, r2
 801629e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80162a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80162a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80162a6:	4402      	add	r2, r0
 80162a8:	5c25      	ldrb	r5, [r4, r0]
 80162aa:	7894      	ldrb	r4, [r2, #2]
 80162ac:	7850      	ldrb	r0, [r2, #1]
 80162ae:	9411      	str	r4, [sp, #68]	; 0x44
 80162b0:	7954      	ldrb	r4, [r2, #5]
 80162b2:	f892 a003 	ldrb.w	sl, [r2, #3]
 80162b6:	f892 9004 	ldrb.w	r9, [r2, #4]
 80162ba:	9412      	str	r4, [sp, #72]	; 0x48
 80162bc:	b171      	cbz	r1, 80162dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80162be:	3205      	adds	r2, #5
 80162c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80162c2:	1917      	adds	r7, r2, r4
 80162c4:	5d12      	ldrb	r2, [r2, r4]
 80162c6:	9219      	str	r2, [sp, #100]	; 0x64
 80162c8:	787a      	ldrb	r2, [r7, #1]
 80162ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80162cc:	78ba      	ldrb	r2, [r7, #2]
 80162ce:	921d      	str	r2, [sp, #116]	; 0x74
 80162d0:	78fa      	ldrb	r2, [r7, #3]
 80162d2:	921a      	str	r2, [sp, #104]	; 0x68
 80162d4:	793a      	ldrb	r2, [r7, #4]
 80162d6:	921c      	str	r2, [sp, #112]	; 0x70
 80162d8:	797a      	ldrb	r2, [r7, #5]
 80162da:	921e      	str	r2, [sp, #120]	; 0x78
 80162dc:	b29b      	uxth	r3, r3
 80162de:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80162e0:	b289      	uxth	r1, r1
 80162e2:	3603      	adds	r6, #3
 80162e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80162e8:	fb03 f201 	mul.w	r2, r3, r1
 80162ec:	011b      	lsls	r3, r3, #4
 80162ee:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 80162f2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80162f6:	1a9b      	subs	r3, r3, r2
 80162f8:	b289      	uxth	r1, r1
 80162fa:	b29b      	uxth	r3, r3
 80162fc:	1a7f      	subs	r7, r7, r1
 80162fe:	fb03 fa0a 	mul.w	sl, r3, sl
 8016302:	b2bf      	uxth	r7, r7
 8016304:	fb03 f909 	mul.w	r9, r3, r9
 8016308:	fb07 a505 	mla	r5, r7, r5, sl
 801630c:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8016310:	fb07 9000 	mla	r0, r7, r0, r9
 8016314:	fb01 5504 	mla	r5, r1, r4, r5
 8016318:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801631a:	fb02 5504 	mla	r5, r2, r4, r5
 801631e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016320:	fb1a fa04 	smulbb	sl, sl, r4
 8016324:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8016328:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801632a:	fb05 a50e 	mla	r5, r5, lr, sl
 801632e:	fb01 0004 	mla	r0, r1, r4, r0
 8016332:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8016334:	b2ad      	uxth	r5, r5
 8016336:	fb02 0004 	mla	r0, r2, r4, r0
 801633a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801633c:	f105 0a01 	add.w	sl, r5, #1
 8016340:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016344:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8016348:	122d      	asrs	r5, r5, #8
 801634a:	f806 5c06 	strb.w	r5, [r6, #-6]
 801634e:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8016352:	fb15 f504 	smulbb	r5, r5, r4
 8016356:	fb00 500e 	mla	r0, r0, lr, r5
 801635a:	b280      	uxth	r0, r0
 801635c:	1c45      	adds	r5, r0, #1
 801635e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8016362:	1200      	asrs	r0, r0, #8
 8016364:	f806 0c05 	strb.w	r0, [r6, #-5]
 8016368:	9812      	ldr	r0, [sp, #72]	; 0x48
 801636a:	4343      	muls	r3, r0
 801636c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801636e:	fb07 3300 	mla	r3, r7, r0, r3
 8016372:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016374:	fb01 3100 	mla	r1, r1, r0, r3
 8016378:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801637a:	fb02 1203 	mla	r2, r2, r3, r1
 801637e:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8016382:	fb11 f104 	smulbb	r1, r1, r4
 8016386:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801638a:	fb02 120e 	mla	r2, r2, lr, r1
 801638e:	b292      	uxth	r2, r2
 8016390:	1c53      	adds	r3, r2, #1
 8016392:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016396:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8016398:	1212      	asrs	r2, r2, #8
 801639a:	4498      	add	r8, r3
 801639c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801639e:	f806 2c04 	strb.w	r2, [r6, #-4]
 80163a2:	449b      	add	fp, r3
 80163a4:	e64d      	b.n	8016042 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80163a6:	b021      	add	sp, #132	; 0x84
 80163a8:	ecbd 8b08 	vpop	{d8-d11}
 80163ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080163b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80163b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163b4:	b085      	sub	sp, #20
 80163b6:	784d      	ldrb	r5, [r1, #1]
 80163b8:	788e      	ldrb	r6, [r1, #2]
 80163ba:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80163be:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80163c2:	9403      	str	r4, [sp, #12]
 80163c4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80163c8:	780c      	ldrb	r4, [r1, #0]
 80163ca:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80163ce:	fb07 ce03 	mla	lr, r7, r3, ip
 80163d2:	2f00      	cmp	r7, #0
 80163d4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80163d8:	eb02 0b0e 	add.w	fp, r2, lr
 80163dc:	db56      	blt.n	801648c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80163de:	45b9      	cmp	r9, r7
 80163e0:	dd54      	ble.n	801648c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80163e2:	f1bc 0f00 	cmp.w	ip, #0
 80163e6:	db4d      	blt.n	8016484 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80163e8:	4563      	cmp	r3, ip
 80163ea:	dd4b      	ble.n	8016484 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80163ec:	f812 200e 	ldrb.w	r2, [r2, lr]
 80163f0:	9200      	str	r2, [sp, #0]
 80163f2:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80163f6:	9201      	str	r2, [sp, #4]
 80163f8:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80163fc:	9202      	str	r2, [sp, #8]
 80163fe:	f11c 0201 	adds.w	r2, ip, #1
 8016402:	d44a      	bmi.n	801649a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8016404:	4293      	cmp	r3, r2
 8016406:	dd48      	ble.n	801649a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8016408:	2800      	cmp	r0, #0
 801640a:	d046      	beq.n	801649a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801640c:	f89b e003 	ldrb.w	lr, [fp, #3]
 8016410:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8016414:	f89b a005 	ldrb.w	sl, [fp, #5]
 8016418:	3701      	adds	r7, #1
 801641a:	d446      	bmi.n	80164aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801641c:	45b9      	cmp	r9, r7
 801641e:	dd44      	ble.n	80164aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8016420:	9a03      	ldr	r2, [sp, #12]
 8016422:	2a00      	cmp	r2, #0
 8016424:	d045      	beq.n	80164b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8016426:	f1bc 0f00 	cmp.w	ip, #0
 801642a:	db3a      	blt.n	80164a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801642c:	4563      	cmp	r3, ip
 801642e:	dd38      	ble.n	80164a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8016430:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8016434:	f04f 0903 	mov.w	r9, #3
 8016438:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801643c:	fb03 b209 	mla	r2, r3, r9, fp
 8016440:	fb03 b909 	mla	r9, r3, r9, fp
 8016444:	7852      	ldrb	r2, [r2, #1]
 8016446:	f899 9002 	ldrb.w	r9, [r9, #2]
 801644a:	f11c 0c01 	adds.w	ip, ip, #1
 801644e:	d40d      	bmi.n	801646c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8016450:	4563      	cmp	r3, ip
 8016452:	dd0b      	ble.n	801646c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8016454:	b160      	cbz	r0, 8016470 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8016456:	2603      	movs	r6, #3
 8016458:	fb13 6406 	smlabb	r4, r3, r6, r6
 801645c:	fb03 b506 	mla	r5, r3, r6, fp
 8016460:	fb03 b306 	mla	r3, r3, r6, fp
 8016464:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8016468:	792d      	ldrb	r5, [r5, #4]
 801646a:	795e      	ldrb	r6, [r3, #5]
 801646c:	280f      	cmp	r0, #15
 801646e:	d802      	bhi.n	8016476 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8016470:	9b03      	ldr	r3, [sp, #12]
 8016472:	2b0f      	cmp	r3, #15
 8016474:	d922      	bls.n	80164bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8016476:	4b2f      	ldr	r3, [pc, #188]	; (8016534 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8016478:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801647c:	4a2e      	ldr	r2, [pc, #184]	; (8016538 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801647e:	482f      	ldr	r0, [pc, #188]	; (801653c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8016480:	f002 fbae 	bl	8018be0 <__assert_func>
 8016484:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8016488:	9400      	str	r4, [sp, #0]
 801648a:	e7b8      	b.n	80163fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801648c:	46b2      	mov	sl, r6
 801648e:	46a8      	mov	r8, r5
 8016490:	46a6      	mov	lr, r4
 8016492:	9400      	str	r4, [sp, #0]
 8016494:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8016498:	e7be      	b.n	8016418 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801649a:	46b2      	mov	sl, r6
 801649c:	46a8      	mov	r8, r5
 801649e:	46a6      	mov	lr, r4
 80164a0:	e7ba      	b.n	8016418 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80164a2:	46b1      	mov	r9, r6
 80164a4:	462a      	mov	r2, r5
 80164a6:	4627      	mov	r7, r4
 80164a8:	e7cf      	b.n	801644a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80164aa:	46b1      	mov	r9, r6
 80164ac:	462a      	mov	r2, r5
 80164ae:	4627      	mov	r7, r4
 80164b0:	e7dc      	b.n	801646c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80164b2:	280f      	cmp	r0, #15
 80164b4:	d8df      	bhi.n	8016476 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80164b6:	46b1      	mov	r9, r6
 80164b8:	462a      	mov	r2, r5
 80164ba:	4627      	mov	r7, r4
 80164bc:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80164c0:	b280      	uxth	r0, r0
 80164c2:	fb00 f30b 	mul.w	r3, r0, fp
 80164c6:	0100      	lsls	r0, r0, #4
 80164c8:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80164cc:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80164d0:	1ac0      	subs	r0, r0, r3
 80164d2:	fa1f fb8b 	uxth.w	fp, fp
 80164d6:	b280      	uxth	r0, r0
 80164d8:	ebac 0c0b 	sub.w	ip, ip, fp
 80164dc:	9003      	str	r0, [sp, #12]
 80164de:	fa1f fc8c 	uxth.w	ip, ip
 80164e2:	fb00 fe0e 	mul.w	lr, r0, lr
 80164e6:	9800      	ldr	r0, [sp, #0]
 80164e8:	fb0c ee00 	mla	lr, ip, r0, lr
 80164ec:	9803      	ldr	r0, [sp, #12]
 80164ee:	fb00 f808 	mul.w	r8, r0, r8
 80164f2:	9801      	ldr	r0, [sp, #4]
 80164f4:	fb0b ee07 	mla	lr, fp, r7, lr
 80164f8:	fb0c 8800 	mla	r8, ip, r0, r8
 80164fc:	fb03 ee04 	mla	lr, r3, r4, lr
 8016500:	fb0b 8202 	mla	r2, fp, r2, r8
 8016504:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016508:	fb03 2505 	mla	r5, r3, r5, r2
 801650c:	9a03      	ldr	r2, [sp, #12]
 801650e:	f881 e000 	strb.w	lr, [r1]
 8016512:	fb02 f00a 	mul.w	r0, r2, sl
 8016516:	9a02      	ldr	r2, [sp, #8]
 8016518:	122d      	asrs	r5, r5, #8
 801651a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801651e:	704d      	strb	r5, [r1, #1]
 8016520:	fb0b c909 	mla	r9, fp, r9, ip
 8016524:	fb03 9606 	mla	r6, r3, r6, r9
 8016528:	1236      	asrs	r6, r6, #8
 801652a:	708e      	strb	r6, [r1, #2]
 801652c:	b005      	add	sp, #20
 801652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016532:	bf00      	nop
 8016534:	0801c5d4 	.word	0x0801c5d4
 8016538:	0801caca 	.word	0x0801caca
 801653c:	0801c69d 	.word	0x0801c69d

08016540 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016544:	ed2d 8b0a 	vpush	{d8-d12}
 8016548:	b09d      	sub	sp, #116	; 0x74
 801654a:	eeb0 aa40 	vmov.f32	s20, s0
 801654e:	eef0 9a60 	vmov.f32	s19, s1
 8016552:	9306      	str	r3, [sp, #24]
 8016554:	eeb0 9a41 	vmov.f32	s18, s2
 8016558:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 801655c:	eeb0 8a62 	vmov.f32	s16, s5
 8016560:	901b      	str	r0, [sp, #108]	; 0x6c
 8016562:	eef0 8a43 	vmov.f32	s17, s6
 8016566:	9307      	str	r3, [sp, #28]
 8016568:	eeb0 ca44 	vmov.f32	s24, s8
 801656c:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8016570:	eef0 ba64 	vmov.f32	s23, s9
 8016574:	eeb0 ba45 	vmov.f32	s22, s10
 8016578:	9309      	str	r3, [sp, #36]	; 0x24
 801657a:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801657e:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8016582:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8016584:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8016588:	6850      	ldr	r0, [r2, #4]
 801658a:	6812      	ldr	r2, [r2, #0]
 801658c:	fb00 1303 	mla	r3, r0, r3, r1
 8016590:	9907      	ldr	r1, [sp, #28]
 8016592:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016596:	18d3      	adds	r3, r2, r3
 8016598:	2203      	movs	r2, #3
 801659a:	9308      	str	r3, [sp, #32]
 801659c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	930a      	str	r3, [sp, #40]	; 0x28
 80165a2:	f06f 0304 	mvn.w	r3, #4
 80165a6:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80165aa:	fb11 3302 	smlabb	r3, r1, r2, r3
 80165ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80165b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	dc03      	bgt.n	80165be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80165b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	f340 8193 	ble.w	80168e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80165be:	9b06      	ldr	r3, [sp, #24]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	f340 80d0 	ble.w	8016766 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 80165c6:	1432      	asrs	r2, r6, #16
 80165c8:	ea4f 4325 	mov.w	r3, r5, asr #16
 80165cc:	d42f      	bmi.n	801662e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80165ce:	1c51      	adds	r1, r2, #1
 80165d0:	9807      	ldr	r0, [sp, #28]
 80165d2:	4281      	cmp	r1, r0
 80165d4:	da2e      	bge.n	8016634 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	db2c      	blt.n	8016634 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80165da:	1c59      	adds	r1, r3, #1
 80165dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165de:	4288      	cmp	r0, r1
 80165e0:	dd28      	ble.n	8016634 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80165e2:	9b06      	ldr	r3, [sp, #24]
 80165e4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80165e6:	3b01      	subs	r3, #1
 80165e8:	fb02 6203 	mla	r2, r2, r3, r6
 80165ec:	1412      	asrs	r2, r2, #16
 80165ee:	d42c      	bmi.n	801664a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80165f0:	3201      	adds	r2, #1
 80165f2:	9907      	ldr	r1, [sp, #28]
 80165f4:	4291      	cmp	r1, r2
 80165f6:	dd28      	ble.n	801664a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80165f8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80165fa:	fb02 5303 	mla	r3, r2, r3, r5
 80165fe:	141b      	asrs	r3, r3, #16
 8016600:	d423      	bmi.n	801664a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8016602:	3301      	adds	r3, #1
 8016604:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016606:	429a      	cmp	r2, r3
 8016608:	dd1f      	ble.n	801664a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801660a:	9b08      	ldr	r3, [sp, #32]
 801660c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8016610:	f103 0c03 	add.w	ip, r3, #3
 8016614:	f1be 0f00 	cmp.w	lr, #0
 8016618:	f300 80fa 	bgt.w	8016810 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801661c:	9b06      	ldr	r3, [sp, #24]
 801661e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8016622:	9b08      	ldr	r3, [sp, #32]
 8016624:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016628:	4423      	add	r3, r4
 801662a:	9308      	str	r3, [sp, #32]
 801662c:	e09d      	b.n	801676a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 801662e:	1c51      	adds	r1, r2, #1
 8016630:	f040 808e 	bne.w	8016750 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8016634:	9907      	ldr	r1, [sp, #28]
 8016636:	428a      	cmp	r2, r1
 8016638:	f280 808a 	bge.w	8016750 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801663c:	1c5f      	adds	r7, r3, #1
 801663e:	f2c0 8087 	blt.w	8016750 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8016642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016644:	4293      	cmp	r3, r2
 8016646:	f280 8083 	bge.w	8016750 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801664a:	9f06      	ldr	r7, [sp, #24]
 801664c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016650:	2f00      	cmp	r7, #0
 8016652:	dde3      	ble.n	801661c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8016654:	1432      	asrs	r2, r6, #16
 8016656:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801665a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801665e:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8016662:	f100 80bf 	bmi.w	80167e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8016666:	1c50      	adds	r0, r2, #1
 8016668:	9c07      	ldr	r4, [sp, #28]
 801666a:	4284      	cmp	r4, r0
 801666c:	f340 80bc 	ble.w	80167e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8016670:	2b00      	cmp	r3, #0
 8016672:	f2c0 80b9 	blt.w	80167e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8016676:	1c58      	adds	r0, r3, #1
 8016678:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801667a:	4284      	cmp	r4, r0
 801667c:	f340 80b4 	ble.w	80167e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8016680:	9807      	ldr	r0, [sp, #28]
 8016682:	fb00 2303 	mla	r3, r0, r3, r2
 8016686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016688:	980a      	ldr	r0, [sp, #40]	; 0x28
 801668a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801668e:	441a      	add	r2, r3
 8016690:	f810 c003 	ldrb.w	ip, [r0, r3]
 8016694:	7953      	ldrb	r3, [r2, #5]
 8016696:	7850      	ldrb	r0, [r2, #1]
 8016698:	f892 e002 	ldrb.w	lr, [r2, #2]
 801669c:	f892 9003 	ldrb.w	r9, [r2, #3]
 80166a0:	f892 8004 	ldrb.w	r8, [r2, #4]
 80166a4:	930e      	str	r3, [sp, #56]	; 0x38
 80166a6:	f1bb 0f00 	cmp.w	fp, #0
 80166aa:	d00f      	beq.n	80166cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80166ac:	3205      	adds	r2, #5
 80166ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80166b2:	18d3      	adds	r3, r2, r3
 80166b4:	5d12      	ldrb	r2, [r2, r4]
 80166b6:	920f      	str	r2, [sp, #60]	; 0x3c
 80166b8:	785a      	ldrb	r2, [r3, #1]
 80166ba:	9211      	str	r2, [sp, #68]	; 0x44
 80166bc:	789a      	ldrb	r2, [r3, #2]
 80166be:	9213      	str	r2, [sp, #76]	; 0x4c
 80166c0:	78da      	ldrb	r2, [r3, #3]
 80166c2:	9210      	str	r2, [sp, #64]	; 0x40
 80166c4:	791a      	ldrb	r2, [r3, #4]
 80166c6:	795b      	ldrb	r3, [r3, #5]
 80166c8:	9212      	str	r2, [sp, #72]	; 0x48
 80166ca:	9314      	str	r3, [sp, #80]	; 0x50
 80166cc:	b28b      	uxth	r3, r1
 80166ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80166d0:	fa1f f28b 	uxth.w	r2, fp
 80166d4:	fb03 fb02 	mul.w	fp, r3, r2
 80166d8:	011b      	lsls	r3, r3, #4
 80166da:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80166de:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80166e2:	eba3 030b 	sub.w	r3, r3, fp
 80166e6:	b292      	uxth	r2, r2
 80166e8:	b29b      	uxth	r3, r3
 80166ea:	1a89      	subs	r1, r1, r2
 80166ec:	fb03 f808 	mul.w	r8, r3, r8
 80166f0:	b289      	uxth	r1, r1
 80166f2:	fb03 f909 	mul.w	r9, r3, r9
 80166f6:	fb01 8800 	mla	r8, r1, r0, r8
 80166fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80166fc:	fb01 990c 	mla	r9, r1, ip, r9
 8016700:	fb02 8800 	mla	r8, r2, r0, r8
 8016704:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016706:	fb02 9904 	mla	r9, r2, r4, r9
 801670a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801670c:	fb0b 8800 	mla	r8, fp, r0, r8
 8016710:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016712:	fb0b 9904 	mla	r9, fp, r4, r9
 8016716:	4343      	muls	r3, r0
 8016718:	ea4f 2828 	mov.w	r8, r8, asr #8
 801671c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016720:	fb01 330e 	mla	r3, r1, lr, r3
 8016724:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016726:	f88a 9000 	strb.w	r9, [sl]
 801672a:	fb02 3201 	mla	r2, r2, r1, r3
 801672e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016730:	f88a 8001 	strb.w	r8, [sl, #1]
 8016734:	fb0b 2b03 	mla	fp, fp, r3, r2
 8016738:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801673c:	f88a b002 	strb.w	fp, [sl, #2]
 8016740:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8016742:	f10a 0a03 	add.w	sl, sl, #3
 8016746:	3f01      	subs	r7, #1
 8016748:	441e      	add	r6, r3
 801674a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801674c:	441d      	add	r5, r3
 801674e:	e77f      	b.n	8016650 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8016750:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8016752:	441e      	add	r6, r3
 8016754:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016756:	441d      	add	r5, r3
 8016758:	9b06      	ldr	r3, [sp, #24]
 801675a:	3b01      	subs	r3, #1
 801675c:	9306      	str	r3, [sp, #24]
 801675e:	9b08      	ldr	r3, [sp, #32]
 8016760:	3303      	adds	r3, #3
 8016762:	9308      	str	r3, [sp, #32]
 8016764:	e72b      	b.n	80165be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8016766:	f47f af3c 	bne.w	80165e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801676a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801676c:	2b00      	cmp	r3, #0
 801676e:	f340 80b9 	ble.w	80168e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8016772:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8016776:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016778:	ee79 9aab 	vadd.f32	s19, s19, s23
 801677c:	eef0 6a48 	vmov.f32	s13, s16
 8016780:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8016784:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8016788:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801678c:	ee16 6a90 	vmov	r6, s13
 8016790:	eef0 6a68 	vmov.f32	s13, s17
 8016794:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016798:	ee16 5a90 	vmov	r5, s13
 801679c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80167a0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80167a4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80167a8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80167ac:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80167b0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80167b4:	ee18 2a10 	vmov	r2, s16
 80167b8:	eeb0 8a47 	vmov.f32	s16, s14
 80167bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80167c0:	ee18 2a90 	vmov	r2, s17
 80167c4:	9333      	str	r3, [sp, #204]	; 0xcc
 80167c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80167c8:	eef0 8a67 	vmov.f32	s17, s15
 80167cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80167d0:	9334      	str	r3, [sp, #208]	; 0xd0
 80167d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80167d6:	3b01      	subs	r3, #1
 80167d8:	930c      	str	r3, [sp, #48]	; 0x30
 80167da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80167dc:	bf08      	it	eq
 80167de:	4613      	moveq	r3, r2
 80167e0:	9306      	str	r3, [sp, #24]
 80167e2:	e6e5      	b.n	80165b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80167e4:	1c54      	adds	r4, r2, #1
 80167e6:	d1ab      	bne.n	8016740 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80167e8:	9807      	ldr	r0, [sp, #28]
 80167ea:	4282      	cmp	r2, r0
 80167ec:	daa8      	bge.n	8016740 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80167ee:	1c58      	adds	r0, r3, #1
 80167f0:	dba6      	blt.n	8016740 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80167f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167f4:	4298      	cmp	r0, r3
 80167f6:	dda3      	ble.n	8016740 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80167f8:	9000      	str	r0, [sp, #0]
 80167fa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80167fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8016800:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8016804:	9b07      	ldr	r3, [sp, #28]
 8016806:	4651      	mov	r1, sl
 8016808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801680a:	f7ff fdd1 	bl	80163b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801680e:	e797      	b.n	8016740 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8016810:	1431      	asrs	r1, r6, #16
 8016812:	9c07      	ldr	r4, [sp, #28]
 8016814:	1428      	asrs	r0, r5, #16
 8016816:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801681a:	f3c6 3303 	ubfx	r3, r6, #12, #4
 801681e:	fb04 1000 	mla	r0, r4, r0, r1
 8016822:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016824:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016826:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801682a:	4401      	add	r1, r0
 801682c:	5c20      	ldrb	r0, [r4, r0]
 801682e:	f891 8002 	ldrb.w	r8, [r1, #2]
 8016832:	900e      	str	r0, [sp, #56]	; 0x38
 8016834:	f891 a003 	ldrb.w	sl, [r1, #3]
 8016838:	7848      	ldrb	r0, [r1, #1]
 801683a:	f891 9004 	ldrb.w	r9, [r1, #4]
 801683e:	f891 b005 	ldrb.w	fp, [r1, #5]
 8016842:	b172      	cbz	r2, 8016862 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8016844:	3105      	adds	r1, #5
 8016846:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016848:	190f      	adds	r7, r1, r4
 801684a:	5d09      	ldrb	r1, [r1, r4]
 801684c:	9115      	str	r1, [sp, #84]	; 0x54
 801684e:	7879      	ldrb	r1, [r7, #1]
 8016850:	9117      	str	r1, [sp, #92]	; 0x5c
 8016852:	78b9      	ldrb	r1, [r7, #2]
 8016854:	9119      	str	r1, [sp, #100]	; 0x64
 8016856:	78f9      	ldrb	r1, [r7, #3]
 8016858:	9116      	str	r1, [sp, #88]	; 0x58
 801685a:	7939      	ldrb	r1, [r7, #4]
 801685c:	9118      	str	r1, [sp, #96]	; 0x60
 801685e:	7979      	ldrb	r1, [r7, #5]
 8016860:	911a      	str	r1, [sp, #104]	; 0x68
 8016862:	b29b      	uxth	r3, r3
 8016864:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016866:	b292      	uxth	r2, r2
 8016868:	f10c 0c03 	add.w	ip, ip, #3
 801686c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016870:	fb03 f102 	mul.w	r1, r3, r2
 8016874:	011b      	lsls	r3, r3, #4
 8016876:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 801687a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801687e:	1a5b      	subs	r3, r3, r1
 8016880:	b292      	uxth	r2, r2
 8016882:	b29b      	uxth	r3, r3
 8016884:	1abf      	subs	r7, r7, r2
 8016886:	fb03 f909 	mul.w	r9, r3, r9
 801688a:	b2bf      	uxth	r7, r7
 801688c:	fb03 fa0a 	mul.w	sl, r3, sl
 8016890:	fb03 f30b 	mul.w	r3, r3, fp
 8016894:	fb07 9900 	mla	r9, r7, r0, r9
 8016898:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801689a:	fb07 aa04 	mla	sl, r7, r4, sl
 801689e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80168a0:	fb02 9900 	mla	r9, r2, r0, r9
 80168a4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80168a6:	fb07 3308 	mla	r3, r7, r8, r3
 80168aa:	fb01 9900 	mla	r9, r1, r0, r9
 80168ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80168b0:	fb02 aa04 	mla	sl, r2, r4, sl
 80168b4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80168b6:	fb02 3200 	mla	r2, r2, r0, r3
 80168ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80168bc:	fb01 aa04 	mla	sl, r1, r4, sl
 80168c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80168c4:	fb01 2103 	mla	r1, r1, r3, r2
 80168c8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80168ca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80168ce:	f80c 9c05 	strb.w	r9, [ip, #-5]
 80168d2:	1209      	asrs	r1, r1, #8
 80168d4:	441e      	add	r6, r3
 80168d6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80168d8:	f80c ac06 	strb.w	sl, [ip, #-6]
 80168dc:	f80c 1c04 	strb.w	r1, [ip, #-4]
 80168e0:	441d      	add	r5, r3
 80168e2:	e697      	b.n	8016614 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 80168e4:	b01d      	add	sp, #116	; 0x74
 80168e6:	ecbd 8b0a 	vpop	{d8-d12}
 80168ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080168f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80168f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f4:	b085      	sub	sp, #20
 80168f6:	7888      	ldrb	r0, [r1, #2]
 80168f8:	4691      	mov	r9, r2
 80168fa:	9000      	str	r0, [sp, #0]
 80168fc:	7848      	ldrb	r0, [r1, #1]
 80168fe:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8016902:	9001      	str	r0, [sp, #4]
 8016904:	7808      	ldrb	r0, [r1, #0]
 8016906:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801690a:	9002      	str	r0, [sp, #8]
 801690c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8016910:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8016914:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8016918:	fb04 c603 	mla	r6, r4, r3, ip
 801691c:	2c00      	cmp	r4, #0
 801691e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8016922:	9a00      	ldr	r2, [sp, #0]
 8016924:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8016928:	9a01      	ldr	r2, [sp, #4]
 801692a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801692e:	db3a      	blt.n	80169a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8016930:	45a0      	cmp	r8, r4
 8016932:	dd38      	ble.n	80169a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8016934:	f1bc 0f00 	cmp.w	ip, #0
 8016938:	db33      	blt.n	80169a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801693a:	4563      	cmp	r3, ip
 801693c:	dd31      	ble.n	80169a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801693e:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8016942:	f11c 0601 	adds.w	r6, ip, #1
 8016946:	d431      	bmi.n	80169ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8016948:	42b3      	cmp	r3, r6
 801694a:	dd2f      	ble.n	80169ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801694c:	b375      	cbz	r5, 80169ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801694e:	f8de 6004 	ldr.w	r6, [lr, #4]
 8016952:	3401      	adds	r4, #1
 8016954:	d42e      	bmi.n	80169b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8016956:	45a0      	cmp	r8, r4
 8016958:	dd2c      	ble.n	80169b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801695a:	b35f      	cbz	r7, 80169b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801695c:	f1bc 0f00 	cmp.w	ip, #0
 8016960:	db26      	blt.n	80169b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8016962:	4563      	cmp	r3, ip
 8016964:	dd24      	ble.n	80169b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8016966:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801696a:	f11c 0c01 	adds.w	ip, ip, #1
 801696e:	d405      	bmi.n	801697c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8016970:	4563      	cmp	r3, ip
 8016972:	dd03      	ble.n	801697c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8016974:	b115      	cbz	r5, 801697c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8016976:	3301      	adds	r3, #1
 8016978:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801697c:	2d0f      	cmp	r5, #15
 801697e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8016982:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8016986:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801698a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801698e:	d801      	bhi.n	8016994 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8016990:	2f0f      	cmp	r7, #15
 8016992:	d911      	bls.n	80169b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8016994:	4b80      	ldr	r3, [pc, #512]	; (8016b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8016996:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801699a:	4a80      	ldr	r2, [pc, #512]	; (8016b9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801699c:	4880      	ldr	r0, [pc, #512]	; (8016ba0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 801699e:	f002 f91f 	bl	8018be0 <__assert_func>
 80169a2:	4602      	mov	r2, r0
 80169a4:	e7cd      	b.n	8016942 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 80169a6:	4606      	mov	r6, r0
 80169a8:	4602      	mov	r2, r0
 80169aa:	e7d2      	b.n	8016952 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80169ac:	4606      	mov	r6, r0
 80169ae:	e7d0      	b.n	8016952 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80169b0:	4604      	mov	r4, r0
 80169b2:	e7da      	b.n	801696a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 80169b4:	4604      	mov	r4, r0
 80169b6:	e7e1      	b.n	801697c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80169b8:	b2ab      	uxth	r3, r5
 80169ba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80169be:	b2bf      	uxth	r7, r7
 80169c0:	fb03 fe07 	mul.w	lr, r3, r7
 80169c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80169c8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80169cc:	eba3 0c0e 	sub.w	ip, r3, lr
 80169d0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80169d4:	b2bf      	uxth	r7, r7
 80169d6:	fa1f fc8c 	uxth.w	ip, ip
 80169da:	eba5 0507 	sub.w	r5, r5, r7
 80169de:	fb0c f30a 	mul.w	r3, ip, sl
 80169e2:	b2ad      	uxth	r5, r5
 80169e4:	fb05 330b 	mla	r3, r5, fp, r3
 80169e8:	fb07 3309 	mla	r3, r7, r9, r3
 80169ec:	fb0e 3308 	mla	r3, lr, r8, r3
 80169f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80169f4:	9303      	str	r3, [sp, #12]
 80169f6:	d018      	beq.n	8016a2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 80169f8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80169fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016a00:	fb0b f303 	mul.w	r3, fp, r3
 8016a04:	fb0b fb02 	mul.w	fp, fp, r2
 8016a08:	0a1a      	lsrs	r2, r3, #8
 8016a0a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8016a0e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016a12:	441a      	add	r2, r3
 8016a14:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8016a18:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8016a1c:	0a12      	lsrs	r2, r2, #8
 8016a1e:	0a1b      	lsrs	r3, r3, #8
 8016a20:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016a24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016a28:	431a      	orrs	r2, r3
 8016a2a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8016a2e:	d019      	beq.n	8016a64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8016a30:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8016a34:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8016a38:	fb0a fb0b 	mul.w	fp, sl, fp
 8016a3c:	fb0a fa06 	mul.w	sl, sl, r6
 8016a40:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8016a44:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016a48:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8016a4c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8016a50:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8016a54:	445e      	add	r6, fp
 8016a56:	0a1b      	lsrs	r3, r3, #8
 8016a58:	0a36      	lsrs	r6, r6, #8
 8016a5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016a5e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8016a62:	431e      	orrs	r6, r3
 8016a64:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016a68:	d019      	beq.n	8016a9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8016a6a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8016a6e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8016a72:	fb09 fa0a 	mul.w	sl, r9, sl
 8016a76:	fb09 f904 	mul.w	r9, r9, r4
 8016a7a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8016a7e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016a82:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8016a86:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016a8a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8016a8e:	4454      	add	r4, sl
 8016a90:	0a1b      	lsrs	r3, r3, #8
 8016a92:	0a24      	lsrs	r4, r4, #8
 8016a94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016a98:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016a9c:	431c      	orrs	r4, r3
 8016a9e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8016aa2:	d019      	beq.n	8016ad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8016aa4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8016aa8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8016aac:	fb08 f909 	mul.w	r9, r8, r9
 8016ab0:	fb08 f800 	mul.w	r8, r8, r0
 8016ab4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8016ab8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8016abc:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8016ac0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8016ac4:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8016ac8:	4448      	add	r0, r9
 8016aca:	0a1b      	lsrs	r3, r3, #8
 8016acc:	0a00      	lsrs	r0, r0, #8
 8016ace:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016ad2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8016ad6:	4318      	orrs	r0, r3
 8016ad8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8016adc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8016ae0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8016ae4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016ae8:	fb0c f808 	mul.w	r8, ip, r8
 8016aec:	fb0c f606 	mul.w	r6, ip, r6
 8016af0:	fb05 8803 	mla	r8, r5, r3, r8
 8016af4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8016af8:	fb05 6202 	mla	r2, r5, r2, r6
 8016afc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8016b00:	fb07 8803 	mla	r8, r7, r3, r8
 8016b04:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8016b08:	fb07 2704 	mla	r7, r7, r4, r2
 8016b0c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8016b10:	fb0e 8303 	mla	r3, lr, r3, r8
 8016b14:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8016b18:	fb0e 7e00 	mla	lr, lr, r0, r7
 8016b1c:	9803      	ldr	r0, [sp, #12]
 8016b1e:	b292      	uxth	r2, r2
 8016b20:	9c02      	ldr	r4, [sp, #8]
 8016b22:	0a1b      	lsrs	r3, r3, #8
 8016b24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016b28:	4350      	muls	r0, r2
 8016b2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016b2e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8016b32:	ea43 0e0e 	orr.w	lr, r3, lr
 8016b36:	1c43      	adds	r3, r0, #1
 8016b38:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016b3c:	fa5f f08e 	uxtb.w	r0, lr
 8016b40:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8016b44:	b2db      	uxtb	r3, r3
 8016b46:	fb14 f403 	smulbb	r4, r4, r3
 8016b4a:	fb00 4002 	mla	r0, r0, r2, r4
 8016b4e:	b280      	uxth	r0, r0
 8016b50:	1c44      	adds	r4, r0, #1
 8016b52:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8016b56:	9c01      	ldr	r4, [sp, #4]
 8016b58:	fb14 f403 	smulbb	r4, r4, r3
 8016b5c:	1200      	asrs	r0, r0, #8
 8016b5e:	7008      	strb	r0, [r1, #0]
 8016b60:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8016b64:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8016b68:	fb00 4002 	mla	r0, r0, r2, r4
 8016b6c:	b280      	uxth	r0, r0
 8016b6e:	1c44      	adds	r4, r0, #1
 8016b70:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8016b74:	1200      	asrs	r0, r0, #8
 8016b76:	7048      	strb	r0, [r1, #1]
 8016b78:	9800      	ldr	r0, [sp, #0]
 8016b7a:	fb10 f303 	smulbb	r3, r0, r3
 8016b7e:	fb0e 3202 	mla	r2, lr, r2, r3
 8016b82:	b292      	uxth	r2, r2
 8016b84:	f102 0e01 	add.w	lr, r2, #1
 8016b88:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8016b8c:	1212      	asrs	r2, r2, #8
 8016b8e:	708a      	strb	r2, [r1, #2]
 8016b90:	b005      	add	sp, #20
 8016b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b96:	bf00      	nop
 8016b98:	0801c5d4 	.word	0x0801c5d4
 8016b9c:	0801caca 	.word	0x0801caca
 8016ba0:	0801c69d 	.word	0x0801c69d

08016ba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ba8:	ed2d 8b08 	vpush	{d8-d11}
 8016bac:	b099      	sub	sp, #100	; 0x64
 8016bae:	eeb0 aa40 	vmov.f32	s20, s0
 8016bb2:	eef0 9a60 	vmov.f32	s19, s1
 8016bb6:	9306      	str	r3, [sp, #24]
 8016bb8:	eeb0 9a41 	vmov.f32	s18, s2
 8016bbc:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8016bc0:	eeb0 8a62 	vmov.f32	s16, s5
 8016bc4:	9216      	str	r2, [sp, #88]	; 0x58
 8016bc6:	eef0 8a43 	vmov.f32	s17, s6
 8016bca:	9307      	str	r3, [sp, #28]
 8016bcc:	eef0 ba44 	vmov.f32	s23, s8
 8016bd0:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8016bd4:	eeb0 ba64 	vmov.f32	s22, s9
 8016bd8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016bda:	eef0 aa45 	vmov.f32	s21, s10
 8016bde:	9310      	str	r3, [sp, #64]	; 0x40
 8016be0:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8016be4:	9017      	str	r0, [sp, #92]	; 0x5c
 8016be6:	9112      	str	r1, [sp, #72]	; 0x48
 8016be8:	6850      	ldr	r0, [r2, #4]
 8016bea:	9315      	str	r3, [sp, #84]	; 0x54
 8016bec:	6812      	ldr	r2, [r2, #0]
 8016bee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8016bf0:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8016bf4:	fb00 1303 	mla	r3, r0, r3, r1
 8016bf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016bfc:	18d3      	adds	r3, r2, r3
 8016bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8016c00:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	9311      	str	r3, [sp, #68]	; 0x44
 8016c06:	9b07      	ldr	r3, [sp, #28]
 8016c08:	009b      	lsls	r3, r3, #2
 8016c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8016c0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	dc03      	bgt.n	8016c1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8016c12:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	f340 833b 	ble.w	8017290 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8016c1a:	9b06      	ldr	r3, [sp, #24]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	f340 8197 	ble.w	8016f50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8016c22:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8016c24:	1423      	asrs	r3, r4, #16
 8016c26:	1412      	asrs	r2, r2, #16
 8016c28:	d432      	bmi.n	8016c90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8016c2a:	1c51      	adds	r1, r2, #1
 8016c2c:	9807      	ldr	r0, [sp, #28]
 8016c2e:	4288      	cmp	r0, r1
 8016c30:	dd31      	ble.n	8016c96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	db2f      	blt.n	8016c96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8016c36:	1c59      	adds	r1, r3, #1
 8016c38:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016c3a:	4288      	cmp	r0, r1
 8016c3c:	dd2b      	ble.n	8016c96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8016c3e:	9b06      	ldr	r3, [sp, #24]
 8016c40:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8016c42:	3b01      	subs	r3, #1
 8016c44:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016c46:	fb02 1203 	mla	r2, r2, r3, r1
 8016c4a:	1412      	asrs	r2, r2, #16
 8016c4c:	d42e      	bmi.n	8016cac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8016c4e:	3201      	adds	r2, #1
 8016c50:	9907      	ldr	r1, [sp, #28]
 8016c52:	4291      	cmp	r1, r2
 8016c54:	dd2a      	ble.n	8016cac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8016c56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016c58:	fb02 4303 	mla	r3, r2, r3, r4
 8016c5c:	141b      	asrs	r3, r3, #16
 8016c5e:	d425      	bmi.n	8016cac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8016c60:	3301      	adds	r3, #1
 8016c62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016c64:	429a      	cmp	r2, r3
 8016c66:	dd21      	ble.n	8016cac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8016c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c6a:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8016c6e:	f103 0e03 	add.w	lr, r3, #3
 8016c72:	9b06      	ldr	r3, [sp, #24]
 8016c74:	9313      	str	r3, [sp, #76]	; 0x4c
 8016c76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	f300 81d2 	bgt.w	8017022 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8016c7e:	9b06      	ldr	r3, [sp, #24]
 8016c80:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8016c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c86:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016c8a:	4423      	add	r3, r4
 8016c8c:	930a      	str	r3, [sp, #40]	; 0x28
 8016c8e:	e161      	b.n	8016f54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8016c90:	1c51      	adds	r1, r2, #1
 8016c92:	f040 8150 	bne.w	8016f36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8016c96:	9907      	ldr	r1, [sp, #28]
 8016c98:	428a      	cmp	r2, r1
 8016c9a:	f280 814c 	bge.w	8016f36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8016c9e:	1c5a      	adds	r2, r3, #1
 8016ca0:	f2c0 8149 	blt.w	8016f36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8016ca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016ca6:	4293      	cmp	r3, r2
 8016ca8:	f280 8145 	bge.w	8016f36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8016cac:	9b06      	ldr	r3, [sp, #24]
 8016cae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016cb0:	9314      	str	r3, [sp, #80]	; 0x50
 8016cb2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016cb6:	9313      	str	r3, [sp, #76]	; 0x4c
 8016cb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	dddf      	ble.n	8016c7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8016cbe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8016cc0:	1423      	asrs	r3, r4, #16
 8016cc2:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8016cc6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8016cca:	1412      	asrs	r2, r2, #16
 8016ccc:	f100 8190 	bmi.w	8016ff0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8016cd0:	1c55      	adds	r5, r2, #1
 8016cd2:	9f07      	ldr	r7, [sp, #28]
 8016cd4:	42af      	cmp	r7, r5
 8016cd6:	f340 818d 	ble.w	8016ff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	f2c0 818a 	blt.w	8016ff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8016ce0:	1c5d      	adds	r5, r3, #1
 8016ce2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016ce4:	42af      	cmp	r7, r5
 8016ce6:	f340 8185 	ble.w	8016ff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8016cea:	9d07      	ldr	r5, [sp, #28]
 8016cec:	fb03 2305 	mla	r3, r3, r5, r2
 8016cf0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016cf2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8016cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016cfa:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8016cfe:	2800      	cmp	r0, #0
 8016d00:	f000 8167 	beq.w	8016fd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8016d04:	686a      	ldr	r2, [r5, #4]
 8016d06:	920b      	str	r2, [sp, #44]	; 0x2c
 8016d08:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8016d0c:	2900      	cmp	r1, #0
 8016d0e:	f000 8169 	beq.w	8016fe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8016d12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d14:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8016d16:	18aa      	adds	r2, r5, r2
 8016d18:	59ed      	ldr	r5, [r5, r7]
 8016d1a:	6852      	ldr	r2, [r2, #4]
 8016d1c:	9508      	str	r5, [sp, #32]
 8016d1e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8016d22:	0e15      	lsrs	r5, r2, #24
 8016d24:	920c      	str	r2, [sp, #48]	; 0x30
 8016d26:	b280      	uxth	r0, r0
 8016d28:	b289      	uxth	r1, r1
 8016d2a:	fb00 fb01 	mul.w	fp, r0, r1
 8016d2e:	0100      	lsls	r0, r0, #4
 8016d30:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8016d34:	eba0 090b 	sub.w	r9, r0, fp
 8016d38:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8016d3c:	b289      	uxth	r1, r1
 8016d3e:	fa1f f989 	uxth.w	r9, r9
 8016d42:	1a52      	subs	r2, r2, r1
 8016d44:	fb09 f008 	mul.w	r0, r9, r8
 8016d48:	b292      	uxth	r2, r2
 8016d4a:	fb02 000c 	mla	r0, r2, ip, r0
 8016d4e:	fb01 000a 	mla	r0, r1, sl, r0
 8016d52:	fb0b 0005 	mla	r0, fp, r5, r0
 8016d56:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016d5a:	2800      	cmp	r0, #0
 8016d5c:	f000 80e0 	beq.w	8016f20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8016d60:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8016d64:	d01b      	beq.n	8016d9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8016d66:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8016d6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016d6e:	fb0c fe0e 	mul.w	lr, ip, lr
 8016d72:	fb0c fc03 	mul.w	ip, ip, r3
 8016d76:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8016d7a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8016d7e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016d82:	4473      	add	r3, lr
 8016d84:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8016d88:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8016d8c:	0a1b      	lsrs	r3, r3, #8
 8016d8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016d92:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016d96:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8016d9a:	ea43 030e 	orr.w	r3, r3, lr
 8016d9e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8016da2:	d01e      	beq.n	8016de2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8016da4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8016da6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8016daa:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8016dae:	fb08 fc0c 	mul.w	ip, r8, ip
 8016db2:	fb08 f80e 	mul.w	r8, r8, lr
 8016db6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016dba:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016dbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016dc2:	44e6      	add	lr, ip
 8016dc4:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8016dc8:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8016dcc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016dd0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8016dd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016dd8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8016ddc:	ea4e 0708 	orr.w	r7, lr, r8
 8016de0:	970b      	str	r7, [sp, #44]	; 0x2c
 8016de2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8016de6:	d01e      	beq.n	8016e26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8016de8:	9f08      	ldr	r7, [sp, #32]
 8016dea:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8016dee:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8016df2:	fb0a f808 	mul.w	r8, sl, r8
 8016df6:	fb0a fa0c 	mul.w	sl, sl, ip
 8016dfa:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8016dfe:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8016e02:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016e06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016e0a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016e0e:	44c6      	add	lr, r8
 8016e10:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016e14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016e18:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016e1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016e20:	ea4e 070a 	orr.w	r7, lr, sl
 8016e24:	9708      	str	r7, [sp, #32]
 8016e26:	2dff      	cmp	r5, #255	; 0xff
 8016e28:	d01d      	beq.n	8016e66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8016e2a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016e2c:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8016e30:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8016e34:	fb05 f808 	mul.w	r8, r5, r8
 8016e38:	fb05 f50c 	mul.w	r5, r5, ip
 8016e3c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8016e40:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8016e44:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8016e48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016e4c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8016e50:	44c6      	add	lr, r8
 8016e52:	0a2d      	lsrs	r5, r5, #8
 8016e54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016e58:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8016e5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016e60:	ea4e 0505 	orr.w	r5, lr, r5
 8016e64:	950c      	str	r5, [sp, #48]	; 0x30
 8016e66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016e68:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8016e6c:	9f08      	ldr	r7, [sp, #32]
 8016e6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016e72:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8016e76:	fb09 f505 	mul.w	r5, r9, r5
 8016e7a:	fb02 550c 	mla	r5, r2, ip, r5
 8016e7e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8016e82:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016e84:	fb01 550c 	mla	r5, r1, ip, r5
 8016e88:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8016e8c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8016e8e:	fb0b 550c 	mla	r5, fp, ip, r5
 8016e92:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8016e96:	fb09 f90c 	mul.w	r9, r9, ip
 8016e9a:	0a2d      	lsrs	r5, r5, #8
 8016e9c:	fb02 9303 	mla	r3, r2, r3, r9
 8016ea0:	9a08      	ldr	r2, [sp, #32]
 8016ea2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8016ea6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8016eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016eac:	fb01 330e 	mla	r3, r1, lr, r3
 8016eb0:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8016eb4:	fb0b 3b01 	mla	fp, fp, r1, r3
 8016eb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016eba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016ebc:	4343      	muls	r3, r0
 8016ebe:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8016ec2:	1c58      	adds	r0, r3, #1
 8016ec4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8016ec8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016ecc:	ea45 050b 	orr.w	r5, r5, fp
 8016ed0:	7833      	ldrb	r3, [r6, #0]
 8016ed2:	b2ea      	uxtb	r2, r5
 8016ed4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8016ed8:	fb12 f201 	smulbb	r2, r2, r1
 8016edc:	b2c0      	uxtb	r0, r0
 8016ede:	fb03 2300 	mla	r3, r3, r0, r2
 8016ee2:	b29b      	uxth	r3, r3
 8016ee4:	1c5a      	adds	r2, r3, #1
 8016ee6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016eea:	7872      	ldrb	r2, [r6, #1]
 8016eec:	fb12 f200 	smulbb	r2, r2, r0
 8016ef0:	121b      	asrs	r3, r3, #8
 8016ef2:	7033      	strb	r3, [r6, #0]
 8016ef4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8016ef8:	0c2d      	lsrs	r5, r5, #16
 8016efa:	fb03 2301 	mla	r3, r3, r1, r2
 8016efe:	b29b      	uxth	r3, r3
 8016f00:	1c5a      	adds	r2, r3, #1
 8016f02:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016f06:	121b      	asrs	r3, r3, #8
 8016f08:	7073      	strb	r3, [r6, #1]
 8016f0a:	78b3      	ldrb	r3, [r6, #2]
 8016f0c:	fb13 f000 	smulbb	r0, r3, r0
 8016f10:	fb05 0501 	mla	r5, r5, r1, r0
 8016f14:	b2ad      	uxth	r5, r5
 8016f16:	1c6b      	adds	r3, r5, #1
 8016f18:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8016f1c:	122d      	asrs	r5, r5, #8
 8016f1e:	70b5      	strb	r5, [r6, #2]
 8016f20:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8016f22:	3603      	adds	r6, #3
 8016f24:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8016f26:	4413      	add	r3, r2
 8016f28:	932b      	str	r3, [sp, #172]	; 0xac
 8016f2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016f2c:	441c      	add	r4, r3
 8016f2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016f30:	3b01      	subs	r3, #1
 8016f32:	9314      	str	r3, [sp, #80]	; 0x50
 8016f34:	e6c0      	b.n	8016cb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8016f36:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8016f38:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8016f3a:	4413      	add	r3, r2
 8016f3c:	932b      	str	r3, [sp, #172]	; 0xac
 8016f3e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016f40:	441c      	add	r4, r3
 8016f42:	9b06      	ldr	r3, [sp, #24]
 8016f44:	3b01      	subs	r3, #1
 8016f46:	9306      	str	r3, [sp, #24]
 8016f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f4a:	3303      	adds	r3, #3
 8016f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8016f4e:	e664      	b.n	8016c1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8016f50:	f47f ae75 	bne.w	8016c3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8016f54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	f340 819a 	ble.w	8017290 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8016f5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016f60:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016f62:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016f66:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8016f6a:	eef0 6a48 	vmov.f32	s13, s16
 8016f6e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016f72:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8016f76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016f7a:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8016f7e:	eef0 6a68 	vmov.f32	s13, s17
 8016f82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016f86:	ee16 4a90 	vmov	r4, s13
 8016f8a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016f8e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016f92:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016f96:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016f9a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016f9e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016fa2:	ee18 2a10 	vmov	r2, s16
 8016fa6:	eeb0 8a47 	vmov.f32	s16, s14
 8016faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8016fae:	ee18 2a90 	vmov	r2, s17
 8016fb2:	932d      	str	r3, [sp, #180]	; 0xb4
 8016fb4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016fb6:	eef0 8a67 	vmov.f32	s17, s15
 8016fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8016fbe:	932e      	str	r3, [sp, #184]	; 0xb8
 8016fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016fc2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016fc4:	3b01      	subs	r3, #1
 8016fc6:	9312      	str	r3, [sp, #72]	; 0x48
 8016fc8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016fca:	bf08      	it	eq
 8016fcc:	4613      	moveq	r3, r2
 8016fce:	9306      	str	r3, [sp, #24]
 8016fd0:	e61c      	b.n	8016c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8016fd2:	b151      	cbz	r1, 8016fea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8016fd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016fd6:	58aa      	ldr	r2, [r5, r2]
 8016fd8:	25ff      	movs	r5, #255	; 0xff
 8016fda:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8016fde:	9208      	str	r2, [sp, #32]
 8016fe0:	46a8      	mov	r8, r5
 8016fe2:	e6a0      	b.n	8016d26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8016fe4:	25ff      	movs	r5, #255	; 0xff
 8016fe6:	46aa      	mov	sl, r5
 8016fe8:	e69d      	b.n	8016d26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8016fea:	25ff      	movs	r5, #255	; 0xff
 8016fec:	46aa      	mov	sl, r5
 8016fee:	e7f7      	b.n	8016fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8016ff0:	1c57      	adds	r7, r2, #1
 8016ff2:	d195      	bne.n	8016f20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8016ff4:	9d07      	ldr	r5, [sp, #28]
 8016ff6:	4295      	cmp	r5, r2
 8016ff8:	dd92      	ble.n	8016f20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8016ffa:	1c5d      	adds	r5, r3, #1
 8016ffc:	db90      	blt.n	8016f20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8016ffe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8017000:	429d      	cmp	r5, r3
 8017002:	dd8d      	ble.n	8016f20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8017004:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8017006:	9201      	str	r2, [sp, #4]
 8017008:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801700a:	e9cd 3002 	strd	r3, r0, [sp, #8]
 801700e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017010:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017012:	9300      	str	r3, [sp, #0]
 8017014:	9b07      	ldr	r3, [sp, #28]
 8017016:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801701a:	4631      	mov	r1, r6
 801701c:	f7ff fc68 	bl	80168f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8017020:	e77e      	b.n	8016f20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8017022:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017024:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8017028:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801702a:	9d07      	ldr	r5, [sp, #28]
 801702c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8017030:	1412      	asrs	r2, r2, #16
 8017032:	1423      	asrs	r3, r4, #16
 8017034:	fb05 2303 	mla	r3, r5, r3, r2
 8017038:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801703a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801703e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017042:	0e1e      	lsrs	r6, r3, #24
 8017044:	2900      	cmp	r1, #0
 8017046:	f000 8114 	beq.w	8017272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 801704a:	686a      	ldr	r2, [r5, #4]
 801704c:	920d      	str	r2, [sp, #52]	; 0x34
 801704e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8017052:	2800      	cmp	r0, #0
 8017054:	f000 8116 	beq.w	8017284 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8017058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801705a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801705c:	18aa      	adds	r2, r5, r2
 801705e:	59ed      	ldr	r5, [r5, r7]
 8017060:	6852      	ldr	r2, [r2, #4]
 8017062:	9509      	str	r5, [sp, #36]	; 0x24
 8017064:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8017068:	0e15      	lsrs	r5, r2, #24
 801706a:	920f      	str	r2, [sp, #60]	; 0x3c
 801706c:	b289      	uxth	r1, r1
 801706e:	b280      	uxth	r0, r0
 8017070:	fb01 fa00 	mul.w	sl, r1, r0
 8017074:	0109      	lsls	r1, r1, #4
 8017076:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801707a:	eba1 080a 	sub.w	r8, r1, sl
 801707e:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8017082:	b280      	uxth	r0, r0
 8017084:	fa1f f888 	uxth.w	r8, r8
 8017088:	1a12      	subs	r2, r2, r0
 801708a:	fb08 f10c 	mul.w	r1, r8, ip
 801708e:	b292      	uxth	r2, r2
 8017090:	fb02 1106 	mla	r1, r2, r6, r1
 8017094:	fb00 1109 	mla	r1, r0, r9, r1
 8017098:	fb0a 1105 	mla	r1, sl, r5, r1
 801709c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80170a0:	2900      	cmp	r1, #0
 80170a2:	f000 80da 	beq.w	801725a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80170a6:	2eff      	cmp	r6, #255	; 0xff
 80170a8:	d016      	beq.n	80170d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80170aa:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80170ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80170b2:	4377      	muls	r7, r6
 80170b4:	435e      	muls	r6, r3
 80170b6:	0a3b      	lsrs	r3, r7, #8
 80170b8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80170bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80170c0:	443b      	add	r3, r7
 80170c2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80170c6:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80170ca:	0a1b      	lsrs	r3, r3, #8
 80170cc:	0a3f      	lsrs	r7, r7, #8
 80170ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80170d2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80170d6:	433b      	orrs	r3, r7
 80170d8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80170dc:	d01d      	beq.n	801711a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 80170de:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80170e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80170e2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80170e6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80170ea:	fb0c f606 	mul.w	r6, ip, r6
 80170ee:	fb0c fc07 	mul.w	ip, ip, r7
 80170f2:	0a37      	lsrs	r7, r6, #8
 80170f4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80170f8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80170fc:	4437      	add	r7, r6
 80170fe:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8017102:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8017106:	0a3f      	lsrs	r7, r7, #8
 8017108:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801710c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017110:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017114:	ea47 060c 	orr.w	r6, r7, ip
 8017118:	960d      	str	r6, [sp, #52]	; 0x34
 801711a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801711e:	d01d      	beq.n	801715c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8017120:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017122:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8017126:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801712a:	fb09 fc0c 	mul.w	ip, r9, ip
 801712e:	fb09 f906 	mul.w	r9, r9, r6
 8017132:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8017136:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801713a:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801713e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017142:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8017146:	4467      	add	r7, ip
 8017148:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801714c:	0a3f      	lsrs	r7, r7, #8
 801714e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017152:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017156:	ea47 0609 	orr.w	r6, r7, r9
 801715a:	9609      	str	r6, [sp, #36]	; 0x24
 801715c:	2dff      	cmp	r5, #255	; 0xff
 801715e:	d01a      	beq.n	8017196 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8017160:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8017162:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8017166:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801716a:	fb05 fc0c 	mul.w	ip, r5, ip
 801716e:	4375      	muls	r5, r6
 8017170:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8017174:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017178:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801717c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017180:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8017184:	4467      	add	r7, ip
 8017186:	0a2d      	lsrs	r5, r5, #8
 8017188:	0a3f      	lsrs	r7, r7, #8
 801718a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801718e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017192:	433d      	orrs	r5, r7
 8017194:	950f      	str	r5, [sp, #60]	; 0x3c
 8017196:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017198:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801719c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80171a0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80171a4:	fb08 f505 	mul.w	r5, r8, r5
 80171a8:	fb02 5506 	mla	r5, r2, r6, r5
 80171ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80171ae:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80171b2:	fb00 5506 	mla	r5, r0, r6, r5
 80171b6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80171b8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80171bc:	fb0a 5506 	mla	r5, sl, r6, r5
 80171c0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80171c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80171c6:	0a2d      	lsrs	r5, r5, #8
 80171c8:	fb08 f806 	mul.w	r8, r8, r6
 80171cc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80171d0:	fb02 8303 	mla	r3, r2, r3, r8
 80171d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171d6:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80171da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80171dc:	fb00 3307 	mla	r3, r0, r7, r3
 80171e0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80171e4:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80171e8:	fb01 f30b 	mul.w	r3, r1, fp
 80171ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80171f0:	1c59      	adds	r1, r3, #1
 80171f2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80171f6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80171fa:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80171fe:	ea45 050c 	orr.w	r5, r5, ip
 8017202:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8017206:	b2ea      	uxtb	r2, r5
 8017208:	b2c9      	uxtb	r1, r1
 801720a:	fb12 f20b 	smulbb	r2, r2, fp
 801720e:	fb03 2301 	mla	r3, r3, r1, r2
 8017212:	b29b      	uxth	r3, r3
 8017214:	1c5a      	adds	r2, r3, #1
 8017216:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801721a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801721e:	fb12 f201 	smulbb	r2, r2, r1
 8017222:	121b      	asrs	r3, r3, #8
 8017224:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8017228:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801722c:	0c2d      	lsrs	r5, r5, #16
 801722e:	fb03 230b 	mla	r3, r3, fp, r2
 8017232:	b29b      	uxth	r3, r3
 8017234:	1c5a      	adds	r2, r3, #1
 8017236:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801723a:	121b      	asrs	r3, r3, #8
 801723c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8017240:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8017244:	fb13 f101 	smulbb	r1, r3, r1
 8017248:	fb05 150b 	mla	r5, r5, fp, r1
 801724c:	b2ad      	uxth	r5, r5
 801724e:	1c69      	adds	r1, r5, #1
 8017250:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8017254:	122d      	asrs	r5, r5, #8
 8017256:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801725a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801725c:	f10e 0e03 	add.w	lr, lr, #3
 8017260:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017262:	4413      	add	r3, r2
 8017264:	932b      	str	r3, [sp, #172]	; 0xac
 8017266:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017268:	441c      	add	r4, r3
 801726a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801726c:	3b01      	subs	r3, #1
 801726e:	9313      	str	r3, [sp, #76]	; 0x4c
 8017270:	e501      	b.n	8016c76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8017272:	b150      	cbz	r0, 801728a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8017274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017276:	58aa      	ldr	r2, [r5, r2]
 8017278:	25ff      	movs	r5, #255	; 0xff
 801727a:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801727e:	9209      	str	r2, [sp, #36]	; 0x24
 8017280:	46ac      	mov	ip, r5
 8017282:	e6f3      	b.n	801706c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8017284:	25ff      	movs	r5, #255	; 0xff
 8017286:	46a9      	mov	r9, r5
 8017288:	e6f0      	b.n	801706c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 801728a:	25ff      	movs	r5, #255	; 0xff
 801728c:	46a9      	mov	r9, r5
 801728e:	e7f7      	b.n	8017280 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8017290:	b019      	add	sp, #100	; 0x64
 8017292:	ecbd 8b08 	vpop	{d8-d11}
 8017296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801729c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801729c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172a0:	b085      	sub	sp, #20
 80172a2:	7888      	ldrb	r0, [r1, #2]
 80172a4:	4691      	mov	r9, r2
 80172a6:	9000      	str	r0, [sp, #0]
 80172a8:	7848      	ldrb	r0, [r1, #1]
 80172aa:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80172ae:	9001      	str	r0, [sp, #4]
 80172b0:	7808      	ldrb	r0, [r1, #0]
 80172b2:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80172b6:	9002      	str	r0, [sp, #8]
 80172b8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80172bc:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80172c0:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80172c4:	fb04 c603 	mla	r6, r4, r3, ip
 80172c8:	2c00      	cmp	r4, #0
 80172ca:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80172ce:	9a00      	ldr	r2, [sp, #0]
 80172d0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80172d4:	9a01      	ldr	r2, [sp, #4]
 80172d6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80172da:	db3a      	blt.n	8017352 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80172dc:	45a0      	cmp	r8, r4
 80172de:	dd38      	ble.n	8017352 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80172e0:	f1bc 0f00 	cmp.w	ip, #0
 80172e4:	db33      	blt.n	801734e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80172e6:	4563      	cmp	r3, ip
 80172e8:	dd31      	ble.n	801734e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80172ea:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80172ee:	f11c 0601 	adds.w	r6, ip, #1
 80172f2:	d431      	bmi.n	8017358 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80172f4:	42b3      	cmp	r3, r6
 80172f6:	dd2f      	ble.n	8017358 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80172f8:	b375      	cbz	r5, 8017358 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80172fa:	f8de 6004 	ldr.w	r6, [lr, #4]
 80172fe:	3401      	adds	r4, #1
 8017300:	d42e      	bmi.n	8017360 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8017302:	45a0      	cmp	r8, r4
 8017304:	dd2c      	ble.n	8017360 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8017306:	b35f      	cbz	r7, 8017360 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8017308:	f1bc 0f00 	cmp.w	ip, #0
 801730c:	db26      	blt.n	801735c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 801730e:	4563      	cmp	r3, ip
 8017310:	dd24      	ble.n	801735c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8017312:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8017316:	f11c 0c01 	adds.w	ip, ip, #1
 801731a:	d405      	bmi.n	8017328 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801731c:	4563      	cmp	r3, ip
 801731e:	dd03      	ble.n	8017328 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8017320:	b115      	cbz	r5, 8017328 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8017322:	3301      	adds	r3, #1
 8017324:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8017328:	2d0f      	cmp	r5, #15
 801732a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801732e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8017332:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8017336:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801733a:	d801      	bhi.n	8017340 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 801733c:	2f0f      	cmp	r7, #15
 801733e:	d911      	bls.n	8017364 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8017340:	4b77      	ldr	r3, [pc, #476]	; (8017520 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8017342:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8017346:	4a77      	ldr	r2, [pc, #476]	; (8017524 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8017348:	4877      	ldr	r0, [pc, #476]	; (8017528 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 801734a:	f001 fc49 	bl	8018be0 <__assert_func>
 801734e:	4602      	mov	r2, r0
 8017350:	e7cd      	b.n	80172ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8017352:	4606      	mov	r6, r0
 8017354:	4602      	mov	r2, r0
 8017356:	e7d2      	b.n	80172fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8017358:	4606      	mov	r6, r0
 801735a:	e7d0      	b.n	80172fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 801735c:	4604      	mov	r4, r0
 801735e:	e7da      	b.n	8017316 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8017360:	4604      	mov	r4, r0
 8017362:	e7e1      	b.n	8017328 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8017364:	b2ab      	uxth	r3, r5
 8017366:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801736a:	b2bf      	uxth	r7, r7
 801736c:	fb03 fe07 	mul.w	lr, r3, r7
 8017370:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8017374:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8017378:	eba3 0c0e 	sub.w	ip, r3, lr
 801737c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8017380:	b2bf      	uxth	r7, r7
 8017382:	fa1f fc8c 	uxth.w	ip, ip
 8017386:	eba5 0507 	sub.w	r5, r5, r7
 801738a:	fb0c f30a 	mul.w	r3, ip, sl
 801738e:	b2ad      	uxth	r5, r5
 8017390:	fb05 330b 	mla	r3, r5, fp, r3
 8017394:	fb07 3309 	mla	r3, r7, r9, r3
 8017398:	fb0e 3308 	mla	r3, lr, r8, r3
 801739c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80173a0:	9303      	str	r3, [sp, #12]
 80173a2:	d018      	beq.n	80173d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80173a4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80173a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80173ac:	fb0b f303 	mul.w	r3, fp, r3
 80173b0:	fb0b fb02 	mul.w	fp, fp, r2
 80173b4:	0a1a      	lsrs	r2, r3, #8
 80173b6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80173ba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80173be:	441a      	add	r2, r3
 80173c0:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80173c4:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80173c8:	0a12      	lsrs	r2, r2, #8
 80173ca:	0a1b      	lsrs	r3, r3, #8
 80173cc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80173d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80173d4:	431a      	orrs	r2, r3
 80173d6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80173da:	d019      	beq.n	8017410 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 80173dc:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80173e0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80173e4:	fb0a fb0b 	mul.w	fp, sl, fp
 80173e8:	fb0a fa06 	mul.w	sl, sl, r6
 80173ec:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80173f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80173f4:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80173f8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80173fc:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8017400:	445e      	add	r6, fp
 8017402:	0a1b      	lsrs	r3, r3, #8
 8017404:	0a36      	lsrs	r6, r6, #8
 8017406:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801740a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801740e:	431e      	orrs	r6, r3
 8017410:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017414:	d019      	beq.n	801744a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8017416:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801741a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801741e:	fb09 fa0a 	mul.w	sl, r9, sl
 8017422:	fb09 f904 	mul.w	r9, r9, r4
 8017426:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801742a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801742e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8017432:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017436:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801743a:	4454      	add	r4, sl
 801743c:	0a1b      	lsrs	r3, r3, #8
 801743e:	0a24      	lsrs	r4, r4, #8
 8017440:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017444:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017448:	431c      	orrs	r4, r3
 801744a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801744e:	d019      	beq.n	8017484 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8017450:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8017454:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8017458:	fb08 f909 	mul.w	r9, r8, r9
 801745c:	fb08 f800 	mul.w	r8, r8, r0
 8017460:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8017464:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8017468:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801746c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017470:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8017474:	4448      	add	r0, r9
 8017476:	0a1b      	lsrs	r3, r3, #8
 8017478:	0a00      	lsrs	r0, r0, #8
 801747a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801747e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017482:	4318      	orrs	r0, r3
 8017484:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8017488:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801748c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8017490:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017494:	fb0c f808 	mul.w	r8, ip, r8
 8017498:	fb0c f606 	mul.w	r6, ip, r6
 801749c:	fb05 8803 	mla	r8, r5, r3, r8
 80174a0:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80174a4:	fb05 6202 	mla	r2, r5, r2, r6
 80174a8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80174ac:	fb07 8803 	mla	r8, r7, r3, r8
 80174b0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80174b4:	fb07 2704 	mla	r7, r7, r4, r2
 80174b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80174bc:	fb0e 8303 	mla	r3, lr, r3, r8
 80174c0:	fb0e 7e00 	mla	lr, lr, r0, r7
 80174c4:	9802      	ldr	r0, [sp, #8]
 80174c6:	0a1b      	lsrs	r3, r3, #8
 80174c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80174cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80174d0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80174d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80174d8:	9b03      	ldr	r3, [sp, #12]
 80174da:	43db      	mvns	r3, r3
 80174dc:	b2db      	uxtb	r3, r3
 80174de:	4358      	muls	r0, r3
 80174e0:	1c42      	adds	r2, r0, #1
 80174e2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80174e6:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80174ea:	700a      	strb	r2, [r1, #0]
 80174ec:	9a01      	ldr	r2, [sp, #4]
 80174ee:	435a      	muls	r2, r3
 80174f0:	1c50      	adds	r0, r2, #1
 80174f2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80174f6:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80174fa:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80174fe:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8017502:	704a      	strb	r2, [r1, #1]
 8017504:	9a00      	ldr	r2, [sp, #0]
 8017506:	435a      	muls	r2, r3
 8017508:	4613      	mov	r3, r2
 801750a:	3201      	adds	r2, #1
 801750c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017510:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8017514:	f881 e002 	strb.w	lr, [r1, #2]
 8017518:	b005      	add	sp, #20
 801751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801751e:	bf00      	nop
 8017520:	0801c5d4 	.word	0x0801c5d4
 8017524:	0801caca 	.word	0x0801caca
 8017528:	0801c69d 	.word	0x0801c69d

0801752c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017530:	ed2d 8b08 	vpush	{d8-d11}
 8017534:	b097      	sub	sp, #92	; 0x5c
 8017536:	eeb0 aa40 	vmov.f32	s20, s0
 801753a:	eef0 9a60 	vmov.f32	s19, s1
 801753e:	9306      	str	r3, [sp, #24]
 8017540:	eeb0 9a41 	vmov.f32	s18, s2
 8017544:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8017548:	eeb0 8a62 	vmov.f32	s16, s5
 801754c:	9214      	str	r2, [sp, #80]	; 0x50
 801754e:	eef0 8a43 	vmov.f32	s17, s6
 8017552:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017554:	eef0 ba44 	vmov.f32	s23, s8
 8017558:	9307      	str	r3, [sp, #28]
 801755a:	eeb0 ba64 	vmov.f32	s22, s9
 801755e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8017562:	eef0 aa45 	vmov.f32	s21, s10
 8017566:	9015      	str	r0, [sp, #84]	; 0x54
 8017568:	9112      	str	r1, [sp, #72]	; 0x48
 801756a:	6850      	ldr	r0, [r2, #4]
 801756c:	9310      	str	r3, [sp, #64]	; 0x40
 801756e:	6812      	ldr	r2, [r2, #0]
 8017570:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8017572:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8017576:	fb00 1303 	mla	r3, r0, r3, r1
 801757a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801757e:	18d3      	adds	r3, r2, r3
 8017580:	930a      	str	r3, [sp, #40]	; 0x28
 8017582:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	9311      	str	r3, [sp, #68]	; 0x44
 8017588:	9b07      	ldr	r3, [sp, #28]
 801758a:	009b      	lsls	r3, r3, #2
 801758c:	930e      	str	r3, [sp, #56]	; 0x38
 801758e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017590:	2b00      	cmp	r3, #0
 8017592:	dc03      	bgt.n	801759c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8017594:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017596:	2b00      	cmp	r3, #0
 8017598:	f340 832e 	ble.w	8017bf8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801759c:	9b06      	ldr	r3, [sp, #24]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	f340 8186 	ble.w	80178b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80175a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80175a6:	1423      	asrs	r3, r4, #16
 80175a8:	1412      	asrs	r2, r2, #16
 80175aa:	d42f      	bmi.n	801760c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80175ac:	1c51      	adds	r1, r2, #1
 80175ae:	9807      	ldr	r0, [sp, #28]
 80175b0:	4288      	cmp	r0, r1
 80175b2:	dd2e      	ble.n	8017612 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	db2c      	blt.n	8017612 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80175b8:	1c59      	adds	r1, r3, #1
 80175ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80175bc:	4288      	cmp	r0, r1
 80175be:	dd28      	ble.n	8017612 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80175c0:	9b06      	ldr	r3, [sp, #24]
 80175c2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80175c4:	3b01      	subs	r3, #1
 80175c6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80175c8:	fb02 1203 	mla	r2, r2, r3, r1
 80175cc:	1412      	asrs	r2, r2, #16
 80175ce:	d42b      	bmi.n	8017628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80175d0:	3201      	adds	r2, #1
 80175d2:	9907      	ldr	r1, [sp, #28]
 80175d4:	4291      	cmp	r1, r2
 80175d6:	dd27      	ble.n	8017628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80175d8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80175da:	fb02 4303 	mla	r3, r2, r3, r4
 80175de:	141b      	asrs	r3, r3, #16
 80175e0:	d422      	bmi.n	8017628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80175e2:	3301      	adds	r3, #1
 80175e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80175e6:	429a      	cmp	r2, r3
 80175e8:	dd1e      	ble.n	8017628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80175ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175ec:	f8dd b018 	ldr.w	fp, [sp, #24]
 80175f0:	1cdd      	adds	r5, r3, #3
 80175f2:	f1bb 0f00 	cmp.w	fp, #0
 80175f6:	f300 81c4 	bgt.w	8017982 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 80175fa:	9b06      	ldr	r3, [sp, #24]
 80175fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8017600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017602:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017606:	4423      	add	r3, r4
 8017608:	930a      	str	r3, [sp, #40]	; 0x28
 801760a:	e153      	b.n	80178b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 801760c:	1c51      	adds	r1, r2, #1
 801760e:	f040 8142 	bne.w	8017896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8017612:	9907      	ldr	r1, [sp, #28]
 8017614:	428a      	cmp	r2, r1
 8017616:	f280 813e 	bge.w	8017896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801761a:	1c5a      	adds	r2, r3, #1
 801761c:	f2c0 813b 	blt.w	8017896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8017620:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017622:	4293      	cmp	r3, r2
 8017624:	f280 8137 	bge.w	8017896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8017628:	9b06      	ldr	r3, [sp, #24]
 801762a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801762c:	9313      	str	r3, [sp, #76]	; 0x4c
 801762e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017630:	2b00      	cmp	r3, #0
 8017632:	dde2      	ble.n	80175fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8017634:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017636:	1423      	asrs	r3, r4, #16
 8017638:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801763a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801763e:	1409      	asrs	r1, r1, #16
 8017640:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8017644:	f100 8187 	bmi.w	8017956 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8017648:	1c4e      	adds	r6, r1, #1
 801764a:	9f07      	ldr	r7, [sp, #28]
 801764c:	42b7      	cmp	r7, r6
 801764e:	f340 8184 	ble.w	801795a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8017652:	2b00      	cmp	r3, #0
 8017654:	f2c0 8181 	blt.w	801795a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8017658:	1c5e      	adds	r6, r3, #1
 801765a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801765c:	42b7      	cmp	r7, r6
 801765e:	f340 817c 	ble.w	801795a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8017662:	9e07      	ldr	r6, [sp, #28]
 8017664:	fb03 1306 	mla	r3, r3, r6, r1
 8017668:	9911      	ldr	r1, [sp, #68]	; 0x44
 801766a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801766e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8017672:	0e1f      	lsrs	r7, r3, #24
 8017674:	2a00      	cmp	r2, #0
 8017676:	f000 815c 	beq.w	8017932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801767a:	6871      	ldr	r1, [r6, #4]
 801767c:	910b      	str	r1, [sp, #44]	; 0x2c
 801767e:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8017682:	2800      	cmp	r0, #0
 8017684:	f000 815e 	beq.w	8017944 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8017688:	990e      	ldr	r1, [sp, #56]	; 0x38
 801768a:	eb06 0c01 	add.w	ip, r6, r1
 801768e:	5876      	ldr	r6, [r6, r1]
 8017690:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8017694:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8017698:	9608      	str	r6, [sp, #32]
 801769a:	0e0e      	lsrs	r6, r1, #24
 801769c:	910c      	str	r1, [sp, #48]	; 0x30
 801769e:	b292      	uxth	r2, r2
 80176a0:	b280      	uxth	r0, r0
 80176a2:	fb02 fa00 	mul.w	sl, r2, r0
 80176a6:	0112      	lsls	r2, r2, #4
 80176a8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80176ac:	eba2 080a 	sub.w	r8, r2, sl
 80176b0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80176b4:	b280      	uxth	r0, r0
 80176b6:	fa1f f888 	uxth.w	r8, r8
 80176ba:	1a09      	subs	r1, r1, r0
 80176bc:	fb08 f20e 	mul.w	r2, r8, lr
 80176c0:	b289      	uxth	r1, r1
 80176c2:	fb01 2207 	mla	r2, r1, r7, r2
 80176c6:	fb00 2209 	mla	r2, r0, r9, r2
 80176ca:	fb0a 2206 	mla	r2, sl, r6, r2
 80176ce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80176d2:	2a00      	cmp	r2, #0
 80176d4:	f000 80d4 	beq.w	8017880 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80176d8:	2fff      	cmp	r7, #255	; 0xff
 80176da:	d01a      	beq.n	8017712 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 80176dc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80176e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80176e4:	fb07 fc0c 	mul.w	ip, r7, ip
 80176e8:	435f      	muls	r7, r3
 80176ea:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80176ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80176f2:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80176f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80176fa:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80176fe:	4463      	add	r3, ip
 8017700:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8017704:	0a1b      	lsrs	r3, r3, #8
 8017706:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801770a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801770e:	ea43 030b 	orr.w	r3, r3, fp
 8017712:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017716:	d01e      	beq.n	8017756 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8017718:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801771a:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801771e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017722:	fb0e fb0b 	mul.w	fp, lr, fp
 8017726:	fb0e fe07 	mul.w	lr, lr, r7
 801772a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801772e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017732:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8017736:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801773a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801773e:	44dc      	add	ip, fp
 8017740:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017744:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017748:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801774c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017750:	ea4c 070e 	orr.w	r7, ip, lr
 8017754:	970b      	str	r7, [sp, #44]	; 0x2c
 8017756:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801775a:	d01e      	beq.n	801779a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 801775c:	9f08      	ldr	r7, [sp, #32]
 801775e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8017762:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017766:	fb09 fe0e 	mul.w	lr, r9, lr
 801776a:	fb09 f907 	mul.w	r9, r9, r7
 801776e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8017772:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8017776:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801777a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801777e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017782:	44f4      	add	ip, lr
 8017784:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017788:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801778c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017790:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017794:	ea4c 0709 	orr.w	r7, ip, r9
 8017798:	9708      	str	r7, [sp, #32]
 801779a:	2eff      	cmp	r6, #255	; 0xff
 801779c:	d01c      	beq.n	80177d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801779e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80177a0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80177a4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80177a8:	fb06 fe0e 	mul.w	lr, r6, lr
 80177ac:	437e      	muls	r6, r7
 80177ae:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80177b2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80177b6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80177ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80177be:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80177c2:	44f4      	add	ip, lr
 80177c4:	0a36      	lsrs	r6, r6, #8
 80177c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80177ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80177ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80177d2:	ea4c 0606 	orr.w	r6, ip, r6
 80177d6:	960c      	str	r6, [sp, #48]	; 0x30
 80177d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80177da:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80177de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80177e2:	2aff      	cmp	r2, #255	; 0xff
 80177e4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80177e8:	fb08 f606 	mul.w	r6, r8, r6
 80177ec:	fb01 6607 	mla	r6, r1, r7, r6
 80177f0:	9f08      	ldr	r7, [sp, #32]
 80177f2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80177f6:	fb00 6607 	mla	r6, r0, r7, r6
 80177fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80177fc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017800:	fb0a 6607 	mla	r6, sl, r7, r6
 8017804:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017806:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801780a:	ea4f 2616 	mov.w	r6, r6, lsr #8
 801780e:	fb08 f807 	mul.w	r8, r8, r7
 8017812:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017816:	fb01 8303 	mla	r3, r1, r3, r8
 801781a:	9908      	ldr	r1, [sp, #32]
 801781c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8017820:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017822:	fb00 330c 	mla	r3, r0, ip, r3
 8017826:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801782a:	fb0a 3a00 	mla	sl, sl, r0, r3
 801782e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017832:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017836:	ea46 060a 	orr.w	r6, r6, sl
 801783a:	b2f0      	uxtb	r0, r6
 801783c:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8017840:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8017844:	f000 8084 	beq.w	8017950 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8017848:	43d2      	mvns	r2, r2
 801784a:	782b      	ldrb	r3, [r5, #0]
 801784c:	b2d2      	uxtb	r2, r2
 801784e:	fb03 f702 	mul.w	r7, r3, r2
 8017852:	1c7b      	adds	r3, r7, #1
 8017854:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8017858:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801785c:	702b      	strb	r3, [r5, #0]
 801785e:	786b      	ldrb	r3, [r5, #1]
 8017860:	fb03 f002 	mul.w	r0, r3, r2
 8017864:	1c43      	adds	r3, r0, #1
 8017866:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801786a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801786e:	706b      	strb	r3, [r5, #1]
 8017870:	78ab      	ldrb	r3, [r5, #2]
 8017872:	4353      	muls	r3, r2
 8017874:	1c5a      	adds	r2, r3, #1
 8017876:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801787a:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801787e:	70ae      	strb	r6, [r5, #2]
 8017880:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017882:	3503      	adds	r5, #3
 8017884:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017886:	4413      	add	r3, r2
 8017888:	9329      	str	r3, [sp, #164]	; 0xa4
 801788a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801788c:	441c      	add	r4, r3
 801788e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017890:	3b01      	subs	r3, #1
 8017892:	9313      	str	r3, [sp, #76]	; 0x4c
 8017894:	e6cb      	b.n	801762e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8017896:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017898:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801789a:	4413      	add	r3, r2
 801789c:	9329      	str	r3, [sp, #164]	; 0xa4
 801789e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80178a0:	441c      	add	r4, r3
 80178a2:	9b06      	ldr	r3, [sp, #24]
 80178a4:	3b01      	subs	r3, #1
 80178a6:	9306      	str	r3, [sp, #24]
 80178a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178aa:	3303      	adds	r3, #3
 80178ac:	930a      	str	r3, [sp, #40]	; 0x28
 80178ae:	e675      	b.n	801759c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80178b0:	f47f ae86 	bne.w	80175c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80178b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	f340 819e 	ble.w	8017bf8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80178bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80178c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80178c2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80178c6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80178ca:	eef0 6a48 	vmov.f32	s13, s16
 80178ce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80178d2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80178d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80178da:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80178de:	eef0 6a68 	vmov.f32	s13, s17
 80178e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80178e6:	ee16 4a90 	vmov	r4, s13
 80178ea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80178ee:	ee69 7a27 	vmul.f32	s15, s18, s15
 80178f2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80178f6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80178fa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80178fe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017902:	ee18 2a10 	vmov	r2, s16
 8017906:	eeb0 8a47 	vmov.f32	s16, s14
 801790a:	fb92 f3f3 	sdiv	r3, r2, r3
 801790e:	ee18 2a90 	vmov	r2, s17
 8017912:	932b      	str	r3, [sp, #172]	; 0xac
 8017914:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017916:	eef0 8a67 	vmov.f32	s17, s15
 801791a:	fb92 f3f3 	sdiv	r3, r2, r3
 801791e:	932c      	str	r3, [sp, #176]	; 0xb0
 8017920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017922:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017924:	3b01      	subs	r3, #1
 8017926:	9312      	str	r3, [sp, #72]	; 0x48
 8017928:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801792a:	bf08      	it	eq
 801792c:	4613      	moveq	r3, r2
 801792e:	9306      	str	r3, [sp, #24]
 8017930:	e62d      	b.n	801758e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8017932:	b150      	cbz	r0, 801794a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8017934:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017936:	5871      	ldr	r1, [r6, r1]
 8017938:	26ff      	movs	r6, #255	; 0xff
 801793a:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801793e:	9108      	str	r1, [sp, #32]
 8017940:	46b6      	mov	lr, r6
 8017942:	e6ac      	b.n	801769e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8017944:	26ff      	movs	r6, #255	; 0xff
 8017946:	46b1      	mov	r9, r6
 8017948:	e6a9      	b.n	801769e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801794a:	26ff      	movs	r6, #255	; 0xff
 801794c:	46b1      	mov	r9, r6
 801794e:	e7f7      	b.n	8017940 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8017950:	7028      	strb	r0, [r5, #0]
 8017952:	7069      	strb	r1, [r5, #1]
 8017954:	e793      	b.n	801787e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8017956:	1c4f      	adds	r7, r1, #1
 8017958:	d192      	bne.n	8017880 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801795a:	9e07      	ldr	r6, [sp, #28]
 801795c:	428e      	cmp	r6, r1
 801795e:	dd8f      	ble.n	8017880 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8017960:	1c5e      	adds	r6, r3, #1
 8017962:	db8d      	blt.n	8017880 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8017964:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8017966:	429e      	cmp	r6, r3
 8017968:	dd8a      	ble.n	8017880 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801796a:	9600      	str	r6, [sp, #0]
 801796c:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8017970:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017974:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017976:	4629      	mov	r1, r5
 8017978:	9b07      	ldr	r3, [sp, #28]
 801797a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801797c:	f7ff fc8e 	bl	801729c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8017980:	e77e      	b.n	8017880 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8017982:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017984:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8017988:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801798a:	9e07      	ldr	r6, [sp, #28]
 801798c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017990:	1409      	asrs	r1, r1, #16
 8017992:	1423      	asrs	r3, r4, #16
 8017994:	fb06 1303 	mla	r3, r6, r3, r1
 8017998:	9911      	ldr	r1, [sp, #68]	; 0x44
 801799a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801799e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80179a2:	0e1f      	lsrs	r7, r3, #24
 80179a4:	2a00      	cmp	r2, #0
 80179a6:	f000 8113 	beq.w	8017bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 80179aa:	6871      	ldr	r1, [r6, #4]
 80179ac:	910d      	str	r1, [sp, #52]	; 0x34
 80179ae:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80179b2:	2800      	cmp	r0, #0
 80179b4:	f000 8115 	beq.w	8017be2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80179b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80179ba:	eb06 0c01 	add.w	ip, r6, r1
 80179be:	5876      	ldr	r6, [r6, r1]
 80179c0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80179c4:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80179c8:	9609      	str	r6, [sp, #36]	; 0x24
 80179ca:	0e0e      	lsrs	r6, r1, #24
 80179cc:	910f      	str	r1, [sp, #60]	; 0x3c
 80179ce:	b292      	uxth	r2, r2
 80179d0:	b280      	uxth	r0, r0
 80179d2:	fb02 fa00 	mul.w	sl, r2, r0
 80179d6:	0112      	lsls	r2, r2, #4
 80179d8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80179dc:	eba2 080a 	sub.w	r8, r2, sl
 80179e0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80179e4:	b280      	uxth	r0, r0
 80179e6:	fa1f f888 	uxth.w	r8, r8
 80179ea:	1a09      	subs	r1, r1, r0
 80179ec:	fb08 f20e 	mul.w	r2, r8, lr
 80179f0:	b289      	uxth	r1, r1
 80179f2:	fb01 2207 	mla	r2, r1, r7, r2
 80179f6:	fb00 2209 	mla	r2, r0, r9, r2
 80179fa:	fb0a 2206 	mla	r2, sl, r6, r2
 80179fe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017a02:	2a00      	cmp	r2, #0
 8017a04:	f000 80da 	beq.w	8017bbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8017a08:	2fff      	cmp	r7, #255	; 0xff
 8017a0a:	d01a      	beq.n	8017a42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8017a0c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8017a10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017a14:	fb07 fc0c 	mul.w	ip, r7, ip
 8017a18:	435f      	muls	r7, r3
 8017a1a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8017a1e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017a22:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017a26:	4463      	add	r3, ip
 8017a28:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8017a2c:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8017a30:	0a1b      	lsrs	r3, r3, #8
 8017a32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017a36:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017a3a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017a3e:	ea43 030c 	orr.w	r3, r3, ip
 8017a42:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017a46:	d021      	beq.n	8017a8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8017a48:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8017a4a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017a4e:	fb0e f707 	mul.w	r7, lr, r7
 8017a52:	9713      	str	r7, [sp, #76]	; 0x4c
 8017a54:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8017a56:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8017a5a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8017a5c:	fb0e fe0c 	mul.w	lr, lr, ip
 8017a60:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017a64:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017a68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017a6c:	44bc      	add	ip, r7
 8017a6e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8017a72:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8017a76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017a7a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017a7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017a82:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8017a86:	ea4c 070e 	orr.w	r7, ip, lr
 8017a8a:	970d      	str	r7, [sp, #52]	; 0x34
 8017a8c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017a90:	d01e      	beq.n	8017ad0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8017a92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017a94:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8017a98:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017a9c:	fb09 fe0e 	mul.w	lr, r9, lr
 8017aa0:	fb09 f907 	mul.w	r9, r9, r7
 8017aa4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8017aa8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8017aac:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8017ab0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017ab4:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017ab8:	44f4      	add	ip, lr
 8017aba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017abe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017ac2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017ac6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017aca:	ea4c 0709 	orr.w	r7, ip, r9
 8017ace:	9709      	str	r7, [sp, #36]	; 0x24
 8017ad0:	2eff      	cmp	r6, #255	; 0xff
 8017ad2:	d01c      	beq.n	8017b0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8017ad4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017ad6:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8017ada:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017ade:	fb06 fe0e 	mul.w	lr, r6, lr
 8017ae2:	437e      	muls	r6, r7
 8017ae4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8017ae8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8017aec:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8017af0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017af4:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8017af8:	44f4      	add	ip, lr
 8017afa:	0a36      	lsrs	r6, r6, #8
 8017afc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017b00:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017b04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017b08:	ea4c 0606 	orr.w	r6, ip, r6
 8017b0c:	960f      	str	r6, [sp, #60]	; 0x3c
 8017b0e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8017b10:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8017b14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017b18:	2aff      	cmp	r2, #255	; 0xff
 8017b1a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017b1e:	fb08 f606 	mul.w	r6, r8, r6
 8017b22:	fb01 6607 	mla	r6, r1, r7, r6
 8017b26:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017b28:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017b2c:	fb00 6607 	mla	r6, r0, r7, r6
 8017b30:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017b32:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017b36:	fb0a 6607 	mla	r6, sl, r7, r6
 8017b3a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8017b3c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017b40:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8017b44:	fb08 f807 	mul.w	r8, r8, r7
 8017b48:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017b4c:	fb01 8303 	mla	r3, r1, r3, r8
 8017b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017b52:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8017b56:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017b58:	fb00 330c 	mla	r3, r0, ip, r3
 8017b5c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8017b60:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8017b64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017b68:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8017b6c:	ea46 060e 	orr.w	r6, r6, lr
 8017b70:	b2f0      	uxtb	r0, r6
 8017b72:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8017b76:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8017b7a:	d038      	beq.n	8017bee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8017b7c:	43d2      	mvns	r2, r2
 8017b7e:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8017b82:	b2d2      	uxtb	r2, r2
 8017b84:	4357      	muls	r7, r2
 8017b86:	1c7b      	adds	r3, r7, #1
 8017b88:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8017b8c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8017b90:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8017b94:	4350      	muls	r0, r2
 8017b96:	f805 3c03 	strb.w	r3, [r5, #-3]
 8017b9a:	1c43      	adds	r3, r0, #1
 8017b9c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8017ba0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8017ba4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017ba8:	4353      	muls	r3, r2
 8017baa:	f805 1c02 	strb.w	r1, [r5, #-2]
 8017bae:	1c5a      	adds	r2, r3, #1
 8017bb0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8017bb4:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8017bb8:	f805 6c01 	strb.w	r6, [r5, #-1]
 8017bbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017bbe:	3503      	adds	r5, #3
 8017bc0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017bc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017bc6:	4413      	add	r3, r2
 8017bc8:	9329      	str	r3, [sp, #164]	; 0xa4
 8017bca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017bcc:	441c      	add	r4, r3
 8017bce:	e510      	b.n	80175f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8017bd0:	b150      	cbz	r0, 8017be8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8017bd2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017bd4:	5871      	ldr	r1, [r6, r1]
 8017bd6:	26ff      	movs	r6, #255	; 0xff
 8017bd8:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8017bdc:	9109      	str	r1, [sp, #36]	; 0x24
 8017bde:	46b6      	mov	lr, r6
 8017be0:	e6f5      	b.n	80179ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8017be2:	26ff      	movs	r6, #255	; 0xff
 8017be4:	46b1      	mov	r9, r6
 8017be6:	e6f2      	b.n	80179ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8017be8:	26ff      	movs	r6, #255	; 0xff
 8017bea:	46b1      	mov	r9, r6
 8017bec:	e7f7      	b.n	8017bde <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8017bee:	f805 0c03 	strb.w	r0, [r5, #-3]
 8017bf2:	f805 1c02 	strb.w	r1, [r5, #-2]
 8017bf6:	e7df      	b.n	8017bb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8017bf8:	b017      	add	sp, #92	; 0x5c
 8017bfa:	ecbd 8b08 	vpop	{d8-d11}
 8017bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017c04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8017c04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c08:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8017c0c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8017c10:	2800      	cmp	r0, #0
 8017c12:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8017c16:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8017c1a:	fb0c 0e03 	mla	lr, ip, r3, r0
 8017c1e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8017c22:	db6b      	blt.n	8017cfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8017c24:	4580      	cmp	r8, r0
 8017c26:	dd69      	ble.n	8017cfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8017c28:	f1bc 0f00 	cmp.w	ip, #0
 8017c2c:	db66      	blt.n	8017cfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8017c2e:	45e1      	cmp	r9, ip
 8017c30:	dd64      	ble.n	8017cfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8017c32:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8017c36:	f01e 0f01 	tst.w	lr, #1
 8017c3a:	5d16      	ldrb	r6, [r2, r4]
 8017c3c:	bf0c      	ite	eq
 8017c3e:	f006 060f 	andeq.w	r6, r6, #15
 8017c42:	1136      	asrne	r6, r6, #4
 8017c44:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8017c48:	b2f6      	uxtb	r6, r6
 8017c4a:	f110 0a01 	adds.w	sl, r0, #1
 8017c4e:	d457      	bmi.n	8017d00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8017c50:	45d0      	cmp	r8, sl
 8017c52:	dd55      	ble.n	8017d00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8017c54:	f1bc 0f00 	cmp.w	ip, #0
 8017c58:	db52      	blt.n	8017d00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8017c5a:	45e1      	cmp	r9, ip
 8017c5c:	dd50      	ble.n	8017d00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8017c5e:	2f00      	cmp	r7, #0
 8017c60:	f000 80ac 	beq.w	8017dbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8017c64:	f10e 0b01 	add.w	fp, lr, #1
 8017c68:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8017c6c:	f01b 0f01 	tst.w	fp, #1
 8017c70:	5d14      	ldrb	r4, [r2, r4]
 8017c72:	bf0c      	ite	eq
 8017c74:	f004 040f 	andeq.w	r4, r4, #15
 8017c78:	1124      	asrne	r4, r4, #4
 8017c7a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8017c7e:	b2e4      	uxtb	r4, r4
 8017c80:	2d00      	cmp	r5, #0
 8017c82:	f000 8096 	beq.w	8017db2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8017c86:	2800      	cmp	r0, #0
 8017c88:	f10c 0c01 	add.w	ip, ip, #1
 8017c8c:	db3c      	blt.n	8017d08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8017c8e:	4580      	cmp	r8, r0
 8017c90:	dd3a      	ble.n	8017d08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8017c92:	f1bc 0f00 	cmp.w	ip, #0
 8017c96:	db37      	blt.n	8017d08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8017c98:	45e1      	cmp	r9, ip
 8017c9a:	dd35      	ble.n	8017d08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8017c9c:	eb03 0b0e 	add.w	fp, r3, lr
 8017ca0:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8017ca4:	f01b 0f01 	tst.w	fp, #1
 8017ca8:	5c10      	ldrb	r0, [r2, r0]
 8017caa:	bf0c      	ite	eq
 8017cac:	f000 000f 	andeq.w	r0, r0, #15
 8017cb0:	1100      	asrne	r0, r0, #4
 8017cb2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8017cb6:	b2c0      	uxtb	r0, r0
 8017cb8:	f1ba 0f00 	cmp.w	sl, #0
 8017cbc:	db26      	blt.n	8017d0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8017cbe:	45d0      	cmp	r8, sl
 8017cc0:	dd24      	ble.n	8017d0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8017cc2:	f1bc 0f00 	cmp.w	ip, #0
 8017cc6:	db21      	blt.n	8017d0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8017cc8:	45e1      	cmp	r9, ip
 8017cca:	dd1f      	ble.n	8017d0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8017ccc:	b307      	cbz	r7, 8017d10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8017cce:	3301      	adds	r3, #1
 8017cd0:	449e      	add	lr, r3
 8017cd2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8017cd6:	f01e 0f01 	tst.w	lr, #1
 8017cda:	5cd3      	ldrb	r3, [r2, r3]
 8017cdc:	bf0c      	ite	eq
 8017cde:	f003 030f 	andeq.w	r3, r3, #15
 8017ce2:	111b      	asrne	r3, r3, #4
 8017ce4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8017ce8:	b2db      	uxtb	r3, r3
 8017cea:	2f0f      	cmp	r7, #15
 8017cec:	d911      	bls.n	8017d12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8017cee:	4b35      	ldr	r3, [pc, #212]	; (8017dc4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8017cf0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8017cf4:	4a34      	ldr	r2, [pc, #208]	; (8017dc8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8017cf6:	4835      	ldr	r0, [pc, #212]	; (8017dcc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8017cf8:	f000 ff72 	bl	8018be0 <__assert_func>
 8017cfc:	2600      	movs	r6, #0
 8017cfe:	e7a4      	b.n	8017c4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8017d00:	2400      	movs	r4, #0
 8017d02:	e7bd      	b.n	8017c80 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8017d04:	463c      	mov	r4, r7
 8017d06:	e7be      	b.n	8017c86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8017d08:	2000      	movs	r0, #0
 8017d0a:	e7d5      	b.n	8017cb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	e7ec      	b.n	8017cea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8017d10:	463b      	mov	r3, r7
 8017d12:	2d0f      	cmp	r5, #15
 8017d14:	d8eb      	bhi.n	8017cee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8017d16:	b2bf      	uxth	r7, r7
 8017d18:	b2ad      	uxth	r5, r5
 8017d1a:	fb07 f205 	mul.w	r2, r7, r5
 8017d1e:	013f      	lsls	r7, r7, #4
 8017d20:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8017d24:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8017d28:	1abf      	subs	r7, r7, r2
 8017d2a:	b2ad      	uxth	r5, r5
 8017d2c:	b2bf      	uxth	r7, r7
 8017d2e:	ebac 0c05 	sub.w	ip, ip, r5
 8017d32:	437c      	muls	r4, r7
 8017d34:	fa1f fc8c 	uxth.w	ip, ip
 8017d38:	fb06 440c 	mla	r4, r6, ip, r4
 8017d3c:	fb05 4400 	mla	r4, r5, r0, r4
 8017d40:	fb02 4203 	mla	r2, r2, r3, r4
 8017d44:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017d48:	b38a      	cbz	r2, 8017dae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8017d4a:	4b21      	ldr	r3, [pc, #132]	; (8017dd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8017d4c:	681c      	ldr	r4, [r3, #0]
 8017d4e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017d52:	b2e5      	uxtb	r5, r4
 8017d54:	4353      	muls	r3, r2
 8017d56:	1c5a      	adds	r2, r3, #1
 8017d58:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8017d5c:	1212      	asrs	r2, r2, #8
 8017d5e:	b290      	uxth	r0, r2
 8017d60:	43d2      	mvns	r2, r2
 8017d62:	fb15 f500 	smulbb	r5, r5, r0
 8017d66:	b2d3      	uxtb	r3, r2
 8017d68:	780a      	ldrb	r2, [r1, #0]
 8017d6a:	fb02 5203 	mla	r2, r2, r3, r5
 8017d6e:	b292      	uxth	r2, r2
 8017d70:	1c55      	adds	r5, r2, #1
 8017d72:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8017d76:	784d      	ldrb	r5, [r1, #1]
 8017d78:	fb15 f503 	smulbb	r5, r5, r3
 8017d7c:	1212      	asrs	r2, r2, #8
 8017d7e:	700a      	strb	r2, [r1, #0]
 8017d80:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8017d84:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8017d88:	fb02 5200 	mla	r2, r2, r0, r5
 8017d8c:	b292      	uxth	r2, r2
 8017d8e:	1c55      	adds	r5, r2, #1
 8017d90:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8017d94:	1212      	asrs	r2, r2, #8
 8017d96:	704a      	strb	r2, [r1, #1]
 8017d98:	788a      	ldrb	r2, [r1, #2]
 8017d9a:	fb12 f303 	smulbb	r3, r2, r3
 8017d9e:	fb04 3300 	mla	r3, r4, r0, r3
 8017da2:	b29b      	uxth	r3, r3
 8017da4:	1c5a      	adds	r2, r3, #1
 8017da6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017daa:	121b      	asrs	r3, r3, #8
 8017dac:	708b      	strb	r3, [r1, #2]
 8017dae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017db2:	2f0f      	cmp	r7, #15
 8017db4:	d89b      	bhi.n	8017cee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8017db6:	462b      	mov	r3, r5
 8017db8:	4628      	mov	r0, r5
 8017dba:	e7ac      	b.n	8017d16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8017dbc:	2d00      	cmp	r5, #0
 8017dbe:	d1a1      	bne.n	8017d04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8017dc0:	462c      	mov	r4, r5
 8017dc2:	e7f8      	b.n	8017db6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8017dc4:	0801c5d4 	.word	0x0801c5d4
 8017dc8:	0801caca 	.word	0x0801caca
 8017dcc:	0801c69d 	.word	0x0801c69d
 8017dd0:	20001108 	.word	0x20001108

08017dd4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8017dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dd8:	ed2d 8b08 	vpush	{d8-d11}
 8017ddc:	b097      	sub	sp, #92	; 0x5c
 8017dde:	eeb0 aa40 	vmov.f32	s20, s0
 8017de2:	eef0 9a60 	vmov.f32	s19, s1
 8017de6:	9308      	str	r3, [sp, #32]
 8017de8:	eeb0 9a41 	vmov.f32	s18, s2
 8017dec:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8017df0:	eeb0 8a62 	vmov.f32	s16, s5
 8017df4:	9214      	str	r2, [sp, #80]	; 0x50
 8017df6:	eef0 8a43 	vmov.f32	s17, s6
 8017dfa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017dfc:	eef0 ba44 	vmov.f32	s23, s8
 8017e00:	9309      	str	r3, [sp, #36]	; 0x24
 8017e02:	eeb0 ba64 	vmov.f32	s22, s9
 8017e06:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8017e0a:	eef0 aa45 	vmov.f32	s21, s10
 8017e0e:	9015      	str	r0, [sp, #84]	; 0x54
 8017e10:	910c      	str	r1, [sp, #48]	; 0x30
 8017e12:	930e      	str	r3, [sp, #56]	; 0x38
 8017e14:	6850      	ldr	r0, [r2, #4]
 8017e16:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8017e1a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8017e1e:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8017e22:	fb00 1803 	mla	r8, r0, r3, r1
 8017e26:	6813      	ldr	r3, [r2, #0]
 8017e28:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017e2c:	4498      	add	r8, r3
 8017e2e:	f10b 0301 	add.w	r3, fp, #1
 8017e32:	f023 0301 	bic.w	r3, r3, #1
 8017e36:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e38:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017e3a:	681f      	ldr	r7, [r3, #0]
 8017e3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	dc03      	bgt.n	8017e4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8017e42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	f340 8238 	ble.w	80182ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8017e4a:	9b08      	ldr	r3, [sp, #32]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	f340 810c 	ble.w	801806a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8017e52:	142a      	asrs	r2, r5, #16
 8017e54:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017e58:	d42c      	bmi.n	8017eb4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8017e5a:	1c51      	adds	r1, r2, #1
 8017e5c:	458b      	cmp	fp, r1
 8017e5e:	dd2c      	ble.n	8017eba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	db2a      	blt.n	8017eba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8017e64:	1c59      	adds	r1, r3, #1
 8017e66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e68:	4288      	cmp	r0, r1
 8017e6a:	dd26      	ble.n	8017eba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8017e6c:	9b08      	ldr	r3, [sp, #32]
 8017e6e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017e70:	3b01      	subs	r3, #1
 8017e72:	fb02 5203 	mla	r2, r2, r3, r5
 8017e76:	1412      	asrs	r2, r2, #16
 8017e78:	d429      	bmi.n	8017ece <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8017e7a:	3201      	adds	r2, #1
 8017e7c:	4593      	cmp	fp, r2
 8017e7e:	dd26      	ble.n	8017ece <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8017e80:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017e82:	fb02 6303 	mla	r3, r2, r3, r6
 8017e86:	141b      	asrs	r3, r3, #16
 8017e88:	d421      	bmi.n	8017ece <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8017e8a:	3301      	adds	r3, #1
 8017e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	dd1d      	ble.n	8017ece <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8017e92:	f108 0e03 	add.w	lr, r8, #3
 8017e96:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017e9a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8017e9e:	f1b9 0f00 	cmp.w	r9, #0
 8017ea2:	f300 814f 	bgt.w	8018144 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8017ea6:	9b08      	ldr	r3, [sp, #32]
 8017ea8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8017eac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017eb0:	44a0      	add	r8, r4
 8017eb2:	e0dc      	b.n	801806e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8017eb4:	1c51      	adds	r1, r2, #1
 8017eb6:	f040 80ce 	bne.w	8018056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8017eba:	4593      	cmp	fp, r2
 8017ebc:	f340 80cb 	ble.w	8018056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8017ec0:	1c5a      	adds	r2, r3, #1
 8017ec2:	f2c0 80c8 	blt.w	8018056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8017ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ec8:	4293      	cmp	r3, r2
 8017eca:	f280 80c4 	bge.w	8018056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8017ece:	9b08      	ldr	r3, [sp, #32]
 8017ed0:	46c1      	mov	r9, r8
 8017ed2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8017ed6:	930d      	str	r3, [sp, #52]	; 0x34
 8017ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	dde3      	ble.n	8017ea6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8017ede:	1428      	asrs	r0, r5, #16
 8017ee0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8017ee4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017ee8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8017eec:	f100 8111 	bmi.w	8018112 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8017ef0:	f100 0c01 	add.w	ip, r0, #1
 8017ef4:	45e3      	cmp	fp, ip
 8017ef6:	f340 810e 	ble.w	8018116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	f2c0 810b 	blt.w	8018116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8017f00:	f103 0c01 	add.w	ip, r3, #1
 8017f04:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017f06:	4564      	cmp	r4, ip
 8017f08:	f340 8105 	ble.w	8018116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8017f0c:	fb03 030a 	mla	r3, r3, sl, r0
 8017f10:	0858      	lsrs	r0, r3, #1
 8017f12:	07dc      	lsls	r4, r3, #31
 8017f14:	5c38      	ldrb	r0, [r7, r0]
 8017f16:	bf54      	ite	pl
 8017f18:	f000 000f 	andpl.w	r0, r0, #15
 8017f1c:	1100      	asrmi	r0, r0, #4
 8017f1e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8017f22:	b2c0      	uxtb	r0, r0
 8017f24:	2a00      	cmp	r2, #0
 8017f26:	f000 80e1 	beq.w	80180ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8017f2a:	f103 0e01 	add.w	lr, r3, #1
 8017f2e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8017f32:	f01e 0f01 	tst.w	lr, #1
 8017f36:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8017f3a:	bf0c      	ite	eq
 8017f3c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8017f40:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8017f44:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8017f48:	fa5f f48c 	uxtb.w	r4, ip
 8017f4c:	9410      	str	r4, [sp, #64]	; 0x40
 8017f4e:	b1f9      	cbz	r1, 8017f90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8017f50:	4453      	add	r3, sl
 8017f52:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8017f56:	07dc      	lsls	r4, r3, #31
 8017f58:	f103 0301 	add.w	r3, r3, #1
 8017f5c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8017f60:	bf54      	ite	pl
 8017f62:	f00c 0c0f 	andpl.w	ip, ip, #15
 8017f66:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8017f6a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8017f6e:	fa5f f48c 	uxtb.w	r4, ip
 8017f72:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8017f76:	940a      	str	r4, [sp, #40]	; 0x28
 8017f78:	07dc      	lsls	r4, r3, #31
 8017f7a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8017f7e:	bf54      	ite	pl
 8017f80:	f00c 030f 	andpl.w	r3, ip, #15
 8017f84:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8017f88:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8017f8c:	b2db      	uxtb	r3, r3
 8017f8e:	9311      	str	r3, [sp, #68]	; 0x44
 8017f90:	b292      	uxth	r2, r2
 8017f92:	b289      	uxth	r1, r1
 8017f94:	0113      	lsls	r3, r2, #4
 8017f96:	fb02 fc01 	mul.w	ip, r2, r1
 8017f9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017f9c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017fa0:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8017fa4:	eba3 030c 	sub.w	r3, r3, ip
 8017fa8:	b289      	uxth	r1, r1
 8017faa:	b29b      	uxth	r3, r3
 8017fac:	ebae 0e01 	sub.w	lr, lr, r1
 8017fb0:	4353      	muls	r3, r2
 8017fb2:	fa1f fe8e 	uxth.w	lr, lr
 8017fb6:	fb00 320e 	mla	r2, r0, lr, r3
 8017fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fbc:	fb01 2203 	mla	r2, r1, r3, r2
 8017fc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017fc2:	fb0c 2203 	mla	r2, ip, r3, r2
 8017fc6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017fca:	2a00      	cmp	r2, #0
 8017fcc:	d039      	beq.n	8018042 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8017fce:	4bbd      	ldr	r3, [pc, #756]	; (80182c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8017fd0:	6819      	ldr	r1, [r3, #0]
 8017fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fd4:	fa5f fc81 	uxtb.w	ip, r1
 8017fd8:	435a      	muls	r2, r3
 8017fda:	1c53      	adds	r3, r2, #1
 8017fdc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8017fe0:	1212      	asrs	r2, r2, #8
 8017fe2:	b290      	uxth	r0, r2
 8017fe4:	43d2      	mvns	r2, r2
 8017fe6:	fb1c fc00 	smulbb	ip, ip, r0
 8017fea:	b2d3      	uxtb	r3, r2
 8017fec:	f899 2000 	ldrb.w	r2, [r9]
 8017ff0:	fb02 c203 	mla	r2, r2, r3, ip
 8017ff4:	b292      	uxth	r2, r2
 8017ff6:	f102 0c01 	add.w	ip, r2, #1
 8017ffa:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8017ffe:	f899 c001 	ldrb.w	ip, [r9, #1]
 8018002:	fb1c fc03 	smulbb	ip, ip, r3
 8018006:	1212      	asrs	r2, r2, #8
 8018008:	f889 2000 	strb.w	r2, [r9]
 801800c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8018010:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8018014:	fb02 c200 	mla	r2, r2, r0, ip
 8018018:	b292      	uxth	r2, r2
 801801a:	f102 0c01 	add.w	ip, r2, #1
 801801e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8018022:	1212      	asrs	r2, r2, #8
 8018024:	f889 2001 	strb.w	r2, [r9, #1]
 8018028:	f899 2002 	ldrb.w	r2, [r9, #2]
 801802c:	fb12 f303 	smulbb	r3, r2, r3
 8018030:	fb01 3300 	mla	r3, r1, r0, r3
 8018034:	b29b      	uxth	r3, r3
 8018036:	1c5a      	adds	r2, r3, #1
 8018038:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801803c:	121b      	asrs	r3, r3, #8
 801803e:	f889 3002 	strb.w	r3, [r9, #2]
 8018042:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018044:	f109 0903 	add.w	r9, r9, #3
 8018048:	441d      	add	r5, r3
 801804a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801804c:	441e      	add	r6, r3
 801804e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018050:	3b01      	subs	r3, #1
 8018052:	930d      	str	r3, [sp, #52]	; 0x34
 8018054:	e740      	b.n	8017ed8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8018056:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018058:	f108 0803 	add.w	r8, r8, #3
 801805c:	441d      	add	r5, r3
 801805e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018060:	441e      	add	r6, r3
 8018062:	9b08      	ldr	r3, [sp, #32]
 8018064:	3b01      	subs	r3, #1
 8018066:	9308      	str	r3, [sp, #32]
 8018068:	e6ef      	b.n	8017e4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801806a:	f47f aeff 	bne.w	8017e6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801806e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018070:	2b00      	cmp	r3, #0
 8018072:	f340 8122 	ble.w	80182ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8018076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801807a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801807c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018080:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018084:	eef0 6a48 	vmov.f32	s13, s16
 8018088:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801808c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018090:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018094:	ee16 5a90 	vmov	r5, s13
 8018098:	eef0 6a68 	vmov.f32	s13, s17
 801809c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80180a0:	ee16 6a90 	vmov	r6, s13
 80180a4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80180a8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80180ac:	ee37 8a48 	vsub.f32	s16, s14, s16
 80180b0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80180b4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80180b8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80180bc:	ee18 2a10 	vmov	r2, s16
 80180c0:	eeb0 8a47 	vmov.f32	s16, s14
 80180c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80180c8:	ee18 2a90 	vmov	r2, s17
 80180cc:	932b      	str	r3, [sp, #172]	; 0xac
 80180ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80180d0:	eef0 8a67 	vmov.f32	s17, s15
 80180d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80180d8:	932c      	str	r3, [sp, #176]	; 0xb0
 80180da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80180dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80180de:	3b01      	subs	r3, #1
 80180e0:	930c      	str	r3, [sp, #48]	; 0x30
 80180e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80180e4:	bf08      	it	eq
 80180e6:	4613      	moveq	r3, r2
 80180e8:	9308      	str	r3, [sp, #32]
 80180ea:	e6a7      	b.n	8017e3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80180ec:	2900      	cmp	r1, #0
 80180ee:	f43f af4f 	beq.w	8017f90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80180f2:	4453      	add	r3, sl
 80180f4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80180f8:	07db      	lsls	r3, r3, #31
 80180fa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80180fe:	bf54      	ite	pl
 8018100:	f00c 030f 	andpl.w	r3, ip, #15
 8018104:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8018108:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801810c:	b2db      	uxtb	r3, r3
 801810e:	930a      	str	r3, [sp, #40]	; 0x28
 8018110:	e73e      	b.n	8017f90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8018112:	1c44      	adds	r4, r0, #1
 8018114:	d195      	bne.n	8018042 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8018116:	4583      	cmp	fp, r0
 8018118:	dd93      	ble.n	8018042 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 801811a:	1c5c      	adds	r4, r3, #1
 801811c:	db91      	blt.n	8018042 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 801811e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018120:	429c      	cmp	r4, r3
 8018122:	dd8e      	ble.n	8018042 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8018124:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018126:	9002      	str	r0, [sp, #8]
 8018128:	9815      	ldr	r0, [sp, #84]	; 0x54
 801812a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801812e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018130:	463a      	mov	r2, r7
 8018132:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8018136:	e9cd b300 	strd	fp, r3, [sp]
 801813a:	4649      	mov	r1, r9
 801813c:	4653      	mov	r3, sl
 801813e:	f7ff fd61 	bl	8017c04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8018142:	e77e      	b.n	8018042 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8018144:	142a      	asrs	r2, r5, #16
 8018146:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801814a:	1433      	asrs	r3, r6, #16
 801814c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8018150:	fb0a 2303 	mla	r3, sl, r3, r2
 8018154:	085a      	lsrs	r2, r3, #1
 8018156:	07dc      	lsls	r4, r3, #31
 8018158:	5cba      	ldrb	r2, [r7, r2]
 801815a:	bf54      	ite	pl
 801815c:	f002 020f 	andpl.w	r2, r2, #15
 8018160:	1112      	asrmi	r2, r2, #4
 8018162:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018166:	b2d2      	uxtb	r2, r2
 8018168:	2900      	cmp	r1, #0
 801816a:	f000 8093 	beq.w	8018294 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 801816e:	1c5c      	adds	r4, r3, #1
 8018170:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8018174:	07e4      	lsls	r4, r4, #31
 8018176:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801817a:	bf54      	ite	pl
 801817c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8018180:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8018184:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8018188:	fa5f f48c 	uxtb.w	r4, ip
 801818c:	9412      	str	r4, [sp, #72]	; 0x48
 801818e:	b300      	cbz	r0, 80181d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8018190:	4453      	add	r3, sl
 8018192:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8018196:	07dc      	lsls	r4, r3, #31
 8018198:	f103 0301 	add.w	r3, r3, #1
 801819c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80181a0:	bf54      	ite	pl
 80181a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80181a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80181aa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80181ae:	fa5f f48c 	uxtb.w	r4, ip
 80181b2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80181b6:	940b      	str	r4, [sp, #44]	; 0x2c
 80181b8:	07dc      	lsls	r4, r3, #31
 80181ba:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80181be:	bf54      	ite	pl
 80181c0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80181c4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80181c8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80181cc:	fa5f f38c 	uxtb.w	r3, ip
 80181d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80181d2:	b289      	uxth	r1, r1
 80181d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80181d6:	b280      	uxth	r0, r0
 80181d8:	fb01 f300 	mul.w	r3, r1, r0
 80181dc:	0109      	lsls	r1, r1, #4
 80181de:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80181e2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80181e6:	1ac9      	subs	r1, r1, r3
 80181e8:	b280      	uxth	r0, r0
 80181ea:	b289      	uxth	r1, r1
 80181ec:	ebac 0c00 	sub.w	ip, ip, r0
 80181f0:	4361      	muls	r1, r4
 80181f2:	fa1f fc8c 	uxth.w	ip, ip
 80181f6:	fb02 120c 	mla	r2, r2, ip, r1
 80181fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80181fc:	fb00 2001 	mla	r0, r0, r1, r2
 8018200:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018202:	fb03 0302 	mla	r3, r3, r2, r0
 8018206:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801820a:	2b00      	cmp	r3, #0
 801820c:	d039      	beq.n	8018282 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801820e:	4a2d      	ldr	r2, [pc, #180]	; (80182c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8018210:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8018214:	6810      	ldr	r0, [r2, #0]
 8018216:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018218:	fa5f fc80 	uxtb.w	ip, r0
 801821c:	4353      	muls	r3, r2
 801821e:	1c5a      	adds	r2, r3, #1
 8018220:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018224:	121b      	asrs	r3, r3, #8
 8018226:	b29a      	uxth	r2, r3
 8018228:	43db      	mvns	r3, r3
 801822a:	fb1c fc02 	smulbb	ip, ip, r2
 801822e:	b2db      	uxtb	r3, r3
 8018230:	fb01 c103 	mla	r1, r1, r3, ip
 8018234:	b289      	uxth	r1, r1
 8018236:	f101 0c01 	add.w	ip, r1, #1
 801823a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801823e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8018242:	fb1c fc03 	smulbb	ip, ip, r3
 8018246:	1209      	asrs	r1, r1, #8
 8018248:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801824c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8018250:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8018254:	fb01 c102 	mla	r1, r1, r2, ip
 8018258:	b289      	uxth	r1, r1
 801825a:	f101 0c01 	add.w	ip, r1, #1
 801825e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8018262:	1209      	asrs	r1, r1, #8
 8018264:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8018268:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801826c:	fb11 f303 	smulbb	r3, r1, r3
 8018270:	fb00 3002 	mla	r0, r0, r2, r3
 8018274:	b280      	uxth	r0, r0
 8018276:	1c42      	adds	r2, r0, #1
 8018278:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801827c:	1200      	asrs	r0, r0, #8
 801827e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8018282:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018284:	f10e 0e03 	add.w	lr, lr, #3
 8018288:	f109 39ff 	add.w	r9, r9, #4294967295
 801828c:	441d      	add	r5, r3
 801828e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018290:	441e      	add	r6, r3
 8018292:	e604      	b.n	8017e9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8018294:	2800      	cmp	r0, #0
 8018296:	d09c      	beq.n	80181d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8018298:	4453      	add	r3, sl
 801829a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801829e:	07db      	lsls	r3, r3, #31
 80182a0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80182a4:	bf54      	ite	pl
 80182a6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80182aa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80182ae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80182b2:	fa5f f38c 	uxtb.w	r3, ip
 80182b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80182b8:	e78b      	b.n	80181d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80182ba:	b017      	add	sp, #92	; 0x5c
 80182bc:	ecbd 8b08 	vpop	{d8-d11}
 80182c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182c4:	20001108 	.word	0x20001108

080182c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80182c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182cc:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80182d0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80182d4:	2800      	cmp	r0, #0
 80182d6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80182da:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80182de:	fb0c 0e03 	mla	lr, ip, r3, r0
 80182e2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80182e6:	db6b      	blt.n	80183c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80182e8:	4580      	cmp	r8, r0
 80182ea:	dd69      	ble.n	80183c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80182ec:	f1bc 0f00 	cmp.w	ip, #0
 80182f0:	db66      	blt.n	80183c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80182f2:	45e1      	cmp	r9, ip
 80182f4:	dd64      	ble.n	80183c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80182f6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80182fa:	f01e 0f01 	tst.w	lr, #1
 80182fe:	5d16      	ldrb	r6, [r2, r4]
 8018300:	bf0c      	ite	eq
 8018302:	f006 060f 	andeq.w	r6, r6, #15
 8018306:	1136      	asrne	r6, r6, #4
 8018308:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801830c:	b2f6      	uxtb	r6, r6
 801830e:	f110 0a01 	adds.w	sl, r0, #1
 8018312:	d457      	bmi.n	80183c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8018314:	45d0      	cmp	r8, sl
 8018316:	dd55      	ble.n	80183c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8018318:	f1bc 0f00 	cmp.w	ip, #0
 801831c:	db52      	blt.n	80183c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801831e:	45e1      	cmp	r9, ip
 8018320:	dd50      	ble.n	80183c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8018322:	2f00      	cmp	r7, #0
 8018324:	f000 80a5 	beq.w	8018472 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8018328:	f10e 0b01 	add.w	fp, lr, #1
 801832c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8018330:	f01b 0f01 	tst.w	fp, #1
 8018334:	5d14      	ldrb	r4, [r2, r4]
 8018336:	bf0c      	ite	eq
 8018338:	f004 040f 	andeq.w	r4, r4, #15
 801833c:	1124      	asrne	r4, r4, #4
 801833e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8018342:	b2e4      	uxtb	r4, r4
 8018344:	2d00      	cmp	r5, #0
 8018346:	f000 808f 	beq.w	8018468 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801834a:	2800      	cmp	r0, #0
 801834c:	f10c 0c01 	add.w	ip, ip, #1
 8018350:	db3c      	blt.n	80183cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8018352:	4580      	cmp	r8, r0
 8018354:	dd3a      	ble.n	80183cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8018356:	f1bc 0f00 	cmp.w	ip, #0
 801835a:	db37      	blt.n	80183cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801835c:	45e1      	cmp	r9, ip
 801835e:	dd35      	ble.n	80183cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8018360:	eb03 0b0e 	add.w	fp, r3, lr
 8018364:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8018368:	f01b 0f01 	tst.w	fp, #1
 801836c:	5c10      	ldrb	r0, [r2, r0]
 801836e:	bf0c      	ite	eq
 8018370:	f000 000f 	andeq.w	r0, r0, #15
 8018374:	1100      	asrne	r0, r0, #4
 8018376:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801837a:	b2c0      	uxtb	r0, r0
 801837c:	f1ba 0f00 	cmp.w	sl, #0
 8018380:	db26      	blt.n	80183d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8018382:	45d0      	cmp	r8, sl
 8018384:	dd24      	ble.n	80183d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8018386:	f1bc 0f00 	cmp.w	ip, #0
 801838a:	db21      	blt.n	80183d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801838c:	45e1      	cmp	r9, ip
 801838e:	dd1f      	ble.n	80183d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8018390:	b307      	cbz	r7, 80183d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8018392:	3301      	adds	r3, #1
 8018394:	449e      	add	lr, r3
 8018396:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801839a:	f01e 0f01 	tst.w	lr, #1
 801839e:	5cd3      	ldrb	r3, [r2, r3]
 80183a0:	bf0c      	ite	eq
 80183a2:	f003 030f 	andeq.w	r3, r3, #15
 80183a6:	111b      	asrne	r3, r3, #4
 80183a8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80183ac:	b2db      	uxtb	r3, r3
 80183ae:	2f0f      	cmp	r7, #15
 80183b0:	d911      	bls.n	80183d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80183b2:	4b32      	ldr	r3, [pc, #200]	; (801847c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80183b4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80183b8:	4a31      	ldr	r2, [pc, #196]	; (8018480 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80183ba:	4832      	ldr	r0, [pc, #200]	; (8018484 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80183bc:	f000 fc10 	bl	8018be0 <__assert_func>
 80183c0:	2600      	movs	r6, #0
 80183c2:	e7a4      	b.n	801830e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80183c4:	2400      	movs	r4, #0
 80183c6:	e7bd      	b.n	8018344 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80183c8:	463c      	mov	r4, r7
 80183ca:	e7be      	b.n	801834a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80183cc:	2000      	movs	r0, #0
 80183ce:	e7d5      	b.n	801837c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80183d0:	2300      	movs	r3, #0
 80183d2:	e7ec      	b.n	80183ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80183d4:	463b      	mov	r3, r7
 80183d6:	2d0f      	cmp	r5, #15
 80183d8:	d8eb      	bhi.n	80183b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80183da:	b2bf      	uxth	r7, r7
 80183dc:	b2ad      	uxth	r5, r5
 80183de:	fb07 f205 	mul.w	r2, r7, r5
 80183e2:	013f      	lsls	r7, r7, #4
 80183e4:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80183e8:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80183ec:	1abf      	subs	r7, r7, r2
 80183ee:	b2ad      	uxth	r5, r5
 80183f0:	b2bf      	uxth	r7, r7
 80183f2:	ebac 0c05 	sub.w	ip, ip, r5
 80183f6:	437c      	muls	r4, r7
 80183f8:	fa1f fc8c 	uxth.w	ip, ip
 80183fc:	fb06 440c 	mla	r4, r6, ip, r4
 8018400:	fb05 4400 	mla	r4, r5, r0, r4
 8018404:	fb02 4303 	mla	r3, r2, r3, r4
 8018408:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801840c:	b353      	cbz	r3, 8018464 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801840e:	4a1e      	ldr	r2, [pc, #120]	; (8018488 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8018410:	7808      	ldrb	r0, [r1, #0]
 8018412:	6814      	ldr	r4, [r2, #0]
 8018414:	b29a      	uxth	r2, r3
 8018416:	43db      	mvns	r3, r3
 8018418:	b2e5      	uxtb	r5, r4
 801841a:	b2db      	uxtb	r3, r3
 801841c:	fb15 f502 	smulbb	r5, r5, r2
 8018420:	fb00 5003 	mla	r0, r0, r3, r5
 8018424:	b280      	uxth	r0, r0
 8018426:	1c45      	adds	r5, r0, #1
 8018428:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801842c:	784d      	ldrb	r5, [r1, #1]
 801842e:	fb15 f503 	smulbb	r5, r5, r3
 8018432:	1200      	asrs	r0, r0, #8
 8018434:	7008      	strb	r0, [r1, #0]
 8018436:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801843a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801843e:	fb00 5002 	mla	r0, r0, r2, r5
 8018442:	b280      	uxth	r0, r0
 8018444:	1c45      	adds	r5, r0, #1
 8018446:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801844a:	1200      	asrs	r0, r0, #8
 801844c:	7048      	strb	r0, [r1, #1]
 801844e:	7888      	ldrb	r0, [r1, #2]
 8018450:	fb10 f303 	smulbb	r3, r0, r3
 8018454:	fb04 3202 	mla	r2, r4, r2, r3
 8018458:	b292      	uxth	r2, r2
 801845a:	1c53      	adds	r3, r2, #1
 801845c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8018460:	1212      	asrs	r2, r2, #8
 8018462:	708a      	strb	r2, [r1, #2]
 8018464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018468:	2f0f      	cmp	r7, #15
 801846a:	d8a2      	bhi.n	80183b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801846c:	462b      	mov	r3, r5
 801846e:	4628      	mov	r0, r5
 8018470:	e7b3      	b.n	80183da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8018472:	2d00      	cmp	r5, #0
 8018474:	d1a8      	bne.n	80183c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8018476:	462c      	mov	r4, r5
 8018478:	e7f8      	b.n	801846c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801847a:	bf00      	nop
 801847c:	0801c5d4 	.word	0x0801c5d4
 8018480:	0801caca 	.word	0x0801caca
 8018484:	0801c69d 	.word	0x0801c69d
 8018488:	20001108 	.word	0x20001108

0801848c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801848c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018490:	ed2d 8b08 	vpush	{d8-d11}
 8018494:	b095      	sub	sp, #84	; 0x54
 8018496:	461c      	mov	r4, r3
 8018498:	eeb0 aa40 	vmov.f32	s20, s0
 801849c:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80184a0:	eef0 9a60 	vmov.f32	s19, s1
 80184a4:	920e      	str	r2, [sp, #56]	; 0x38
 80184a6:	eeb0 9a41 	vmov.f32	s18, s2
 80184aa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80184ac:	eeb0 8a62 	vmov.f32	s16, s5
 80184b0:	9307      	str	r3, [sp, #28]
 80184b2:	eef0 8a43 	vmov.f32	s17, s6
 80184b6:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80184ba:	eef0 ba44 	vmov.f32	s23, s8
 80184be:	9013      	str	r0, [sp, #76]	; 0x4c
 80184c0:	eeb0 ba64 	vmov.f32	s22, s9
 80184c4:	9109      	str	r1, [sp, #36]	; 0x24
 80184c6:	eef0 aa45 	vmov.f32	s21, s10
 80184ca:	9308      	str	r3, [sp, #32]
 80184cc:	6850      	ldr	r0, [r2, #4]
 80184ce:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80184d2:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80184d6:	fb00 1803 	mla	r8, r0, r3, r1
 80184da:	6813      	ldr	r3, [r2, #0]
 80184dc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80184e0:	4498      	add	r8, r3
 80184e2:	9b07      	ldr	r3, [sp, #28]
 80184e4:	3301      	adds	r3, #1
 80184e6:	f023 0301 	bic.w	r3, r3, #1
 80184ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80184ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80184ee:	681f      	ldr	r7, [r3, #0]
 80184f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	dc03      	bgt.n	80184fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80184f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	f340 8238 	ble.w	801896e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80184fe:	2c00      	cmp	r4, #0
 8018500:	f340 8109 	ble.w	8018716 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8018504:	142a      	asrs	r2, r5, #16
 8018506:	ea4f 4326 	mov.w	r3, r6, asr #16
 801850a:	d42b      	bmi.n	8018564 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801850c:	1c51      	adds	r1, r2, #1
 801850e:	9807      	ldr	r0, [sp, #28]
 8018510:	4288      	cmp	r0, r1
 8018512:	dd2a      	ble.n	801856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8018514:	2b00      	cmp	r3, #0
 8018516:	db28      	blt.n	801856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8018518:	1c59      	adds	r1, r3, #1
 801851a:	9808      	ldr	r0, [sp, #32]
 801851c:	4288      	cmp	r0, r1
 801851e:	dd24      	ble.n	801856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8018520:	1e63      	subs	r3, r4, #1
 8018522:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018524:	fb02 5203 	mla	r2, r2, r3, r5
 8018528:	1412      	asrs	r2, r2, #16
 801852a:	d429      	bmi.n	8018580 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801852c:	3201      	adds	r2, #1
 801852e:	9907      	ldr	r1, [sp, #28]
 8018530:	4291      	cmp	r1, r2
 8018532:	dd25      	ble.n	8018580 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8018534:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8018536:	fb02 6303 	mla	r3, r2, r3, r6
 801853a:	141b      	asrs	r3, r3, #16
 801853c:	d420      	bmi.n	8018580 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801853e:	3301      	adds	r3, #1
 8018540:	9a08      	ldr	r2, [sp, #32]
 8018542:	429a      	cmp	r2, r3
 8018544:	dd1c      	ble.n	8018580 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8018546:	f108 0e03 	add.w	lr, r8, #3
 801854a:	46a1      	mov	r9, r4
 801854c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8018550:	f1b9 0f00 	cmp.w	r9, #0
 8018554:	f300 8155 	bgt.w	8018802 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8018558:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801855c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018560:	44a0      	add	r8, r4
 8018562:	e0da      	b.n	801871a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8018564:	1c50      	adds	r0, r2, #1
 8018566:	f040 80ce 	bne.w	8018706 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 801856a:	9907      	ldr	r1, [sp, #28]
 801856c:	4291      	cmp	r1, r2
 801856e:	f340 80ca 	ble.w	8018706 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8018572:	1c59      	adds	r1, r3, #1
 8018574:	f2c0 80c7 	blt.w	8018706 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8018578:	9a08      	ldr	r2, [sp, #32]
 801857a:	4293      	cmp	r3, r2
 801857c:	f280 80c3 	bge.w	8018706 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8018580:	46a3      	mov	fp, r4
 8018582:	46c1      	mov	r9, r8
 8018584:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8018588:	f1bb 0f00 	cmp.w	fp, #0
 801858c:	dde4      	ble.n	8018558 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801858e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8018592:	1428      	asrs	r0, r5, #16
 8018594:	ea4f 4326 	mov.w	r3, r6, asr #16
 8018598:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801859c:	920a      	str	r2, [sp, #40]	; 0x28
 801859e:	f100 8116 	bmi.w	80187ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80185a2:	f100 0c01 	add.w	ip, r0, #1
 80185a6:	9a07      	ldr	r2, [sp, #28]
 80185a8:	4562      	cmp	r2, ip
 80185aa:	f340 8112 	ble.w	80187d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	f2c0 810f 	blt.w	80187d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80185b4:	f103 0c01 	add.w	ip, r3, #1
 80185b8:	9a08      	ldr	r2, [sp, #32]
 80185ba:	4562      	cmp	r2, ip
 80185bc:	f340 8109 	ble.w	80187d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80185c0:	fb03 030a 	mla	r3, r3, sl, r0
 80185c4:	0858      	lsrs	r0, r3, #1
 80185c6:	07da      	lsls	r2, r3, #31
 80185c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80185ca:	5c38      	ldrb	r0, [r7, r0]
 80185cc:	bf54      	ite	pl
 80185ce:	f000 000f 	andpl.w	r0, r0, #15
 80185d2:	1100      	asrmi	r0, r0, #4
 80185d4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80185d8:	b2c0      	uxtb	r0, r0
 80185da:	2a00      	cmp	r2, #0
 80185dc:	f000 80dd 	beq.w	801879a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 80185e0:	f103 0e01 	add.w	lr, r3, #1
 80185e4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80185e8:	f01e 0f01 	tst.w	lr, #1
 80185ec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80185f0:	bf0c      	ite	eq
 80185f2:	f00c 0c0f 	andeq.w	ip, ip, #15
 80185f6:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80185fa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80185fe:	fa5f fc8c 	uxtb.w	ip, ip
 8018602:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8018606:	b301      	cbz	r1, 801864a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8018608:	4453      	add	r3, sl
 801860a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801860e:	07da      	lsls	r2, r3, #31
 8018610:	f103 0301 	add.w	r3, r3, #1
 8018614:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8018618:	bf54      	ite	pl
 801861a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801861e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8018622:	07da      	lsls	r2, r3, #31
 8018624:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8018628:	fa5f fc8c 	uxtb.w	ip, ip
 801862c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8018630:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8018634:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8018638:	bf54      	ite	pl
 801863a:	f00c 030f 	andpl.w	r3, ip, #15
 801863e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8018642:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8018646:	b2db      	uxtb	r3, r3
 8018648:	9310      	str	r3, [sp, #64]	; 0x40
 801864a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801864e:	b289      	uxth	r1, r1
 8018650:	fb02 f301 	mul.w	r3, r2, r1
 8018654:	0112      	lsls	r2, r2, #4
 8018656:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801865a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801865e:	1ad2      	subs	r2, r2, r3
 8018660:	fa1f fe81 	uxth.w	lr, r1
 8018664:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018666:	b292      	uxth	r2, r2
 8018668:	ebac 0c0e 	sub.w	ip, ip, lr
 801866c:	434a      	muls	r2, r1
 801866e:	fa1f fc8c 	uxth.w	ip, ip
 8018672:	fb00 200c 	mla	r0, r0, ip, r2
 8018676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018678:	fb0e 0002 	mla	r0, lr, r2, r0
 801867c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801867e:	fb03 0002 	mla	r0, r3, r2, r0
 8018682:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018686:	b3a8      	cbz	r0, 80186f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8018688:	4bbb      	ldr	r3, [pc, #748]	; (8018978 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 801868a:	28ff      	cmp	r0, #255	; 0xff
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8018692:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8018696:	b2db      	uxtb	r3, r3
 8018698:	f000 8092 	beq.w	80187c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 801869c:	b282      	uxth	r2, r0
 801869e:	43c0      	mvns	r0, r0
 80186a0:	f899 e000 	ldrb.w	lr, [r9]
 80186a4:	fb13 f302 	smulbb	r3, r3, r2
 80186a8:	b2c0      	uxtb	r0, r0
 80186aa:	fb11 f102 	smulbb	r1, r1, r2
 80186ae:	fb0e 3300 	mla	r3, lr, r0, r3
 80186b2:	fb1c f202 	smulbb	r2, ip, r2
 80186b6:	b29b      	uxth	r3, r3
 80186b8:	f103 0e01 	add.w	lr, r3, #1
 80186bc:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80186c0:	121b      	asrs	r3, r3, #8
 80186c2:	f889 3000 	strb.w	r3, [r9]
 80186c6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80186ca:	fb03 1100 	mla	r1, r3, r0, r1
 80186ce:	b289      	uxth	r1, r1
 80186d0:	1c4b      	adds	r3, r1, #1
 80186d2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80186d6:	f899 3002 	ldrb.w	r3, [r9, #2]
 80186da:	fb03 2000 	mla	r0, r3, r0, r2
 80186de:	1209      	asrs	r1, r1, #8
 80186e0:	b280      	uxth	r0, r0
 80186e2:	f889 1001 	strb.w	r1, [r9, #1]
 80186e6:	f100 0c01 	add.w	ip, r0, #1
 80186ea:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80186ee:	1200      	asrs	r0, r0, #8
 80186f0:	f889 0002 	strb.w	r0, [r9, #2]
 80186f4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80186f6:	f109 0903 	add.w	r9, r9, #3
 80186fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80186fe:	441d      	add	r5, r3
 8018700:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018702:	441e      	add	r6, r3
 8018704:	e740      	b.n	8018588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8018706:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018708:	3c01      	subs	r4, #1
 801870a:	f108 0803 	add.w	r8, r8, #3
 801870e:	441d      	add	r5, r3
 8018710:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018712:	441e      	add	r6, r3
 8018714:	e6f3      	b.n	80184fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8018716:	f47f af03 	bne.w	8018520 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801871a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801871c:	2b00      	cmp	r3, #0
 801871e:	f340 8126 	ble.w	801896e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8018722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018726:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018728:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801872c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018730:	eef0 6a48 	vmov.f32	s13, s16
 8018734:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018738:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801873c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018740:	ee16 5a90 	vmov	r5, s13
 8018744:	eef0 6a68 	vmov.f32	s13, s17
 8018748:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801874c:	ee16 6a90 	vmov	r6, s13
 8018750:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018754:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018758:	ee37 8a48 	vsub.f32	s16, s14, s16
 801875c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018760:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018764:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018768:	ee18 2a10 	vmov	r2, s16
 801876c:	eeb0 8a47 	vmov.f32	s16, s14
 8018770:	fb92 f3f3 	sdiv	r3, r2, r3
 8018774:	ee18 2a90 	vmov	r2, s17
 8018778:	9329      	str	r3, [sp, #164]	; 0xa4
 801877a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801877c:	eef0 8a67 	vmov.f32	s17, s15
 8018780:	fb92 f3f3 	sdiv	r3, r2, r3
 8018784:	932a      	str	r3, [sp, #168]	; 0xa8
 8018786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801878a:	3b01      	subs	r3, #1
 801878c:	9309      	str	r3, [sp, #36]	; 0x24
 801878e:	bf08      	it	eq
 8018790:	4614      	moveq	r4, r2
 8018792:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018794:	bf18      	it	ne
 8018796:	461c      	movne	r4, r3
 8018798:	e6aa      	b.n	80184f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801879a:	2900      	cmp	r1, #0
 801879c:	f43f af55 	beq.w	801864a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80187a0:	4453      	add	r3, sl
 80187a2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80187a6:	07db      	lsls	r3, r3, #31
 80187a8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80187ac:	bf54      	ite	pl
 80187ae:	f00c 030f 	andpl.w	r3, ip, #15
 80187b2:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80187b6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80187ba:	b2db      	uxtb	r3, r3
 80187bc:	930c      	str	r3, [sp, #48]	; 0x30
 80187be:	e744      	b.n	801864a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80187c0:	f889 3000 	strb.w	r3, [r9]
 80187c4:	f889 1001 	strb.w	r1, [r9, #1]
 80187c8:	f889 c002 	strb.w	ip, [r9, #2]
 80187cc:	e792      	b.n	80186f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80187ce:	1c42      	adds	r2, r0, #1
 80187d0:	d190      	bne.n	80186f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80187d2:	9a07      	ldr	r2, [sp, #28]
 80187d4:	4282      	cmp	r2, r0
 80187d6:	dd8d      	ble.n	80186f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80187d8:	1c5a      	adds	r2, r3, #1
 80187da:	db8b      	blt.n	80186f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80187dc:	9a08      	ldr	r2, [sp, #32]
 80187de:	429a      	cmp	r2, r3
 80187e0:	dd88      	ble.n	80186f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80187e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80187e4:	9105      	str	r1, [sp, #20]
 80187e6:	4649      	mov	r1, r9
 80187e8:	9002      	str	r0, [sp, #8]
 80187ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80187ec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80187f0:	9b08      	ldr	r3, [sp, #32]
 80187f2:	463a      	mov	r2, r7
 80187f4:	9301      	str	r3, [sp, #4]
 80187f6:	9b07      	ldr	r3, [sp, #28]
 80187f8:	9300      	str	r3, [sp, #0]
 80187fa:	4653      	mov	r3, sl
 80187fc:	f7ff fd64 	bl	80182c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8018800:	e778      	b.n	80186f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8018802:	142a      	asrs	r2, r5, #16
 8018804:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018808:	1433      	asrs	r3, r6, #16
 801880a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801880e:	fb0a 2303 	mla	r3, sl, r3, r2
 8018812:	085a      	lsrs	r2, r3, #1
 8018814:	07d9      	lsls	r1, r3, #31
 8018816:	5cba      	ldrb	r2, [r7, r2]
 8018818:	bf54      	ite	pl
 801881a:	f002 020f 	andpl.w	r2, r2, #15
 801881e:	1112      	asrmi	r2, r2, #4
 8018820:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018824:	b2d2      	uxtb	r2, r2
 8018826:	2800      	cmp	r0, #0
 8018828:	f000 808a 	beq.w	8018940 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 801882c:	f103 0b01 	add.w	fp, r3, #1
 8018830:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8018834:	f01b 0f01 	tst.w	fp, #1
 8018838:	5c79      	ldrb	r1, [r7, r1]
 801883a:	bf0c      	ite	eq
 801883c:	f001 010f 	andeq.w	r1, r1, #15
 8018840:	1109      	asrne	r1, r1, #4
 8018842:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8018846:	b2c9      	uxtb	r1, r1
 8018848:	9111      	str	r1, [sp, #68]	; 0x44
 801884a:	f1bc 0f00 	cmp.w	ip, #0
 801884e:	d019      	beq.n	8018884 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8018850:	4453      	add	r3, sl
 8018852:	0859      	lsrs	r1, r3, #1
 8018854:	f013 0f01 	tst.w	r3, #1
 8018858:	f103 0301 	add.w	r3, r3, #1
 801885c:	5c79      	ldrb	r1, [r7, r1]
 801885e:	bf0c      	ite	eq
 8018860:	f001 010f 	andeq.w	r1, r1, #15
 8018864:	1109      	asrne	r1, r1, #4
 8018866:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801886a:	b2c9      	uxtb	r1, r1
 801886c:	910d      	str	r1, [sp, #52]	; 0x34
 801886e:	0859      	lsrs	r1, r3, #1
 8018870:	07db      	lsls	r3, r3, #31
 8018872:	5c79      	ldrb	r1, [r7, r1]
 8018874:	bf54      	ite	pl
 8018876:	f001 010f 	andpl.w	r1, r1, #15
 801887a:	1109      	asrmi	r1, r1, #4
 801887c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8018880:	b2c9      	uxtb	r1, r1
 8018882:	9112      	str	r1, [sp, #72]	; 0x48
 8018884:	b280      	uxth	r0, r0
 8018886:	fa1f fc8c 	uxth.w	ip, ip
 801888a:	fb00 f30c 	mul.w	r3, r0, ip
 801888e:	0100      	lsls	r0, r0, #4
 8018890:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8018894:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8018898:	1ac0      	subs	r0, r0, r3
 801889a:	fa1f fc8c 	uxth.w	ip, ip
 801889e:	b280      	uxth	r0, r0
 80188a0:	eba1 010c 	sub.w	r1, r1, ip
 80188a4:	fa1f fb81 	uxth.w	fp, r1
 80188a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80188aa:	4348      	muls	r0, r1
 80188ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80188ae:	fb02 020b 	mla	r2, r2, fp, r0
 80188b2:	fb0c 2c01 	mla	ip, ip, r1, r2
 80188b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80188b8:	fb03 c302 	mla	r3, r3, r2, ip
 80188bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80188c0:	b3ab      	cbz	r3, 801892e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80188c2:	4a2d      	ldr	r2, [pc, #180]	; (8018978 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80188c4:	2bff      	cmp	r3, #255	; 0xff
 80188c6:	6811      	ldr	r1, [r2, #0]
 80188c8:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 80188cc:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 80188d0:	b2c9      	uxtb	r1, r1
 80188d2:	d045      	beq.n	8018960 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 80188d4:	b298      	uxth	r0, r3
 80188d6:	43db      	mvns	r3, r3
 80188d8:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 80188dc:	fb11 f100 	smulbb	r1, r1, r0
 80188e0:	b2db      	uxtb	r3, r3
 80188e2:	fb1c fc00 	smulbb	ip, ip, r0
 80188e6:	fb02 1103 	mla	r1, r2, r3, r1
 80188ea:	fb1b f000 	smulbb	r0, fp, r0
 80188ee:	b289      	uxth	r1, r1
 80188f0:	1c4a      	adds	r2, r1, #1
 80188f2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80188f6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80188fa:	fb02 cc03 	mla	ip, r2, r3, ip
 80188fe:	1209      	asrs	r1, r1, #8
 8018900:	fa1f fc8c 	uxth.w	ip, ip
 8018904:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8018908:	f10c 0201 	add.w	r2, ip, #1
 801890c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8018910:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8018914:	fb02 0303 	mla	r3, r2, r3, r0
 8018918:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801891c:	b29b      	uxth	r3, r3
 801891e:	f80e cc02 	strb.w	ip, [lr, #-2]
 8018922:	1c5a      	adds	r2, r3, #1
 8018924:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018928:	121b      	asrs	r3, r3, #8
 801892a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 801892e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018930:	f10e 0e03 	add.w	lr, lr, #3
 8018934:	f109 39ff 	add.w	r9, r9, #4294967295
 8018938:	441d      	add	r5, r3
 801893a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801893c:	441e      	add	r6, r3
 801893e:	e607      	b.n	8018550 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8018940:	f1bc 0f00 	cmp.w	ip, #0
 8018944:	d09e      	beq.n	8018884 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8018946:	4453      	add	r3, sl
 8018948:	0859      	lsrs	r1, r3, #1
 801894a:	07db      	lsls	r3, r3, #31
 801894c:	5c79      	ldrb	r1, [r7, r1]
 801894e:	bf54      	ite	pl
 8018950:	f001 010f 	andpl.w	r1, r1, #15
 8018954:	1109      	asrmi	r1, r1, #4
 8018956:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801895a:	b2c9      	uxtb	r1, r1
 801895c:	910d      	str	r1, [sp, #52]	; 0x34
 801895e:	e791      	b.n	8018884 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8018960:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8018964:	f80e cc02 	strb.w	ip, [lr, #-2]
 8018968:	f80e bc01 	strb.w	fp, [lr, #-1]
 801896c:	e7df      	b.n	801892e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801896e:	b015      	add	sp, #84	; 0x54
 8018970:	ecbd 8b08 	vpop	{d8-d11}
 8018974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018978:	20001108 	.word	0x20001108

0801897c <CRC_Lock>:
 801897c:	4a1d      	ldr	r2, [pc, #116]	; (80189f4 <CRC_Lock+0x78>)
 801897e:	b530      	push	{r4, r5, lr}
 8018980:	6813      	ldr	r3, [r2, #0]
 8018982:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8018986:	f24c 2540 	movw	r5, #49728	; 0xc240
 801898a:	f023 0301 	bic.w	r3, r3, #1
 801898e:	6013      	str	r3, [r2, #0]
 8018990:	4b19      	ldr	r3, [pc, #100]	; (80189f8 <CRC_Lock+0x7c>)
 8018992:	681a      	ldr	r2, [r3, #0]
 8018994:	4022      	ands	r2, r4
 8018996:	42aa      	cmp	r2, r5
 8018998:	d005      	beq.n	80189a6 <CRC_Lock+0x2a>
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	f24c 2270 	movw	r2, #49776	; 0xc270
 80189a0:	4023      	ands	r3, r4
 80189a2:	4293      	cmp	r3, r2
 80189a4:	d11d      	bne.n	80189e2 <CRC_Lock+0x66>
 80189a6:	4b15      	ldr	r3, [pc, #84]	; (80189fc <CRC_Lock+0x80>)
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	b9d3      	cbnz	r3, 80189e2 <CRC_Lock+0x66>
 80189ac:	4a14      	ldr	r2, [pc, #80]	; (8018a00 <CRC_Lock+0x84>)
 80189ae:	6813      	ldr	r3, [r2, #0]
 80189b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80189b4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80189b8:	d006      	beq.n	80189c8 <CRC_Lock+0x4c>
 80189ba:	6813      	ldr	r3, [r2, #0]
 80189bc:	f240 4283 	movw	r2, #1155	; 0x483
 80189c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80189c4:	4293      	cmp	r3, r2
 80189c6:	d10c      	bne.n	80189e2 <CRC_Lock+0x66>
 80189c8:	4b0e      	ldr	r3, [pc, #56]	; (8018a04 <CRC_Lock+0x88>)
 80189ca:	2201      	movs	r2, #1
 80189cc:	601a      	str	r2, [r3, #0]
 80189ce:	681a      	ldr	r2, [r3, #0]
 80189d0:	2a00      	cmp	r2, #0
 80189d2:	d1fc      	bne.n	80189ce <CRC_Lock+0x52>
 80189d4:	4b0c      	ldr	r3, [pc, #48]	; (8018a08 <CRC_Lock+0x8c>)
 80189d6:	6018      	str	r0, [r3, #0]
 80189d8:	6818      	ldr	r0, [r3, #0]
 80189da:	1a43      	subs	r3, r0, r1
 80189dc:	4258      	negs	r0, r3
 80189de:	4158      	adcs	r0, r3
 80189e0:	bd30      	pop	{r4, r5, pc}
 80189e2:	4b0a      	ldr	r3, [pc, #40]	; (8018a0c <CRC_Lock+0x90>)
 80189e4:	2201      	movs	r2, #1
 80189e6:	601a      	str	r2, [r3, #0]
 80189e8:	681a      	ldr	r2, [r3, #0]
 80189ea:	2a00      	cmp	r2, #0
 80189ec:	d1fc      	bne.n	80189e8 <CRC_Lock+0x6c>
 80189ee:	4b08      	ldr	r3, [pc, #32]	; (8018a10 <CRC_Lock+0x94>)
 80189f0:	e7f1      	b.n	80189d6 <CRC_Lock+0x5a>
 80189f2:	bf00      	nop
 80189f4:	e0002000 	.word	0xe0002000
 80189f8:	e000ed00 	.word	0xe000ed00
 80189fc:	e0042000 	.word	0xe0042000
 8018a00:	5c001000 	.word	0x5c001000
 8018a04:	58024c08 	.word	0x58024c08
 8018a08:	58024c00 	.word	0x58024c00
 8018a0c:	40023008 	.word	0x40023008
 8018a10:	40023000 	.word	0x40023000

08018a14 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8018a14:	6101      	str	r1, [r0, #16]
 8018a16:	4770      	bx	lr

08018a18 <_ZN8touchgfx8Gestures4tickEv>:
 8018a18:	7b83      	ldrb	r3, [r0, #14]
 8018a1a:	b14b      	cbz	r3, 8018a30 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8018a1c:	8903      	ldrh	r3, [r0, #8]
 8018a1e:	3301      	adds	r3, #1
 8018a20:	b29b      	uxth	r3, r3
 8018a22:	2b07      	cmp	r3, #7
 8018a24:	8103      	strh	r3, [r0, #8]
 8018a26:	bf81      	itttt	hi
 8018a28:	2300      	movhi	r3, #0
 8018a2a:	8143      	strhhi	r3, [r0, #10]
 8018a2c:	8183      	strhhi	r3, [r0, #12]
 8018a2e:	7383      	strbhi	r3, [r0, #14]
 8018a30:	4770      	bx	lr
	...

08018a34 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8018a34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018a38:	4604      	mov	r4, r0
 8018a3a:	4698      	mov	r8, r3
 8018a3c:	8880      	ldrh	r0, [r0, #4]
 8018a3e:	4617      	mov	r7, r2
 8018a40:	4b1d      	ldr	r3, [pc, #116]	; (8018ab8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8018a42:	460e      	mov	r6, r1
 8018a44:	f8ad 0006 	strh.w	r0, [sp, #6]
 8018a48:	eba8 0000 	sub.w	r0, r8, r0
 8018a4c:	9300      	str	r3, [sp, #0]
 8018a4e:	2300      	movs	r3, #0
 8018a50:	b280      	uxth	r0, r0
 8018a52:	8aa2      	ldrh	r2, [r4, #20]
 8018a54:	f88d 3004 	strb.w	r3, [sp, #4]
 8018a58:	b203      	sxth	r3, r0
 8018a5a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8018a5e:	88e1      	ldrh	r1, [r4, #6]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	f8ad 800a 	strh.w	r8, [sp, #10]
 8018a66:	f8ad 1008 	strh.w	r1, [sp, #8]
 8018a6a:	bfb8      	it	lt
 8018a6c:	4240      	neglt	r0, r0
 8018a6e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8018a72:	bfb8      	it	lt
 8018a74:	b203      	sxthlt	r3, r0
 8018a76:	4293      	cmp	r3, r2
 8018a78:	dc08      	bgt.n	8018a8c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8018a7a:	1a69      	subs	r1, r5, r1
 8018a7c:	b289      	uxth	r1, r1
 8018a7e:	b20b      	sxth	r3, r1
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	bfbc      	itt	lt
 8018a84:	4249      	neglt	r1, r1
 8018a86:	b20b      	sxthlt	r3, r1
 8018a88:	429a      	cmp	r2, r3
 8018a8a:	da13      	bge.n	8018ab4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8018a8c:	6920      	ldr	r0, [r4, #16]
 8018a8e:	4669      	mov	r1, sp
 8018a90:	eba8 0606 	sub.w	r6, r8, r6
 8018a94:	1bef      	subs	r7, r5, r7
 8018a96:	6803      	ldr	r3, [r0, #0]
 8018a98:	685b      	ldr	r3, [r3, #4]
 8018a9a:	4798      	blx	r3
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	2001      	movs	r0, #1
 8018aa0:	8166      	strh	r6, [r4, #10]
 8018aa2:	8123      	strh	r3, [r4, #8]
 8018aa4:	81a7      	strh	r7, [r4, #12]
 8018aa6:	f8a4 8004 	strh.w	r8, [r4, #4]
 8018aaa:	80e5      	strh	r5, [r4, #6]
 8018aac:	73a0      	strb	r0, [r4, #14]
 8018aae:	b004      	add	sp, #16
 8018ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ab4:	2000      	movs	r0, #0
 8018ab6:	e7fa      	b.n	8018aae <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8018ab8:	0801b80c 	.word	0x0801b80c

08018abc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8018abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018abe:	461e      	mov	r6, r3
 8018ac0:	1e4b      	subs	r3, r1, #1
 8018ac2:	b085      	sub	sp, #20
 8018ac4:	4604      	mov	r4, r0
 8018ac6:	2b01      	cmp	r3, #1
 8018ac8:	460d      	mov	r5, r1
 8018aca:	4617      	mov	r7, r2
 8018acc:	d84b      	bhi.n	8018b66 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8018ace:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018ad2:	1cd3      	adds	r3, r2, #3
 8018ad4:	b29b      	uxth	r3, r3
 8018ad6:	2b06      	cmp	r3, #6
 8018ad8:	d916      	bls.n	8018b08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8018ada:	f8df c098 	ldr.w	ip, [pc, #152]	; 8018b74 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8018ade:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018ae2:	f8cd c004 	str.w	ip, [sp, #4]
 8018ae6:	f04f 0c00 	mov.w	ip, #0
 8018aea:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018aee:	6900      	ldr	r0, [r0, #16]
 8018af0:	f8ad 100c 	strh.w	r1, [sp, #12]
 8018af4:	a901      	add	r1, sp, #4
 8018af6:	f88d c008 	strb.w	ip, [sp, #8]
 8018afa:	f8ad 200a 	strh.w	r2, [sp, #10]
 8018afe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018b02:	6803      	ldr	r3, [r0, #0]
 8018b04:	689b      	ldr	r3, [r3, #8]
 8018b06:	4798      	blx	r3
 8018b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018b0c:	1cd3      	adds	r3, r2, #3
 8018b0e:	b29b      	uxth	r3, r3
 8018b10:	2b06      	cmp	r3, #6
 8018b12:	d916      	bls.n	8018b42 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8018b14:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8018b74 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8018b18:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018b1c:	f8cd c004 	str.w	ip, [sp, #4]
 8018b20:	f04f 0c01 	mov.w	ip, #1
 8018b24:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018b28:	6920      	ldr	r0, [r4, #16]
 8018b2a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8018b2e:	a901      	add	r1, sp, #4
 8018b30:	f88d c008 	strb.w	ip, [sp, #8]
 8018b34:	f8ad 200a 	strh.w	r2, [sp, #10]
 8018b38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018b3c:	6803      	ldr	r3, [r0, #0]
 8018b3e:	689b      	ldr	r3, [r3, #8]
 8018b40:	4798      	blx	r3
 8018b42:	4b0b      	ldr	r3, [pc, #44]	; (8018b70 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8018b44:	a901      	add	r1, sp, #4
 8018b46:	6920      	ldr	r0, [r4, #16]
 8018b48:	9301      	str	r3, [sp, #4]
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	f88d 5008 	strb.w	r5, [sp, #8]
 8018b50:	f8ad 700a 	strh.w	r7, [sp, #10]
 8018b54:	f8ad 600c 	strh.w	r6, [sp, #12]
 8018b58:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018b5c:	6803      	ldr	r3, [r0, #0]
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	4798      	blx	r3
 8018b62:	b005      	add	sp, #20
 8018b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b66:	2900      	cmp	r1, #0
 8018b68:	d1eb      	bne.n	8018b42 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8018b6a:	80a2      	strh	r2, [r4, #4]
 8018b6c:	80c6      	strh	r6, [r0, #6]
 8018b6e:	e7e8      	b.n	8018b42 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8018b70:	0801b7f8 	.word	0x0801b7f8
 8018b74:	0801b820 	.word	0x0801b820

08018b78 <__aeabi_atexit>:
 8018b78:	460b      	mov	r3, r1
 8018b7a:	4601      	mov	r1, r0
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	f000 b853 	b.w	8018c28 <__cxa_atexit>

08018b82 <__cxa_pure_virtual>:
 8018b82:	b508      	push	{r3, lr}
 8018b84:	f000 f820 	bl	8018bc8 <_ZSt9terminatev>

08018b88 <_ZdlPvj>:
 8018b88:	f000 b80f 	b.w	8018baa <_ZdlPv>

08018b8c <__cxa_guard_acquire>:
 8018b8c:	6803      	ldr	r3, [r0, #0]
 8018b8e:	07db      	lsls	r3, r3, #31
 8018b90:	d406      	bmi.n	8018ba0 <__cxa_guard_acquire+0x14>
 8018b92:	7843      	ldrb	r3, [r0, #1]
 8018b94:	b103      	cbz	r3, 8018b98 <__cxa_guard_acquire+0xc>
 8018b96:	deff      	udf	#255	; 0xff
 8018b98:	2301      	movs	r3, #1
 8018b9a:	7043      	strb	r3, [r0, #1]
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	4770      	bx	lr
 8018ba0:	2000      	movs	r0, #0
 8018ba2:	4770      	bx	lr

08018ba4 <__cxa_guard_release>:
 8018ba4:	2301      	movs	r3, #1
 8018ba6:	6003      	str	r3, [r0, #0]
 8018ba8:	4770      	bx	lr

08018baa <_ZdlPv>:
 8018baa:	f000 b889 	b.w	8018cc0 <free>

08018bae <_ZN10__cxxabiv111__terminateEPFvvE>:
 8018bae:	b508      	push	{r3, lr}
 8018bb0:	4780      	blx	r0
 8018bb2:	f000 f80e 	bl	8018bd2 <abort>
	...

08018bb8 <_ZSt13get_terminatev>:
 8018bb8:	4b02      	ldr	r3, [pc, #8]	; (8018bc4 <_ZSt13get_terminatev+0xc>)
 8018bba:	6818      	ldr	r0, [r3, #0]
 8018bbc:	f3bf 8f5b 	dmb	ish
 8018bc0:	4770      	bx	lr
 8018bc2:	bf00      	nop
 8018bc4:	20000078 	.word	0x20000078

08018bc8 <_ZSt9terminatev>:
 8018bc8:	b508      	push	{r3, lr}
 8018bca:	f7ff fff5 	bl	8018bb8 <_ZSt13get_terminatev>
 8018bce:	f7ff ffee 	bl	8018bae <_ZN10__cxxabiv111__terminateEPFvvE>

08018bd2 <abort>:
 8018bd2:	b508      	push	{r3, lr}
 8018bd4:	2006      	movs	r0, #6
 8018bd6:	f000 fc4f 	bl	8019478 <raise>
 8018bda:	2001      	movs	r0, #1
 8018bdc:	f7f1 fa34 	bl	800a048 <_exit>

08018be0 <__assert_func>:
 8018be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018be2:	461c      	mov	r4, r3
 8018be4:	4b09      	ldr	r3, [pc, #36]	; (8018c0c <__assert_func+0x2c>)
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	4605      	mov	r5, r0
 8018bea:	68d8      	ldr	r0, [r3, #12]
 8018bec:	b152      	cbz	r2, 8018c04 <__assert_func+0x24>
 8018bee:	4b08      	ldr	r3, [pc, #32]	; (8018c10 <__assert_func+0x30>)
 8018bf0:	9100      	str	r1, [sp, #0]
 8018bf2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8018bf6:	4907      	ldr	r1, [pc, #28]	; (8018c14 <__assert_func+0x34>)
 8018bf8:	462b      	mov	r3, r5
 8018bfa:	4622      	mov	r2, r4
 8018bfc:	f000 f822 	bl	8018c44 <fiprintf>
 8018c00:	f7ff ffe7 	bl	8018bd2 <abort>
 8018c04:	4b04      	ldr	r3, [pc, #16]	; (8018c18 <__assert_func+0x38>)
 8018c06:	461a      	mov	r2, r3
 8018c08:	e7f2      	b.n	8018bf0 <__assert_func+0x10>
 8018c0a:	bf00      	nop
 8018c0c:	2000007c 	.word	0x2000007c
 8018c10:	0801cd3a 	.word	0x0801cd3a
 8018c14:	0801cd47 	.word	0x0801cd47
 8018c18:	0801cd75 	.word	0x0801cd75

08018c1c <atexit>:
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	4601      	mov	r1, r0
 8018c20:	461a      	mov	r2, r3
 8018c22:	4618      	mov	r0, r3
 8018c24:	f000 bd04 	b.w	8019630 <__register_exitproc>

08018c28 <__cxa_atexit>:
 8018c28:	b510      	push	{r4, lr}
 8018c2a:	4c05      	ldr	r4, [pc, #20]	; (8018c40 <__cxa_atexit+0x18>)
 8018c2c:	4613      	mov	r3, r2
 8018c2e:	b12c      	cbz	r4, 8018c3c <__cxa_atexit+0x14>
 8018c30:	460a      	mov	r2, r1
 8018c32:	4601      	mov	r1, r0
 8018c34:	2002      	movs	r0, #2
 8018c36:	f000 fcfb 	bl	8019630 <__register_exitproc>
 8018c3a:	bd10      	pop	{r4, pc}
 8018c3c:	4620      	mov	r0, r4
 8018c3e:	e7fc      	b.n	8018c3a <__cxa_atexit+0x12>
 8018c40:	08019631 	.word	0x08019631

08018c44 <fiprintf>:
 8018c44:	b40e      	push	{r1, r2, r3}
 8018c46:	b503      	push	{r0, r1, lr}
 8018c48:	4601      	mov	r1, r0
 8018c4a:	ab03      	add	r3, sp, #12
 8018c4c:	4805      	ldr	r0, [pc, #20]	; (8018c64 <fiprintf+0x20>)
 8018c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c52:	6800      	ldr	r0, [r0, #0]
 8018c54:	9301      	str	r3, [sp, #4]
 8018c56:	f000 f921 	bl	8018e9c <_vfiprintf_r>
 8018c5a:	b002      	add	sp, #8
 8018c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c60:	b003      	add	sp, #12
 8018c62:	4770      	bx	lr
 8018c64:	2000007c 	.word	0x2000007c

08018c68 <__libc_init_array>:
 8018c68:	b570      	push	{r4, r5, r6, lr}
 8018c6a:	4e0d      	ldr	r6, [pc, #52]	; (8018ca0 <__libc_init_array+0x38>)
 8018c6c:	4c0d      	ldr	r4, [pc, #52]	; (8018ca4 <__libc_init_array+0x3c>)
 8018c6e:	1ba4      	subs	r4, r4, r6
 8018c70:	10a4      	asrs	r4, r4, #2
 8018c72:	2500      	movs	r5, #0
 8018c74:	42a5      	cmp	r5, r4
 8018c76:	d109      	bne.n	8018c8c <__libc_init_array+0x24>
 8018c78:	4e0b      	ldr	r6, [pc, #44]	; (8018ca8 <__libc_init_array+0x40>)
 8018c7a:	4c0c      	ldr	r4, [pc, #48]	; (8018cac <__libc_init_array+0x44>)
 8018c7c:	f000 ffc8 	bl	8019c10 <_init>
 8018c80:	1ba4      	subs	r4, r4, r6
 8018c82:	10a4      	asrs	r4, r4, #2
 8018c84:	2500      	movs	r5, #0
 8018c86:	42a5      	cmp	r5, r4
 8018c88:	d105      	bne.n	8018c96 <__libc_init_array+0x2e>
 8018c8a:	bd70      	pop	{r4, r5, r6, pc}
 8018c8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018c90:	4798      	blx	r3
 8018c92:	3501      	adds	r5, #1
 8018c94:	e7ee      	b.n	8018c74 <__libc_init_array+0xc>
 8018c96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018c9a:	4798      	blx	r3
 8018c9c:	3501      	adds	r5, #1
 8018c9e:	e7f2      	b.n	8018c86 <__libc_init_array+0x1e>
 8018ca0:	0803a2dc 	.word	0x0803a2dc
 8018ca4:	0803a2dc 	.word	0x0803a2dc
 8018ca8:	0803a2dc 	.word	0x0803a2dc
 8018cac:	0803a2f0 	.word	0x0803a2f0

08018cb0 <malloc>:
 8018cb0:	4b02      	ldr	r3, [pc, #8]	; (8018cbc <malloc+0xc>)
 8018cb2:	4601      	mov	r1, r0
 8018cb4:	6818      	ldr	r0, [r3, #0]
 8018cb6:	f000 b86d 	b.w	8018d94 <_malloc_r>
 8018cba:	bf00      	nop
 8018cbc:	2000007c 	.word	0x2000007c

08018cc0 <free>:
 8018cc0:	4b02      	ldr	r3, [pc, #8]	; (8018ccc <free+0xc>)
 8018cc2:	4601      	mov	r1, r0
 8018cc4:	6818      	ldr	r0, [r3, #0]
 8018cc6:	f000 b817 	b.w	8018cf8 <_free_r>
 8018cca:	bf00      	nop
 8018ccc:	2000007c 	.word	0x2000007c

08018cd0 <memcpy>:
 8018cd0:	b510      	push	{r4, lr}
 8018cd2:	1e43      	subs	r3, r0, #1
 8018cd4:	440a      	add	r2, r1
 8018cd6:	4291      	cmp	r1, r2
 8018cd8:	d100      	bne.n	8018cdc <memcpy+0xc>
 8018cda:	bd10      	pop	{r4, pc}
 8018cdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018ce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018ce4:	e7f7      	b.n	8018cd6 <memcpy+0x6>

08018ce6 <memset>:
 8018ce6:	4402      	add	r2, r0
 8018ce8:	4603      	mov	r3, r0
 8018cea:	4293      	cmp	r3, r2
 8018cec:	d100      	bne.n	8018cf0 <memset+0xa>
 8018cee:	4770      	bx	lr
 8018cf0:	f803 1b01 	strb.w	r1, [r3], #1
 8018cf4:	e7f9      	b.n	8018cea <memset+0x4>
	...

08018cf8 <_free_r>:
 8018cf8:	b538      	push	{r3, r4, r5, lr}
 8018cfa:	4605      	mov	r5, r0
 8018cfc:	2900      	cmp	r1, #0
 8018cfe:	d045      	beq.n	8018d8c <_free_r+0x94>
 8018d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d04:	1f0c      	subs	r4, r1, #4
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	bfb8      	it	lt
 8018d0a:	18e4      	addlt	r4, r4, r3
 8018d0c:	f000 fed2 	bl	8019ab4 <__malloc_lock>
 8018d10:	4a1f      	ldr	r2, [pc, #124]	; (8018d90 <_free_r+0x98>)
 8018d12:	6813      	ldr	r3, [r2, #0]
 8018d14:	4610      	mov	r0, r2
 8018d16:	b933      	cbnz	r3, 8018d26 <_free_r+0x2e>
 8018d18:	6063      	str	r3, [r4, #4]
 8018d1a:	6014      	str	r4, [r2, #0]
 8018d1c:	4628      	mov	r0, r5
 8018d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d22:	f000 bec8 	b.w	8019ab6 <__malloc_unlock>
 8018d26:	42a3      	cmp	r3, r4
 8018d28:	d90c      	bls.n	8018d44 <_free_r+0x4c>
 8018d2a:	6821      	ldr	r1, [r4, #0]
 8018d2c:	1862      	adds	r2, r4, r1
 8018d2e:	4293      	cmp	r3, r2
 8018d30:	bf04      	itt	eq
 8018d32:	681a      	ldreq	r2, [r3, #0]
 8018d34:	685b      	ldreq	r3, [r3, #4]
 8018d36:	6063      	str	r3, [r4, #4]
 8018d38:	bf04      	itt	eq
 8018d3a:	1852      	addeq	r2, r2, r1
 8018d3c:	6022      	streq	r2, [r4, #0]
 8018d3e:	6004      	str	r4, [r0, #0]
 8018d40:	e7ec      	b.n	8018d1c <_free_r+0x24>
 8018d42:	4613      	mov	r3, r2
 8018d44:	685a      	ldr	r2, [r3, #4]
 8018d46:	b10a      	cbz	r2, 8018d4c <_free_r+0x54>
 8018d48:	42a2      	cmp	r2, r4
 8018d4a:	d9fa      	bls.n	8018d42 <_free_r+0x4a>
 8018d4c:	6819      	ldr	r1, [r3, #0]
 8018d4e:	1858      	adds	r0, r3, r1
 8018d50:	42a0      	cmp	r0, r4
 8018d52:	d10b      	bne.n	8018d6c <_free_r+0x74>
 8018d54:	6820      	ldr	r0, [r4, #0]
 8018d56:	4401      	add	r1, r0
 8018d58:	1858      	adds	r0, r3, r1
 8018d5a:	4282      	cmp	r2, r0
 8018d5c:	6019      	str	r1, [r3, #0]
 8018d5e:	d1dd      	bne.n	8018d1c <_free_r+0x24>
 8018d60:	6810      	ldr	r0, [r2, #0]
 8018d62:	6852      	ldr	r2, [r2, #4]
 8018d64:	605a      	str	r2, [r3, #4]
 8018d66:	4401      	add	r1, r0
 8018d68:	6019      	str	r1, [r3, #0]
 8018d6a:	e7d7      	b.n	8018d1c <_free_r+0x24>
 8018d6c:	d902      	bls.n	8018d74 <_free_r+0x7c>
 8018d6e:	230c      	movs	r3, #12
 8018d70:	602b      	str	r3, [r5, #0]
 8018d72:	e7d3      	b.n	8018d1c <_free_r+0x24>
 8018d74:	6820      	ldr	r0, [r4, #0]
 8018d76:	1821      	adds	r1, r4, r0
 8018d78:	428a      	cmp	r2, r1
 8018d7a:	bf04      	itt	eq
 8018d7c:	6811      	ldreq	r1, [r2, #0]
 8018d7e:	6852      	ldreq	r2, [r2, #4]
 8018d80:	6062      	str	r2, [r4, #4]
 8018d82:	bf04      	itt	eq
 8018d84:	1809      	addeq	r1, r1, r0
 8018d86:	6021      	streq	r1, [r4, #0]
 8018d88:	605c      	str	r4, [r3, #4]
 8018d8a:	e7c7      	b.n	8018d1c <_free_r+0x24>
 8018d8c:	bd38      	pop	{r3, r4, r5, pc}
 8018d8e:	bf00      	nop
 8018d90:	200011fc 	.word	0x200011fc

08018d94 <_malloc_r>:
 8018d94:	b570      	push	{r4, r5, r6, lr}
 8018d96:	1ccd      	adds	r5, r1, #3
 8018d98:	f025 0503 	bic.w	r5, r5, #3
 8018d9c:	3508      	adds	r5, #8
 8018d9e:	2d0c      	cmp	r5, #12
 8018da0:	bf38      	it	cc
 8018da2:	250c      	movcc	r5, #12
 8018da4:	2d00      	cmp	r5, #0
 8018da6:	4606      	mov	r6, r0
 8018da8:	db01      	blt.n	8018dae <_malloc_r+0x1a>
 8018daa:	42a9      	cmp	r1, r5
 8018dac:	d903      	bls.n	8018db6 <_malloc_r+0x22>
 8018dae:	230c      	movs	r3, #12
 8018db0:	6033      	str	r3, [r6, #0]
 8018db2:	2000      	movs	r0, #0
 8018db4:	bd70      	pop	{r4, r5, r6, pc}
 8018db6:	f000 fe7d 	bl	8019ab4 <__malloc_lock>
 8018dba:	4a21      	ldr	r2, [pc, #132]	; (8018e40 <_malloc_r+0xac>)
 8018dbc:	6814      	ldr	r4, [r2, #0]
 8018dbe:	4621      	mov	r1, r4
 8018dc0:	b991      	cbnz	r1, 8018de8 <_malloc_r+0x54>
 8018dc2:	4c20      	ldr	r4, [pc, #128]	; (8018e44 <_malloc_r+0xb0>)
 8018dc4:	6823      	ldr	r3, [r4, #0]
 8018dc6:	b91b      	cbnz	r3, 8018dd0 <_malloc_r+0x3c>
 8018dc8:	4630      	mov	r0, r6
 8018dca:	f000 fb1d 	bl	8019408 <_sbrk_r>
 8018dce:	6020      	str	r0, [r4, #0]
 8018dd0:	4629      	mov	r1, r5
 8018dd2:	4630      	mov	r0, r6
 8018dd4:	f000 fb18 	bl	8019408 <_sbrk_r>
 8018dd8:	1c43      	adds	r3, r0, #1
 8018dda:	d124      	bne.n	8018e26 <_malloc_r+0x92>
 8018ddc:	230c      	movs	r3, #12
 8018dde:	6033      	str	r3, [r6, #0]
 8018de0:	4630      	mov	r0, r6
 8018de2:	f000 fe68 	bl	8019ab6 <__malloc_unlock>
 8018de6:	e7e4      	b.n	8018db2 <_malloc_r+0x1e>
 8018de8:	680b      	ldr	r3, [r1, #0]
 8018dea:	1b5b      	subs	r3, r3, r5
 8018dec:	d418      	bmi.n	8018e20 <_malloc_r+0x8c>
 8018dee:	2b0b      	cmp	r3, #11
 8018df0:	d90f      	bls.n	8018e12 <_malloc_r+0x7e>
 8018df2:	600b      	str	r3, [r1, #0]
 8018df4:	50cd      	str	r5, [r1, r3]
 8018df6:	18cc      	adds	r4, r1, r3
 8018df8:	4630      	mov	r0, r6
 8018dfa:	f000 fe5c 	bl	8019ab6 <__malloc_unlock>
 8018dfe:	f104 000b 	add.w	r0, r4, #11
 8018e02:	1d23      	adds	r3, r4, #4
 8018e04:	f020 0007 	bic.w	r0, r0, #7
 8018e08:	1ac3      	subs	r3, r0, r3
 8018e0a:	d0d3      	beq.n	8018db4 <_malloc_r+0x20>
 8018e0c:	425a      	negs	r2, r3
 8018e0e:	50e2      	str	r2, [r4, r3]
 8018e10:	e7d0      	b.n	8018db4 <_malloc_r+0x20>
 8018e12:	428c      	cmp	r4, r1
 8018e14:	684b      	ldr	r3, [r1, #4]
 8018e16:	bf16      	itet	ne
 8018e18:	6063      	strne	r3, [r4, #4]
 8018e1a:	6013      	streq	r3, [r2, #0]
 8018e1c:	460c      	movne	r4, r1
 8018e1e:	e7eb      	b.n	8018df8 <_malloc_r+0x64>
 8018e20:	460c      	mov	r4, r1
 8018e22:	6849      	ldr	r1, [r1, #4]
 8018e24:	e7cc      	b.n	8018dc0 <_malloc_r+0x2c>
 8018e26:	1cc4      	adds	r4, r0, #3
 8018e28:	f024 0403 	bic.w	r4, r4, #3
 8018e2c:	42a0      	cmp	r0, r4
 8018e2e:	d005      	beq.n	8018e3c <_malloc_r+0xa8>
 8018e30:	1a21      	subs	r1, r4, r0
 8018e32:	4630      	mov	r0, r6
 8018e34:	f000 fae8 	bl	8019408 <_sbrk_r>
 8018e38:	3001      	adds	r0, #1
 8018e3a:	d0cf      	beq.n	8018ddc <_malloc_r+0x48>
 8018e3c:	6025      	str	r5, [r4, #0]
 8018e3e:	e7db      	b.n	8018df8 <_malloc_r+0x64>
 8018e40:	200011fc 	.word	0x200011fc
 8018e44:	20001200 	.word	0x20001200

08018e48 <__sfputc_r>:
 8018e48:	6893      	ldr	r3, [r2, #8]
 8018e4a:	3b01      	subs	r3, #1
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	b410      	push	{r4}
 8018e50:	6093      	str	r3, [r2, #8]
 8018e52:	da08      	bge.n	8018e66 <__sfputc_r+0x1e>
 8018e54:	6994      	ldr	r4, [r2, #24]
 8018e56:	42a3      	cmp	r3, r4
 8018e58:	db01      	blt.n	8018e5e <__sfputc_r+0x16>
 8018e5a:	290a      	cmp	r1, #10
 8018e5c:	d103      	bne.n	8018e66 <__sfputc_r+0x1e>
 8018e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e62:	f000 bb25 	b.w	80194b0 <__swbuf_r>
 8018e66:	6813      	ldr	r3, [r2, #0]
 8018e68:	1c58      	adds	r0, r3, #1
 8018e6a:	6010      	str	r0, [r2, #0]
 8018e6c:	7019      	strb	r1, [r3, #0]
 8018e6e:	4608      	mov	r0, r1
 8018e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e74:	4770      	bx	lr

08018e76 <__sfputs_r>:
 8018e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e78:	4606      	mov	r6, r0
 8018e7a:	460f      	mov	r7, r1
 8018e7c:	4614      	mov	r4, r2
 8018e7e:	18d5      	adds	r5, r2, r3
 8018e80:	42ac      	cmp	r4, r5
 8018e82:	d101      	bne.n	8018e88 <__sfputs_r+0x12>
 8018e84:	2000      	movs	r0, #0
 8018e86:	e007      	b.n	8018e98 <__sfputs_r+0x22>
 8018e88:	463a      	mov	r2, r7
 8018e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e8e:	4630      	mov	r0, r6
 8018e90:	f7ff ffda 	bl	8018e48 <__sfputc_r>
 8018e94:	1c43      	adds	r3, r0, #1
 8018e96:	d1f3      	bne.n	8018e80 <__sfputs_r+0xa>
 8018e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018e9c <_vfiprintf_r>:
 8018e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ea0:	460c      	mov	r4, r1
 8018ea2:	b09d      	sub	sp, #116	; 0x74
 8018ea4:	4617      	mov	r7, r2
 8018ea6:	461d      	mov	r5, r3
 8018ea8:	4606      	mov	r6, r0
 8018eaa:	b118      	cbz	r0, 8018eb4 <_vfiprintf_r+0x18>
 8018eac:	6983      	ldr	r3, [r0, #24]
 8018eae:	b90b      	cbnz	r3, 8018eb4 <_vfiprintf_r+0x18>
 8018eb0:	f000 fd12 	bl	80198d8 <__sinit>
 8018eb4:	4b7c      	ldr	r3, [pc, #496]	; (80190a8 <_vfiprintf_r+0x20c>)
 8018eb6:	429c      	cmp	r4, r3
 8018eb8:	d158      	bne.n	8018f6c <_vfiprintf_r+0xd0>
 8018eba:	6874      	ldr	r4, [r6, #4]
 8018ebc:	89a3      	ldrh	r3, [r4, #12]
 8018ebe:	0718      	lsls	r0, r3, #28
 8018ec0:	d55e      	bpl.n	8018f80 <_vfiprintf_r+0xe4>
 8018ec2:	6923      	ldr	r3, [r4, #16]
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d05b      	beq.n	8018f80 <_vfiprintf_r+0xe4>
 8018ec8:	2300      	movs	r3, #0
 8018eca:	9309      	str	r3, [sp, #36]	; 0x24
 8018ecc:	2320      	movs	r3, #32
 8018ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018ed2:	2330      	movs	r3, #48	; 0x30
 8018ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018ed8:	9503      	str	r5, [sp, #12]
 8018eda:	f04f 0b01 	mov.w	fp, #1
 8018ede:	46b8      	mov	r8, r7
 8018ee0:	4645      	mov	r5, r8
 8018ee2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018ee6:	b10b      	cbz	r3, 8018eec <_vfiprintf_r+0x50>
 8018ee8:	2b25      	cmp	r3, #37	; 0x25
 8018eea:	d154      	bne.n	8018f96 <_vfiprintf_r+0xfa>
 8018eec:	ebb8 0a07 	subs.w	sl, r8, r7
 8018ef0:	d00b      	beq.n	8018f0a <_vfiprintf_r+0x6e>
 8018ef2:	4653      	mov	r3, sl
 8018ef4:	463a      	mov	r2, r7
 8018ef6:	4621      	mov	r1, r4
 8018ef8:	4630      	mov	r0, r6
 8018efa:	f7ff ffbc 	bl	8018e76 <__sfputs_r>
 8018efe:	3001      	adds	r0, #1
 8018f00:	f000 80c2 	beq.w	8019088 <_vfiprintf_r+0x1ec>
 8018f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f06:	4453      	add	r3, sl
 8018f08:	9309      	str	r3, [sp, #36]	; 0x24
 8018f0a:	f898 3000 	ldrb.w	r3, [r8]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	f000 80ba 	beq.w	8019088 <_vfiprintf_r+0x1ec>
 8018f14:	2300      	movs	r3, #0
 8018f16:	f04f 32ff 	mov.w	r2, #4294967295
 8018f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f1e:	9304      	str	r3, [sp, #16]
 8018f20:	9307      	str	r3, [sp, #28]
 8018f22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018f26:	931a      	str	r3, [sp, #104]	; 0x68
 8018f28:	46a8      	mov	r8, r5
 8018f2a:	2205      	movs	r2, #5
 8018f2c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018f30:	485e      	ldr	r0, [pc, #376]	; (80190ac <_vfiprintf_r+0x210>)
 8018f32:	f7e7 f985 	bl	8000240 <memchr>
 8018f36:	9b04      	ldr	r3, [sp, #16]
 8018f38:	bb78      	cbnz	r0, 8018f9a <_vfiprintf_r+0xfe>
 8018f3a:	06d9      	lsls	r1, r3, #27
 8018f3c:	bf44      	itt	mi
 8018f3e:	2220      	movmi	r2, #32
 8018f40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018f44:	071a      	lsls	r2, r3, #28
 8018f46:	bf44      	itt	mi
 8018f48:	222b      	movmi	r2, #43	; 0x2b
 8018f4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018f4e:	782a      	ldrb	r2, [r5, #0]
 8018f50:	2a2a      	cmp	r2, #42	; 0x2a
 8018f52:	d02a      	beq.n	8018faa <_vfiprintf_r+0x10e>
 8018f54:	9a07      	ldr	r2, [sp, #28]
 8018f56:	46a8      	mov	r8, r5
 8018f58:	2000      	movs	r0, #0
 8018f5a:	250a      	movs	r5, #10
 8018f5c:	4641      	mov	r1, r8
 8018f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f62:	3b30      	subs	r3, #48	; 0x30
 8018f64:	2b09      	cmp	r3, #9
 8018f66:	d969      	bls.n	801903c <_vfiprintf_r+0x1a0>
 8018f68:	b360      	cbz	r0, 8018fc4 <_vfiprintf_r+0x128>
 8018f6a:	e024      	b.n	8018fb6 <_vfiprintf_r+0x11a>
 8018f6c:	4b50      	ldr	r3, [pc, #320]	; (80190b0 <_vfiprintf_r+0x214>)
 8018f6e:	429c      	cmp	r4, r3
 8018f70:	d101      	bne.n	8018f76 <_vfiprintf_r+0xda>
 8018f72:	68b4      	ldr	r4, [r6, #8]
 8018f74:	e7a2      	b.n	8018ebc <_vfiprintf_r+0x20>
 8018f76:	4b4f      	ldr	r3, [pc, #316]	; (80190b4 <_vfiprintf_r+0x218>)
 8018f78:	429c      	cmp	r4, r3
 8018f7a:	bf08      	it	eq
 8018f7c:	68f4      	ldreq	r4, [r6, #12]
 8018f7e:	e79d      	b.n	8018ebc <_vfiprintf_r+0x20>
 8018f80:	4621      	mov	r1, r4
 8018f82:	4630      	mov	r0, r6
 8018f84:	f000 fae6 	bl	8019554 <__swsetup_r>
 8018f88:	2800      	cmp	r0, #0
 8018f8a:	d09d      	beq.n	8018ec8 <_vfiprintf_r+0x2c>
 8018f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8018f90:	b01d      	add	sp, #116	; 0x74
 8018f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f96:	46a8      	mov	r8, r5
 8018f98:	e7a2      	b.n	8018ee0 <_vfiprintf_r+0x44>
 8018f9a:	4a44      	ldr	r2, [pc, #272]	; (80190ac <_vfiprintf_r+0x210>)
 8018f9c:	1a80      	subs	r0, r0, r2
 8018f9e:	fa0b f000 	lsl.w	r0, fp, r0
 8018fa2:	4318      	orrs	r0, r3
 8018fa4:	9004      	str	r0, [sp, #16]
 8018fa6:	4645      	mov	r5, r8
 8018fa8:	e7be      	b.n	8018f28 <_vfiprintf_r+0x8c>
 8018faa:	9a03      	ldr	r2, [sp, #12]
 8018fac:	1d11      	adds	r1, r2, #4
 8018fae:	6812      	ldr	r2, [r2, #0]
 8018fb0:	9103      	str	r1, [sp, #12]
 8018fb2:	2a00      	cmp	r2, #0
 8018fb4:	db01      	blt.n	8018fba <_vfiprintf_r+0x11e>
 8018fb6:	9207      	str	r2, [sp, #28]
 8018fb8:	e004      	b.n	8018fc4 <_vfiprintf_r+0x128>
 8018fba:	4252      	negs	r2, r2
 8018fbc:	f043 0302 	orr.w	r3, r3, #2
 8018fc0:	9207      	str	r2, [sp, #28]
 8018fc2:	9304      	str	r3, [sp, #16]
 8018fc4:	f898 3000 	ldrb.w	r3, [r8]
 8018fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8018fca:	d10e      	bne.n	8018fea <_vfiprintf_r+0x14e>
 8018fcc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8018fd2:	d138      	bne.n	8019046 <_vfiprintf_r+0x1aa>
 8018fd4:	9b03      	ldr	r3, [sp, #12]
 8018fd6:	1d1a      	adds	r2, r3, #4
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	9203      	str	r2, [sp, #12]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	bfb8      	it	lt
 8018fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8018fe4:	f108 0802 	add.w	r8, r8, #2
 8018fe8:	9305      	str	r3, [sp, #20]
 8018fea:	4d33      	ldr	r5, [pc, #204]	; (80190b8 <_vfiprintf_r+0x21c>)
 8018fec:	f898 1000 	ldrb.w	r1, [r8]
 8018ff0:	2203      	movs	r2, #3
 8018ff2:	4628      	mov	r0, r5
 8018ff4:	f7e7 f924 	bl	8000240 <memchr>
 8018ff8:	b140      	cbz	r0, 801900c <_vfiprintf_r+0x170>
 8018ffa:	2340      	movs	r3, #64	; 0x40
 8018ffc:	1b40      	subs	r0, r0, r5
 8018ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8019002:	9b04      	ldr	r3, [sp, #16]
 8019004:	4303      	orrs	r3, r0
 8019006:	f108 0801 	add.w	r8, r8, #1
 801900a:	9304      	str	r3, [sp, #16]
 801900c:	f898 1000 	ldrb.w	r1, [r8]
 8019010:	482a      	ldr	r0, [pc, #168]	; (80190bc <_vfiprintf_r+0x220>)
 8019012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019016:	2206      	movs	r2, #6
 8019018:	f108 0701 	add.w	r7, r8, #1
 801901c:	f7e7 f910 	bl	8000240 <memchr>
 8019020:	2800      	cmp	r0, #0
 8019022:	d037      	beq.n	8019094 <_vfiprintf_r+0x1f8>
 8019024:	4b26      	ldr	r3, [pc, #152]	; (80190c0 <_vfiprintf_r+0x224>)
 8019026:	bb1b      	cbnz	r3, 8019070 <_vfiprintf_r+0x1d4>
 8019028:	9b03      	ldr	r3, [sp, #12]
 801902a:	3307      	adds	r3, #7
 801902c:	f023 0307 	bic.w	r3, r3, #7
 8019030:	3308      	adds	r3, #8
 8019032:	9303      	str	r3, [sp, #12]
 8019034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019036:	444b      	add	r3, r9
 8019038:	9309      	str	r3, [sp, #36]	; 0x24
 801903a:	e750      	b.n	8018ede <_vfiprintf_r+0x42>
 801903c:	fb05 3202 	mla	r2, r5, r2, r3
 8019040:	2001      	movs	r0, #1
 8019042:	4688      	mov	r8, r1
 8019044:	e78a      	b.n	8018f5c <_vfiprintf_r+0xc0>
 8019046:	2300      	movs	r3, #0
 8019048:	f108 0801 	add.w	r8, r8, #1
 801904c:	9305      	str	r3, [sp, #20]
 801904e:	4619      	mov	r1, r3
 8019050:	250a      	movs	r5, #10
 8019052:	4640      	mov	r0, r8
 8019054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019058:	3a30      	subs	r2, #48	; 0x30
 801905a:	2a09      	cmp	r2, #9
 801905c:	d903      	bls.n	8019066 <_vfiprintf_r+0x1ca>
 801905e:	2b00      	cmp	r3, #0
 8019060:	d0c3      	beq.n	8018fea <_vfiprintf_r+0x14e>
 8019062:	9105      	str	r1, [sp, #20]
 8019064:	e7c1      	b.n	8018fea <_vfiprintf_r+0x14e>
 8019066:	fb05 2101 	mla	r1, r5, r1, r2
 801906a:	2301      	movs	r3, #1
 801906c:	4680      	mov	r8, r0
 801906e:	e7f0      	b.n	8019052 <_vfiprintf_r+0x1b6>
 8019070:	ab03      	add	r3, sp, #12
 8019072:	9300      	str	r3, [sp, #0]
 8019074:	4622      	mov	r2, r4
 8019076:	4b13      	ldr	r3, [pc, #76]	; (80190c4 <_vfiprintf_r+0x228>)
 8019078:	a904      	add	r1, sp, #16
 801907a:	4630      	mov	r0, r6
 801907c:	f3af 8000 	nop.w
 8019080:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019084:	4681      	mov	r9, r0
 8019086:	d1d5      	bne.n	8019034 <_vfiprintf_r+0x198>
 8019088:	89a3      	ldrh	r3, [r4, #12]
 801908a:	065b      	lsls	r3, r3, #25
 801908c:	f53f af7e 	bmi.w	8018f8c <_vfiprintf_r+0xf0>
 8019090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019092:	e77d      	b.n	8018f90 <_vfiprintf_r+0xf4>
 8019094:	ab03      	add	r3, sp, #12
 8019096:	9300      	str	r3, [sp, #0]
 8019098:	4622      	mov	r2, r4
 801909a:	4b0a      	ldr	r3, [pc, #40]	; (80190c4 <_vfiprintf_r+0x228>)
 801909c:	a904      	add	r1, sp, #16
 801909e:	4630      	mov	r0, r6
 80190a0:	f000 f888 	bl	80191b4 <_printf_i>
 80190a4:	e7ec      	b.n	8019080 <_vfiprintf_r+0x1e4>
 80190a6:	bf00      	nop
 80190a8:	0801cdd4 	.word	0x0801cdd4
 80190ac:	0801cd7c 	.word	0x0801cd7c
 80190b0:	0801cdf4 	.word	0x0801cdf4
 80190b4:	0801cdb4 	.word	0x0801cdb4
 80190b8:	0801cd82 	.word	0x0801cd82
 80190bc:	0801cd86 	.word	0x0801cd86
 80190c0:	00000000 	.word	0x00000000
 80190c4:	08018e77 	.word	0x08018e77

080190c8 <_printf_common>:
 80190c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190cc:	4691      	mov	r9, r2
 80190ce:	461f      	mov	r7, r3
 80190d0:	688a      	ldr	r2, [r1, #8]
 80190d2:	690b      	ldr	r3, [r1, #16]
 80190d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80190d8:	4293      	cmp	r3, r2
 80190da:	bfb8      	it	lt
 80190dc:	4613      	movlt	r3, r2
 80190de:	f8c9 3000 	str.w	r3, [r9]
 80190e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80190e6:	4606      	mov	r6, r0
 80190e8:	460c      	mov	r4, r1
 80190ea:	b112      	cbz	r2, 80190f2 <_printf_common+0x2a>
 80190ec:	3301      	adds	r3, #1
 80190ee:	f8c9 3000 	str.w	r3, [r9]
 80190f2:	6823      	ldr	r3, [r4, #0]
 80190f4:	0699      	lsls	r1, r3, #26
 80190f6:	bf42      	ittt	mi
 80190f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80190fc:	3302      	addmi	r3, #2
 80190fe:	f8c9 3000 	strmi.w	r3, [r9]
 8019102:	6825      	ldr	r5, [r4, #0]
 8019104:	f015 0506 	ands.w	r5, r5, #6
 8019108:	d107      	bne.n	801911a <_printf_common+0x52>
 801910a:	f104 0a19 	add.w	sl, r4, #25
 801910e:	68e3      	ldr	r3, [r4, #12]
 8019110:	f8d9 2000 	ldr.w	r2, [r9]
 8019114:	1a9b      	subs	r3, r3, r2
 8019116:	42ab      	cmp	r3, r5
 8019118:	dc28      	bgt.n	801916c <_printf_common+0xa4>
 801911a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801911e:	6822      	ldr	r2, [r4, #0]
 8019120:	3300      	adds	r3, #0
 8019122:	bf18      	it	ne
 8019124:	2301      	movne	r3, #1
 8019126:	0692      	lsls	r2, r2, #26
 8019128:	d42d      	bmi.n	8019186 <_printf_common+0xbe>
 801912a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801912e:	4639      	mov	r1, r7
 8019130:	4630      	mov	r0, r6
 8019132:	47c0      	blx	r8
 8019134:	3001      	adds	r0, #1
 8019136:	d020      	beq.n	801917a <_printf_common+0xb2>
 8019138:	6823      	ldr	r3, [r4, #0]
 801913a:	68e5      	ldr	r5, [r4, #12]
 801913c:	f8d9 2000 	ldr.w	r2, [r9]
 8019140:	f003 0306 	and.w	r3, r3, #6
 8019144:	2b04      	cmp	r3, #4
 8019146:	bf08      	it	eq
 8019148:	1aad      	subeq	r5, r5, r2
 801914a:	68a3      	ldr	r3, [r4, #8]
 801914c:	6922      	ldr	r2, [r4, #16]
 801914e:	bf0c      	ite	eq
 8019150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019154:	2500      	movne	r5, #0
 8019156:	4293      	cmp	r3, r2
 8019158:	bfc4      	itt	gt
 801915a:	1a9b      	subgt	r3, r3, r2
 801915c:	18ed      	addgt	r5, r5, r3
 801915e:	f04f 0900 	mov.w	r9, #0
 8019162:	341a      	adds	r4, #26
 8019164:	454d      	cmp	r5, r9
 8019166:	d11a      	bne.n	801919e <_printf_common+0xd6>
 8019168:	2000      	movs	r0, #0
 801916a:	e008      	b.n	801917e <_printf_common+0xb6>
 801916c:	2301      	movs	r3, #1
 801916e:	4652      	mov	r2, sl
 8019170:	4639      	mov	r1, r7
 8019172:	4630      	mov	r0, r6
 8019174:	47c0      	blx	r8
 8019176:	3001      	adds	r0, #1
 8019178:	d103      	bne.n	8019182 <_printf_common+0xba>
 801917a:	f04f 30ff 	mov.w	r0, #4294967295
 801917e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019182:	3501      	adds	r5, #1
 8019184:	e7c3      	b.n	801910e <_printf_common+0x46>
 8019186:	18e1      	adds	r1, r4, r3
 8019188:	1c5a      	adds	r2, r3, #1
 801918a:	2030      	movs	r0, #48	; 0x30
 801918c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019190:	4422      	add	r2, r4
 8019192:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019196:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801919a:	3302      	adds	r3, #2
 801919c:	e7c5      	b.n	801912a <_printf_common+0x62>
 801919e:	2301      	movs	r3, #1
 80191a0:	4622      	mov	r2, r4
 80191a2:	4639      	mov	r1, r7
 80191a4:	4630      	mov	r0, r6
 80191a6:	47c0      	blx	r8
 80191a8:	3001      	adds	r0, #1
 80191aa:	d0e6      	beq.n	801917a <_printf_common+0xb2>
 80191ac:	f109 0901 	add.w	r9, r9, #1
 80191b0:	e7d8      	b.n	8019164 <_printf_common+0x9c>
	...

080191b4 <_printf_i>:
 80191b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80191bc:	460c      	mov	r4, r1
 80191be:	7e09      	ldrb	r1, [r1, #24]
 80191c0:	b085      	sub	sp, #20
 80191c2:	296e      	cmp	r1, #110	; 0x6e
 80191c4:	4617      	mov	r7, r2
 80191c6:	4606      	mov	r6, r0
 80191c8:	4698      	mov	r8, r3
 80191ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80191cc:	f000 80b3 	beq.w	8019336 <_printf_i+0x182>
 80191d0:	d822      	bhi.n	8019218 <_printf_i+0x64>
 80191d2:	2963      	cmp	r1, #99	; 0x63
 80191d4:	d036      	beq.n	8019244 <_printf_i+0x90>
 80191d6:	d80a      	bhi.n	80191ee <_printf_i+0x3a>
 80191d8:	2900      	cmp	r1, #0
 80191da:	f000 80b9 	beq.w	8019350 <_printf_i+0x19c>
 80191de:	2958      	cmp	r1, #88	; 0x58
 80191e0:	f000 8083 	beq.w	80192ea <_printf_i+0x136>
 80191e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80191e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80191ec:	e032      	b.n	8019254 <_printf_i+0xa0>
 80191ee:	2964      	cmp	r1, #100	; 0x64
 80191f0:	d001      	beq.n	80191f6 <_printf_i+0x42>
 80191f2:	2969      	cmp	r1, #105	; 0x69
 80191f4:	d1f6      	bne.n	80191e4 <_printf_i+0x30>
 80191f6:	6820      	ldr	r0, [r4, #0]
 80191f8:	6813      	ldr	r3, [r2, #0]
 80191fa:	0605      	lsls	r5, r0, #24
 80191fc:	f103 0104 	add.w	r1, r3, #4
 8019200:	d52a      	bpl.n	8019258 <_printf_i+0xa4>
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	6011      	str	r1, [r2, #0]
 8019206:	2b00      	cmp	r3, #0
 8019208:	da03      	bge.n	8019212 <_printf_i+0x5e>
 801920a:	222d      	movs	r2, #45	; 0x2d
 801920c:	425b      	negs	r3, r3
 801920e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019212:	486f      	ldr	r0, [pc, #444]	; (80193d0 <_printf_i+0x21c>)
 8019214:	220a      	movs	r2, #10
 8019216:	e039      	b.n	801928c <_printf_i+0xd8>
 8019218:	2973      	cmp	r1, #115	; 0x73
 801921a:	f000 809d 	beq.w	8019358 <_printf_i+0x1a4>
 801921e:	d808      	bhi.n	8019232 <_printf_i+0x7e>
 8019220:	296f      	cmp	r1, #111	; 0x6f
 8019222:	d020      	beq.n	8019266 <_printf_i+0xb2>
 8019224:	2970      	cmp	r1, #112	; 0x70
 8019226:	d1dd      	bne.n	80191e4 <_printf_i+0x30>
 8019228:	6823      	ldr	r3, [r4, #0]
 801922a:	f043 0320 	orr.w	r3, r3, #32
 801922e:	6023      	str	r3, [r4, #0]
 8019230:	e003      	b.n	801923a <_printf_i+0x86>
 8019232:	2975      	cmp	r1, #117	; 0x75
 8019234:	d017      	beq.n	8019266 <_printf_i+0xb2>
 8019236:	2978      	cmp	r1, #120	; 0x78
 8019238:	d1d4      	bne.n	80191e4 <_printf_i+0x30>
 801923a:	2378      	movs	r3, #120	; 0x78
 801923c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019240:	4864      	ldr	r0, [pc, #400]	; (80193d4 <_printf_i+0x220>)
 8019242:	e055      	b.n	80192f0 <_printf_i+0x13c>
 8019244:	6813      	ldr	r3, [r2, #0]
 8019246:	1d19      	adds	r1, r3, #4
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	6011      	str	r1, [r2, #0]
 801924c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019254:	2301      	movs	r3, #1
 8019256:	e08c      	b.n	8019372 <_printf_i+0x1be>
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	6011      	str	r1, [r2, #0]
 801925c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019260:	bf18      	it	ne
 8019262:	b21b      	sxthne	r3, r3
 8019264:	e7cf      	b.n	8019206 <_printf_i+0x52>
 8019266:	6813      	ldr	r3, [r2, #0]
 8019268:	6825      	ldr	r5, [r4, #0]
 801926a:	1d18      	adds	r0, r3, #4
 801926c:	6010      	str	r0, [r2, #0]
 801926e:	0628      	lsls	r0, r5, #24
 8019270:	d501      	bpl.n	8019276 <_printf_i+0xc2>
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	e002      	b.n	801927c <_printf_i+0xc8>
 8019276:	0668      	lsls	r0, r5, #25
 8019278:	d5fb      	bpl.n	8019272 <_printf_i+0xbe>
 801927a:	881b      	ldrh	r3, [r3, #0]
 801927c:	4854      	ldr	r0, [pc, #336]	; (80193d0 <_printf_i+0x21c>)
 801927e:	296f      	cmp	r1, #111	; 0x6f
 8019280:	bf14      	ite	ne
 8019282:	220a      	movne	r2, #10
 8019284:	2208      	moveq	r2, #8
 8019286:	2100      	movs	r1, #0
 8019288:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801928c:	6865      	ldr	r5, [r4, #4]
 801928e:	60a5      	str	r5, [r4, #8]
 8019290:	2d00      	cmp	r5, #0
 8019292:	f2c0 8095 	blt.w	80193c0 <_printf_i+0x20c>
 8019296:	6821      	ldr	r1, [r4, #0]
 8019298:	f021 0104 	bic.w	r1, r1, #4
 801929c:	6021      	str	r1, [r4, #0]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d13d      	bne.n	801931e <_printf_i+0x16a>
 80192a2:	2d00      	cmp	r5, #0
 80192a4:	f040 808e 	bne.w	80193c4 <_printf_i+0x210>
 80192a8:	4665      	mov	r5, ip
 80192aa:	2a08      	cmp	r2, #8
 80192ac:	d10b      	bne.n	80192c6 <_printf_i+0x112>
 80192ae:	6823      	ldr	r3, [r4, #0]
 80192b0:	07db      	lsls	r3, r3, #31
 80192b2:	d508      	bpl.n	80192c6 <_printf_i+0x112>
 80192b4:	6923      	ldr	r3, [r4, #16]
 80192b6:	6862      	ldr	r2, [r4, #4]
 80192b8:	429a      	cmp	r2, r3
 80192ba:	bfde      	ittt	le
 80192bc:	2330      	movle	r3, #48	; 0x30
 80192be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80192c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80192c6:	ebac 0305 	sub.w	r3, ip, r5
 80192ca:	6123      	str	r3, [r4, #16]
 80192cc:	f8cd 8000 	str.w	r8, [sp]
 80192d0:	463b      	mov	r3, r7
 80192d2:	aa03      	add	r2, sp, #12
 80192d4:	4621      	mov	r1, r4
 80192d6:	4630      	mov	r0, r6
 80192d8:	f7ff fef6 	bl	80190c8 <_printf_common>
 80192dc:	3001      	adds	r0, #1
 80192de:	d14d      	bne.n	801937c <_printf_i+0x1c8>
 80192e0:	f04f 30ff 	mov.w	r0, #4294967295
 80192e4:	b005      	add	sp, #20
 80192e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192ea:	4839      	ldr	r0, [pc, #228]	; (80193d0 <_printf_i+0x21c>)
 80192ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80192f0:	6813      	ldr	r3, [r2, #0]
 80192f2:	6821      	ldr	r1, [r4, #0]
 80192f4:	1d1d      	adds	r5, r3, #4
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	6015      	str	r5, [r2, #0]
 80192fa:	060a      	lsls	r2, r1, #24
 80192fc:	d50b      	bpl.n	8019316 <_printf_i+0x162>
 80192fe:	07ca      	lsls	r2, r1, #31
 8019300:	bf44      	itt	mi
 8019302:	f041 0120 	orrmi.w	r1, r1, #32
 8019306:	6021      	strmi	r1, [r4, #0]
 8019308:	b91b      	cbnz	r3, 8019312 <_printf_i+0x15e>
 801930a:	6822      	ldr	r2, [r4, #0]
 801930c:	f022 0220 	bic.w	r2, r2, #32
 8019310:	6022      	str	r2, [r4, #0]
 8019312:	2210      	movs	r2, #16
 8019314:	e7b7      	b.n	8019286 <_printf_i+0xd2>
 8019316:	064d      	lsls	r5, r1, #25
 8019318:	bf48      	it	mi
 801931a:	b29b      	uxthmi	r3, r3
 801931c:	e7ef      	b.n	80192fe <_printf_i+0x14a>
 801931e:	4665      	mov	r5, ip
 8019320:	fbb3 f1f2 	udiv	r1, r3, r2
 8019324:	fb02 3311 	mls	r3, r2, r1, r3
 8019328:	5cc3      	ldrb	r3, [r0, r3]
 801932a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801932e:	460b      	mov	r3, r1
 8019330:	2900      	cmp	r1, #0
 8019332:	d1f5      	bne.n	8019320 <_printf_i+0x16c>
 8019334:	e7b9      	b.n	80192aa <_printf_i+0xf6>
 8019336:	6813      	ldr	r3, [r2, #0]
 8019338:	6825      	ldr	r5, [r4, #0]
 801933a:	6961      	ldr	r1, [r4, #20]
 801933c:	1d18      	adds	r0, r3, #4
 801933e:	6010      	str	r0, [r2, #0]
 8019340:	0628      	lsls	r0, r5, #24
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	d501      	bpl.n	801934a <_printf_i+0x196>
 8019346:	6019      	str	r1, [r3, #0]
 8019348:	e002      	b.n	8019350 <_printf_i+0x19c>
 801934a:	066a      	lsls	r2, r5, #25
 801934c:	d5fb      	bpl.n	8019346 <_printf_i+0x192>
 801934e:	8019      	strh	r1, [r3, #0]
 8019350:	2300      	movs	r3, #0
 8019352:	6123      	str	r3, [r4, #16]
 8019354:	4665      	mov	r5, ip
 8019356:	e7b9      	b.n	80192cc <_printf_i+0x118>
 8019358:	6813      	ldr	r3, [r2, #0]
 801935a:	1d19      	adds	r1, r3, #4
 801935c:	6011      	str	r1, [r2, #0]
 801935e:	681d      	ldr	r5, [r3, #0]
 8019360:	6862      	ldr	r2, [r4, #4]
 8019362:	2100      	movs	r1, #0
 8019364:	4628      	mov	r0, r5
 8019366:	f7e6 ff6b 	bl	8000240 <memchr>
 801936a:	b108      	cbz	r0, 8019370 <_printf_i+0x1bc>
 801936c:	1b40      	subs	r0, r0, r5
 801936e:	6060      	str	r0, [r4, #4]
 8019370:	6863      	ldr	r3, [r4, #4]
 8019372:	6123      	str	r3, [r4, #16]
 8019374:	2300      	movs	r3, #0
 8019376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801937a:	e7a7      	b.n	80192cc <_printf_i+0x118>
 801937c:	6923      	ldr	r3, [r4, #16]
 801937e:	462a      	mov	r2, r5
 8019380:	4639      	mov	r1, r7
 8019382:	4630      	mov	r0, r6
 8019384:	47c0      	blx	r8
 8019386:	3001      	adds	r0, #1
 8019388:	d0aa      	beq.n	80192e0 <_printf_i+0x12c>
 801938a:	6823      	ldr	r3, [r4, #0]
 801938c:	079b      	lsls	r3, r3, #30
 801938e:	d413      	bmi.n	80193b8 <_printf_i+0x204>
 8019390:	68e0      	ldr	r0, [r4, #12]
 8019392:	9b03      	ldr	r3, [sp, #12]
 8019394:	4298      	cmp	r0, r3
 8019396:	bfb8      	it	lt
 8019398:	4618      	movlt	r0, r3
 801939a:	e7a3      	b.n	80192e4 <_printf_i+0x130>
 801939c:	2301      	movs	r3, #1
 801939e:	464a      	mov	r2, r9
 80193a0:	4639      	mov	r1, r7
 80193a2:	4630      	mov	r0, r6
 80193a4:	47c0      	blx	r8
 80193a6:	3001      	adds	r0, #1
 80193a8:	d09a      	beq.n	80192e0 <_printf_i+0x12c>
 80193aa:	3501      	adds	r5, #1
 80193ac:	68e3      	ldr	r3, [r4, #12]
 80193ae:	9a03      	ldr	r2, [sp, #12]
 80193b0:	1a9b      	subs	r3, r3, r2
 80193b2:	42ab      	cmp	r3, r5
 80193b4:	dcf2      	bgt.n	801939c <_printf_i+0x1e8>
 80193b6:	e7eb      	b.n	8019390 <_printf_i+0x1dc>
 80193b8:	2500      	movs	r5, #0
 80193ba:	f104 0919 	add.w	r9, r4, #25
 80193be:	e7f5      	b.n	80193ac <_printf_i+0x1f8>
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d1ac      	bne.n	801931e <_printf_i+0x16a>
 80193c4:	7803      	ldrb	r3, [r0, #0]
 80193c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80193ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80193ce:	e76c      	b.n	80192aa <_printf_i+0xf6>
 80193d0:	0801cd8d 	.word	0x0801cd8d
 80193d4:	0801cd9e 	.word	0x0801cd9e

080193d8 <iprintf>:
 80193d8:	b40f      	push	{r0, r1, r2, r3}
 80193da:	4b0a      	ldr	r3, [pc, #40]	; (8019404 <iprintf+0x2c>)
 80193dc:	b513      	push	{r0, r1, r4, lr}
 80193de:	681c      	ldr	r4, [r3, #0]
 80193e0:	b124      	cbz	r4, 80193ec <iprintf+0x14>
 80193e2:	69a3      	ldr	r3, [r4, #24]
 80193e4:	b913      	cbnz	r3, 80193ec <iprintf+0x14>
 80193e6:	4620      	mov	r0, r4
 80193e8:	f000 fa76 	bl	80198d8 <__sinit>
 80193ec:	ab05      	add	r3, sp, #20
 80193ee:	9a04      	ldr	r2, [sp, #16]
 80193f0:	68a1      	ldr	r1, [r4, #8]
 80193f2:	9301      	str	r3, [sp, #4]
 80193f4:	4620      	mov	r0, r4
 80193f6:	f7ff fd51 	bl	8018e9c <_vfiprintf_r>
 80193fa:	b002      	add	sp, #8
 80193fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019400:	b004      	add	sp, #16
 8019402:	4770      	bx	lr
 8019404:	2000007c 	.word	0x2000007c

08019408 <_sbrk_r>:
 8019408:	b538      	push	{r3, r4, r5, lr}
 801940a:	4c06      	ldr	r4, [pc, #24]	; (8019424 <_sbrk_r+0x1c>)
 801940c:	2300      	movs	r3, #0
 801940e:	4605      	mov	r5, r0
 8019410:	4608      	mov	r0, r1
 8019412:	6023      	str	r3, [r4, #0]
 8019414:	f7f0 fe90 	bl	800a138 <_sbrk>
 8019418:	1c43      	adds	r3, r0, #1
 801941a:	d102      	bne.n	8019422 <_sbrk_r+0x1a>
 801941c:	6823      	ldr	r3, [r4, #0]
 801941e:	b103      	cbz	r3, 8019422 <_sbrk_r+0x1a>
 8019420:	602b      	str	r3, [r5, #0]
 8019422:	bd38      	pop	{r3, r4, r5, pc}
 8019424:	20005a8c 	.word	0x20005a8c

08019428 <_raise_r>:
 8019428:	291f      	cmp	r1, #31
 801942a:	b538      	push	{r3, r4, r5, lr}
 801942c:	4604      	mov	r4, r0
 801942e:	460d      	mov	r5, r1
 8019430:	d904      	bls.n	801943c <_raise_r+0x14>
 8019432:	2316      	movs	r3, #22
 8019434:	6003      	str	r3, [r0, #0]
 8019436:	f04f 30ff 	mov.w	r0, #4294967295
 801943a:	bd38      	pop	{r3, r4, r5, pc}
 801943c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801943e:	b112      	cbz	r2, 8019446 <_raise_r+0x1e>
 8019440:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019444:	b94b      	cbnz	r3, 801945a <_raise_r+0x32>
 8019446:	4620      	mov	r0, r4
 8019448:	f000 f830 	bl	80194ac <_getpid_r>
 801944c:	462a      	mov	r2, r5
 801944e:	4601      	mov	r1, r0
 8019450:	4620      	mov	r0, r4
 8019452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019456:	f000 b817 	b.w	8019488 <_kill_r>
 801945a:	2b01      	cmp	r3, #1
 801945c:	d00a      	beq.n	8019474 <_raise_r+0x4c>
 801945e:	1c59      	adds	r1, r3, #1
 8019460:	d103      	bne.n	801946a <_raise_r+0x42>
 8019462:	2316      	movs	r3, #22
 8019464:	6003      	str	r3, [r0, #0]
 8019466:	2001      	movs	r0, #1
 8019468:	e7e7      	b.n	801943a <_raise_r+0x12>
 801946a:	2400      	movs	r4, #0
 801946c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019470:	4628      	mov	r0, r5
 8019472:	4798      	blx	r3
 8019474:	2000      	movs	r0, #0
 8019476:	e7e0      	b.n	801943a <_raise_r+0x12>

08019478 <raise>:
 8019478:	4b02      	ldr	r3, [pc, #8]	; (8019484 <raise+0xc>)
 801947a:	4601      	mov	r1, r0
 801947c:	6818      	ldr	r0, [r3, #0]
 801947e:	f7ff bfd3 	b.w	8019428 <_raise_r>
 8019482:	bf00      	nop
 8019484:	2000007c 	.word	0x2000007c

08019488 <_kill_r>:
 8019488:	b538      	push	{r3, r4, r5, lr}
 801948a:	4c07      	ldr	r4, [pc, #28]	; (80194a8 <_kill_r+0x20>)
 801948c:	2300      	movs	r3, #0
 801948e:	4605      	mov	r5, r0
 8019490:	4608      	mov	r0, r1
 8019492:	4611      	mov	r1, r2
 8019494:	6023      	str	r3, [r4, #0]
 8019496:	f7f0 fdc5 	bl	800a024 <_kill>
 801949a:	1c43      	adds	r3, r0, #1
 801949c:	d102      	bne.n	80194a4 <_kill_r+0x1c>
 801949e:	6823      	ldr	r3, [r4, #0]
 80194a0:	b103      	cbz	r3, 80194a4 <_kill_r+0x1c>
 80194a2:	602b      	str	r3, [r5, #0]
 80194a4:	bd38      	pop	{r3, r4, r5, pc}
 80194a6:	bf00      	nop
 80194a8:	20005a8c 	.word	0x20005a8c

080194ac <_getpid_r>:
 80194ac:	f7f0 bdb2 	b.w	800a014 <_getpid>

080194b0 <__swbuf_r>:
 80194b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194b2:	460e      	mov	r6, r1
 80194b4:	4614      	mov	r4, r2
 80194b6:	4605      	mov	r5, r0
 80194b8:	b118      	cbz	r0, 80194c2 <__swbuf_r+0x12>
 80194ba:	6983      	ldr	r3, [r0, #24]
 80194bc:	b90b      	cbnz	r3, 80194c2 <__swbuf_r+0x12>
 80194be:	f000 fa0b 	bl	80198d8 <__sinit>
 80194c2:	4b21      	ldr	r3, [pc, #132]	; (8019548 <__swbuf_r+0x98>)
 80194c4:	429c      	cmp	r4, r3
 80194c6:	d12a      	bne.n	801951e <__swbuf_r+0x6e>
 80194c8:	686c      	ldr	r4, [r5, #4]
 80194ca:	69a3      	ldr	r3, [r4, #24]
 80194cc:	60a3      	str	r3, [r4, #8]
 80194ce:	89a3      	ldrh	r3, [r4, #12]
 80194d0:	071a      	lsls	r2, r3, #28
 80194d2:	d52e      	bpl.n	8019532 <__swbuf_r+0x82>
 80194d4:	6923      	ldr	r3, [r4, #16]
 80194d6:	b363      	cbz	r3, 8019532 <__swbuf_r+0x82>
 80194d8:	6923      	ldr	r3, [r4, #16]
 80194da:	6820      	ldr	r0, [r4, #0]
 80194dc:	1ac0      	subs	r0, r0, r3
 80194de:	6963      	ldr	r3, [r4, #20]
 80194e0:	b2f6      	uxtb	r6, r6
 80194e2:	4283      	cmp	r3, r0
 80194e4:	4637      	mov	r7, r6
 80194e6:	dc04      	bgt.n	80194f2 <__swbuf_r+0x42>
 80194e8:	4621      	mov	r1, r4
 80194ea:	4628      	mov	r0, r5
 80194ec:	f000 f98a 	bl	8019804 <_fflush_r>
 80194f0:	bb28      	cbnz	r0, 801953e <__swbuf_r+0x8e>
 80194f2:	68a3      	ldr	r3, [r4, #8]
 80194f4:	3b01      	subs	r3, #1
 80194f6:	60a3      	str	r3, [r4, #8]
 80194f8:	6823      	ldr	r3, [r4, #0]
 80194fa:	1c5a      	adds	r2, r3, #1
 80194fc:	6022      	str	r2, [r4, #0]
 80194fe:	701e      	strb	r6, [r3, #0]
 8019500:	6963      	ldr	r3, [r4, #20]
 8019502:	3001      	adds	r0, #1
 8019504:	4283      	cmp	r3, r0
 8019506:	d004      	beq.n	8019512 <__swbuf_r+0x62>
 8019508:	89a3      	ldrh	r3, [r4, #12]
 801950a:	07db      	lsls	r3, r3, #31
 801950c:	d519      	bpl.n	8019542 <__swbuf_r+0x92>
 801950e:	2e0a      	cmp	r6, #10
 8019510:	d117      	bne.n	8019542 <__swbuf_r+0x92>
 8019512:	4621      	mov	r1, r4
 8019514:	4628      	mov	r0, r5
 8019516:	f000 f975 	bl	8019804 <_fflush_r>
 801951a:	b190      	cbz	r0, 8019542 <__swbuf_r+0x92>
 801951c:	e00f      	b.n	801953e <__swbuf_r+0x8e>
 801951e:	4b0b      	ldr	r3, [pc, #44]	; (801954c <__swbuf_r+0x9c>)
 8019520:	429c      	cmp	r4, r3
 8019522:	d101      	bne.n	8019528 <__swbuf_r+0x78>
 8019524:	68ac      	ldr	r4, [r5, #8]
 8019526:	e7d0      	b.n	80194ca <__swbuf_r+0x1a>
 8019528:	4b09      	ldr	r3, [pc, #36]	; (8019550 <__swbuf_r+0xa0>)
 801952a:	429c      	cmp	r4, r3
 801952c:	bf08      	it	eq
 801952e:	68ec      	ldreq	r4, [r5, #12]
 8019530:	e7cb      	b.n	80194ca <__swbuf_r+0x1a>
 8019532:	4621      	mov	r1, r4
 8019534:	4628      	mov	r0, r5
 8019536:	f000 f80d 	bl	8019554 <__swsetup_r>
 801953a:	2800      	cmp	r0, #0
 801953c:	d0cc      	beq.n	80194d8 <__swbuf_r+0x28>
 801953e:	f04f 37ff 	mov.w	r7, #4294967295
 8019542:	4638      	mov	r0, r7
 8019544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019546:	bf00      	nop
 8019548:	0801cdd4 	.word	0x0801cdd4
 801954c:	0801cdf4 	.word	0x0801cdf4
 8019550:	0801cdb4 	.word	0x0801cdb4

08019554 <__swsetup_r>:
 8019554:	4b32      	ldr	r3, [pc, #200]	; (8019620 <__swsetup_r+0xcc>)
 8019556:	b570      	push	{r4, r5, r6, lr}
 8019558:	681d      	ldr	r5, [r3, #0]
 801955a:	4606      	mov	r6, r0
 801955c:	460c      	mov	r4, r1
 801955e:	b125      	cbz	r5, 801956a <__swsetup_r+0x16>
 8019560:	69ab      	ldr	r3, [r5, #24]
 8019562:	b913      	cbnz	r3, 801956a <__swsetup_r+0x16>
 8019564:	4628      	mov	r0, r5
 8019566:	f000 f9b7 	bl	80198d8 <__sinit>
 801956a:	4b2e      	ldr	r3, [pc, #184]	; (8019624 <__swsetup_r+0xd0>)
 801956c:	429c      	cmp	r4, r3
 801956e:	d10f      	bne.n	8019590 <__swsetup_r+0x3c>
 8019570:	686c      	ldr	r4, [r5, #4]
 8019572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019576:	b29a      	uxth	r2, r3
 8019578:	0715      	lsls	r5, r2, #28
 801957a:	d42c      	bmi.n	80195d6 <__swsetup_r+0x82>
 801957c:	06d0      	lsls	r0, r2, #27
 801957e:	d411      	bmi.n	80195a4 <__swsetup_r+0x50>
 8019580:	2209      	movs	r2, #9
 8019582:	6032      	str	r2, [r6, #0]
 8019584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019588:	81a3      	strh	r3, [r4, #12]
 801958a:	f04f 30ff 	mov.w	r0, #4294967295
 801958e:	e03e      	b.n	801960e <__swsetup_r+0xba>
 8019590:	4b25      	ldr	r3, [pc, #148]	; (8019628 <__swsetup_r+0xd4>)
 8019592:	429c      	cmp	r4, r3
 8019594:	d101      	bne.n	801959a <__swsetup_r+0x46>
 8019596:	68ac      	ldr	r4, [r5, #8]
 8019598:	e7eb      	b.n	8019572 <__swsetup_r+0x1e>
 801959a:	4b24      	ldr	r3, [pc, #144]	; (801962c <__swsetup_r+0xd8>)
 801959c:	429c      	cmp	r4, r3
 801959e:	bf08      	it	eq
 80195a0:	68ec      	ldreq	r4, [r5, #12]
 80195a2:	e7e6      	b.n	8019572 <__swsetup_r+0x1e>
 80195a4:	0751      	lsls	r1, r2, #29
 80195a6:	d512      	bpl.n	80195ce <__swsetup_r+0x7a>
 80195a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80195aa:	b141      	cbz	r1, 80195be <__swsetup_r+0x6a>
 80195ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80195b0:	4299      	cmp	r1, r3
 80195b2:	d002      	beq.n	80195ba <__swsetup_r+0x66>
 80195b4:	4630      	mov	r0, r6
 80195b6:	f7ff fb9f 	bl	8018cf8 <_free_r>
 80195ba:	2300      	movs	r3, #0
 80195bc:	6363      	str	r3, [r4, #52]	; 0x34
 80195be:	89a3      	ldrh	r3, [r4, #12]
 80195c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80195c4:	81a3      	strh	r3, [r4, #12]
 80195c6:	2300      	movs	r3, #0
 80195c8:	6063      	str	r3, [r4, #4]
 80195ca:	6923      	ldr	r3, [r4, #16]
 80195cc:	6023      	str	r3, [r4, #0]
 80195ce:	89a3      	ldrh	r3, [r4, #12]
 80195d0:	f043 0308 	orr.w	r3, r3, #8
 80195d4:	81a3      	strh	r3, [r4, #12]
 80195d6:	6923      	ldr	r3, [r4, #16]
 80195d8:	b94b      	cbnz	r3, 80195ee <__swsetup_r+0x9a>
 80195da:	89a3      	ldrh	r3, [r4, #12]
 80195dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80195e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80195e4:	d003      	beq.n	80195ee <__swsetup_r+0x9a>
 80195e6:	4621      	mov	r1, r4
 80195e8:	4630      	mov	r0, r6
 80195ea:	f000 fa23 	bl	8019a34 <__smakebuf_r>
 80195ee:	89a2      	ldrh	r2, [r4, #12]
 80195f0:	f012 0301 	ands.w	r3, r2, #1
 80195f4:	d00c      	beq.n	8019610 <__swsetup_r+0xbc>
 80195f6:	2300      	movs	r3, #0
 80195f8:	60a3      	str	r3, [r4, #8]
 80195fa:	6963      	ldr	r3, [r4, #20]
 80195fc:	425b      	negs	r3, r3
 80195fe:	61a3      	str	r3, [r4, #24]
 8019600:	6923      	ldr	r3, [r4, #16]
 8019602:	b953      	cbnz	r3, 801961a <__swsetup_r+0xc6>
 8019604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019608:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801960c:	d1ba      	bne.n	8019584 <__swsetup_r+0x30>
 801960e:	bd70      	pop	{r4, r5, r6, pc}
 8019610:	0792      	lsls	r2, r2, #30
 8019612:	bf58      	it	pl
 8019614:	6963      	ldrpl	r3, [r4, #20]
 8019616:	60a3      	str	r3, [r4, #8]
 8019618:	e7f2      	b.n	8019600 <__swsetup_r+0xac>
 801961a:	2000      	movs	r0, #0
 801961c:	e7f7      	b.n	801960e <__swsetup_r+0xba>
 801961e:	bf00      	nop
 8019620:	2000007c 	.word	0x2000007c
 8019624:	0801cdd4 	.word	0x0801cdd4
 8019628:	0801cdf4 	.word	0x0801cdf4
 801962c:	0801cdb4 	.word	0x0801cdb4

08019630 <__register_exitproc>:
 8019630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019634:	4d2c      	ldr	r5, [pc, #176]	; (80196e8 <__register_exitproc+0xb8>)
 8019636:	682c      	ldr	r4, [r5, #0]
 8019638:	4607      	mov	r7, r0
 801963a:	460e      	mov	r6, r1
 801963c:	4691      	mov	r9, r2
 801963e:	4698      	mov	r8, r3
 8019640:	b934      	cbnz	r4, 8019650 <__register_exitproc+0x20>
 8019642:	4b2a      	ldr	r3, [pc, #168]	; (80196ec <__register_exitproc+0xbc>)
 8019644:	4c2a      	ldr	r4, [pc, #168]	; (80196f0 <__register_exitproc+0xc0>)
 8019646:	602c      	str	r4, [r5, #0]
 8019648:	b113      	cbz	r3, 8019650 <__register_exitproc+0x20>
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8019650:	6863      	ldr	r3, [r4, #4]
 8019652:	2b1f      	cmp	r3, #31
 8019654:	dd3d      	ble.n	80196d2 <__register_exitproc+0xa2>
 8019656:	4b27      	ldr	r3, [pc, #156]	; (80196f4 <__register_exitproc+0xc4>)
 8019658:	b91b      	cbnz	r3, 8019662 <__register_exitproc+0x32>
 801965a:	f04f 30ff 	mov.w	r0, #4294967295
 801965e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019662:	208c      	movs	r0, #140	; 0x8c
 8019664:	f7ff fb24 	bl	8018cb0 <malloc>
 8019668:	4604      	mov	r4, r0
 801966a:	2800      	cmp	r0, #0
 801966c:	d0f5      	beq.n	801965a <__register_exitproc+0x2a>
 801966e:	2300      	movs	r3, #0
 8019670:	682a      	ldr	r2, [r5, #0]
 8019672:	6002      	str	r2, [r0, #0]
 8019674:	6043      	str	r3, [r0, #4]
 8019676:	6028      	str	r0, [r5, #0]
 8019678:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801967c:	b30f      	cbz	r7, 80196c2 <__register_exitproc+0x92>
 801967e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8019682:	f7ff fb15 	bl	8018cb0 <malloc>
 8019686:	2800      	cmp	r0, #0
 8019688:	d0e7      	beq.n	801965a <__register_exitproc+0x2a>
 801968a:	2300      	movs	r3, #0
 801968c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8019690:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8019694:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8019698:	6862      	ldr	r2, [r4, #4]
 801969a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801969e:	2301      	movs	r3, #1
 80196a0:	4093      	lsls	r3, r2
 80196a2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80196a6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80196aa:	431a      	orrs	r2, r3
 80196ac:	2f02      	cmp	r7, #2
 80196ae:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80196b2:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80196b6:	bf02      	ittt	eq
 80196b8:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80196bc:	4313      	orreq	r3, r2
 80196be:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80196c2:	6863      	ldr	r3, [r4, #4]
 80196c4:	1c5a      	adds	r2, r3, #1
 80196c6:	3302      	adds	r3, #2
 80196c8:	6062      	str	r2, [r4, #4]
 80196ca:	2000      	movs	r0, #0
 80196cc:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80196d0:	e7c5      	b.n	801965e <__register_exitproc+0x2e>
 80196d2:	2f00      	cmp	r7, #0
 80196d4:	d0f5      	beq.n	80196c2 <__register_exitproc+0x92>
 80196d6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80196da:	2800      	cmp	r0, #0
 80196dc:	d1dc      	bne.n	8019698 <__register_exitproc+0x68>
 80196de:	4b05      	ldr	r3, [pc, #20]	; (80196f4 <__register_exitproc+0xc4>)
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d0ba      	beq.n	801965a <__register_exitproc+0x2a>
 80196e4:	e7cb      	b.n	801967e <__register_exitproc+0x4e>
 80196e6:	bf00      	nop
 80196e8:	20001398 	.word	0x20001398
 80196ec:	0801cdb0 	.word	0x0801cdb0
 80196f0:	2000130c 	.word	0x2000130c
 80196f4:	08018cb1 	.word	0x08018cb1

080196f8 <__sflush_r>:
 80196f8:	898a      	ldrh	r2, [r1, #12]
 80196fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196fe:	4605      	mov	r5, r0
 8019700:	0710      	lsls	r0, r2, #28
 8019702:	460c      	mov	r4, r1
 8019704:	d458      	bmi.n	80197b8 <__sflush_r+0xc0>
 8019706:	684b      	ldr	r3, [r1, #4]
 8019708:	2b00      	cmp	r3, #0
 801970a:	dc05      	bgt.n	8019718 <__sflush_r+0x20>
 801970c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801970e:	2b00      	cmp	r3, #0
 8019710:	dc02      	bgt.n	8019718 <__sflush_r+0x20>
 8019712:	2000      	movs	r0, #0
 8019714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801971a:	2e00      	cmp	r6, #0
 801971c:	d0f9      	beq.n	8019712 <__sflush_r+0x1a>
 801971e:	2300      	movs	r3, #0
 8019720:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019724:	682f      	ldr	r7, [r5, #0]
 8019726:	6a21      	ldr	r1, [r4, #32]
 8019728:	602b      	str	r3, [r5, #0]
 801972a:	d032      	beq.n	8019792 <__sflush_r+0x9a>
 801972c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801972e:	89a3      	ldrh	r3, [r4, #12]
 8019730:	075a      	lsls	r2, r3, #29
 8019732:	d505      	bpl.n	8019740 <__sflush_r+0x48>
 8019734:	6863      	ldr	r3, [r4, #4]
 8019736:	1ac0      	subs	r0, r0, r3
 8019738:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801973a:	b10b      	cbz	r3, 8019740 <__sflush_r+0x48>
 801973c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801973e:	1ac0      	subs	r0, r0, r3
 8019740:	2300      	movs	r3, #0
 8019742:	4602      	mov	r2, r0
 8019744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019746:	6a21      	ldr	r1, [r4, #32]
 8019748:	4628      	mov	r0, r5
 801974a:	47b0      	blx	r6
 801974c:	1c43      	adds	r3, r0, #1
 801974e:	89a3      	ldrh	r3, [r4, #12]
 8019750:	d106      	bne.n	8019760 <__sflush_r+0x68>
 8019752:	6829      	ldr	r1, [r5, #0]
 8019754:	291d      	cmp	r1, #29
 8019756:	d848      	bhi.n	80197ea <__sflush_r+0xf2>
 8019758:	4a29      	ldr	r2, [pc, #164]	; (8019800 <__sflush_r+0x108>)
 801975a:	40ca      	lsrs	r2, r1
 801975c:	07d6      	lsls	r6, r2, #31
 801975e:	d544      	bpl.n	80197ea <__sflush_r+0xf2>
 8019760:	2200      	movs	r2, #0
 8019762:	6062      	str	r2, [r4, #4]
 8019764:	04d9      	lsls	r1, r3, #19
 8019766:	6922      	ldr	r2, [r4, #16]
 8019768:	6022      	str	r2, [r4, #0]
 801976a:	d504      	bpl.n	8019776 <__sflush_r+0x7e>
 801976c:	1c42      	adds	r2, r0, #1
 801976e:	d101      	bne.n	8019774 <__sflush_r+0x7c>
 8019770:	682b      	ldr	r3, [r5, #0]
 8019772:	b903      	cbnz	r3, 8019776 <__sflush_r+0x7e>
 8019774:	6560      	str	r0, [r4, #84]	; 0x54
 8019776:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019778:	602f      	str	r7, [r5, #0]
 801977a:	2900      	cmp	r1, #0
 801977c:	d0c9      	beq.n	8019712 <__sflush_r+0x1a>
 801977e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019782:	4299      	cmp	r1, r3
 8019784:	d002      	beq.n	801978c <__sflush_r+0x94>
 8019786:	4628      	mov	r0, r5
 8019788:	f7ff fab6 	bl	8018cf8 <_free_r>
 801978c:	2000      	movs	r0, #0
 801978e:	6360      	str	r0, [r4, #52]	; 0x34
 8019790:	e7c0      	b.n	8019714 <__sflush_r+0x1c>
 8019792:	2301      	movs	r3, #1
 8019794:	4628      	mov	r0, r5
 8019796:	47b0      	blx	r6
 8019798:	1c41      	adds	r1, r0, #1
 801979a:	d1c8      	bne.n	801972e <__sflush_r+0x36>
 801979c:	682b      	ldr	r3, [r5, #0]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d0c5      	beq.n	801972e <__sflush_r+0x36>
 80197a2:	2b1d      	cmp	r3, #29
 80197a4:	d001      	beq.n	80197aa <__sflush_r+0xb2>
 80197a6:	2b16      	cmp	r3, #22
 80197a8:	d101      	bne.n	80197ae <__sflush_r+0xb6>
 80197aa:	602f      	str	r7, [r5, #0]
 80197ac:	e7b1      	b.n	8019712 <__sflush_r+0x1a>
 80197ae:	89a3      	ldrh	r3, [r4, #12]
 80197b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197b4:	81a3      	strh	r3, [r4, #12]
 80197b6:	e7ad      	b.n	8019714 <__sflush_r+0x1c>
 80197b8:	690f      	ldr	r7, [r1, #16]
 80197ba:	2f00      	cmp	r7, #0
 80197bc:	d0a9      	beq.n	8019712 <__sflush_r+0x1a>
 80197be:	0793      	lsls	r3, r2, #30
 80197c0:	680e      	ldr	r6, [r1, #0]
 80197c2:	bf08      	it	eq
 80197c4:	694b      	ldreq	r3, [r1, #20]
 80197c6:	600f      	str	r7, [r1, #0]
 80197c8:	bf18      	it	ne
 80197ca:	2300      	movne	r3, #0
 80197cc:	eba6 0807 	sub.w	r8, r6, r7
 80197d0:	608b      	str	r3, [r1, #8]
 80197d2:	f1b8 0f00 	cmp.w	r8, #0
 80197d6:	dd9c      	ble.n	8019712 <__sflush_r+0x1a>
 80197d8:	4643      	mov	r3, r8
 80197da:	463a      	mov	r2, r7
 80197dc:	6a21      	ldr	r1, [r4, #32]
 80197de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80197e0:	4628      	mov	r0, r5
 80197e2:	47b0      	blx	r6
 80197e4:	2800      	cmp	r0, #0
 80197e6:	dc06      	bgt.n	80197f6 <__sflush_r+0xfe>
 80197e8:	89a3      	ldrh	r3, [r4, #12]
 80197ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197ee:	81a3      	strh	r3, [r4, #12]
 80197f0:	f04f 30ff 	mov.w	r0, #4294967295
 80197f4:	e78e      	b.n	8019714 <__sflush_r+0x1c>
 80197f6:	4407      	add	r7, r0
 80197f8:	eba8 0800 	sub.w	r8, r8, r0
 80197fc:	e7e9      	b.n	80197d2 <__sflush_r+0xda>
 80197fe:	bf00      	nop
 8019800:	20400001 	.word	0x20400001

08019804 <_fflush_r>:
 8019804:	b538      	push	{r3, r4, r5, lr}
 8019806:	690b      	ldr	r3, [r1, #16]
 8019808:	4605      	mov	r5, r0
 801980a:	460c      	mov	r4, r1
 801980c:	b1db      	cbz	r3, 8019846 <_fflush_r+0x42>
 801980e:	b118      	cbz	r0, 8019818 <_fflush_r+0x14>
 8019810:	6983      	ldr	r3, [r0, #24]
 8019812:	b90b      	cbnz	r3, 8019818 <_fflush_r+0x14>
 8019814:	f000 f860 	bl	80198d8 <__sinit>
 8019818:	4b0c      	ldr	r3, [pc, #48]	; (801984c <_fflush_r+0x48>)
 801981a:	429c      	cmp	r4, r3
 801981c:	d109      	bne.n	8019832 <_fflush_r+0x2e>
 801981e:	686c      	ldr	r4, [r5, #4]
 8019820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019824:	b17b      	cbz	r3, 8019846 <_fflush_r+0x42>
 8019826:	4621      	mov	r1, r4
 8019828:	4628      	mov	r0, r5
 801982a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801982e:	f7ff bf63 	b.w	80196f8 <__sflush_r>
 8019832:	4b07      	ldr	r3, [pc, #28]	; (8019850 <_fflush_r+0x4c>)
 8019834:	429c      	cmp	r4, r3
 8019836:	d101      	bne.n	801983c <_fflush_r+0x38>
 8019838:	68ac      	ldr	r4, [r5, #8]
 801983a:	e7f1      	b.n	8019820 <_fflush_r+0x1c>
 801983c:	4b05      	ldr	r3, [pc, #20]	; (8019854 <_fflush_r+0x50>)
 801983e:	429c      	cmp	r4, r3
 8019840:	bf08      	it	eq
 8019842:	68ec      	ldreq	r4, [r5, #12]
 8019844:	e7ec      	b.n	8019820 <_fflush_r+0x1c>
 8019846:	2000      	movs	r0, #0
 8019848:	bd38      	pop	{r3, r4, r5, pc}
 801984a:	bf00      	nop
 801984c:	0801cdd4 	.word	0x0801cdd4
 8019850:	0801cdf4 	.word	0x0801cdf4
 8019854:	0801cdb4 	.word	0x0801cdb4

08019858 <std>:
 8019858:	2300      	movs	r3, #0
 801985a:	b510      	push	{r4, lr}
 801985c:	4604      	mov	r4, r0
 801985e:	e9c0 3300 	strd	r3, r3, [r0]
 8019862:	6083      	str	r3, [r0, #8]
 8019864:	8181      	strh	r1, [r0, #12]
 8019866:	6643      	str	r3, [r0, #100]	; 0x64
 8019868:	81c2      	strh	r2, [r0, #14]
 801986a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801986e:	6183      	str	r3, [r0, #24]
 8019870:	4619      	mov	r1, r3
 8019872:	2208      	movs	r2, #8
 8019874:	305c      	adds	r0, #92	; 0x5c
 8019876:	f7ff fa36 	bl	8018ce6 <memset>
 801987a:	4b05      	ldr	r3, [pc, #20]	; (8019890 <std+0x38>)
 801987c:	6263      	str	r3, [r4, #36]	; 0x24
 801987e:	4b05      	ldr	r3, [pc, #20]	; (8019894 <std+0x3c>)
 8019880:	62a3      	str	r3, [r4, #40]	; 0x28
 8019882:	4b05      	ldr	r3, [pc, #20]	; (8019898 <std+0x40>)
 8019884:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019886:	4b05      	ldr	r3, [pc, #20]	; (801989c <std+0x44>)
 8019888:	6224      	str	r4, [r4, #32]
 801988a:	6323      	str	r3, [r4, #48]	; 0x30
 801988c:	bd10      	pop	{r4, pc}
 801988e:	bf00      	nop
 8019890:	08019ab9 	.word	0x08019ab9
 8019894:	08019adb 	.word	0x08019adb
 8019898:	08019b13 	.word	0x08019b13
 801989c:	08019b37 	.word	0x08019b37

080198a0 <_cleanup_r>:
 80198a0:	4901      	ldr	r1, [pc, #4]	; (80198a8 <_cleanup_r+0x8>)
 80198a2:	f000 b885 	b.w	80199b0 <_fwalk_reent>
 80198a6:	bf00      	nop
 80198a8:	08019805 	.word	0x08019805

080198ac <__sfmoreglue>:
 80198ac:	b570      	push	{r4, r5, r6, lr}
 80198ae:	1e4a      	subs	r2, r1, #1
 80198b0:	2568      	movs	r5, #104	; 0x68
 80198b2:	4355      	muls	r5, r2
 80198b4:	460e      	mov	r6, r1
 80198b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80198ba:	f7ff fa6b 	bl	8018d94 <_malloc_r>
 80198be:	4604      	mov	r4, r0
 80198c0:	b140      	cbz	r0, 80198d4 <__sfmoreglue+0x28>
 80198c2:	2100      	movs	r1, #0
 80198c4:	e9c0 1600 	strd	r1, r6, [r0]
 80198c8:	300c      	adds	r0, #12
 80198ca:	60a0      	str	r0, [r4, #8]
 80198cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80198d0:	f7ff fa09 	bl	8018ce6 <memset>
 80198d4:	4620      	mov	r0, r4
 80198d6:	bd70      	pop	{r4, r5, r6, pc}

080198d8 <__sinit>:
 80198d8:	6983      	ldr	r3, [r0, #24]
 80198da:	b510      	push	{r4, lr}
 80198dc:	4604      	mov	r4, r0
 80198de:	bb33      	cbnz	r3, 801992e <__sinit+0x56>
 80198e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80198e4:	6503      	str	r3, [r0, #80]	; 0x50
 80198e6:	4b12      	ldr	r3, [pc, #72]	; (8019930 <__sinit+0x58>)
 80198e8:	4a12      	ldr	r2, [pc, #72]	; (8019934 <__sinit+0x5c>)
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	6282      	str	r2, [r0, #40]	; 0x28
 80198ee:	4298      	cmp	r0, r3
 80198f0:	bf04      	itt	eq
 80198f2:	2301      	moveq	r3, #1
 80198f4:	6183      	streq	r3, [r0, #24]
 80198f6:	f000 f81f 	bl	8019938 <__sfp>
 80198fa:	6060      	str	r0, [r4, #4]
 80198fc:	4620      	mov	r0, r4
 80198fe:	f000 f81b 	bl	8019938 <__sfp>
 8019902:	60a0      	str	r0, [r4, #8]
 8019904:	4620      	mov	r0, r4
 8019906:	f000 f817 	bl	8019938 <__sfp>
 801990a:	2200      	movs	r2, #0
 801990c:	60e0      	str	r0, [r4, #12]
 801990e:	2104      	movs	r1, #4
 8019910:	6860      	ldr	r0, [r4, #4]
 8019912:	f7ff ffa1 	bl	8019858 <std>
 8019916:	2201      	movs	r2, #1
 8019918:	2109      	movs	r1, #9
 801991a:	68a0      	ldr	r0, [r4, #8]
 801991c:	f7ff ff9c 	bl	8019858 <std>
 8019920:	2202      	movs	r2, #2
 8019922:	2112      	movs	r1, #18
 8019924:	68e0      	ldr	r0, [r4, #12]
 8019926:	f7ff ff97 	bl	8019858 <std>
 801992a:	2301      	movs	r3, #1
 801992c:	61a3      	str	r3, [r4, #24]
 801992e:	bd10      	pop	{r4, pc}
 8019930:	0801cd78 	.word	0x0801cd78
 8019934:	080198a1 	.word	0x080198a1

08019938 <__sfp>:
 8019938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801993a:	4b1b      	ldr	r3, [pc, #108]	; (80199a8 <__sfp+0x70>)
 801993c:	681e      	ldr	r6, [r3, #0]
 801993e:	69b3      	ldr	r3, [r6, #24]
 8019940:	4607      	mov	r7, r0
 8019942:	b913      	cbnz	r3, 801994a <__sfp+0x12>
 8019944:	4630      	mov	r0, r6
 8019946:	f7ff ffc7 	bl	80198d8 <__sinit>
 801994a:	3648      	adds	r6, #72	; 0x48
 801994c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019950:	3b01      	subs	r3, #1
 8019952:	d503      	bpl.n	801995c <__sfp+0x24>
 8019954:	6833      	ldr	r3, [r6, #0]
 8019956:	b133      	cbz	r3, 8019966 <__sfp+0x2e>
 8019958:	6836      	ldr	r6, [r6, #0]
 801995a:	e7f7      	b.n	801994c <__sfp+0x14>
 801995c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019960:	b16d      	cbz	r5, 801997e <__sfp+0x46>
 8019962:	3468      	adds	r4, #104	; 0x68
 8019964:	e7f4      	b.n	8019950 <__sfp+0x18>
 8019966:	2104      	movs	r1, #4
 8019968:	4638      	mov	r0, r7
 801996a:	f7ff ff9f 	bl	80198ac <__sfmoreglue>
 801996e:	6030      	str	r0, [r6, #0]
 8019970:	2800      	cmp	r0, #0
 8019972:	d1f1      	bne.n	8019958 <__sfp+0x20>
 8019974:	230c      	movs	r3, #12
 8019976:	603b      	str	r3, [r7, #0]
 8019978:	4604      	mov	r4, r0
 801997a:	4620      	mov	r0, r4
 801997c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801997e:	4b0b      	ldr	r3, [pc, #44]	; (80199ac <__sfp+0x74>)
 8019980:	6665      	str	r5, [r4, #100]	; 0x64
 8019982:	e9c4 5500 	strd	r5, r5, [r4]
 8019986:	60a5      	str	r5, [r4, #8]
 8019988:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801998c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8019990:	2208      	movs	r2, #8
 8019992:	4629      	mov	r1, r5
 8019994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019998:	f7ff f9a5 	bl	8018ce6 <memset>
 801999c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80199a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80199a4:	e7e9      	b.n	801997a <__sfp+0x42>
 80199a6:	bf00      	nop
 80199a8:	0801cd78 	.word	0x0801cd78
 80199ac:	ffff0001 	.word	0xffff0001

080199b0 <_fwalk_reent>:
 80199b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199b4:	4680      	mov	r8, r0
 80199b6:	4689      	mov	r9, r1
 80199b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80199bc:	2600      	movs	r6, #0
 80199be:	b914      	cbnz	r4, 80199c6 <_fwalk_reent+0x16>
 80199c0:	4630      	mov	r0, r6
 80199c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80199ca:	3f01      	subs	r7, #1
 80199cc:	d501      	bpl.n	80199d2 <_fwalk_reent+0x22>
 80199ce:	6824      	ldr	r4, [r4, #0]
 80199d0:	e7f5      	b.n	80199be <_fwalk_reent+0xe>
 80199d2:	89ab      	ldrh	r3, [r5, #12]
 80199d4:	2b01      	cmp	r3, #1
 80199d6:	d907      	bls.n	80199e8 <_fwalk_reent+0x38>
 80199d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80199dc:	3301      	adds	r3, #1
 80199de:	d003      	beq.n	80199e8 <_fwalk_reent+0x38>
 80199e0:	4629      	mov	r1, r5
 80199e2:	4640      	mov	r0, r8
 80199e4:	47c8      	blx	r9
 80199e6:	4306      	orrs	r6, r0
 80199e8:	3568      	adds	r5, #104	; 0x68
 80199ea:	e7ee      	b.n	80199ca <_fwalk_reent+0x1a>

080199ec <__swhatbuf_r>:
 80199ec:	b570      	push	{r4, r5, r6, lr}
 80199ee:	460e      	mov	r6, r1
 80199f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199f4:	2900      	cmp	r1, #0
 80199f6:	b096      	sub	sp, #88	; 0x58
 80199f8:	4614      	mov	r4, r2
 80199fa:	461d      	mov	r5, r3
 80199fc:	da07      	bge.n	8019a0e <__swhatbuf_r+0x22>
 80199fe:	2300      	movs	r3, #0
 8019a00:	602b      	str	r3, [r5, #0]
 8019a02:	89b3      	ldrh	r3, [r6, #12]
 8019a04:	061a      	lsls	r2, r3, #24
 8019a06:	d410      	bmi.n	8019a2a <__swhatbuf_r+0x3e>
 8019a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019a0c:	e00e      	b.n	8019a2c <__swhatbuf_r+0x40>
 8019a0e:	466a      	mov	r2, sp
 8019a10:	f000 f8b8 	bl	8019b84 <_fstat_r>
 8019a14:	2800      	cmp	r0, #0
 8019a16:	dbf2      	blt.n	80199fe <__swhatbuf_r+0x12>
 8019a18:	9a01      	ldr	r2, [sp, #4]
 8019a1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019a1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019a22:	425a      	negs	r2, r3
 8019a24:	415a      	adcs	r2, r3
 8019a26:	602a      	str	r2, [r5, #0]
 8019a28:	e7ee      	b.n	8019a08 <__swhatbuf_r+0x1c>
 8019a2a:	2340      	movs	r3, #64	; 0x40
 8019a2c:	2000      	movs	r0, #0
 8019a2e:	6023      	str	r3, [r4, #0]
 8019a30:	b016      	add	sp, #88	; 0x58
 8019a32:	bd70      	pop	{r4, r5, r6, pc}

08019a34 <__smakebuf_r>:
 8019a34:	898b      	ldrh	r3, [r1, #12]
 8019a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019a38:	079d      	lsls	r5, r3, #30
 8019a3a:	4606      	mov	r6, r0
 8019a3c:	460c      	mov	r4, r1
 8019a3e:	d507      	bpl.n	8019a50 <__smakebuf_r+0x1c>
 8019a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019a44:	6023      	str	r3, [r4, #0]
 8019a46:	6123      	str	r3, [r4, #16]
 8019a48:	2301      	movs	r3, #1
 8019a4a:	6163      	str	r3, [r4, #20]
 8019a4c:	b002      	add	sp, #8
 8019a4e:	bd70      	pop	{r4, r5, r6, pc}
 8019a50:	ab01      	add	r3, sp, #4
 8019a52:	466a      	mov	r2, sp
 8019a54:	f7ff ffca 	bl	80199ec <__swhatbuf_r>
 8019a58:	9900      	ldr	r1, [sp, #0]
 8019a5a:	4605      	mov	r5, r0
 8019a5c:	4630      	mov	r0, r6
 8019a5e:	f7ff f999 	bl	8018d94 <_malloc_r>
 8019a62:	b948      	cbnz	r0, 8019a78 <__smakebuf_r+0x44>
 8019a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a68:	059a      	lsls	r2, r3, #22
 8019a6a:	d4ef      	bmi.n	8019a4c <__smakebuf_r+0x18>
 8019a6c:	f023 0303 	bic.w	r3, r3, #3
 8019a70:	f043 0302 	orr.w	r3, r3, #2
 8019a74:	81a3      	strh	r3, [r4, #12]
 8019a76:	e7e3      	b.n	8019a40 <__smakebuf_r+0xc>
 8019a78:	4b0d      	ldr	r3, [pc, #52]	; (8019ab0 <__smakebuf_r+0x7c>)
 8019a7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8019a7c:	89a3      	ldrh	r3, [r4, #12]
 8019a7e:	6020      	str	r0, [r4, #0]
 8019a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a84:	81a3      	strh	r3, [r4, #12]
 8019a86:	9b00      	ldr	r3, [sp, #0]
 8019a88:	6163      	str	r3, [r4, #20]
 8019a8a:	9b01      	ldr	r3, [sp, #4]
 8019a8c:	6120      	str	r0, [r4, #16]
 8019a8e:	b15b      	cbz	r3, 8019aa8 <__smakebuf_r+0x74>
 8019a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a94:	4630      	mov	r0, r6
 8019a96:	f000 f887 	bl	8019ba8 <_isatty_r>
 8019a9a:	b128      	cbz	r0, 8019aa8 <__smakebuf_r+0x74>
 8019a9c:	89a3      	ldrh	r3, [r4, #12]
 8019a9e:	f023 0303 	bic.w	r3, r3, #3
 8019aa2:	f043 0301 	orr.w	r3, r3, #1
 8019aa6:	81a3      	strh	r3, [r4, #12]
 8019aa8:	89a3      	ldrh	r3, [r4, #12]
 8019aaa:	431d      	orrs	r5, r3
 8019aac:	81a5      	strh	r5, [r4, #12]
 8019aae:	e7cd      	b.n	8019a4c <__smakebuf_r+0x18>
 8019ab0:	080198a1 	.word	0x080198a1

08019ab4 <__malloc_lock>:
 8019ab4:	4770      	bx	lr

08019ab6 <__malloc_unlock>:
 8019ab6:	4770      	bx	lr

08019ab8 <__sread>:
 8019ab8:	b510      	push	{r4, lr}
 8019aba:	460c      	mov	r4, r1
 8019abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ac0:	f000 f894 	bl	8019bec <_read_r>
 8019ac4:	2800      	cmp	r0, #0
 8019ac6:	bfab      	itete	ge
 8019ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019aca:	89a3      	ldrhlt	r3, [r4, #12]
 8019acc:	181b      	addge	r3, r3, r0
 8019ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019ad2:	bfac      	ite	ge
 8019ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8019ad6:	81a3      	strhlt	r3, [r4, #12]
 8019ad8:	bd10      	pop	{r4, pc}

08019ada <__swrite>:
 8019ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ade:	461f      	mov	r7, r3
 8019ae0:	898b      	ldrh	r3, [r1, #12]
 8019ae2:	05db      	lsls	r3, r3, #23
 8019ae4:	4605      	mov	r5, r0
 8019ae6:	460c      	mov	r4, r1
 8019ae8:	4616      	mov	r6, r2
 8019aea:	d505      	bpl.n	8019af8 <__swrite+0x1e>
 8019aec:	2302      	movs	r3, #2
 8019aee:	2200      	movs	r2, #0
 8019af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019af4:	f000 f868 	bl	8019bc8 <_lseek_r>
 8019af8:	89a3      	ldrh	r3, [r4, #12]
 8019afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019b02:	81a3      	strh	r3, [r4, #12]
 8019b04:	4632      	mov	r2, r6
 8019b06:	463b      	mov	r3, r7
 8019b08:	4628      	mov	r0, r5
 8019b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b0e:	f000 b817 	b.w	8019b40 <_write_r>

08019b12 <__sseek>:
 8019b12:	b510      	push	{r4, lr}
 8019b14:	460c      	mov	r4, r1
 8019b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b1a:	f000 f855 	bl	8019bc8 <_lseek_r>
 8019b1e:	1c43      	adds	r3, r0, #1
 8019b20:	89a3      	ldrh	r3, [r4, #12]
 8019b22:	bf15      	itete	ne
 8019b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8019b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019b2e:	81a3      	strheq	r3, [r4, #12]
 8019b30:	bf18      	it	ne
 8019b32:	81a3      	strhne	r3, [r4, #12]
 8019b34:	bd10      	pop	{r4, pc}

08019b36 <__sclose>:
 8019b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b3a:	f000 b813 	b.w	8019b64 <_close_r>
	...

08019b40 <_write_r>:
 8019b40:	b538      	push	{r3, r4, r5, lr}
 8019b42:	4c07      	ldr	r4, [pc, #28]	; (8019b60 <_write_r+0x20>)
 8019b44:	4605      	mov	r5, r0
 8019b46:	4608      	mov	r0, r1
 8019b48:	4611      	mov	r1, r2
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	6022      	str	r2, [r4, #0]
 8019b4e:	461a      	mov	r2, r3
 8019b50:	f7f0 faa1 	bl	800a096 <_write>
 8019b54:	1c43      	adds	r3, r0, #1
 8019b56:	d102      	bne.n	8019b5e <_write_r+0x1e>
 8019b58:	6823      	ldr	r3, [r4, #0]
 8019b5a:	b103      	cbz	r3, 8019b5e <_write_r+0x1e>
 8019b5c:	602b      	str	r3, [r5, #0]
 8019b5e:	bd38      	pop	{r3, r4, r5, pc}
 8019b60:	20005a8c 	.word	0x20005a8c

08019b64 <_close_r>:
 8019b64:	b538      	push	{r3, r4, r5, lr}
 8019b66:	4c06      	ldr	r4, [pc, #24]	; (8019b80 <_close_r+0x1c>)
 8019b68:	2300      	movs	r3, #0
 8019b6a:	4605      	mov	r5, r0
 8019b6c:	4608      	mov	r0, r1
 8019b6e:	6023      	str	r3, [r4, #0]
 8019b70:	f7f0 faad 	bl	800a0ce <_close>
 8019b74:	1c43      	adds	r3, r0, #1
 8019b76:	d102      	bne.n	8019b7e <_close_r+0x1a>
 8019b78:	6823      	ldr	r3, [r4, #0]
 8019b7a:	b103      	cbz	r3, 8019b7e <_close_r+0x1a>
 8019b7c:	602b      	str	r3, [r5, #0]
 8019b7e:	bd38      	pop	{r3, r4, r5, pc}
 8019b80:	20005a8c 	.word	0x20005a8c

08019b84 <_fstat_r>:
 8019b84:	b538      	push	{r3, r4, r5, lr}
 8019b86:	4c07      	ldr	r4, [pc, #28]	; (8019ba4 <_fstat_r+0x20>)
 8019b88:	2300      	movs	r3, #0
 8019b8a:	4605      	mov	r5, r0
 8019b8c:	4608      	mov	r0, r1
 8019b8e:	4611      	mov	r1, r2
 8019b90:	6023      	str	r3, [r4, #0]
 8019b92:	f7f0 faa8 	bl	800a0e6 <_fstat>
 8019b96:	1c43      	adds	r3, r0, #1
 8019b98:	d102      	bne.n	8019ba0 <_fstat_r+0x1c>
 8019b9a:	6823      	ldr	r3, [r4, #0]
 8019b9c:	b103      	cbz	r3, 8019ba0 <_fstat_r+0x1c>
 8019b9e:	602b      	str	r3, [r5, #0]
 8019ba0:	bd38      	pop	{r3, r4, r5, pc}
 8019ba2:	bf00      	nop
 8019ba4:	20005a8c 	.word	0x20005a8c

08019ba8 <_isatty_r>:
 8019ba8:	b538      	push	{r3, r4, r5, lr}
 8019baa:	4c06      	ldr	r4, [pc, #24]	; (8019bc4 <_isatty_r+0x1c>)
 8019bac:	2300      	movs	r3, #0
 8019bae:	4605      	mov	r5, r0
 8019bb0:	4608      	mov	r0, r1
 8019bb2:	6023      	str	r3, [r4, #0]
 8019bb4:	f7f0 faa7 	bl	800a106 <_isatty>
 8019bb8:	1c43      	adds	r3, r0, #1
 8019bba:	d102      	bne.n	8019bc2 <_isatty_r+0x1a>
 8019bbc:	6823      	ldr	r3, [r4, #0]
 8019bbe:	b103      	cbz	r3, 8019bc2 <_isatty_r+0x1a>
 8019bc0:	602b      	str	r3, [r5, #0]
 8019bc2:	bd38      	pop	{r3, r4, r5, pc}
 8019bc4:	20005a8c 	.word	0x20005a8c

08019bc8 <_lseek_r>:
 8019bc8:	b538      	push	{r3, r4, r5, lr}
 8019bca:	4c07      	ldr	r4, [pc, #28]	; (8019be8 <_lseek_r+0x20>)
 8019bcc:	4605      	mov	r5, r0
 8019bce:	4608      	mov	r0, r1
 8019bd0:	4611      	mov	r1, r2
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	6022      	str	r2, [r4, #0]
 8019bd6:	461a      	mov	r2, r3
 8019bd8:	f7f0 faa0 	bl	800a11c <_lseek>
 8019bdc:	1c43      	adds	r3, r0, #1
 8019bde:	d102      	bne.n	8019be6 <_lseek_r+0x1e>
 8019be0:	6823      	ldr	r3, [r4, #0]
 8019be2:	b103      	cbz	r3, 8019be6 <_lseek_r+0x1e>
 8019be4:	602b      	str	r3, [r5, #0]
 8019be6:	bd38      	pop	{r3, r4, r5, pc}
 8019be8:	20005a8c 	.word	0x20005a8c

08019bec <_read_r>:
 8019bec:	b538      	push	{r3, r4, r5, lr}
 8019bee:	4c07      	ldr	r4, [pc, #28]	; (8019c0c <_read_r+0x20>)
 8019bf0:	4605      	mov	r5, r0
 8019bf2:	4608      	mov	r0, r1
 8019bf4:	4611      	mov	r1, r2
 8019bf6:	2200      	movs	r2, #0
 8019bf8:	6022      	str	r2, [r4, #0]
 8019bfa:	461a      	mov	r2, r3
 8019bfc:	f7f0 fa2e 	bl	800a05c <_read>
 8019c00:	1c43      	adds	r3, r0, #1
 8019c02:	d102      	bne.n	8019c0a <_read_r+0x1e>
 8019c04:	6823      	ldr	r3, [r4, #0]
 8019c06:	b103      	cbz	r3, 8019c0a <_read_r+0x1e>
 8019c08:	602b      	str	r3, [r5, #0]
 8019c0a:	bd38      	pop	{r3, r4, r5, pc}
 8019c0c:	20005a8c 	.word	0x20005a8c

08019c10 <_init>:
 8019c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c12:	bf00      	nop
 8019c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c16:	bc08      	pop	{r3}
 8019c18:	469e      	mov	lr, r3
 8019c1a:	4770      	bx	lr

08019c1c <_fini>:
 8019c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c1e:	bf00      	nop
 8019c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c22:	bc08      	pop	{r3}
 8019c24:	469e      	mov	lr, r3
 8019c26:	4770      	bx	lr
